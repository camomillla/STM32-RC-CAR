
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005980  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005b78  08005b78  00006b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be0  08005be0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005be0  08005be0  00006be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005be8  08005be8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be8  08005be8  00006be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bec  08005bec  00006bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005bf0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  2000005c  08005c4c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  08005c4c  000078b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121a8  00000000  00000000  0000708a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3f  00000000  00000000  00019232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0001c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a42  00000000  00000000  0001cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c45  00000000  00000000  0001d94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139ab  00000000  00000000  0004658f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f48f7  00000000  00000000  00059f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e831  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039dc  00000000  00000000  0014e874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00152250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005b60 	.word	0x08005b60

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	08005b60 	.word	0x08005b60

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053e:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <MX_DMA_Init+0x48>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a0f      	ldr	r2, [pc, #60]	@ (8000580 <MX_DMA_Init+0x48>)
 8000544:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <MX_DMA_Init+0x48>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	2010      	movs	r0, #16
 800055c:	f000 fe51 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000560:	2010      	movs	r0, #16
 8000562:	f000 fe6a 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2011      	movs	r0, #17
 800056c:	f000 fe49 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000570:	2011      	movs	r0, #17
 8000572:	f000 fe62 	bl	800123a <HAL_NVIC_EnableIRQ>

}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800

08000584 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	@ 0x30
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b71      	ldr	r3, [pc, #452]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a70      	ldr	r2, [pc, #448]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b6e      	ldr	r3, [pc, #440]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	61bb      	str	r3, [r7, #24]
 80005b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b6b      	ldr	r3, [pc, #428]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a6a      	ldr	r2, [pc, #424]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b68      	ldr	r3, [pc, #416]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b65      	ldr	r3, [pc, #404]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a64      	ldr	r2, [pc, #400]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b62      	ldr	r3, [pc, #392]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b5f      	ldr	r3, [pc, #380]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a5e      	ldr	r2, [pc, #376]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b59      	ldr	r3, [pc, #356]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a58      	ldr	r2, [pc, #352]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b56      	ldr	r3, [pc, #344]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000612:	4b53      	ldr	r3, [pc, #332]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a52      	ldr	r2, [pc, #328]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 8000618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b50      	ldr	r3, [pc, #320]	@ (8000760 <MX_GPIO_Init+0x1dc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000630:	484c      	ldr	r0, [pc, #304]	@ (8000764 <MX_GPIO_Init+0x1e0>)
 8000632:	f001 fbdf 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2140      	movs	r1, #64	@ 0x40
 800063a:	484b      	ldr	r0, [pc, #300]	@ (8000768 <MX_GPIO_Init+0x1e4>)
 800063c:	f001 fbda 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	4849      	ldr	r0, [pc, #292]	@ (800076c <MX_GPIO_Init+0x1e8>)
 8000646:	f001 fbd5 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800064a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000650:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4843      	ldr	r0, [pc, #268]	@ (8000770 <MX_GPIO_Init+0x1ec>)
 8000662:	f001 fa1b 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000666:	2332      	movs	r3, #50	@ 0x32
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000676:	230b      	movs	r3, #11
 8000678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	483b      	ldr	r0, [pc, #236]	@ (8000770 <MX_GPIO_Init+0x1ec>)
 8000682:	f001 fa0b 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000686:	2386      	movs	r3, #134	@ 0x86
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000696:	230b      	movs	r3, #11
 8000698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4834      	ldr	r0, [pc, #208]	@ (8000774 <MX_GPIO_Init+0x1f0>)
 80006a2:	f001 f9fb 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006a6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4829      	ldr	r0, [pc, #164]	@ (8000764 <MX_GPIO_Init+0x1e0>)
 80006c0:	f001 f9ec 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d6:	230b      	movs	r3, #11
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4820      	ldr	r0, [pc, #128]	@ (8000764 <MX_GPIO_Init+0x1e0>)
 80006e2:	f001 f9db 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006e6:	2340      	movs	r3, #64	@ 0x40
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	481a      	ldr	r0, [pc, #104]	@ (8000768 <MX_GPIO_Init+0x1e4>)
 80006fe:	f001 f9cd 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000702:	2380      	movs	r3, #128	@ 0x80
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000706:	2300      	movs	r3, #0
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4814      	ldr	r0, [pc, #80]	@ (8000768 <MX_GPIO_Init+0x1e4>)
 8000716:	f001 f9c1 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800071a:	2310      	movs	r3, #16
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	480e      	ldr	r0, [pc, #56]	@ (800076c <MX_GPIO_Init+0x1e8>)
 8000732:	f001 f9b3 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000736:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000748:	230b      	movs	r3, #11
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_GPIO_Init+0x1e4>)
 8000754:	f001 f9a2 	bl	8001a9c <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3730      	adds	r7, #48	@ 0x30
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40020400 	.word	0x40020400
 8000768:	40021800 	.word	0x40021800
 800076c:	40020c00 	.word	0x40020c00
 8000770:	40020800 	.word	0x40020800
 8000774:	40020000 	.word	0x40020000

08000778 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <HAL_UARTEx_RxEventCallback+0x28>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d104      	bne.n	8000798 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 800078e:	887b      	ldrh	r3, [r7, #2]
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000794:	f004 ffe9 	bl	800576a <ATC_IdleLineCallback>
	}
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40004400 	.word	0x40004400
 80007a4:	20000078 	.word	0x20000078

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fbcc 	bl	8000f4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f845 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f7ff fee5 	bl	8000584 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ba:	f7ff febd 	bl	8000538 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007be:	f000 f9ab 	bl	8000b18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007c2:	f000 faf1 	bl	8000da8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80007c6:	f000 f977 	bl	8000ab8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ATC_Init(&ESP, &huart2, 512, "ESP");
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <main+0x78>)
 80007cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d0:	4914      	ldr	r1, [pc, #80]	@ (8000824 <main+0x7c>)
 80007d2:	4815      	ldr	r0, [pc, #84]	@ (8000828 <main+0x80>)
 80007d4:	f004 fe45 	bl	8005462 <ATC_Init>
  resp = ATC_SendReceive(&ESP, "AT+CWMODE=3\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <main+0x84>)
 80007da:	9303      	str	r3, [sp, #12]
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <main+0x88>)
 80007de:	9302      	str	r3, [sp, #8]
 80007e0:	2302      	movs	r3, #2
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	2364      	movs	r3, #100	@ 0x64
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2300      	movs	r3, #0
 80007ea:	2264      	movs	r2, #100	@ 0x64
 80007ec:	4911      	ldr	r1, [pc, #68]	@ (8000834 <main+0x8c>)
 80007ee:	480e      	ldr	r0, [pc, #56]	@ (8000828 <main+0x80>)
 80007f0:	f004 fedc 	bl	80055ac <ATC_SendReceive>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a10      	ldr	r2, [pc, #64]	@ (8000838 <main+0x90>)
 80007f8:	6013      	str	r3, [r2, #0]
  resp = ATC_SendReceive(&ESP, "AT+CWSAP=\"SIECTEST\",\"\",1,0\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <main+0x84>)
 80007fc:	9303      	str	r3, [sp, #12]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <main+0x88>)
 8000800:	9302      	str	r3, [sp, #8]
 8000802:	2302      	movs	r3, #2
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2364      	movs	r3, #100	@ 0x64
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	2264      	movs	r2, #100	@ 0x64
 800080e:	490b      	ldr	r1, [pc, #44]	@ (800083c <main+0x94>)
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <main+0x80>)
 8000812:	f004 fecb 	bl	80055ac <ATC_SendReceive>
 8000816:	4603      	mov	r3, r0
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <main+0x90>)
 800081a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <main+0x74>
 8000820:	08005b78 	.word	0x08005b78
 8000824:	200000bc 	.word	0x200000bc
 8000828:	20000078 	.word	0x20000078
 800082c:	08005b8c 	.word	0x08005b8c
 8000830:	08005b98 	.word	0x08005b98
 8000834:	08005b7c 	.word	0x08005b7c
 8000838:	200000b4 	.word	0x200000b4
 800083c:	08005ba0 	.word	0x08005ba0

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2234      	movs	r2, #52	@ 0x34
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f005 f8b8 	bl	80059c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000864:	f001 fc1a 	bl	800209c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <SystemClock_Config+0xdc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a2b      	ldr	r2, [pc, #172]	@ (800091c <SystemClock_Config+0xdc>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
 8000874:	4b29      	ldr	r3, [pc, #164]	@ (800091c <SystemClock_Config+0xdc>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000880:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <SystemClock_Config+0xe0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000888:	4a25      	ldr	r2, [pc, #148]	@ (8000920 <SystemClock_Config+0xe0>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <SystemClock_Config+0xe0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008b4:	2360      	movs	r3, #96	@ 0x60
 80008b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fc47 	bl	800215c <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008d4:	f000 f826 	bl	8000924 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008d8:	f001 fbf0 	bl	80020bc <HAL_PWREx_EnableOverDrive>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008e2:	f000 f81f 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2103      	movs	r1, #3
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fed8 	bl	80026b8 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800090e:	f000 f809 	bl	8000924 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3750      	adds	r7, #80	@ 0x50
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_MspInit+0x44>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	@ 0x40
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_MspInit+0x44>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x44>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x44>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x44>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 faf9 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <DMA1_Stream5_IRQHandler+0x10>)
 80009de:	f000 fde7 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200001cc 	.word	0x200001cc

080009ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <DMA1_Stream6_IRQHandler+0x10>)
 80009f2:	f000 fddd 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000022c 	.word	0x2000022c

08000a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <USART2_IRQHandler+0x10>)
 8000a06:	f002 fe87 	bl	8003718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000bc 	.word	0x200000bc

08000a14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <USART3_IRQHandler+0x10>)
 8000a1a:	f002 fe7d 	bl	8003718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000144 	.word	0x20000144

08000a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a30:	4a14      	ldr	r2, [pc, #80]	@ (8000a84 <_sbrk+0x5c>)
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <_sbrk+0x60>)
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <_sbrk+0x64>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <_sbrk+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d207      	bcs.n	8000a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a58:	f004 fff6 	bl	8005a48 <__errno>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	220c      	movs	r2, #12
 8000a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	e009      	b.n	8000a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <_sbrk+0x64>)
 8000a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20080000 	.word	0x20080000
 8000a88:	00000400 	.word	0x00000400
 8000a8c:	200000b8 	.word	0x200000b8
 8000a90:	200008b8 	.word	0x200008b8

08000a94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <MX_USART2_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_USART2_UART_Init+0x58>)
 8000afc:	f002 fc2a 	bl	8003354 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b06:	f7ff ff0d 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000bc 	.word	0x200000bc
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <MX_USART3_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b5c:	f002 fbfa 	bl	8003354 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f7ff fedd 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000144 	.word	0x20000144
 8000b74:	40004800 	.word	0x40004800

08000b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0b0      	sub	sp, #192	@ 0xc0
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	2290      	movs	r2, #144	@ 0x90
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 ff13 	bl	80059c4 <memset>
  if(uartHandle->Instance==USART2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a79      	ldr	r2, [pc, #484]	@ (8000d88 <HAL_UART_MspInit+0x210>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	f040 80a0 	bne.w	8000cea <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 ffa4 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bc2:	f7ff feaf 	bl	8000924 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc6:	4b71      	ldr	r3, [pc, #452]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4a70      	ldr	r2, [pc, #448]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd2:	4b6e      	ldr	r3, [pc, #440]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	4b6b      	ldr	r3, [pc, #428]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a6a      	ldr	r2, [pc, #424]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b68      	ldr	r3, [pc, #416]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bf6:	2360      	movs	r3, #96	@ 0x60
 8000bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c18:	4619      	mov	r1, r3
 8000c1a:	485d      	ldr	r0, [pc, #372]	@ (8000d90 <HAL_UART_MspInit+0x218>)
 8000c1c:	f000 ff3e 	bl	8001a9c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c20:	4b5c      	ldr	r3, [pc, #368]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c22:	4a5d      	ldr	r2, [pc, #372]	@ (8000d98 <HAL_UART_MspInit+0x220>)
 8000c24:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c26:	4b5b      	ldr	r3, [pc, #364]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c28:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2e:	4b59      	ldr	r3, [pc, #356]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c34:	4b57      	ldr	r3, [pc, #348]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c3a:	4b56      	ldr	r3, [pc, #344]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c42:	4b54      	ldr	r3, [pc, #336]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c48:	4b52      	ldr	r3, [pc, #328]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c4e:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c54:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c60:	484c      	ldr	r0, [pc, #304]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c62:	f000 fb05 	bl	8001270 <HAL_DMA_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000c6c:	f7ff fe5a 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a48      	ldr	r2, [pc, #288]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c74:	675a      	str	r2, [r3, #116]	@ 0x74
 8000c76:	4a47      	ldr	r2, [pc, #284]	@ (8000d94 <HAL_UART_MspInit+0x21c>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000c7c:	4b47      	ldr	r3, [pc, #284]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000c7e:	4a48      	ldr	r2, [pc, #288]	@ (8000da0 <HAL_UART_MspInit+0x228>)
 8000c80:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000c82:	4b46      	ldr	r3, [pc, #280]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000c84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c88:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c8a:	4b44      	ldr	r3, [pc, #272]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000c8c:	2240      	movs	r2, #64	@ 0x40
 8000c8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c90:	4b42      	ldr	r3, [pc, #264]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c96:	4b41      	ldr	r3, [pc, #260]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000c98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000caa:	4b3c      	ldr	r3, [pc, #240]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb6:	4b39      	ldr	r3, [pc, #228]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cbc:	4837      	ldr	r0, [pc, #220]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000cbe:	f000 fad7 	bl	8001270 <HAL_DMA_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8000cc8:	f7ff fe2c 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a33      	ldr	r2, [pc, #204]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000cd0:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cd2:	4a32      	ldr	r2, [pc, #200]	@ (8000d9c <HAL_UART_MspInit+0x224>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2026      	movs	r0, #38	@ 0x26
 8000cde:	f000 fa90 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce2:	2026      	movs	r0, #38	@ 0x26
 8000ce4:	f000 faa9 	bl	800123a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ce8:	e049      	b.n	8000d7e <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a2d      	ldr	r2, [pc, #180]	@ (8000da4 <HAL_UART_MspInit+0x22c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d144      	bne.n	8000d7e <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fefe 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8000d0e:	f7ff fe09 	bl	8000924 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d12:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	4a1d      	ldr	r2, [pc, #116]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a17      	ldr	r2, [pc, #92]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_UART_MspInit+0x214>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d62:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d66:	4619      	mov	r1, r3
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <HAL_UART_MspInit+0x218>)
 8000d6a:	f000 fe97 	bl	8001a9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2027      	movs	r0, #39	@ 0x27
 8000d74:	f000 fa45 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d78:	2027      	movs	r0, #39	@ 0x27
 8000d7a:	f000 fa5e 	bl	800123a <HAL_NVIC_EnableIRQ>
}
 8000d7e:	bf00      	nop
 8000d80:	37c0      	adds	r7, #192	@ 0xc0
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40004400 	.word	0x40004400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	200001cc 	.word	0x200001cc
 8000d98:	40026088 	.word	0x40026088
 8000d9c:	2000022c 	.word	0x2000022c
 8000da0:	400260a0 	.word	0x400260a0
 8000da4:	40004800 	.word	0x40004800

08000da8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000db2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db6:	2206      	movs	r2, #6
 8000db8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dec:	f001 f81b 	bl	8001e26 <HAL_PCD_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000df6:	f7ff fd95 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000028c 	.word	0x2000028c

08000e04 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0ae      	sub	sp, #184	@ 0xb8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2290      	movs	r2, #144	@ 0x90
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f004 fdcd 	bl	80059c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e32:	d159      	bne.n	8000ee8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e34:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fe5d 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e50:	f7ff fd68 	bl	8000924 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b26      	ldr	r3, [pc, #152]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e58:	4a25      	ldr	r2, [pc, #148]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e60:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e6c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e86:	230a      	movs	r3, #10
 8000e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4818      	ldr	r0, [pc, #96]	@ (8000ef4 <HAL_PCD_MspInit+0xf0>)
 8000e94:	f000 fe02 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4810      	ldr	r0, [pc, #64]	@ (8000ef4 <HAL_PCD_MspInit+0xf0>)
 8000eb4:	f000 fdf2 	bl	8001a9c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed4:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eda:	6453      	str	r3, [r2, #68]	@ 0x44
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000ee8:	bf00      	nop
 8000eea:	37b8      	adds	r7, #184	@ 0xb8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000efc:	f7ff fdca 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f02:	490d      	ldr	r1, [pc, #52]	@ (8000f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f18:	4c0a      	ldr	r4, [pc, #40]	@ (8000f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f004 fd95 	bl	8005a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fc3d 	bl	80007a8 <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f3c:	08005bf0 	.word	0x08005bf0
  ldr r2, =_sbss
 8000f40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f44:	200008b8 	.word	0x200008b8

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>

08000f4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 f94c 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 f805 	bl	8000f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5a:	f7ff fce9 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x54>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_InitTick+0x58>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f967 	bl	8001256 <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00e      	b.n	8000fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d80a      	bhi.n	8000fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f000 f92f 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4a06      	ldr	r2, [pc, #24]	@ (8000fc0 <HAL_InitTick+0x5c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x20>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_IncTick+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <HAL_IncTick+0x24>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	2000076c 	.word	0x2000076c

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	2000076c 	.word	0x2000076c

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff ffee 	bl	8000fec <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_Delay+0x44>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffde 	bl	8000fec <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	4313      	orrs	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	05fa0000 	.word	0x05fa0000

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	@ (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff29 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff3e 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff31 	bl	80010b0 <__NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa2 	bl	80011a8 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff feb6 	bl	8000fec <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e099      	b.n	80013c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2202      	movs	r2, #2
 8001290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ac:	e00f      	b.n	80012ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ae:	f7ff fe9d 	bl	8000fec <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d908      	bls.n	80012ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2220      	movs	r2, #32
 80012c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e078      	b.n	80013c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e8      	bne.n	80012ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	4b38      	ldr	r3, [pc, #224]	@ (80013c8 <HAL_DMA_Init+0x158>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4313      	orrs	r3, r2
 800131e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001324:	2b04      	cmp	r3, #4
 8001326:	d107      	bne.n	8001338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	4313      	orrs	r3, r2
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4313      	orrs	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f023 0307 	bic.w	r3, r3, #7
 800134e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	4313      	orrs	r3, r2
 8001358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	2b04      	cmp	r3, #4
 8001360:	d117      	bne.n	8001392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4313      	orrs	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00e      	beq.n	8001392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fb15 	bl	80019a4 <DMA_CheckFifoParam>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2240      	movs	r2, #64	@ 0x40
 8001384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800138e:	2301      	movs	r3, #1
 8001390:	e016      	b.n	80013c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 facc 	bl	8001938 <DMA_CalcBaseAndBitshift>
 80013a0:	4603      	mov	r3, r0
 80013a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a8:	223f      	movs	r2, #63	@ 0x3f
 80013aa:	409a      	lsls	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	e010803f 	.word	0xe010803f

080013cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_DMA_Start_IT+0x26>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e048      	b.n	8001484 <HAL_DMA_Start_IT+0xb8>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d137      	bne.n	8001476 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2202      	movs	r2, #2
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fa5e 	bl	80018dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001424:	223f      	movs	r2, #63	@ 0x3f
 8001426:	409a      	lsls	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0216 	orr.w	r2, r2, #22
 800143a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800144a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0208 	orr.w	r2, r2, #8
 8001462:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e005      	b.n	8001482 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800147e:	2302      	movs	r3, #2
 8001480:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001482:	7dfb      	ldrb	r3, [r7, #23]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001498:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800149a:	f7ff fda7 	bl	8000fec <HAL_GetTick>
 800149e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d008      	beq.n	80014be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e052      	b.n	8001564 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0216 	bic.w	r2, r2, #22
 80014cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d103      	bne.n	80014ee <HAL_DMA_Abort+0x62>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0208 	bic.w	r2, r2, #8
 80014fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800150e:	e013      	b.n	8001538 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001510:	f7ff fd6c 	bl	8000fec <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b05      	cmp	r3, #5
 800151c:	d90c      	bls.n	8001538 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2220      	movs	r2, #32
 8001522:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e015      	b.n	8001564 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1e4      	bne.n	8001510 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800154a:	223f      	movs	r2, #63	@ 0x3f
 800154c:	409a      	lsls	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d004      	beq.n	800158a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2280      	movs	r2, #128	@ 0x80
 8001584:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00c      	b.n	80015a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2205      	movs	r2, #5
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80015bc:	4b8e      	ldr	r3, [pc, #568]	@ (80017f8 <HAL_DMA_IRQHandler+0x248>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a8e      	ldr	r2, [pc, #568]	@ (80017fc <HAL_DMA_IRQHandler+0x24c>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015da:	2208      	movs	r2, #8
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01a      	beq.n	800161c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001608:	2208      	movs	r2, #8
 800160a:	409a      	lsls	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d012      	beq.n	8001652 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163e:	2201      	movs	r2, #1
 8001640:	409a      	lsls	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164a:	f043 0202 	orr.w	r2, r3, #2
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001656:	2204      	movs	r2, #4
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d012      	beq.n	8001688 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00b      	beq.n	8001688 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001674:	2204      	movs	r2, #4
 8001676:	409a      	lsls	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001680:	f043 0204 	orr.w	r2, r3, #4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168c:	2210      	movs	r2, #16
 800168e:	409a      	lsls	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d043      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d03c      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016aa:	2210      	movs	r2, #16
 80016ac:	409a      	lsls	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d018      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d024      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
 80016de:	e01f      	b.n	8001720 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
 80016f0:	e016      	b.n	8001720 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d107      	bne.n	8001710 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0208 	bic.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001724:	2220      	movs	r2, #32
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 808f 	beq.w	8001850 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8087 	beq.w	8001850 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001746:	2220      	movs	r2, #32
 8001748:	409a      	lsls	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b05      	cmp	r3, #5
 8001758:	d136      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0216 	bic.w	r2, r2, #22
 8001768:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001778:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d103      	bne.n	800178a <HAL_DMA_IRQHandler+0x1da>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0208 	bic.w	r2, r2, #8
 8001798:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179e:	223f      	movs	r2, #63	@ 0x3f
 80017a0:	409a      	lsls	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d07e      	beq.n	80018bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
        }
        return;
 80017c6:	e079      	b.n	80018bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01d      	beq.n	8001812 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10d      	bne.n	8001800 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d031      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
 80017f4:	e02c      	b.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
 80017f6:	bf00      	nop
 80017f8:	20000000 	.word	0x20000000
 80017fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d023      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
 8001810:	e01e      	b.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10f      	bne.n	8001840 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0210 	bic.w	r2, r2, #16
 800182e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001854:	2b00      	cmp	r3, #0
 8001856:	d032      	beq.n	80018be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d022      	beq.n	80018aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2205      	movs	r2, #5
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3301      	adds	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	d307      	bcc.n	8001898 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f2      	bne.n	800187c <HAL_DMA_IRQHandler+0x2cc>
 8001896:	e000      	b.n	800189a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001898:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
 80018ba:	e000      	b.n	80018be <HAL_DMA_IRQHandler+0x30e>
        return;
 80018bc:	bf00      	nop
    }
  }
}
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b40      	cmp	r3, #64	@ 0x40
 8001908:	d108      	bne.n	800191c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800191a:	e007      	b.n	800192c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	3b10      	subs	r3, #16
 8001948:	4a13      	ldr	r2, [pc, #76]	@ (8001998 <DMA_CalcBaseAndBitshift+0x60>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001952:	4a12      	ldr	r2, [pc, #72]	@ (800199c <DMA_CalcBaseAndBitshift+0x64>)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d908      	bls.n	8001978 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <DMA_CalcBaseAndBitshift+0x68>)
 800196e:	4013      	ands	r3, r2
 8001970:	1d1a      	adds	r2, r3, #4
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	659a      	str	r2, [r3, #88]	@ 0x58
 8001976:	e006      	b.n	8001986 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <DMA_CalcBaseAndBitshift+0x68>)
 8001980:	4013      	ands	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	aaaaaaab 	.word	0xaaaaaaab
 800199c:	08005bd8 	.word	0x08005bd8
 80019a0:	fffffc00 	.word	0xfffffc00

080019a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d11f      	bne.n	80019fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d856      	bhi.n	8001a72 <DMA_CheckFifoParam+0xce>
 80019c4:	a201      	add	r2, pc, #4	@ (adr r2, 80019cc <DMA_CheckFifoParam+0x28>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	080019dd 	.word	0x080019dd
 80019d0:	080019ef 	.word	0x080019ef
 80019d4:	080019dd 	.word	0x080019dd
 80019d8:	08001a73 	.word	0x08001a73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d046      	beq.n	8001a76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ec:	e043      	b.n	8001a76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019f6:	d140      	bne.n	8001a7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019fc:	e03d      	b.n	8001a7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a06:	d121      	bne.n	8001a4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d837      	bhi.n	8001a7e <DMA_CheckFifoParam+0xda>
 8001a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a14 <DMA_CheckFifoParam+0x70>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a25 	.word	0x08001a25
 8001a18:	08001a2b 	.word	0x08001a2b
 8001a1c:	08001a25 	.word	0x08001a25
 8001a20:	08001a3d 	.word	0x08001a3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
      break;
 8001a28:	e030      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d025      	beq.n	8001a82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a3a:	e022      	b.n	8001a82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a44:	d11f      	bne.n	8001a86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a4a:	e01c      	b.n	8001a86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d903      	bls.n	8001a5a <DMA_CheckFifoParam+0xb6>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d003      	beq.n	8001a60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a58:	e018      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a5e:	e015      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00e      	beq.n	8001a8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a70:	e00b      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a72:	bf00      	nop
 8001a74:	e00a      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a76:	bf00      	nop
 8001a78:	e008      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e006      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a7e:	bf00      	nop
 8001a80:	e004      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a82:	bf00      	nop
 8001a84:	e002      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a86:	bf00      	nop
 8001a88:	e000      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e175      	b.n	8001da8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f040 8164 	bne.w	8001da2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_GPIO_Init+0x56>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d130      	bne.n	8001b54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 0201 	and.w	r2, r3, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d017      	beq.n	8001b90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d123      	bne.n	8001be4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80be 	beq.w	8001da2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b66      	ldr	r3, [pc, #408]	@ (8001dc0 <HAL_GPIO_Init+0x324>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	4a65      	ldr	r2, [pc, #404]	@ (8001dc0 <HAL_GPIO_Init+0x324>)
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c32:	4b63      	ldr	r3, [pc, #396]	@ (8001dc0 <HAL_GPIO_Init+0x324>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c3e:	4a61      	ldr	r2, [pc, #388]	@ (8001dc4 <HAL_GPIO_Init+0x328>)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <HAL_GPIO_Init+0x32c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d037      	beq.n	8001cda <HAL_GPIO_Init+0x23e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a57      	ldr	r2, [pc, #348]	@ (8001dcc <HAL_GPIO_Init+0x330>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d031      	beq.n	8001cd6 <HAL_GPIO_Init+0x23a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a56      	ldr	r2, [pc, #344]	@ (8001dd0 <HAL_GPIO_Init+0x334>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d02b      	beq.n	8001cd2 <HAL_GPIO_Init+0x236>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a55      	ldr	r2, [pc, #340]	@ (8001dd4 <HAL_GPIO_Init+0x338>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d025      	beq.n	8001cce <HAL_GPIO_Init+0x232>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a54      	ldr	r2, [pc, #336]	@ (8001dd8 <HAL_GPIO_Init+0x33c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01f      	beq.n	8001cca <HAL_GPIO_Init+0x22e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a53      	ldr	r2, [pc, #332]	@ (8001ddc <HAL_GPIO_Init+0x340>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d019      	beq.n	8001cc6 <HAL_GPIO_Init+0x22a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a52      	ldr	r2, [pc, #328]	@ (8001de0 <HAL_GPIO_Init+0x344>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0x226>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a51      	ldr	r2, [pc, #324]	@ (8001de4 <HAL_GPIO_Init+0x348>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_GPIO_Init+0x222>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a50      	ldr	r2, [pc, #320]	@ (8001de8 <HAL_GPIO_Init+0x34c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x21e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4f      	ldr	r2, [pc, #316]	@ (8001dec <HAL_GPIO_Init+0x350>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_GPIO_Init+0x21a>
 8001cb2:	2309      	movs	r3, #9
 8001cb4:	e012      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	e010      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cba:	2308      	movs	r3, #8
 8001cbc:	e00e      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	e00c      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	e00a      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e008      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cca:	2304      	movs	r3, #4
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e004      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f002 0203 	and.w	r2, r2, #3
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	4093      	lsls	r3, r2
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cec:	4935      	ldr	r1, [pc, #212]	@ (8001dc4 <HAL_GPIO_Init+0x328>)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a34      	ldr	r2, [pc, #208]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b32      	ldr	r3, [pc, #200]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4e:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d72:	4a1f      	ldr	r2, [pc, #124]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3301      	adds	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	f67f ae86 	bls.w	8001abc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3724      	adds	r7, #36	@ 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40013800 	.word	0x40013800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40021400 	.word	0x40021400
 8001de0:	40021800 	.word	0x40021800
 8001de4:	40021c00 	.word	0x40021c00
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40022400 	.word	0x40022400
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e10:	e003      	b.n	8001e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	041a      	lsls	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	619a      	str	r2, [r3, #24]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af02      	add	r7, sp, #8
 8001e2c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e108      	b.n	800204a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe ffd6 	bl	8000e04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e66:	d102      	bne.n	8001e6e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 ff16 	bl	8004ca4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7c1a      	ldrb	r2, [r3, #16]
 8001e80:	f88d 2000 	strb.w	r2, [sp]
 8001e84:	3304      	adds	r3, #4
 8001e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e88:	f002 feb2 	bl	8004bf0 <USB_CoreInit>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0d5      	b.n	800204a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 ff0e 	bl	8004cc6 <USB_SetCurrentMode>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0c6      	b.n	800204a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e04a      	b.n	8001f58 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	3315      	adds	r3, #21
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3314      	adds	r3, #20
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	b298      	uxth	r0, r3
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	332e      	adds	r3, #46	@ 0x2e
 8001efe:	4602      	mov	r2, r0
 8001f00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3318      	adds	r3, #24
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	331c      	adds	r3, #28
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	3320      	adds	r3, #32
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3324      	adds	r3, #36	@ 0x24
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	3301      	adds	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	791b      	ldrb	r3, [r3, #4]
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d3af      	bcc.n	8001ec2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e044      	b.n	8001ff2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	791b      	ldrb	r3, [r3, #4]
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d3b5      	bcc.n	8001f68 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7c1a      	ldrb	r2, [r3, #16]
 8002004:	f88d 2000 	strb.w	r2, [sp]
 8002008:	3304      	adds	r3, #4
 800200a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800200c:	f002 fea8 	bl	8004d60 <USB_DevInit>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e013      	b.n	800204a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7b1b      	ldrb	r3, [r3, #12]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d102      	bne.n	800203e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f80b 	bl	8002054 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 f863 	bl	800510e <USB_DevDisconnect>

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002082:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_PCDEx_ActivateLPM+0x44>)
 8002084:	4313      	orrs	r3, r2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	10000003 	.word	0x10000003

0800209c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a0:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40007000 	.word	0x40007000

080020bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b23      	ldr	r3, [pc, #140]	@ (8002154 <HAL_PWREx_EnableOverDrive+0x98>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	4a22      	ldr	r2, [pc, #136]	@ (8002154 <HAL_PWREx_EnableOverDrive+0x98>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_PWREx_EnableOverDrive+0x98>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ea:	f7fe ff7f 	bl	8000fec <HAL_GetTick>
 80020ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020f0:	e009      	b.n	8002106 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020f2:	f7fe ff7b 	bl	8000fec <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002100:	d901      	bls.n	8002106 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e022      	b.n	800214c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002106:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002112:	d1ee      	bne.n	80020f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002114:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0f      	ldr	r2, [pc, #60]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x9c>)
 800211a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002120:	f7fe ff64 	bl	8000fec <HAL_GetTick>
 8002124:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002126:	e009      	b.n	800213c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002128:	f7fe ff60 	bl	8000fec <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002136:	d901      	bls.n	800213c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e007      	b.n	800214c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x9c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002148:	d1ee      	bne.n	8002128 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40023800 	.word	0x40023800
 8002158:	40007000 	.word	0x40007000

0800215c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e29b      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8087 	beq.w	800228e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	4b96      	ldr	r3, [pc, #600]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b04      	cmp	r3, #4
 800218a:	d00c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218c:	4b93      	ldr	r3, [pc, #588]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d112      	bne.n	80021be <HAL_RCC_OscConfig+0x62>
 8002198:	4b90      	ldr	r3, [pc, #576]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a4:	d10b      	bne.n	80021be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a6:	4b8d      	ldr	r3, [pc, #564]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d06c      	beq.n	800228c <HAL_RCC_OscConfig+0x130>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d168      	bne.n	800228c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e275      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x7a>
 80021c8:	4b84      	ldr	r3, [pc, #528]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a83      	ldr	r2, [pc, #524]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e02e      	b.n	8002234 <HAL_RCC_OscConfig+0xd8>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x9c>
 80021de:	4b7f      	ldr	r3, [pc, #508]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7e      	ldr	r2, [pc, #504]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b7c      	ldr	r3, [pc, #496]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7b      	ldr	r2, [pc, #492]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80021f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xd8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0xc0>
 8002202:	4b76      	ldr	r3, [pc, #472]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a75      	ldr	r2, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b73      	ldr	r3, [pc, #460]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a72      	ldr	r2, [pc, #456]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xd8>
 800221c:	4b6f      	ldr	r3, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6e      	ldr	r2, [pc, #440]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b6c      	ldr	r3, [pc, #432]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6b      	ldr	r2, [pc, #428]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fed6 	bl	8000fec <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe fed2 	bl	8000fec <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	@ 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e229      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b61      	ldr	r3, [pc, #388]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xe8>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fec2 	bl	8000fec <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe febe 	bl	8000fec <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	@ 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e215      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b57      	ldr	r3, [pc, #348]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x110>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d069      	beq.n	800236e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800229a:	4b50      	ldr	r3, [pc, #320]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b4d      	ldr	r3, [pc, #308]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x190>
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b47      	ldr	r3, [pc, #284]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x17a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1e9      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	493d      	ldr	r1, [pc, #244]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e040      	b.n	800236e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d023      	beq.n	800233c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b39      	ldr	r3, [pc, #228]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a38      	ldr	r2, [pc, #224]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fe74 	bl	8000fec <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002308:	f7fe fe70 	bl	8000fec <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1c7      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4929      	ldr	r1, [pc, #164]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
 800233a:	e018      	b.n	800236e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233c:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a26      	ldr	r2, [pc, #152]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fe50 	bl	8000fec <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	f7fe fe4c 	bl	8000fec <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1a3      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d038      	beq.n	80023ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d019      	beq.n	80023b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002382:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002386:	4a15      	ldr	r2, [pc, #84]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7fe fe2d 	bl	8000fec <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7fe fe29 	bl	8000fec <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e180      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80023aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x23a>
 80023b4:	e01a      	b.n	80023ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b6:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80023b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ba:	4a08      	ldr	r2, [pc, #32]	@ (80023dc <HAL_RCC_OscConfig+0x280>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe fe13 	bl	8000fec <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ca:	f7fe fe0f 	bl	8000fec <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d903      	bls.n	80023e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e166      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
 80023dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	4b92      	ldr	r3, [pc, #584]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80023e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ee      	bne.n	80023ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80a4 	beq.w	8002542 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b8c      	ldr	r3, [pc, #560]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b89      	ldr	r3, [pc, #548]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	4a88      	ldr	r2, [pc, #544]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	@ 0x40
 8002412:	4b86      	ldr	r3, [pc, #536]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002422:	4b83      	ldr	r3, [pc, #524]	@ (8002630 <HAL_RCC_OscConfig+0x4d4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800242e:	4b80      	ldr	r3, [pc, #512]	@ (8002630 <HAL_RCC_OscConfig+0x4d4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7f      	ldr	r2, [pc, #508]	@ (8002630 <HAL_RCC_OscConfig+0x4d4>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243a:	f7fe fdd7 	bl	8000fec <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7fe fdd3 	bl	8000fec <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	@ 0x64
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e12a      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002454:	4b76      	ldr	r3, [pc, #472]	@ (8002630 <HAL_RCC_OscConfig+0x4d4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x31a>
 8002468:	4b70      	ldr	r3, [pc, #448]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246c:	4a6f      	ldr	r2, [pc, #444]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	@ 0x70
 8002474:	e02d      	b.n	80024d2 <HAL_RCC_OscConfig+0x376>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x33c>
 800247e:	4b6b      	ldr	r3, [pc, #428]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002482:	4a6a      	ldr	r2, [pc, #424]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6713      	str	r3, [r2, #112]	@ 0x70
 800248a:	4b68      	ldr	r3, [pc, #416]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248e:	4a67      	ldr	r2, [pc, #412]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6713      	str	r3, [r2, #112]	@ 0x70
 8002496:	e01c      	b.n	80024d2 <HAL_RCC_OscConfig+0x376>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d10c      	bne.n	80024ba <HAL_RCC_OscConfig+0x35e>
 80024a0:	4b62      	ldr	r3, [pc, #392]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a4:	4a61      	ldr	r2, [pc, #388]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ac:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b0:	4a5e      	ldr	r2, [pc, #376]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0x376>
 80024ba:	4b5c      	ldr	r3, [pc, #368]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024be:	4a5b      	ldr	r2, [pc, #364]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024c6:	4b59      	ldr	r3, [pc, #356]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	4a58      	ldr	r2, [pc, #352]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d015      	beq.n	8002506 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7fe fd87 	bl	8000fec <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe fd83 	bl	8000fec <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0d8      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	4b4c      	ldr	r3, [pc, #304]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ee      	beq.n	80024e2 <HAL_RCC_OscConfig+0x386>
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7fe fd71 	bl	8000fec <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fd6d 	bl	8000fec <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0c2      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b3d      	ldr	r3, [pc, #244]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	4a3c      	ldr	r2, [pc, #240]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80ae 	beq.w	80026a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254c:	4b37      	ldr	r3, [pc, #220]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d06d      	beq.n	8002634 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d14b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002560:	4b32      	ldr	r3, [pc, #200]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a31      	ldr	r2, [pc, #196]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800256a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fd3e 	bl	8000fec <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002574:	f7fe fd3a 	bl	8000fec <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e091      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	4b29      	ldr	r3, [pc, #164]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	3b01      	subs	r3, #1
 80025ac:	041b      	lsls	r3, r3, #16
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	071b      	lsls	r3, r3, #28
 80025be:	491b      	ldr	r1, [pc, #108]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a18      	ldr	r2, [pc, #96]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fd0c 	bl	8000fec <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fd08 	bl	8000fec <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e05f      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x47c>
 80025f6:	e057      	b.n	80026a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f8:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0b      	ldr	r2, [pc, #44]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 80025fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fcf2 	bl	8000fec <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe fcee 	bl	8000fec <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e045      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	4b03      	ldr	r3, [pc, #12]	@ (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x4b0>
 800262a:	e03d      	b.n	80026a8 <HAL_RCC_OscConfig+0x54c>
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002634:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <HAL_RCC_OscConfig+0x558>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d030      	beq.n	80026a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d129      	bne.n	80026a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d122      	bne.n	80026a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800266a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800266c:	4293      	cmp	r3, r2
 800266e:	d119      	bne.n	80026a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	3b01      	subs	r3, #1
 800267e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d10f      	bne.n	80026a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d0      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b67      	ldr	r3, [pc, #412]	@ (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 020f 	bic.w	r2, r3, #15
 80026e6:	4965      	ldr	r1, [pc, #404]	@ (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	@ (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a58      	ldr	r2, [pc, #352]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800271e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002722:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a52      	ldr	r2, [pc, #328]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800273a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d040      	beq.n	80027dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b41      	ldr	r3, [pc, #260]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e073      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3d      	ldr	r3, [pc, #244]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4936      	ldr	r1, [pc, #216]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ac:	f7fe fc1e 	bl	8000fec <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe fc1a 	bl	8000fec <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e053      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b27      	ldr	r3, [pc, #156]	@ (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d210      	bcs.n	800280c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 020f 	bic.w	r2, r3, #15
 80027f2:	4922      	ldr	r1, [pc, #136]	@ (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4602      	mov	r2, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	490a      	ldr	r1, [pc, #40]	@ (8002884 <HAL_RCC_ClockConfig+0x1cc>)
 800285c:	5ccb      	ldrb	r3, [r1, r3]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <HAL_RCC_ClockConfig+0x1d0>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_RCC_ClockConfig+0x1d4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fb7a 	bl	8000f64 <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023c00 	.word	0x40023c00
 8002880:	40023800 	.word	0x40023800
 8002884:	08005bc0 	.word	0x08005bc0
 8002888:	20000000 	.word	0x20000000
 800288c:	20000004 	.word	0x20000004

08002890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002894:	b094      	sub	sp, #80	@ 0x50
 8002896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	647b      	str	r3, [r7, #68]	@ 0x44
 800289c:	2300      	movs	r3, #0
 800289e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028a0:	2300      	movs	r3, #0
 80028a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a8:	4b79      	ldr	r3, [pc, #484]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d00d      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x40>
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	f200 80e1 	bhi.w	8002a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x34>
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x3a>
 80028c2:	e0db      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c4:	4b73      	ldr	r3, [pc, #460]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80028c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c8:	e0db      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ca:	4b73      	ldr	r3, [pc, #460]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80028cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ce:	e0d8      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028da:	4b6d      	ldr	r3, [pc, #436]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d063      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	099b      	lsrs	r3, r3, #6
 80028ec:	2200      	movs	r2, #0
 80028ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028fa:	2300      	movs	r3, #0
 80028fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80028fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002902:	4622      	mov	r2, r4
 8002904:	462b      	mov	r3, r5
 8002906:	f04f 0000 	mov.w	r0, #0
 800290a:	f04f 0100 	mov.w	r1, #0
 800290e:	0159      	lsls	r1, r3, #5
 8002910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002914:	0150      	lsls	r0, r2, #5
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4621      	mov	r1, r4
 800291c:	1a51      	subs	r1, r2, r1
 800291e:	6139      	str	r1, [r7, #16]
 8002920:	4629      	mov	r1, r5
 8002922:	eb63 0301 	sbc.w	r3, r3, r1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002934:	4659      	mov	r1, fp
 8002936:	018b      	lsls	r3, r1, #6
 8002938:	4651      	mov	r1, sl
 800293a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800293e:	4651      	mov	r1, sl
 8002940:	018a      	lsls	r2, r1, #6
 8002942:	4651      	mov	r1, sl
 8002944:	ebb2 0801 	subs.w	r8, r2, r1
 8002948:	4659      	mov	r1, fp
 800294a:	eb63 0901 	sbc.w	r9, r3, r1
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800295a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800295e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002962:	4690      	mov	r8, r2
 8002964:	4699      	mov	r9, r3
 8002966:	4623      	mov	r3, r4
 8002968:	eb18 0303 	adds.w	r3, r8, r3
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	462b      	mov	r3, r5
 8002970:	eb49 0303 	adc.w	r3, r9, r3
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002982:	4629      	mov	r1, r5
 8002984:	024b      	lsls	r3, r1, #9
 8002986:	4621      	mov	r1, r4
 8002988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800298c:	4621      	mov	r1, r4
 800298e:	024a      	lsls	r2, r1, #9
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002996:	2200      	movs	r2, #0
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
 800299a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800299c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029a0:	f7fd fc52 	bl	8000248 <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4613      	mov	r3, r2
 80029aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ac:	e058      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ae:	4b38      	ldr	r3, [pc, #224]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	099b      	lsrs	r3, r3, #6
 80029b4:	2200      	movs	r2, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	4611      	mov	r1, r2
 80029ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029c8:	4642      	mov	r2, r8
 80029ca:	464b      	mov	r3, r9
 80029cc:	f04f 0000 	mov.w	r0, #0
 80029d0:	f04f 0100 	mov.w	r1, #0
 80029d4:	0159      	lsls	r1, r3, #5
 80029d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029da:	0150      	lsls	r0, r2, #5
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4641      	mov	r1, r8
 80029e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80029e6:	4649      	mov	r1, r9
 80029e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a00:	ebb2 040a 	subs.w	r4, r2, sl
 8002a04:	eb63 050b 	sbc.w	r5, r3, fp
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	00eb      	lsls	r3, r5, #3
 8002a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a16:	00e2      	lsls	r2, r4, #3
 8002a18:	4614      	mov	r4, r2
 8002a1a:	461d      	mov	r5, r3
 8002a1c:	4643      	mov	r3, r8
 8002a1e:	18e3      	adds	r3, r4, r3
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	464b      	mov	r3, r9
 8002a24:	eb45 0303 	adc.w	r3, r5, r3
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a36:	4629      	mov	r1, r5
 8002a38:	028b      	lsls	r3, r1, #10
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a40:	4621      	mov	r1, r4
 8002a42:	028a      	lsls	r2, r1, #10
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	61fa      	str	r2, [r7, #28]
 8002a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a54:	f7fd fbf8 	bl	8000248 <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a7a:	e002      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3750      	adds	r7, #80	@ 0x50
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	00f42400 	.word	0x00f42400
 8002a98:	007a1200 	.word	0x007a1200

08002a9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab8:	f7ff fff0 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0a9b      	lsrs	r3, r3, #10
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4903      	ldr	r1, [pc, #12]	@ (8002ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08005bd0 	.word	0x08005bd0

08002adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae0:	f7ff ffdc 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0b5b      	lsrs	r3, r3, #13
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4903      	ldr	r1, [pc, #12]	@ (8002b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08005bd0 	.word	0x08005bd0

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b2c:	4b69      	ldr	r3, [pc, #420]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a68      	ldr	r2, [pc, #416]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b36:	6093      	str	r3, [r2, #8]
 8002b38:	4b66      	ldr	r3, [pc, #408]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b40:	4964      	ldr	r1, [pc, #400]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d017      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	4959      	ldr	r1, [pc, #356]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d017      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	494a      	ldr	r1, [pc, #296]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 808b 	beq.w	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	4a39      	ldr	r2, [pc, #228]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf4:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c00:	4b35      	ldr	r3, [pc, #212]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a34      	ldr	r2, [pc, #208]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fe f9ee 	bl	8000fec <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fe f9ea 	bl	8000fec <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	@ 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e38f      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c26:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c32:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d035      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d02e      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c50:	4b20      	ldr	r3, [pc, #128]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c66:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c72:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c78:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d114      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe f9b2 	bl	8000fec <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe f9ae 	bl	8000fec <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e351      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ee      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cba:	d111      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cca:	400b      	ands	r3, r1
 8002ccc:	4901      	ldr	r1, [pc, #4]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	0ffffcff 	.word	0x0ffffcff
 8002ce0:	4bac      	ldr	r3, [pc, #688]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4aab      	ldr	r2, [pc, #684]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cea:	6093      	str	r3, [r2, #8]
 8002cec:	4ba9      	ldr	r3, [pc, #676]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	49a6      	ldr	r1, [pc, #664]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d0a:	4ba2      	ldr	r3, [pc, #648]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d10:	4aa0      	ldr	r2, [pc, #640]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d1a:	4b9e      	ldr	r3, [pc, #632]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	499b      	ldr	r1, [pc, #620]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d38:	4b96      	ldr	r3, [pc, #600]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d46:	4993      	ldr	r1, [pc, #588]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d5a:	4b8e      	ldr	r3, [pc, #568]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d68:	498a      	ldr	r1, [pc, #552]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d7c:	4b85      	ldr	r3, [pc, #532]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d8a:	4982      	ldr	r1, [pc, #520]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dac:	4979      	ldr	r1, [pc, #484]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dc0:	4b74      	ldr	r3, [pc, #464]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	4971      	ldr	r1, [pc, #452]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002de2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	f023 020c 	bic.w	r2, r3, #12
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df0:	4968      	ldr	r1, [pc, #416]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e04:	4b63      	ldr	r3, [pc, #396]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e12:	4960      	ldr	r1, [pc, #384]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e26:	4b5b      	ldr	r3, [pc, #364]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e34:	4957      	ldr	r1, [pc, #348]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e48:	4b52      	ldr	r3, [pc, #328]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e56:	494f      	ldr	r1, [pc, #316]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	4946      	ldr	r1, [pc, #280]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e8c:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	493e      	ldr	r1, [pc, #248]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002eae:	4b39      	ldr	r3, [pc, #228]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebc:	4935      	ldr	r1, [pc, #212]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ed0:	4b30      	ldr	r3, [pc, #192]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ede:	492d      	ldr	r1, [pc, #180]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ef2:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f00:	4924      	ldr	r1, [pc, #144]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f10:	d101      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f32:	4b18      	ldr	r3, [pc, #96]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f40:	4914      	ldr	r1, [pc, #80]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f64:	490b      	ldr	r1, [pc, #44]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00f      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f78:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f88:	4902      	ldr	r1, [pc, #8]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f90:	e002      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fa4:	4b8a      	ldr	r3, [pc, #552]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002faa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb4:	4986      	ldr	r1, [pc, #536]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fc8:	4b81      	ldr	r3, [pc, #516]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fd8:	497d      	ldr	r1, [pc, #500]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d006      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80d6 	beq.w	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ff4:	4b76      	ldr	r3, [pc, #472]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a75      	ldr	r2, [pc, #468]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003000:	f7fd fff4 	bl	8000fec <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003008:	f7fd fff0 	bl	8000fec <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	@ 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e195      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301a:	4b6d      	ldr	r3, [pc, #436]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d021      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11d      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800303a:	4b65      	ldr	r3, [pc, #404]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003048:	4b61      	ldr	r3, [pc, #388]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800304e:	0e1b      	lsrs	r3, r3, #24
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	019a      	lsls	r2, r3, #6
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	071b      	lsls	r3, r3, #28
 800306e:	4958      	ldr	r1, [pc, #352]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003094:	2b00      	cmp	r3, #0
 8003096:	d02e      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030a0:	d129      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030a2:	4b4b      	ldr	r3, [pc, #300]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030b0:	4b47      	ldr	r3, [pc, #284]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b6:	0f1b      	lsrs	r3, r3, #28
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	019a      	lsls	r2, r3, #6
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	071b      	lsls	r3, r3, #28
 80030d6:	493e      	ldr	r1, [pc, #248]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030de:	4b3c      	ldr	r3, [pc, #240]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e4:	f023 021f 	bic.w	r2, r3, #31
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	3b01      	subs	r3, #1
 80030ee:	4938      	ldr	r1, [pc, #224]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01d      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003102:	4b33      	ldr	r3, [pc, #204]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003108:	0e1b      	lsrs	r3, r3, #24
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003110:	4b2f      	ldr	r3, [pc, #188]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003116:	0f1b      	lsrs	r3, r3, #28
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	019a      	lsls	r2, r3, #6
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	431a      	orrs	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	061b      	lsls	r3, r3, #24
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	071b      	lsls	r3, r3, #28
 8003136:	4926      	ldr	r1, [pc, #152]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d011      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	019a      	lsls	r2, r3, #6
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	491a      	ldr	r1, [pc, #104]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800316e:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a17      	ldr	r2, [pc, #92]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003174:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317a:	f7fd ff37 	bl	8000fec <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003182:	f7fd ff33 	bl	8000fec <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b64      	cmp	r3, #100	@ 0x64
 800318e:	d901      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0d8      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003194:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	f040 80ce 	bne.w	8003344 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031a8:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b4:	f7fd ff1a 	bl	8000fec <HAL_GetTick>
 80031b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031ba:	e00b      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031bc:	f7fd ff16 	bl	8000fec <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d904      	bls.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0bb      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031e0:	d0ec      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02e      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d12a      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800320a:	4b51      	ldr	r3, [pc, #324]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003218:	4b4d      	ldr	r3, [pc, #308]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	019a      	lsls	r2, r3, #6
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	071b      	lsls	r3, r3, #28
 800323e:	4944      	ldr	r1, [pc, #272]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003246:	4b42      	ldr	r3, [pc, #264]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800324c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	493d      	ldr	r1, [pc, #244]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d022      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003274:	d11d      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003276:	4b36      	ldr	r3, [pc, #216]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003284:	4b32      	ldr	r3, [pc, #200]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	0f1b      	lsrs	r3, r3, #28
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	019a      	lsls	r2, r3, #6
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	4929      	ldr	r1, [pc, #164]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d028      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032be:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c4:	0e1b      	lsrs	r3, r3, #24
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032cc:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	019a      	lsls	r2, r3, #6
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	431a      	orrs	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	4917      	ldr	r1, [pc, #92]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032fa:	4b15      	ldr	r3, [pc, #84]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003300:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	4911      	ldr	r1, [pc, #68]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003310:	4b0f      	ldr	r3, [pc, #60]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0e      	ldr	r2, [pc, #56]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800331a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331c:	f7fd fe66 	bl	8000fec <HAL_GetTick>
 8003320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003324:	f7fd fe62 	bl	8000fec <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	@ 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e007      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800333e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003342:	d1ef      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e040      	b.n	80033e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fbfe 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	@ 0x24
 8003380:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 ff66 	bl	800426c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fcff 	bl	8003da4 <UART_SetConfig>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e01b      	b.n	80033e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 ffe5 	bl	80043b0 <UART_CheckIdleState>
 80033e6:	4603      	mov	r3, r0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	@ 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003402:	2b20      	cmp	r3, #32
 8003404:	d165      	bne.n	80034d2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_UART_Transmit_DMA+0x22>
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e05e      	b.n	80034d4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2221      	movs	r2, #33	@ 0x21
 8003438:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	2b00      	cmp	r3, #0
 8003440:	d027      	beq.n	8003492 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	4a25      	ldr	r2, [pc, #148]	@ (80034dc <HAL_UART_Transmit_DMA+0xec>)
 8003448:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	4a24      	ldr	r2, [pc, #144]	@ (80034e0 <HAL_UART_Transmit_DMA+0xf0>)
 8003450:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	4a23      	ldr	r2, [pc, #140]	@ (80034e4 <HAL_UART_Transmit_DMA+0xf4>)
 8003458:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345e:	2200      	movs	r2, #0
 8003460:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	4619      	mov	r1, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3328      	adds	r3, #40	@ 0x28
 8003472:	461a      	mov	r2, r3
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	f7fd ffa9 	bl	80013cc <HAL_DMA_Start_IT>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2210      	movs	r2, #16
 8003484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e020      	b.n	80034d4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	613b      	str	r3, [r7, #16]
   return(result);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3308      	adds	r3, #8
 80034b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ba:	623a      	str	r2, [r7, #32]
 80034bc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034be:	69f9      	ldr	r1, [r7, #28]
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	e841 2300 	strex	r3, r2, [r1]
 80034c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1e5      	bne.n	800349a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3728      	adds	r7, #40	@ 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	08004831 	.word	0x08004831
 80034e0:	080048c7 	.word	0x080048c7
 80034e4:	08004a49 	.word	0x08004a49

080034e8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08e      	sub	sp, #56	@ 0x38
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003504:	637b      	str	r3, [r7, #52]	@ 0x34
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003510:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e6      	bne.n	80034f0 <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b80      	cmp	r3, #128	@ 0x80
 800352e:	d137      	bne.n	80035a0 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3308      	adds	r3, #8
 8003536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003550:	61ba      	str	r2, [r7, #24]
 8003552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	6979      	ldr	r1, [r7, #20]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	613b      	str	r3, [r7, #16]
   return(result);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e5      	bne.n	8003530 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003568:	2b00      	cmp	r3, #0
 800356a:	d019      	beq.n	80035a0 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	2200      	movs	r2, #0
 8003572:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd ff87 	bl	800148c <HAL_DMA_Abort>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe f99b 	bl	80018c4 <HAL_DMA_GetError>
 800358e:	4603      	mov	r3, r0
 8003590:	2b20      	cmp	r3, #32
 8003592:	d105      	bne.n	80035a0 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2210      	movs	r2, #16
 8003598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e007      	b.n	80035b0 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3738      	adds	r7, #56	@ 0x38
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b09a      	sub	sp, #104	@ 0x68
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80035ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035de:	657b      	str	r3, [r7, #84]	@ 0x54
 80035e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80035e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80035ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e6      	bne.n	80035c0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3308      	adds	r3, #8
 80035f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	663b      	str	r3, [r7, #96]	@ 0x60
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3308      	adds	r3, #8
 8003610:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003612:	643a      	str	r2, [r7, #64]	@ 0x40
 8003614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e5      	bne.n	80035f2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362a:	2b01      	cmp	r3, #1
 800362c:	d118      	bne.n	8003660 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	61fb      	str	r3, [r7, #28]
   return(result);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f023 0310 	bic.w	r3, r3, #16
 8003642:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800364c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800364e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e6      	bne.n	800362e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366a:	2b40      	cmp	r3, #64	@ 0x40
 800366c:	d137      	bne.n	80036de <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3308      	adds	r3, #8
 8003674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	60bb      	str	r3, [r7, #8]
   return(result);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3308      	adds	r3, #8
 800368c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800368e:	61ba      	str	r2, [r7, #24]
 8003690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6979      	ldr	r1, [r7, #20]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	613b      	str	r3, [r7, #16]
   return(result);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e5      	bne.n	800366e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d019      	beq.n	80036de <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ae:	2200      	movs	r2, #0
 80036b0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fee8 	bl	800148c <HAL_DMA_Abort>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe f8fc 	bl	80018c4 <HAL_DMA_GetError>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d105      	bne.n	80036de <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2210      	movs	r2, #16
 80036d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e017      	b.n	800370e <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	220f      	movs	r2, #15
 80036ec:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0208 	orr.w	r2, r2, #8
 80036fc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3768      	adds	r7, #104	@ 0x68
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b0ba      	sub	sp, #232	@ 0xe8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800373e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003742:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003746:	4013      	ands	r3, r2
 8003748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800374c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d115      	bne.n	8003780 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00f      	beq.n	8003780 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 82ac 	beq.w	8003cce <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
      }
      return;
 800377e:	e2a6      	b.n	8003cce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8117 	beq.w	80039b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800378a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003796:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800379a:	4b85      	ldr	r3, [pc, #532]	@ (80039b0 <HAL_UART_IRQHandler+0x298>)
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 810a 	beq.w	80039b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d011      	beq.n	80037d4 <HAL_UART_IRQHandler+0xbc>
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00b      	beq.n	80037d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_UART_IRQHandler+0xec>
 80037e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2202      	movs	r2, #2
 80037f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fa:	f043 0204 	orr.w	r2, r3, #4
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d011      	beq.n	8003834 <HAL_UART_IRQHandler+0x11c>
 8003810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2204      	movs	r2, #4
 8003822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800382a:	f043 0202 	orr.w	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d017      	beq.n	8003870 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800384c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003850:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2208      	movs	r2, #8
 800385e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003866:	f043 0208 	orr.w	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <HAL_UART_IRQHandler+0x18a>
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003880:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8212 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ea:	2b40      	cmp	r3, #64	@ 0x40
 80038ec:	d005      	beq.n	80038fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d04f      	beq.n	800399a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 ff34 	bl	8004768 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b40      	cmp	r3, #64	@ 0x40
 800390c:	d141      	bne.n	8003992 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3308      	adds	r3, #8
 8003914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003924:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800392c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800393a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800393e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1d9      	bne.n	800390e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395e:	2b00      	cmp	r3, #0
 8003960:	d013      	beq.n	800398a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003966:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <HAL_UART_IRQHandler+0x29c>)
 8003968:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fdfc 	bl	800156c <HAL_DMA_Abort_IT>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d017      	beq.n	80039aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003984:	4610      	mov	r0, r2
 8003986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	e00f      	b.n	80039aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f9d4 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	e00b      	b.n	80039aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f9d0 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e007      	b.n	80039aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f9cc 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80039a8:	e193      	b.n	8003cd2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039aa:	bf00      	nop
    return;
 80039ac:	e191      	b.n	8003cd2 <HAL_UART_IRQHandler+0x5ba>
 80039ae:	bf00      	nop
 80039b0:	04000120 	.word	0x04000120
 80039b4:	08004ac7 	.word	0x08004ac7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039bc:	2b01      	cmp	r3, #1
 80039be:	f040 814c 	bne.w	8003c5a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8145 	beq.w	8003c5a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 813e 	beq.w	8003c5a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2210      	movs	r2, #16
 80039e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b40      	cmp	r3, #64	@ 0x40
 80039f2:	f040 80b6 	bne.w	8003b62 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8165 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a16:	429a      	cmp	r2, r3
 8003a18:	f080 815d 	bcs.w	8003cd6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a30:	f000 8086 	beq.w	8003b40 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1da      	bne.n	8003a34 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3308      	adds	r3, #8
 8003a84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003aa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003aa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003aaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e1      	bne.n	8003a7e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003aca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ade:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ae4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e3      	bne.n	8003aba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b10:	f023 0310 	bic.w	r3, r3, #16
 8003b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e4      	bne.n	8003b00 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd fca6 	bl	800148c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fc fe0c 	bl	8000778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b60:	e0b9      	b.n	8003cd6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80ab 	beq.w	8003cda <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a6 	beq.w	8003cda <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e4      	bne.n	8003b8e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3308      	adds	r3, #8
 8003be4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003be8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e3      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f023 0310 	bic.w	r3, r3, #16
 8003c24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e4      	bne.n	8003c10 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fc fd90 	bl	8000778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c58:	e03f      	b.n	8003cda <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00e      	beq.n	8003c84 <HAL_UART_IRQHandler+0x56c>
 8003c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f865 	bl	8003d4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c82:	e02d      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00e      	beq.n	8003cae <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01c      	beq.n	8003cde <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
    }
    return;
 8003cac:	e017      	b.n	8003cde <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d012      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
 8003cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 ff13 	bl	8004af2 <UART_EndTransmit_IT>
    return;
 8003ccc:	e008      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003cce:	bf00      	nop
 8003cd0:	e006      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003cd2:	bf00      	nop
 8003cd4:	e004      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003cde:	bf00      	nop
  }

}
 8003ce0:	37e8      	adds	r7, #232	@ 0xe8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop

08003ce8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d6c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d74:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4ba6      	ldr	r3, [pc, #664]	@ (8004068 <UART_SetConfig+0x2c4>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a94      	ldr	r2, [pc, #592]	@ (800406c <UART_SetConfig+0x2c8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d120      	bne.n	8003e62 <UART_SetConfig+0xbe>
 8003e20:	4b93      	ldr	r3, [pc, #588]	@ (8004070 <UART_SetConfig+0x2cc>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d816      	bhi.n	8003e5c <UART_SetConfig+0xb8>
 8003e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <UART_SetConfig+0x90>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e51 	.word	0x08003e51
 8003e3c:	08003e4b 	.word	0x08003e4b
 8003e40:	08003e57 	.word	0x08003e57
 8003e44:	2301      	movs	r3, #1
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e150      	b.n	80040ec <UART_SetConfig+0x348>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e14d      	b.n	80040ec <UART_SetConfig+0x348>
 8003e50:	2304      	movs	r3, #4
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e14a      	b.n	80040ec <UART_SetConfig+0x348>
 8003e56:	2308      	movs	r3, #8
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e147      	b.n	80040ec <UART_SetConfig+0x348>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e144      	b.n	80040ec <UART_SetConfig+0x348>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a83      	ldr	r2, [pc, #524]	@ (8004074 <UART_SetConfig+0x2d0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d132      	bne.n	8003ed2 <UART_SetConfig+0x12e>
 8003e6c:	4b80      	ldr	r3, [pc, #512]	@ (8004070 <UART_SetConfig+0x2cc>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d828      	bhi.n	8003ecc <UART_SetConfig+0x128>
 8003e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e80 <UART_SetConfig+0xdc>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003eb5 	.word	0x08003eb5
 8003e84:	08003ecd 	.word	0x08003ecd
 8003e88:	08003ecd 	.word	0x08003ecd
 8003e8c:	08003ecd 	.word	0x08003ecd
 8003e90:	08003ec1 	.word	0x08003ec1
 8003e94:	08003ecd 	.word	0x08003ecd
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003ecd 	.word	0x08003ecd
 8003ea0:	08003ebb 	.word	0x08003ebb
 8003ea4:	08003ecd 	.word	0x08003ecd
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ecd 	.word	0x08003ecd
 8003eb0:	08003ec7 	.word	0x08003ec7
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e118      	b.n	80040ec <UART_SetConfig+0x348>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e115      	b.n	80040ec <UART_SetConfig+0x348>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e112      	b.n	80040ec <UART_SetConfig+0x348>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e10f      	b.n	80040ec <UART_SetConfig+0x348>
 8003ecc:	2310      	movs	r3, #16
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e10c      	b.n	80040ec <UART_SetConfig+0x348>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a68      	ldr	r2, [pc, #416]	@ (8004078 <UART_SetConfig+0x2d4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d120      	bne.n	8003f1e <UART_SetConfig+0x17a>
 8003edc:	4b64      	ldr	r3, [pc, #400]	@ (8004070 <UART_SetConfig+0x2cc>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ee6:	2b30      	cmp	r3, #48	@ 0x30
 8003ee8:	d013      	beq.n	8003f12 <UART_SetConfig+0x16e>
 8003eea:	2b30      	cmp	r3, #48	@ 0x30
 8003eec:	d814      	bhi.n	8003f18 <UART_SetConfig+0x174>
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d009      	beq.n	8003f06 <UART_SetConfig+0x162>
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d810      	bhi.n	8003f18 <UART_SetConfig+0x174>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <UART_SetConfig+0x15c>
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d006      	beq.n	8003f0c <UART_SetConfig+0x168>
 8003efe:	e00b      	b.n	8003f18 <UART_SetConfig+0x174>
 8003f00:	2300      	movs	r3, #0
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e0f2      	b.n	80040ec <UART_SetConfig+0x348>
 8003f06:	2302      	movs	r3, #2
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e0ef      	b.n	80040ec <UART_SetConfig+0x348>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e0ec      	b.n	80040ec <UART_SetConfig+0x348>
 8003f12:	2308      	movs	r3, #8
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	e0e9      	b.n	80040ec <UART_SetConfig+0x348>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e0e6      	b.n	80040ec <UART_SetConfig+0x348>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a56      	ldr	r2, [pc, #344]	@ (800407c <UART_SetConfig+0x2d8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d120      	bne.n	8003f6a <UART_SetConfig+0x1c6>
 8003f28:	4b51      	ldr	r3, [pc, #324]	@ (8004070 <UART_SetConfig+0x2cc>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f34:	d013      	beq.n	8003f5e <UART_SetConfig+0x1ba>
 8003f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f38:	d814      	bhi.n	8003f64 <UART_SetConfig+0x1c0>
 8003f3a:	2b80      	cmp	r3, #128	@ 0x80
 8003f3c:	d009      	beq.n	8003f52 <UART_SetConfig+0x1ae>
 8003f3e:	2b80      	cmp	r3, #128	@ 0x80
 8003f40:	d810      	bhi.n	8003f64 <UART_SetConfig+0x1c0>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <UART_SetConfig+0x1a8>
 8003f46:	2b40      	cmp	r3, #64	@ 0x40
 8003f48:	d006      	beq.n	8003f58 <UART_SetConfig+0x1b4>
 8003f4a:	e00b      	b.n	8003f64 <UART_SetConfig+0x1c0>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e0cc      	b.n	80040ec <UART_SetConfig+0x348>
 8003f52:	2302      	movs	r3, #2
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e0c9      	b.n	80040ec <UART_SetConfig+0x348>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e0c6      	b.n	80040ec <UART_SetConfig+0x348>
 8003f5e:	2308      	movs	r3, #8
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e0c3      	b.n	80040ec <UART_SetConfig+0x348>
 8003f64:	2310      	movs	r3, #16
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e0c0      	b.n	80040ec <UART_SetConfig+0x348>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a44      	ldr	r2, [pc, #272]	@ (8004080 <UART_SetConfig+0x2dc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d125      	bne.n	8003fc0 <UART_SetConfig+0x21c>
 8003f74:	4b3e      	ldr	r3, [pc, #248]	@ (8004070 <UART_SetConfig+0x2cc>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f82:	d017      	beq.n	8003fb4 <UART_SetConfig+0x210>
 8003f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f88:	d817      	bhi.n	8003fba <UART_SetConfig+0x216>
 8003f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f8e:	d00b      	beq.n	8003fa8 <UART_SetConfig+0x204>
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f94:	d811      	bhi.n	8003fba <UART_SetConfig+0x216>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <UART_SetConfig+0x1fe>
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f9e:	d006      	beq.n	8003fae <UART_SetConfig+0x20a>
 8003fa0:	e00b      	b.n	8003fba <UART_SetConfig+0x216>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e0a1      	b.n	80040ec <UART_SetConfig+0x348>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e09e      	b.n	80040ec <UART_SetConfig+0x348>
 8003fae:	2304      	movs	r3, #4
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e09b      	b.n	80040ec <UART_SetConfig+0x348>
 8003fb4:	2308      	movs	r3, #8
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e098      	b.n	80040ec <UART_SetConfig+0x348>
 8003fba:	2310      	movs	r3, #16
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e095      	b.n	80040ec <UART_SetConfig+0x348>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8004084 <UART_SetConfig+0x2e0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d125      	bne.n	8004016 <UART_SetConfig+0x272>
 8003fca:	4b29      	ldr	r3, [pc, #164]	@ (8004070 <UART_SetConfig+0x2cc>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fd8:	d017      	beq.n	800400a <UART_SetConfig+0x266>
 8003fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fde:	d817      	bhi.n	8004010 <UART_SetConfig+0x26c>
 8003fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe4:	d00b      	beq.n	8003ffe <UART_SetConfig+0x25a>
 8003fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fea:	d811      	bhi.n	8004010 <UART_SetConfig+0x26c>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <UART_SetConfig+0x254>
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff4:	d006      	beq.n	8004004 <UART_SetConfig+0x260>
 8003ff6:	e00b      	b.n	8004010 <UART_SetConfig+0x26c>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e076      	b.n	80040ec <UART_SetConfig+0x348>
 8003ffe:	2302      	movs	r3, #2
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e073      	b.n	80040ec <UART_SetConfig+0x348>
 8004004:	2304      	movs	r3, #4
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e070      	b.n	80040ec <UART_SetConfig+0x348>
 800400a:	2308      	movs	r3, #8
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e06d      	b.n	80040ec <UART_SetConfig+0x348>
 8004010:	2310      	movs	r3, #16
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e06a      	b.n	80040ec <UART_SetConfig+0x348>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1b      	ldr	r2, [pc, #108]	@ (8004088 <UART_SetConfig+0x2e4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d138      	bne.n	8004092 <UART_SetConfig+0x2ee>
 8004020:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <UART_SetConfig+0x2cc>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800402a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800402e:	d017      	beq.n	8004060 <UART_SetConfig+0x2bc>
 8004030:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004034:	d82a      	bhi.n	800408c <UART_SetConfig+0x2e8>
 8004036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800403a:	d00b      	beq.n	8004054 <UART_SetConfig+0x2b0>
 800403c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004040:	d824      	bhi.n	800408c <UART_SetConfig+0x2e8>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <UART_SetConfig+0x2aa>
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404a:	d006      	beq.n	800405a <UART_SetConfig+0x2b6>
 800404c:	e01e      	b.n	800408c <UART_SetConfig+0x2e8>
 800404e:	2300      	movs	r3, #0
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e04b      	b.n	80040ec <UART_SetConfig+0x348>
 8004054:	2302      	movs	r3, #2
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e048      	b.n	80040ec <UART_SetConfig+0x348>
 800405a:	2304      	movs	r3, #4
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e045      	b.n	80040ec <UART_SetConfig+0x348>
 8004060:	2308      	movs	r3, #8
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e042      	b.n	80040ec <UART_SetConfig+0x348>
 8004066:	bf00      	nop
 8004068:	efff69f3 	.word	0xefff69f3
 800406c:	40011000 	.word	0x40011000
 8004070:	40023800 	.word	0x40023800
 8004074:	40004400 	.word	0x40004400
 8004078:	40004800 	.word	0x40004800
 800407c:	40004c00 	.word	0x40004c00
 8004080:	40005000 	.word	0x40005000
 8004084:	40011400 	.word	0x40011400
 8004088:	40007800 	.word	0x40007800
 800408c:	2310      	movs	r3, #16
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e02c      	b.n	80040ec <UART_SetConfig+0x348>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a72      	ldr	r2, [pc, #456]	@ (8004260 <UART_SetConfig+0x4bc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d125      	bne.n	80040e8 <UART_SetConfig+0x344>
 800409c:	4b71      	ldr	r3, [pc, #452]	@ (8004264 <UART_SetConfig+0x4c0>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040a6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040aa:	d017      	beq.n	80040dc <UART_SetConfig+0x338>
 80040ac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040b0:	d817      	bhi.n	80040e2 <UART_SetConfig+0x33e>
 80040b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b6:	d00b      	beq.n	80040d0 <UART_SetConfig+0x32c>
 80040b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040bc:	d811      	bhi.n	80040e2 <UART_SetConfig+0x33e>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <UART_SetConfig+0x326>
 80040c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040c6:	d006      	beq.n	80040d6 <UART_SetConfig+0x332>
 80040c8:	e00b      	b.n	80040e2 <UART_SetConfig+0x33e>
 80040ca:	2300      	movs	r3, #0
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e00d      	b.n	80040ec <UART_SetConfig+0x348>
 80040d0:	2302      	movs	r3, #2
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e00a      	b.n	80040ec <UART_SetConfig+0x348>
 80040d6:	2304      	movs	r3, #4
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e007      	b.n	80040ec <UART_SetConfig+0x348>
 80040dc:	2308      	movs	r3, #8
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e004      	b.n	80040ec <UART_SetConfig+0x348>
 80040e2:	2310      	movs	r3, #16
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e001      	b.n	80040ec <UART_SetConfig+0x348>
 80040e8:	2310      	movs	r3, #16
 80040ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f4:	d15b      	bne.n	80041ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d828      	bhi.n	800414e <UART_SetConfig+0x3aa>
 80040fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004104 <UART_SetConfig+0x360>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004129 	.word	0x08004129
 8004108:	08004131 	.word	0x08004131
 800410c:	08004139 	.word	0x08004139
 8004110:	0800414f 	.word	0x0800414f
 8004114:	0800413f 	.word	0x0800413f
 8004118:	0800414f 	.word	0x0800414f
 800411c:	0800414f 	.word	0x0800414f
 8004120:	0800414f 	.word	0x0800414f
 8004124:	08004147 	.word	0x08004147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004128:	f7fe fcc4 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 800412c:	61b8      	str	r0, [r7, #24]
        break;
 800412e:	e013      	b.n	8004158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7fe fcd4 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 8004134:	61b8      	str	r0, [r7, #24]
        break;
 8004136:	e00f      	b.n	8004158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004138:	4b4b      	ldr	r3, [pc, #300]	@ (8004268 <UART_SetConfig+0x4c4>)
 800413a:	61bb      	str	r3, [r7, #24]
        break;
 800413c:	e00c      	b.n	8004158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413e:	f7fe fba7 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8004142:	61b8      	str	r0, [r7, #24]
        break;
 8004144:	e008      	b.n	8004158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414a:	61bb      	str	r3, [r7, #24]
        break;
 800414c:	e004      	b.n	8004158 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	77bb      	strb	r3, [r7, #30]
        break;
 8004156:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d074      	beq.n	8004248 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	005a      	lsls	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	441a      	add	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d916      	bls.n	80041a8 <UART_SetConfig+0x404>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004180:	d212      	bcs.n	80041a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f023 030f 	bic.w	r3, r3, #15
 800418a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	b29b      	uxth	r3, r3
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	b29a      	uxth	r2, r3
 8004198:	89fb      	ldrh	r3, [r7, #14]
 800419a:	4313      	orrs	r3, r2
 800419c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	89fa      	ldrh	r2, [r7, #14]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	e04f      	b.n	8004248 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	77bb      	strb	r3, [r7, #30]
 80041ac:	e04c      	b.n	8004248 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ae:	7ffb      	ldrb	r3, [r7, #31]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d828      	bhi.n	8004206 <UART_SetConfig+0x462>
 80041b4:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <UART_SetConfig+0x418>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	080041f1 	.word	0x080041f1
 80041c8:	08004207 	.word	0x08004207
 80041cc:	080041f7 	.word	0x080041f7
 80041d0:	08004207 	.word	0x08004207
 80041d4:	08004207 	.word	0x08004207
 80041d8:	08004207 	.word	0x08004207
 80041dc:	080041ff 	.word	0x080041ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e0:	f7fe fc68 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 80041e4:	61b8      	str	r0, [r7, #24]
        break;
 80041e6:	e013      	b.n	8004210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e8:	f7fe fc78 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 80041ec:	61b8      	str	r0, [r7, #24]
        break;
 80041ee:	e00f      	b.n	8004210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <UART_SetConfig+0x4c4>)
 80041f2:	61bb      	str	r3, [r7, #24]
        break;
 80041f4:	e00c      	b.n	8004210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f6:	f7fe fb4b 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 80041fa:	61b8      	str	r0, [r7, #24]
        break;
 80041fc:	e008      	b.n	8004210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004202:	61bb      	str	r3, [r7, #24]
        break;
 8004204:	e004      	b.n	8004210 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	77bb      	strb	r3, [r7, #30]
        break;
 800420e:	bf00      	nop
    }

    if (pclk != 0U)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d018      	beq.n	8004248 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085a      	lsrs	r2, r3, #1
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	441a      	add	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b0f      	cmp	r3, #15
 800422e:	d909      	bls.n	8004244 <UART_SetConfig+0x4a0>
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004236:	d205      	bcs.n	8004244 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e001      	b.n	8004248 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004254:	7fbb      	ldrb	r3, [r7, #30]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40007c00 	.word	0x40007c00
 8004264:	40023800 	.word	0x40023800
 8004268:	00f42400 	.word	0x00f42400

0800426c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01a      	beq.n	8004382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800436a:	d10a      	bne.n	8004382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b098      	sub	sp, #96	@ 0x60
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c0:	f7fc fe14 	bl	8000fec <HAL_GetTick>
 80043c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d12e      	bne.n	8004432 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f88c 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d021      	beq.n	8004432 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004402:	653b      	str	r3, [r7, #80]	@ 0x50
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
 800440e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800441a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e062      	b.n	80044f8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b04      	cmp	r3, #4
 800443e:	d149      	bne.n	80044d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004448:	2200      	movs	r2, #0
 800444a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f856 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03c      	beq.n	80044d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	623b      	str	r3, [r7, #32]
   return(result);
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004478:	633b      	str	r3, [r7, #48]	@ 0x30
 800447a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800447e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e6      	bne.n	800445a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	60fb      	str	r3, [r7, #12]
   return(result);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ac:	61fa      	str	r2, [r7, #28]
 80044ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	617b      	str	r3, [r7, #20]
   return(result);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e011      	b.n	80044f8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3758      	adds	r7, #88	@ 0x58
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	e04f      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d04b      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fc fd67 	bl	8000fec <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <UART_WaitOnFlagUntilTimeout+0x30>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e04e      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d037      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b80      	cmp	r3, #128	@ 0x80
 8004546:	d034      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b40      	cmp	r3, #64	@ 0x40
 800454c:	d031      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b08      	cmp	r3, #8
 800455a:	d110      	bne.n	800457e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2208      	movs	r2, #8
 8004562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f8ff 	bl	8004768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2208      	movs	r2, #8
 800456e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e029      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458c:	d111      	bne.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f8e5 	bl	8004768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e00f      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d0a0      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b096      	sub	sp, #88	@ 0x58
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2222      	movs	r2, #34	@ 0x22
 8004604:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800460c:	2b00      	cmp	r3, #0
 800460e:	d028      	beq.n	8004662 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004614:	4a3e      	ldr	r2, [pc, #248]	@ (8004710 <UART_Start_Receive_DMA+0x134>)
 8004616:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461c:	4a3d      	ldr	r2, [pc, #244]	@ (8004714 <UART_Start_Receive_DMA+0x138>)
 800461e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004624:	4a3c      	ldr	r2, [pc, #240]	@ (8004718 <UART_Start_Receive_DMA+0x13c>)
 8004626:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462c:	2200      	movs	r2, #0
 800462e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3324      	adds	r3, #36	@ 0x24
 800463a:	4619      	mov	r1, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004640:	461a      	mov	r2, r3
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	f7fc fec2 	bl	80013cc <HAL_DMA_Start_IT>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2210      	movs	r2, #16
 8004652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e051      	b.n	8004706 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d018      	beq.n	800469c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800467e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800468a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800468e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80046bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80046ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3308      	adds	r3, #8
 80046d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	613b      	str	r3, [r7, #16]
   return(result);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3308      	adds	r3, #8
 80046ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046f0:	623a      	str	r2, [r7, #32]
 80046f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	69f9      	ldr	r1, [r7, #28]
 80046f6:	6a3a      	ldr	r2, [r7, #32]
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e5      	bne.n	80046d0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3758      	adds	r7, #88	@ 0x58
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	080048e3 	.word	0x080048e3
 8004714:	08004a0b 	.word	0x08004a0b
 8004718:	08004a49 	.word	0x08004a49

0800471c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	@ 0x24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	60bb      	str	r3, [r7, #8]
   return(result);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6979      	ldr	r1, [r7, #20]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	613b      	str	r3, [r7, #16]
   return(result);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e6      	bne.n	8004724 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800475c:	bf00      	nop
 800475e:	3724      	adds	r7, #36	@ 0x24
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b095      	sub	sp, #84	@ 0x54
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800478e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004790:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e6      	bne.n	8004770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3308      	adds	r3, #8
 80047c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d118      	bne.n	8004810 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6979      	ldr	r1, [r7, #20]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	613b      	str	r3, [r7, #16]
   return(result);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e6      	bne.n	80047de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004824:	bf00      	nop
 8004826:	3754      	adds	r7, #84	@ 0x54
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b090      	sub	sp, #64	@ 0x40
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004846:	d037      	beq.n	80048b8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8004848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800484a:	2200      	movs	r2, #0
 800484c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	623b      	str	r3, [r7, #32]
   return(result);
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004866:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004870:	633a      	str	r2, [r7, #48]	@ 0x30
 8004872:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e5      	bne.n	8004850 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	60fb      	str	r3, [r7, #12]
   return(result);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004898:	637b      	str	r3, [r7, #52]	@ 0x34
 800489a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	69b9      	ldr	r1, [r7, #24]
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	617b      	str	r3, [r7, #20]
   return(result);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e6      	bne.n	8004884 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048b6:	e002      	b.n	80048be <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80048b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80048ba:	f7ff fa15 	bl	8003ce8 <HAL_UART_TxCpltCallback>
}
 80048be:	bf00      	nop
 80048c0:	3740      	adds	r7, #64	@ 0x40
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff fa11 	bl	8003cfc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b09c      	sub	sp, #112	@ 0x70
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f8:	d071      	beq.n	80049de <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80048fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004916:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004920:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004922:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004926:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800492e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e6      	bne.n	8004902 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	667b      	str	r3, [r7, #100]	@ 0x64
 800494c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3308      	adds	r3, #8
 8004952:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004954:	647a      	str	r2, [r7, #68]	@ 0x44
 8004956:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800495a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e5      	bne.n	8004934 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3308      	adds	r3, #8
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	623b      	str	r3, [r7, #32]
   return(result);
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004988:	633a      	str	r2, [r7, #48]	@ 0x30
 800498a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800498e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800499c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800499e:	2220      	movs	r2, #32
 80049a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d118      	bne.n	80049de <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f023 0310 	bic.w	r3, r3, #16
 80049c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	69b9      	ldr	r1, [r7, #24]
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	617b      	str	r3, [r7, #20]
   return(result);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049e0:	2200      	movs	r2, #0
 80049e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80049f2:	4619      	mov	r1, r3
 80049f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80049f6:	f7fb febf 	bl	8000778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049fa:	e002      	b.n	8004a02 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80049fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80049fe:	f7ff f987 	bl	8003d10 <HAL_UART_RxCpltCallback>
}
 8004a02:	bf00      	nop
 8004a04:	3770      	adds	r7, #112	@ 0x70
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d109      	bne.n	8004a3a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	4619      	mov	r1, r3
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7fb fea0 	bl	8000778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a38:	e002      	b.n	8004a40 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff f972 	bl	8003d24 <HAL_UART_RxHalfCpltCallback>
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6e:	2b80      	cmp	r3, #128	@ 0x80
 8004a70:	d109      	bne.n	8004a86 <UART_DMAError+0x3e>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b21      	cmp	r3, #33	@ 0x21
 8004a76:	d106      	bne.n	8004a86 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004a80:	6978      	ldr	r0, [r7, #20]
 8004a82:	f7ff fe4b 	bl	800471c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a90:	2b40      	cmp	r3, #64	@ 0x40
 8004a92:	d109      	bne.n	8004aa8 <UART_DMAError+0x60>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b22      	cmp	r3, #34	@ 0x22
 8004a98:	d106      	bne.n	8004aa8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004aa2:	6978      	ldr	r0, [r7, #20]
 8004aa4:	f7ff fe60 	bl	8004768 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aae:	f043 0210 	orr.w	r2, r3, #16
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ab8:	6978      	ldr	r0, [r7, #20]
 8004aba:	f7ff f93d 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004abe:	bf00      	nop
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff f927 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b088      	sub	sp, #32
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	613b      	str	r3, [r7, #16]
   return(result);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e6      	bne.n	8004afa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff f8d5 	bl	8003ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b3e:	bf00      	nop
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b08c      	sub	sp, #48	@ 0x30
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	4613      	mov	r3, r2
 8004b52:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d142      	bne.n	8004be4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e03b      	b.n	8004be6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff fd2b 	bl	80045dc <UART_Start_Receive_DMA>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d124      	bne.n	8004bde <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d11d      	bne.n	8004bd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f043 0310 	orr.w	r3, r3, #16
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6a39      	ldr	r1, [r7, #32]
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e6      	bne.n	8004ba4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004bd6:	e002      	b.n	8004bde <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004bde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004be2:	e000      	b.n	8004be6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3730      	adds	r7, #48	@ 0x30
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	f107 001c 	add.w	r0, r7, #28
 8004bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d121      	bne.n	8004c4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	4b21      	ldr	r3, [pc, #132]	@ (8004ca0 <USB_CoreInit+0xb0>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d105      	bne.n	8004c42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa92 	bl	800516c <USB_CoreReset>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]
 8004c4c:	e010      	b.n	8004c70 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa86 	bl	800516c <USB_CoreReset>
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004c70:	7fbb      	ldrb	r3, [r7, #30]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d10b      	bne.n	8004c8e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f043 0206 	orr.w	r2, r3, #6
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c9a:	b004      	add	sp, #16
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	ffbdffbf 	.word	0xffbdffbf

08004ca4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f023 0201 	bic.w	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d115      	bne.n	8004d14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cf4:	200a      	movs	r0, #10
 8004cf6:	f7fc f985 	bl	8001004 <HAL_Delay>
      ms += 10U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	330a      	adds	r3, #10
 8004cfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa25 	bl	8005150 <USB_GetMode>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d01e      	beq.n	8004d4a <USB_SetCurrentMode+0x84>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d10:	d9f0      	bls.n	8004cf4 <USB_SetCurrentMode+0x2e>
 8004d12:	e01a      	b.n	8004d4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d115      	bne.n	8004d46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d26:	200a      	movs	r0, #10
 8004d28:	f7fc f96c 	bl	8001004 <HAL_Delay>
      ms += 10U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	330a      	adds	r3, #10
 8004d30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fa0c 	bl	8005150 <USB_GetMode>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <USB_SetCurrentMode+0x84>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d42:	d9f0      	bls.n	8004d26 <USB_SetCurrentMode+0x60>
 8004d44:	e001      	b.n	8004d4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e005      	b.n	8004d56 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d4e:	d101      	bne.n	8004d54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d60:	b084      	sub	sp, #16
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b086      	sub	sp, #24
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	e009      	b.n	8004d94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	3340      	adds	r3, #64	@ 0x40
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	3301      	adds	r3, #1
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b0e      	cmp	r3, #14
 8004d98:	d9f2      	bls.n	8004d80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d11c      	bne.n	8004ddc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004db0:	f043 0302 	orr.w	r3, r3, #2
 8004db4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	e005      	b.n	8004de8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004dee:	461a      	mov	r2, r3
 8004df0:	2300      	movs	r3, #0
 8004df2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004df4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10d      	bne.n	8004e18 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e04:	2100      	movs	r1, #0
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f968 	bl	80050dc <USB_SetDevSpeed>
 8004e0c:	e008      	b.n	8004e20 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e0e:	2101      	movs	r1, #1
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f963 	bl	80050dc <USB_SetDevSpeed>
 8004e16:	e003      	b.n	8004e20 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e18:	2103      	movs	r1, #3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f95e 	bl	80050dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e20:	2110      	movs	r1, #16
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f8fa 	bl	800501c <USB_FlushTxFifo>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f924 	bl	8005080 <USB_FlushRxFifo>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e54:	461a      	mov	r2, r3
 8004e56:	2300      	movs	r3, #0
 8004e58:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e60:	461a      	mov	r2, r3
 8004e62:	2300      	movs	r3, #0
 8004e64:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e043      	b.n	8004ef4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e82:	d118      	bne.n	8004eb6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e96:	461a      	mov	r2, r3
 8004e98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e013      	b.n	8004ec8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eac:	461a      	mov	r2, r3
 8004eae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	e008      	b.n	8004ec8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004eec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ef8:	461a      	mov	r2, r3
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d3b5      	bcc.n	8004e6c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e043      	b.n	8004f8e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f1c:	d118      	bne.n	8004f50 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f30:	461a      	mov	r2, r3
 8004f32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	e013      	b.n	8004f62 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f46:	461a      	mov	r2, r3
 8004f48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e008      	b.n	8004f62 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f80:	461a      	mov	r2, r3
 8004f82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f92:	461a      	mov	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d3b5      	bcc.n	8004f06 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004fba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f043 0210 	orr.w	r2, r3, #16
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699a      	ldr	r2, [r3, #24]
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <USB_DevInit+0x2b4>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fdc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f043 0208 	orr.w	r2, r3, #8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ff0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d105      	bne.n	8005004 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699a      	ldr	r2, [r3, #24]
 8004ffc:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <USB_DevInit+0x2b8>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005004:	7dfb      	ldrb	r3, [r7, #23]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005010:	b004      	add	sp, #16
 8005012:	4770      	bx	lr
 8005014:	803c3800 	.word	0x803c3800
 8005018:	40000004 	.word	0x40000004

0800501c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005036:	d901      	bls.n	800503c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e01b      	b.n	8005074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	daf2      	bge.n	800502a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	019b      	lsls	r3, r3, #6
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005060:	d901      	bls.n	8005066 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e006      	b.n	8005074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b20      	cmp	r3, #32
 8005070:	d0f0      	beq.n	8005054 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3301      	adds	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005098:	d901      	bls.n	800509e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e018      	b.n	80050d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	daf2      	bge.n	800508c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2210      	movs	r2, #16
 80050ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050bc:	d901      	bls.n	80050c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e006      	b.n	80050d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d0f0      	beq.n	80050b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050fc:	4313      	orrs	r3, r2
 80050fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005128:	f023 0303 	bic.w	r3, r3, #3
 800512c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800513c:	f043 0302 	orr.w	r3, r3, #2
 8005140:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f003 0301 	and.w	r3, r3, #1
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005184:	d901      	bls.n	800518a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e01b      	b.n	80051c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	daf2      	bge.n	8005178 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f043 0201 	orr.w	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3301      	adds	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051ae:	d901      	bls.n	80051b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e006      	b.n	80051c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d0f0      	beq.n	80051a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fb34 	bl	8005848 <malloc>
 80051e0:	4603      	mov	r3, r0
 80051e2:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 80051e4:	68fb      	ldr	r3, [r7, #12]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <ATC_Free+0x26>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fb25 	bl	8005858 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
  }
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8a9b      	ldrh	r3, [r3, #20]
 8005232:	461a      	mov	r2, r3
 8005234:	2100      	movs	r1, #0
 8005236:	f000 fbc5 	bl	80059c4 <memset>
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b086      	sub	sp, #24
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	4613      	mov	r3, r2
 800524e:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8005250:	2300      	movs	r3, #0
 8005252:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe f8c4 	bl	80033f0 <HAL_UART_Transmit_DMA>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
 8005272:	e000      	b.n	8005276 <ATC_TxRaw+0x34>
      break;
 8005274:	bf00      	nop

  } while (0);

  return answer;
 8005276:	7dfb      	ldrb	r3, [r7, #23]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe fd67 	bl	8003d60 <HAL_UART_GetState>
 8005292:	4603      	mov	r3, r0
 8005294:	2b21      	cmp	r3, #33	@ 0x21
 8005296:	d007      	beq.n	80052a8 <ATC_TxBusy+0x28>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe fd5f 	bl	8003d60 <HAL_UART_GetState>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b23      	cmp	r3, #35	@ 0x23
 80052a6:	d101      	bne.n	80052ac <ATC_TxBusy+0x2c>
  {
    return true;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 80052ac:	2300      	movs	r3, #0
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80052c0:	2300      	movs	r3, #0
 80052c2:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 80052c4:	f7fb fe92 	bl	8000fec <HAL_GetTick>
 80052c8:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 80052ca:	2001      	movs	r0, #1
 80052cc:	f000 fab1 	bl	8005832 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fd43 	bl	8003d60 <HAL_UART_GetState>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b22      	cmp	r3, #34	@ 0x22
 80052de:	d007      	beq.n	80052f0 <ATC_TxWait+0x3a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe fd3b 	bl	8003d60 <HAL_UART_GetState>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d102      	bne.n	80052f6 <ATC_TxWait+0x40>
    {
      answer = true;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
      break;
 80052f4:	e01c      	b.n	8005330 <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fd30 	bl	8003d60 <HAL_UART_GetState>
 8005300:	4603      	mov	r3, r0
 8005302:	2be0      	cmp	r3, #224	@ 0xe0
 8005304:	d014      	beq.n	8005330 <ATC_TxWait+0x7a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fd28 	bl	8003d60 <HAL_UART_GetState>
 8005310:	4603      	mov	r3, r0
 8005312:	2ba0      	cmp	r3, #160	@ 0xa0
 8005314:	d00c      	beq.n	8005330 <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8005316:	f7fb fe69 	bl	8000fec <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d8d1      	bhi.n	80052ca <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe f8dc 	bl	80034e8 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <ATC_CheckResponse>:
}

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8b1b      	ldrh	r3, [r3, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d023      	beq.n	8005398 <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8005350:	2300      	movs	r3, #0
 8005352:	81bb      	strh	r3, [r7, #12]
 8005354:	e01b      	b.n	800538e <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800535a:	89ba      	ldrh	r2, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	320a      	adds	r2, #10
 8005360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005364:	4619      	mov	r1, r3
 8005366:	f000 fb48 	bl	80059fa <strstr>
 800536a:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 800537e:	89bb      	ldrh	r3, [r7, #12]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	3301      	adds	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
        break;
 8005386:	e007      	b.n	8005398 <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8005388:	89bb      	ldrh	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	81bb      	strh	r3, [r7, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8adb      	ldrh	r3, [r3, #22]
 8005392:	89ba      	ldrh	r2, [r7, #12]
 8005394:	429a      	cmp	r2, r3
 8005396:	d3de      	bcc.n	8005356 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe fcea 	bl	8003d88 <HAL_UART_GetError>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01f      	beq.n	80053fa <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f04f 32ff 	mov.w	r2, #4294967295
 80053c4:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe f8f4 	bl	80035b8 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69d9      	ldr	r1, [r3, #28]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8a9b      	ldrh	r3, [r3, #20]
 80053dc:	461a      	mov	r2, r3
 80053de:	f7ff fbb2 	bl	8004b46 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0208 	bic.w	r2, r2, #8
 80053f8:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fcae 	bl	8003d60 <HAL_UART_GetState>
 8005404:	4603      	mov	r3, r0
 8005406:	2b22      	cmp	r3, #34	@ 0x22
 8005408:	d027      	beq.n	800545a <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe fca6 	bl	8003d60 <HAL_UART_GetState>
 8005414:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8005416:	2b23      	cmp	r3, #35	@ 0x23
 8005418:	d01f      	beq.n	800545a <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f04f 32ff 	mov.w	r2, #4294967295
 8005424:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe f8c4 	bl	80035b8 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69d9      	ldr	r1, [r3, #28]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8a9b      	ldrh	r3, [r3, #20]
 800543c:	461a      	mov	r2, r3
 800543e:	f7ff fb82 	bl	8004b46 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0208 	bic.w	r2, r2, #8
 8005458:	601a      	str	r2, [r3, #0]
  }
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8005472:	2300      	movs	r3, #0
 8005474:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d075      	beq.n	8005568 <ATC_Init+0x106>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d072      	beq.n	8005568 <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8005482:	223c      	movs	r2, #60	@ 0x3c
 8005484:	2100      	movs	r1, #0
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fa9c 	bl	80059c4 <memset>
    if (pName != NULL)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3304      	adds	r3, #4
 8005496:	2207      	movs	r2, #7
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fa9a 	bl	80059d4 <strncpy>
    }
    hAtc->hUart = hUart;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fe90 	bl	80051ce <ATC_Malloc>
 80054ae:	4602      	mov	r2, r0
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d04e      	beq.n	800555a <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fa7d 	bl	80059c4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fe7e 	bl	80051ce <ATC_Malloc>
 80054d2:	4602      	mov	r2, r0
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d03e      	beq.n	800555e <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	2100      	movs	r1, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fa6b 	bl	80059c4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fe6c 	bl	80051ce <ATC_Malloc>
 80054f6:	4602      	mov	r2, r0
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d02e      	beq.n	8005562 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fa59 	bl	80059c4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8a9b      	ldrh	r3, [r3, #20]
 8005530:	461a      	mov	r2, r3
 8005532:	f7ff fb08 	bl	8004b46 <HAL_UARTEx_ReceiveToIdle_DMA>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d114      	bne.n	8005566 <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0208 	bic.w	r2, r2, #8
 8005552:	601a      	str	r2, [r3, #0]
    answer = true;
 8005554:	2301      	movs	r3, #1
 8005556:	75fb      	strb	r3, [r7, #23]
 8005558:	e006      	b.n	8005568 <ATC_Init+0x106>
      break;
 800555a:	bf00      	nop
 800555c:	e004      	b.n	8005568 <ATC_Init+0x106>
      break;
 800555e:	bf00      	nop
 8005560:	e002      	b.n	8005568 <ATC_Init+0x106>
      break;
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <ATC_Init+0x106>
      break;
 8005566:	bf00      	nop

  } while (0);

  if (answer == false)
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	f083 0301 	eor.w	r3, r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d016      	beq.n	80055a2 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	331c      	adds	r3, #28
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fe34 	bl	80051ee <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3324      	adds	r3, #36	@ 0x24
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fe2b 	bl	80051ee <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8005598:	223c      	movs	r2, #60	@ 0x3c
 800559a:	2100      	movs	r1, #0
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fa11 	bl	80059c4 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 80055a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b08d      	sub	sp, #52	@ 0x34
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 80055ba:	2300      	movs	r3, #0
 80055bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff fe5e 	bl	8005280 <ATC_TxBusy>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 80055ca:	f06f 0303 	mvn.w	r3, #3
 80055ce:	e0c8      	b.n	8005762 <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 80055d0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80055d4:	2b05      	cmp	r3, #5
 80055d6:	d902      	bls.n	80055de <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 80055d8:	f06f 0304 	mvn.w	r3, #4
 80055dc:	e0c1      	b.n	8005762 <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff fedf 	bl	80053a2 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 80055e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80055e8:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ee:	e04b      	b.n	8005688 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	1d1a      	adds	r2, r3, #4
 80055f4:	617a      	str	r2, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 80055fa:	69b8      	ldr	r0, [r7, #24]
 80055fc:	f7fa fe1c 	bl	8000238 <strlen>
 8005600:	4603      	mov	r3, r0
 8005602:	3301      	adds	r3, #1
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fde2 	bl	80051ce <ATC_Malloc>
 800560a:	4601      	mov	r1, r0
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005610:	320a      	adds	r2, #10
 8005612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800561a:	320a      	adds	r2, #10
 800561c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d119      	bne.n	8005658 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 8005624:	2300      	movs	r3, #0
 8005626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800562a:	e00d      	b.n	8005648 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800562c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005630:	330a      	adds	r3, #10
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fdd8 	bl	80051ee <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800563e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005642:	3301      	adds	r3, #1
 8005644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800564c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800564e:	429a      	cmp	r2, r3
 8005650:	dcec      	bgt.n	800562c <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 8005652:	f06f 0302 	mvn.w	r3, #2
 8005656:	e084      	b.n	8005762 <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800565c:	320a      	adds	r2, #10
 800565e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005662:	69b9      	ldr	r1, [r7, #24]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fa1b 	bl	8005aa0 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800566e:	320a      	adds	r2, #10
 8005670:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8005674:	69b8      	ldr	r0, [r7, #24]
 8005676:	f7fa fddf 	bl	8000238 <strlen>
 800567a:	4603      	mov	r3, r0
 800567c:	4423      	add	r3, r4
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	3301      	adds	r3, #1
 8005686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005688:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800568c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800568e:	429a      	cmp	r2, r3
 8005690:	dbae      	blt.n	80055f0 <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fdc2 	bl	800521c <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8005698:	68b8      	ldr	r0, [r7, #8]
 800569a:	f7fa fdcd 	bl	8000238 <strlen>
 800569e:	4603      	mov	r3, r0
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fdcb 	bl	8005242 <ATC_TxRaw>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f083 0301 	eor.w	r3, r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 80056b8:	f04f 33ff 	mov.w	r3, #4294967295
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80056be:	e00d      	b.n	80056dc <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fdf7 	bl	80052b6 <ATC_TxWait>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f083 0301 	eor.w	r3, r3, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 80056d4:	f06f 0301 	mvn.w	r3, #1
 80056d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80056da:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 80056dc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d022      	beq.n	800572a <ATC_SendReceive+0x17e>
 80056e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11f      	bne.n	800572a <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 80056ea:	f7fb fc7f 	bl	8000fec <HAL_GetTick>
 80056ee:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 80056f0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 80056fa:	e00e      	b.n	800571a <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 80056fc:	2001      	movs	r0, #1
 80056fe:	f000 f898 	bl	8005832 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff fe18 	bl	800533a <ATC_CheckResponse>
 800570a:	4603      	mov	r3, r0
 800570c:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800570e:	7ffb      	ldrb	r3, [r7, #31]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 8005714:	7ffb      	ldrb	r3, [r7, #31]
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005718:	e007      	b.n	800572a <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 800571a:	f7fb fc67 	bl	8000fec <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005726:	429a      	cmp	r2, r3
 8005728:	d8e8      	bhi.n	80056fc <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8005730:	2300      	movs	r3, #0
 8005732:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005736:	e00d      	b.n	8005754 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8005738:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800573c:	330a      	adds	r3, #10
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fd52 	bl	80051ee <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800574a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800574e:	3301      	adds	r3, #1
 8005750:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005754:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005758:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800575c:	429a      	cmp	r2, r3
 800575e:	d3eb      	bcc.n	8005738 <ATC_SendReceive+0x18c>
  }
  return answer;
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005762:	4618      	mov	r0, r3
 8005764:	3734      	adds	r7, #52	@ 0x34
 8005766:	46bd      	mov	sp, r7
 8005768:	bd90      	pop	{r4, r7, pc}

0800576a <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8005776:	887a      	ldrh	r2, [r7, #2]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8a9b      	ldrh	r3, [r3, #20]
 800577c:	4619      	mov	r1, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8b1b      	ldrh	r3, [r3, #24]
 8005782:	1acb      	subs	r3, r1, r3
 8005784:	429a      	cmp	r2, r3
 8005786:	dd05      	ble.n	8005794 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8a9a      	ldrh	r2, [r3, #20]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8b1b      	ldrh	r3, [r3, #24]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	8b12      	ldrh	r2, [r2, #24]
 800579c:	1898      	adds	r0, r3, r2
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	887a      	ldrh	r2, [r7, #2]
 80057a4:	4619      	mov	r1, r3
 80057a6:	f000 f983 	bl	8005ab0 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8b1a      	ldrh	r2, [r3, #24]
 80057ae:	887b      	ldrh	r3, [r7, #2]
 80057b0:	4413      	add	r3, r2
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69d9      	ldr	r1, [r3, #28]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8a9b      	ldrh	r3, [r3, #20]
 80057c4:	461a      	mov	r2, r3
 80057c6:	f7ff f9be 	bl	8004b46 <HAL_UARTEx_ReceiveToIdle_DMA>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10c      	bne.n	80057ea <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0208 	bic.w	r2, r2, #8
 80057e6:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 80057e8:	e01f      	b.n	800582a <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f04f 32ff 	mov.w	r2, #4294967295
 80057f4:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fd fedc 	bl	80035b8 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69d9      	ldr	r1, [r3, #28]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8a9b      	ldrh	r3, [r3, #20]
 800580c:	461a      	mov	r2, r3
 800580e:	f7ff f99a 	bl	8004b46 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0208 	bic.w	r2, r2, #8
 8005828:	601a      	str	r2, [r3, #0]
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fb fbe2 	bl	8001004 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <malloc>:
 8005848:	4b02      	ldr	r3, [pc, #8]	@ (8005854 <malloc+0xc>)
 800584a:	4601      	mov	r1, r0
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	f000 b82d 	b.w	80058ac <_malloc_r>
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c

08005858 <free>:
 8005858:	4b02      	ldr	r3, [pc, #8]	@ (8005864 <free+0xc>)
 800585a:	4601      	mov	r1, r0
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	f000 b935 	b.w	8005acc <_free_r>
 8005862:	bf00      	nop
 8005864:	2000000c 	.word	0x2000000c

08005868 <sbrk_aligned>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4e0f      	ldr	r6, [pc, #60]	@ (80058a8 <sbrk_aligned+0x40>)
 800586c:	460c      	mov	r4, r1
 800586e:	6831      	ldr	r1, [r6, #0]
 8005870:	4605      	mov	r5, r0
 8005872:	b911      	cbnz	r1, 800587a <sbrk_aligned+0x12>
 8005874:	f000 f8d8 	bl	8005a28 <_sbrk_r>
 8005878:	6030      	str	r0, [r6, #0]
 800587a:	4621      	mov	r1, r4
 800587c:	4628      	mov	r0, r5
 800587e:	f000 f8d3 	bl	8005a28 <_sbrk_r>
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	d103      	bne.n	800588e <sbrk_aligned+0x26>
 8005886:	f04f 34ff 	mov.w	r4, #4294967295
 800588a:	4620      	mov	r0, r4
 800588c:	bd70      	pop	{r4, r5, r6, pc}
 800588e:	1cc4      	adds	r4, r0, #3
 8005890:	f024 0403 	bic.w	r4, r4, #3
 8005894:	42a0      	cmp	r0, r4
 8005896:	d0f8      	beq.n	800588a <sbrk_aligned+0x22>
 8005898:	1a21      	subs	r1, r4, r0
 800589a:	4628      	mov	r0, r5
 800589c:	f000 f8c4 	bl	8005a28 <_sbrk_r>
 80058a0:	3001      	adds	r0, #1
 80058a2:	d1f2      	bne.n	800588a <sbrk_aligned+0x22>
 80058a4:	e7ef      	b.n	8005886 <sbrk_aligned+0x1e>
 80058a6:	bf00      	nop
 80058a8:	20000770 	.word	0x20000770

080058ac <_malloc_r>:
 80058ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b0:	1ccd      	adds	r5, r1, #3
 80058b2:	f025 0503 	bic.w	r5, r5, #3
 80058b6:	3508      	adds	r5, #8
 80058b8:	2d0c      	cmp	r5, #12
 80058ba:	bf38      	it	cc
 80058bc:	250c      	movcc	r5, #12
 80058be:	2d00      	cmp	r5, #0
 80058c0:	4606      	mov	r6, r0
 80058c2:	db01      	blt.n	80058c8 <_malloc_r+0x1c>
 80058c4:	42a9      	cmp	r1, r5
 80058c6:	d904      	bls.n	80058d2 <_malloc_r+0x26>
 80058c8:	230c      	movs	r3, #12
 80058ca:	6033      	str	r3, [r6, #0]
 80058cc:	2000      	movs	r0, #0
 80058ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059a8 <_malloc_r+0xfc>
 80058d6:	f000 f869 	bl	80059ac <__malloc_lock>
 80058da:	f8d8 3000 	ldr.w	r3, [r8]
 80058de:	461c      	mov	r4, r3
 80058e0:	bb44      	cbnz	r4, 8005934 <_malloc_r+0x88>
 80058e2:	4629      	mov	r1, r5
 80058e4:	4630      	mov	r0, r6
 80058e6:	f7ff ffbf 	bl	8005868 <sbrk_aligned>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	4604      	mov	r4, r0
 80058ee:	d158      	bne.n	80059a2 <_malloc_r+0xf6>
 80058f0:	f8d8 4000 	ldr.w	r4, [r8]
 80058f4:	4627      	mov	r7, r4
 80058f6:	2f00      	cmp	r7, #0
 80058f8:	d143      	bne.n	8005982 <_malloc_r+0xd6>
 80058fa:	2c00      	cmp	r4, #0
 80058fc:	d04b      	beq.n	8005996 <_malloc_r+0xea>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	4639      	mov	r1, r7
 8005902:	4630      	mov	r0, r6
 8005904:	eb04 0903 	add.w	r9, r4, r3
 8005908:	f000 f88e 	bl	8005a28 <_sbrk_r>
 800590c:	4581      	cmp	r9, r0
 800590e:	d142      	bne.n	8005996 <_malloc_r+0xea>
 8005910:	6821      	ldr	r1, [r4, #0]
 8005912:	1a6d      	subs	r5, r5, r1
 8005914:	4629      	mov	r1, r5
 8005916:	4630      	mov	r0, r6
 8005918:	f7ff ffa6 	bl	8005868 <sbrk_aligned>
 800591c:	3001      	adds	r0, #1
 800591e:	d03a      	beq.n	8005996 <_malloc_r+0xea>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	442b      	add	r3, r5
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	f8d8 3000 	ldr.w	r3, [r8]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	bb62      	cbnz	r2, 8005988 <_malloc_r+0xdc>
 800592e:	f8c8 7000 	str.w	r7, [r8]
 8005932:	e00f      	b.n	8005954 <_malloc_r+0xa8>
 8005934:	6822      	ldr	r2, [r4, #0]
 8005936:	1b52      	subs	r2, r2, r5
 8005938:	d420      	bmi.n	800597c <_malloc_r+0xd0>
 800593a:	2a0b      	cmp	r2, #11
 800593c:	d917      	bls.n	800596e <_malloc_r+0xc2>
 800593e:	1961      	adds	r1, r4, r5
 8005940:	42a3      	cmp	r3, r4
 8005942:	6025      	str	r5, [r4, #0]
 8005944:	bf18      	it	ne
 8005946:	6059      	strne	r1, [r3, #4]
 8005948:	6863      	ldr	r3, [r4, #4]
 800594a:	bf08      	it	eq
 800594c:	f8c8 1000 	streq.w	r1, [r8]
 8005950:	5162      	str	r2, [r4, r5]
 8005952:	604b      	str	r3, [r1, #4]
 8005954:	4630      	mov	r0, r6
 8005956:	f000 f82f 	bl	80059b8 <__malloc_unlock>
 800595a:	f104 000b 	add.w	r0, r4, #11
 800595e:	1d23      	adds	r3, r4, #4
 8005960:	f020 0007 	bic.w	r0, r0, #7
 8005964:	1ac2      	subs	r2, r0, r3
 8005966:	bf1c      	itt	ne
 8005968:	1a1b      	subne	r3, r3, r0
 800596a:	50a3      	strne	r3, [r4, r2]
 800596c:	e7af      	b.n	80058ce <_malloc_r+0x22>
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	42a3      	cmp	r3, r4
 8005972:	bf0c      	ite	eq
 8005974:	f8c8 2000 	streq.w	r2, [r8]
 8005978:	605a      	strne	r2, [r3, #4]
 800597a:	e7eb      	b.n	8005954 <_malloc_r+0xa8>
 800597c:	4623      	mov	r3, r4
 800597e:	6864      	ldr	r4, [r4, #4]
 8005980:	e7ae      	b.n	80058e0 <_malloc_r+0x34>
 8005982:	463c      	mov	r4, r7
 8005984:	687f      	ldr	r7, [r7, #4]
 8005986:	e7b6      	b.n	80058f6 <_malloc_r+0x4a>
 8005988:	461a      	mov	r2, r3
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	42a3      	cmp	r3, r4
 800598e:	d1fb      	bne.n	8005988 <_malloc_r+0xdc>
 8005990:	2300      	movs	r3, #0
 8005992:	6053      	str	r3, [r2, #4]
 8005994:	e7de      	b.n	8005954 <_malloc_r+0xa8>
 8005996:	230c      	movs	r3, #12
 8005998:	6033      	str	r3, [r6, #0]
 800599a:	4630      	mov	r0, r6
 800599c:	f000 f80c 	bl	80059b8 <__malloc_unlock>
 80059a0:	e794      	b.n	80058cc <_malloc_r+0x20>
 80059a2:	6005      	str	r5, [r0, #0]
 80059a4:	e7d6      	b.n	8005954 <_malloc_r+0xa8>
 80059a6:	bf00      	nop
 80059a8:	20000774 	.word	0x20000774

080059ac <__malloc_lock>:
 80059ac:	4801      	ldr	r0, [pc, #4]	@ (80059b4 <__malloc_lock+0x8>)
 80059ae:	f000 b875 	b.w	8005a9c <__retarget_lock_acquire_recursive>
 80059b2:	bf00      	nop
 80059b4:	200008b4 	.word	0x200008b4

080059b8 <__malloc_unlock>:
 80059b8:	4801      	ldr	r0, [pc, #4]	@ (80059c0 <__malloc_unlock+0x8>)
 80059ba:	f000 b870 	b.w	8005a9e <__retarget_lock_release_recursive>
 80059be:	bf00      	nop
 80059c0:	200008b4 	.word	0x200008b4

080059c4 <memset>:
 80059c4:	4402      	add	r2, r0
 80059c6:	4603      	mov	r3, r0
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d100      	bne.n	80059ce <memset+0xa>
 80059cc:	4770      	bx	lr
 80059ce:	f803 1b01 	strb.w	r1, [r3], #1
 80059d2:	e7f9      	b.n	80059c8 <memset+0x4>

080059d4 <strncpy>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	3901      	subs	r1, #1
 80059d8:	4603      	mov	r3, r0
 80059da:	b132      	cbz	r2, 80059ea <strncpy+0x16>
 80059dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059e0:	f803 4b01 	strb.w	r4, [r3], #1
 80059e4:	3a01      	subs	r2, #1
 80059e6:	2c00      	cmp	r4, #0
 80059e8:	d1f7      	bne.n	80059da <strncpy+0x6>
 80059ea:	441a      	add	r2, r3
 80059ec:	2100      	movs	r1, #0
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d100      	bne.n	80059f4 <strncpy+0x20>
 80059f2:	bd10      	pop	{r4, pc}
 80059f4:	f803 1b01 	strb.w	r1, [r3], #1
 80059f8:	e7f9      	b.n	80059ee <strncpy+0x1a>

080059fa <strstr>:
 80059fa:	780a      	ldrb	r2, [r1, #0]
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	b96a      	cbnz	r2, 8005a1c <strstr+0x22>
 8005a00:	bd70      	pop	{r4, r5, r6, pc}
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d109      	bne.n	8005a1a <strstr+0x20>
 8005a06:	460c      	mov	r4, r1
 8005a08:	4605      	mov	r5, r0
 8005a0a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f6      	beq.n	8005a00 <strstr+0x6>
 8005a12:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005a16:	429e      	cmp	r6, r3
 8005a18:	d0f7      	beq.n	8005a0a <strstr+0x10>
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	7803      	ldrb	r3, [r0, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1ef      	bne.n	8005a02 <strstr+0x8>
 8005a22:	4618      	mov	r0, r3
 8005a24:	e7ec      	b.n	8005a00 <strstr+0x6>
	...

08005a28 <_sbrk_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4d06      	ldr	r5, [pc, #24]	@ (8005a44 <_sbrk_r+0x1c>)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4604      	mov	r4, r0
 8005a30:	4608      	mov	r0, r1
 8005a32:	602b      	str	r3, [r5, #0]
 8005a34:	f7fa fff8 	bl	8000a28 <_sbrk>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_sbrk_r+0x1a>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_sbrk_r+0x1a>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	200008b0 	.word	0x200008b0

08005a48 <__errno>:
 8005a48:	4b01      	ldr	r3, [pc, #4]	@ (8005a50 <__errno+0x8>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	2000000c 	.word	0x2000000c

08005a54 <__libc_init_array>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4d0d      	ldr	r5, [pc, #52]	@ (8005a8c <__libc_init_array+0x38>)
 8005a58:	4c0d      	ldr	r4, [pc, #52]	@ (8005a90 <__libc_init_array+0x3c>)
 8005a5a:	1b64      	subs	r4, r4, r5
 8005a5c:	10a4      	asrs	r4, r4, #2
 8005a5e:	2600      	movs	r6, #0
 8005a60:	42a6      	cmp	r6, r4
 8005a62:	d109      	bne.n	8005a78 <__libc_init_array+0x24>
 8005a64:	4d0b      	ldr	r5, [pc, #44]	@ (8005a94 <__libc_init_array+0x40>)
 8005a66:	4c0c      	ldr	r4, [pc, #48]	@ (8005a98 <__libc_init_array+0x44>)
 8005a68:	f000 f87a 	bl	8005b60 <_init>
 8005a6c:	1b64      	subs	r4, r4, r5
 8005a6e:	10a4      	asrs	r4, r4, #2
 8005a70:	2600      	movs	r6, #0
 8005a72:	42a6      	cmp	r6, r4
 8005a74:	d105      	bne.n	8005a82 <__libc_init_array+0x2e>
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7c:	4798      	blx	r3
 8005a7e:	3601      	adds	r6, #1
 8005a80:	e7ee      	b.n	8005a60 <__libc_init_array+0xc>
 8005a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a86:	4798      	blx	r3
 8005a88:	3601      	adds	r6, #1
 8005a8a:	e7f2      	b.n	8005a72 <__libc_init_array+0x1e>
 8005a8c:	08005be8 	.word	0x08005be8
 8005a90:	08005be8 	.word	0x08005be8
 8005a94:	08005be8 	.word	0x08005be8
 8005a98:	08005bec 	.word	0x08005bec

08005a9c <__retarget_lock_acquire_recursive>:
 8005a9c:	4770      	bx	lr

08005a9e <__retarget_lock_release_recursive>:
 8005a9e:	4770      	bx	lr

08005aa0 <strcpy>:
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aa6:	f803 2b01 	strb.w	r2, [r3], #1
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	d1f9      	bne.n	8005aa2 <strcpy+0x2>
 8005aae:	4770      	bx	lr

08005ab0 <memcpy>:
 8005ab0:	440a      	add	r2, r1
 8005ab2:	4291      	cmp	r1, r2
 8005ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ab8:	d100      	bne.n	8005abc <memcpy+0xc>
 8005aba:	4770      	bx	lr
 8005abc:	b510      	push	{r4, lr}
 8005abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ac6:	4291      	cmp	r1, r2
 8005ac8:	d1f9      	bne.n	8005abe <memcpy+0xe>
 8005aca:	bd10      	pop	{r4, pc}

08005acc <_free_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4605      	mov	r5, r0
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	d041      	beq.n	8005b58 <_free_r+0x8c>
 8005ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ad8:	1f0c      	subs	r4, r1, #4
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bfb8      	it	lt
 8005ade:	18e4      	addlt	r4, r4, r3
 8005ae0:	f7ff ff64 	bl	80059ac <__malloc_lock>
 8005ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b5c <_free_r+0x90>)
 8005ae6:	6813      	ldr	r3, [r2, #0]
 8005ae8:	b933      	cbnz	r3, 8005af8 <_free_r+0x2c>
 8005aea:	6063      	str	r3, [r4, #4]
 8005aec:	6014      	str	r4, [r2, #0]
 8005aee:	4628      	mov	r0, r5
 8005af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005af4:	f7ff bf60 	b.w	80059b8 <__malloc_unlock>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d908      	bls.n	8005b0e <_free_r+0x42>
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	1821      	adds	r1, r4, r0
 8005b00:	428b      	cmp	r3, r1
 8005b02:	bf01      	itttt	eq
 8005b04:	6819      	ldreq	r1, [r3, #0]
 8005b06:	685b      	ldreq	r3, [r3, #4]
 8005b08:	1809      	addeq	r1, r1, r0
 8005b0a:	6021      	streq	r1, [r4, #0]
 8005b0c:	e7ed      	b.n	8005aea <_free_r+0x1e>
 8005b0e:	461a      	mov	r2, r3
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	b10b      	cbz	r3, 8005b18 <_free_r+0x4c>
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	d9fa      	bls.n	8005b0e <_free_r+0x42>
 8005b18:	6811      	ldr	r1, [r2, #0]
 8005b1a:	1850      	adds	r0, r2, r1
 8005b1c:	42a0      	cmp	r0, r4
 8005b1e:	d10b      	bne.n	8005b38 <_free_r+0x6c>
 8005b20:	6820      	ldr	r0, [r4, #0]
 8005b22:	4401      	add	r1, r0
 8005b24:	1850      	adds	r0, r2, r1
 8005b26:	4283      	cmp	r3, r0
 8005b28:	6011      	str	r1, [r2, #0]
 8005b2a:	d1e0      	bne.n	8005aee <_free_r+0x22>
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	6053      	str	r3, [r2, #4]
 8005b32:	4408      	add	r0, r1
 8005b34:	6010      	str	r0, [r2, #0]
 8005b36:	e7da      	b.n	8005aee <_free_r+0x22>
 8005b38:	d902      	bls.n	8005b40 <_free_r+0x74>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	e7d6      	b.n	8005aee <_free_r+0x22>
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	1821      	adds	r1, r4, r0
 8005b44:	428b      	cmp	r3, r1
 8005b46:	bf04      	itt	eq
 8005b48:	6819      	ldreq	r1, [r3, #0]
 8005b4a:	685b      	ldreq	r3, [r3, #4]
 8005b4c:	6063      	str	r3, [r4, #4]
 8005b4e:	bf04      	itt	eq
 8005b50:	1809      	addeq	r1, r1, r0
 8005b52:	6021      	streq	r1, [r4, #0]
 8005b54:	6054      	str	r4, [r2, #4]
 8005b56:	e7ca      	b.n	8005aee <_free_r+0x22>
 8005b58:	bd38      	pop	{r3, r4, r5, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000774 	.word	0x20000774

08005b60 <_init>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	bf00      	nop
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr

08005b6c <_fini>:
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	bf00      	nop
 8005b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b72:	bc08      	pop	{r3}
 8005b74:	469e      	mov	lr, r3
 8005b76:	4770      	bx	lr
