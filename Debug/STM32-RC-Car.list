
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e74  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800806c  0800806c  0000906c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008124  08008124  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008124  08008124  00009124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800812c  0800812c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800812c  0800812c  0000912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008130  08008130  00009130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008134  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  2000005c  08008190  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08008190  0000ab44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018591  00000000  00000000  0000a08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c6  00000000  00000000  0002261b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00025de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa5  00000000  00000000  00027228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a046  00000000  00000000  000281cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a842  00000000  00000000  00052213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff478  00000000  00000000  0006ca55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016becd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  0016bf10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001716f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	08008054 	.word	0x08008054

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	08008054 	.word	0x08008054

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053e:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <MX_DMA_Init+0x48>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a0f      	ldr	r2, [pc, #60]	@ (8000580 <MX_DMA_Init+0x48>)
 8000544:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <MX_DMA_Init+0x48>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	2010      	movs	r0, #16
 800055c:	f001 fe4b 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000560:	2010      	movs	r0, #16
 8000562:	f001 fe64 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2011      	movs	r0, #17
 800056c:	f001 fe43 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000570:	2011      	movs	r0, #17
 8000572:	f001 fe5c 	bl	800222e <HAL_NVIC_EnableIRQ>

}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800

08000584 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	@ 0x30
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b77      	ldr	r3, [pc, #476]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a76      	ldr	r2, [pc, #472]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b74      	ldr	r3, [pc, #464]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	61bb      	str	r3, [r7, #24]
 80005b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b71      	ldr	r3, [pc, #452]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a70      	ldr	r2, [pc, #448]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b6e      	ldr	r3, [pc, #440]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b6b      	ldr	r3, [pc, #428]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a6a      	ldr	r2, [pc, #424]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b68      	ldr	r3, [pc, #416]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b65      	ldr	r3, [pc, #404]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a64      	ldr	r2, [pc, #400]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b62      	ldr	r3, [pc, #392]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a5e      	ldr	r2, [pc, #376]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000600:	f043 0310 	orr.w	r3, r3, #16
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b5c      	ldr	r3, [pc, #368]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0310 	and.w	r3, r3, #16
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	4b59      	ldr	r3, [pc, #356]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a58      	ldr	r2, [pc, #352]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b56      	ldr	r3, [pc, #344]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800062a:	4b53      	ldr	r3, [pc, #332]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a52      	ldr	r2, [pc, #328]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b50      	ldr	r3, [pc, #320]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000648:	484c      	ldr	r0, [pc, #304]	@ (800077c <MX_GPIO_Init+0x1f8>)
 800064a:	f002 fbcd 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2140      	movs	r1, #64	@ 0x40
 8000652:	484b      	ldr	r0, [pc, #300]	@ (8000780 <MX_GPIO_Init+0x1fc>)
 8000654:	f002 fbc8 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2110      	movs	r1, #16
 800065c:	4849      	ldr	r0, [pc, #292]	@ (8000784 <MX_GPIO_Init+0x200>)
 800065e:	f002 fbc3 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000662:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000668:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4843      	ldr	r0, [pc, #268]	@ (8000788 <MX_GPIO_Init+0x204>)
 800067a:	f002 fa09 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800067e:	2332      	movs	r3, #50	@ 0x32
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068a:	2303      	movs	r3, #3
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800068e:	230b      	movs	r3, #11
 8000690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	483b      	ldr	r0, [pc, #236]	@ (8000788 <MX_GPIO_Init+0x204>)
 800069a:	f002 f9f9 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800069e:	2386      	movs	r3, #134	@ 0x86
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ae:	230b      	movs	r3, #11
 80006b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4834      	ldr	r0, [pc, #208]	@ (800078c <MX_GPIO_Init+0x208>)
 80006ba:	f002 f9e9 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006be:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4829      	ldr	r0, [pc, #164]	@ (800077c <MX_GPIO_Init+0x1f8>)
 80006d8:	f002 f9da 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ee:	230b      	movs	r3, #11
 80006f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4820      	ldr	r0, [pc, #128]	@ (800077c <MX_GPIO_Init+0x1f8>)
 80006fa:	f002 f9c9 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006fe:	2340      	movs	r3, #64	@ 0x40
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	481a      	ldr	r0, [pc, #104]	@ (8000780 <MX_GPIO_Init+0x1fc>)
 8000716:	f002 f9bb 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800071a:	2380      	movs	r3, #128	@ 0x80
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4814      	ldr	r0, [pc, #80]	@ (8000780 <MX_GPIO_Init+0x1fc>)
 800072e:	f002 f9af 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000732:	2310      	movs	r3, #16
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	480e      	ldr	r0, [pc, #56]	@ (8000784 <MX_GPIO_Init+0x200>)
 800074a:	f002 f9a1 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800074e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000760:	230b      	movs	r3, #11
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_GPIO_Init+0x1fc>)
 800076c:	f002 f990 	bl	8002a90 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3730      	adds	r7, #48	@ 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40020400 	.word	0x40020400
 8000780:	40021800 	.word	0x40021800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40020800 	.word	0x40020800
 800078c:	40020000 	.word	0x40020000

08000790 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x28>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d104      	bne.n	80007b0 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 80007a6:	887b      	ldrh	r3, [r7, #2]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x2c>)
 80007ac:	f007 fa57 	bl	8007c5e <ATC_IdleLineCallback>
	}
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40004400 	.word	0x40004400
 80007bc:	20000078 	.word	0x20000078

080007c0 <pid_init>:
	float Kd;			//Wzmocnienie członu różniczkującego*/
	int anti_windup_limit;		//Anti-Windup - ograniczenie członu całkującego*/
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6178      	str	r0, [r7, #20]
 80007c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80007cc:	edc7 0a03 	vstr	s1, [r7, #12]
 80007d0:	ed87 1a02 	vstr	s2, [r7, #8]
 80007d4:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	615a      	str	r2, [r3, #20]
}
 80007fa:	bf00      	nop
 80007fc:	371c      	adds	r7, #28
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <pid_reset>:

void pid_reset(PID *pid_data)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 8000826:	b480      	push	{r7}
 8000828:	b089      	sub	sp, #36	@ 0x24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	441a      	add	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	ed93 7a02 	vldr	s14, [r3, #8]
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	ee07 3a90 	vmov	s15, r3
 8000852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085a:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	ed93 7a03 	vldr	s14, [r3, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000874:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	ed93 7a04 	vldr	s14, [r3, #16]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	ee07 3a90 	vmov	s15, r3
 800088a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000892:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80008a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ae:	db08      	blt.n	80008c2 <pid_calculate+0x9c>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008bc:	edc7 7a07 	vstr	s15, [r7, #28]
 80008c0:	e016      	b.n	80008f0 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	425b      	negs	r3, r3
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80008d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008dc:	d808      	bhi.n	80008f0 <pid_calculate+0xca>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	425b      	negs	r3, r3
 80008e4:	ee07 3a90 	vmov	s15, r3
 80008e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ec:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 80008f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80008fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80008fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000902:	edd7 7a04 	vldr	s15, [r7, #16]
 8000906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800090a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800090e:	ee17 3a90 	vmov	r3, s15
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	@ 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000934:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f82a 	bl	80009bc <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000970:	fb02 f303 	mul.w	r3, r2, r3
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	8892      	ldrh	r2, [r2, #4]
 8000978:	fb93 f2f2 	sdiv	r2, r3, r2
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6919      	ldr	r1, [r3, #16]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	461a      	mov	r2, r3
 8000990:	f7ff ff49 	bl	8000826 <pid_calculate>
 8000994:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	441a      	add	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	db04      	blt.n	80009b4 <motor_calculate_speed+0x5a>
	{
		//drv8835_set_motorA_direction(CW);
		drv8835_set_motorA_speed(m->actual_PWM);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f832 	bl	8000a18 <drv8835_set_motorA_speed>
	else
	{
		//drv8835_set_motorA_direction(CCW);
		//drv8835_set_motorA_speed(-m->actual_PWM);
	}
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	461a      	mov	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d004      	beq.n	8000a08 <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3318      	adds	r3, #24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff feff 	bl	8000806 <pid_reset>

	m->set_speed = set_speed;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	611a      	str	r2, [r3, #16]
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000a22:	88fa      	ldrh	r2, [r7, #6]
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <drv8835_set_motorA_speed+0x34>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d303      	bcc.n	8000a36 <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <drv8835_set_motorA_speed+0x34>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a34:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <drv8835_set_motorA_speed+0x34>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	88fa      	ldrh	r2, [r7, #6]
 8000a3c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000134 	.word	0x20000134

08000a50 <drv8835_init>:

void drv8835_init()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	//drv8835_mode_control(Phase_Enable_Mode);
	//drv8835_set_motorA_direction(CCW);
	drv8835_set_motorA_speed(0);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ffdf 	bl	8000a18 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <drv8835_init+0x18>)
 8000a5e:	f003 fd9b 	bl	8004598 <HAL_TIM_PWM_Start>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000134 	.word	0x20000134

08000a6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d102      	bne.n	8000a84 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000a7e:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a80:	f7ff ff6b 	bl	800095a <motor_calculate_speed>
	}
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	200000b4 	.word	0x200000b4

08000a94 <Set_PWM_Frequency>:

#define RX_TIMEOUT 1000 // Timeout 1 sekunda
#define TX_TIMEOUT 1000 // Timeout wysyłania
char* response = NULL;  // Bufor na odpowiedź

void Set_PWM_Frequency(uint32_t frequency) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d104      	bne.n	8000aac <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2); // Zatrzymanie PWM
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4812      	ldr	r0, [pc, #72]	@ (8000af0 <Set_PWM_Frequency+0x5c>)
 8000aa6:	f003 fe71 	bl	800478c <HAL_TIM_PWM_Stop>
        return;
 8000aaa:	e01e      	b.n	8000aea <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000; // 96 MHz zegar bazowy
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <Set_PWM_Frequency+0x60>)
 8000aae:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <Set_PWM_Frequency+0x5c>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	fb02 f303 	mul.w	r3, r2, r3
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <Set_PWM_Frequency+0x64>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ad2:	4a09      	ldr	r2, [pc, #36]	@ (8000af8 <Set_PWM_Frequency+0x64>)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2); // Wypełnienie 50%
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <Set_PWM_Frequency+0x5c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	0852      	lsrs	r2, r2, #1
 8000ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // Start PWM
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <Set_PWM_Frequency+0x5c>)
 8000ae6:	f003 fd57 	bl	8004598 <HAL_TIM_PWM_Start>
}
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200002fc 	.word	0x200002fc
 8000af4:	05b8d800 	.word	0x05b8d800
 8000af8:	20000134 	.word	0x20000134

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b091      	sub	sp, #68	@ 0x44
 8000b00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b02:	f001 fa1c 	bl	8001f3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b06:	f000 f8fd 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0a:	f7ff fd3b 	bl	8000584 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0e:	f7ff fd13 	bl	8000538 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b12:	f000 fffb 	bl	8001b0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b16:	f001 f941 	bl	8001d9c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000b1a:	f000 ffc7 	bl	8001aac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b1e:	f000 fab3 	bl	8001088 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b22:	f000 fb6f 	bl	8001204 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b26:	f000 fbc3 	bl	80012b0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b2a:	f000 fcb5 	bl	8001498 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000b2e:	f000 fb05 	bl	800113c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000b32:	f000 fc79 	bl	8001428 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000b36:	f000 fc11 	bl	800135c <MX_TIM5_Init>
  MX_TIM12_Init();
 8000b3a:	f000 fd07 	bl	800154c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  ATC_Init(&ESP, &huart2, 512, "ESP");
 8000b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8000cb0 <main+0x1b4>)
 8000b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b44:	495b      	ldr	r1, [pc, #364]	@ (8000cb4 <main+0x1b8>)
 8000b46:	485c      	ldr	r0, [pc, #368]	@ (8000cb8 <main+0x1bc>)
 8000b48:	f006 ff05 	bl	8007956 <ATC_Init>
  ATC_SendReceive(&ESP, "AT\r\n", 1000, NULL, 1000, 0);
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b5c:	4957      	ldr	r1, [pc, #348]	@ (8000cbc <main+0x1c0>)
 8000b5e:	4856      	ldr	r0, [pc, #344]	@ (8000cb8 <main+0x1bc>)
 8000b60:	f006 ff9e 	bl	8007aa0 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWMODE=1\r\n", 1000, NULL, 1000, 0);
 8000b64:	2300      	movs	r3, #0
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b74:	4952      	ldr	r1, [pc, #328]	@ (8000cc0 <main+0x1c4>)
 8000b76:	4850      	ldr	r0, [pc, #320]	@ (8000cb8 <main+0x1bc>)
 8000b78:	f006 ff92 	bl	8007aa0 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMUX=1\r\n", 1000, NULL, 1000, 0);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2300      	movs	r3, #0
 8000b88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b8c:	494d      	ldr	r1, [pc, #308]	@ (8000cc4 <main+0x1c8>)
 8000b8e:	484a      	ldr	r0, [pc, #296]	@ (8000cb8 <main+0x1bc>)
 8000b90:	f006 ff86 	bl	8007aa0 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPSERVER=1,80\r\n", 1000, NULL, 1000, 0);
 8000b94:	2300      	movs	r3, #0
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ba4:	4948      	ldr	r1, [pc, #288]	@ (8000cc8 <main+0x1cc>)
 8000ba6:	4844      	ldr	r0, [pc, #272]	@ (8000cb8 <main+0x1bc>)
 8000ba8:	f006 ff7a 	bl	8007aa0 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWJAP=\"DeathLock\",\"\"\r\n", 5000, NULL, 5000, 0);
 8000bac:	2300      	movs	r3, #0
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bbc:	4943      	ldr	r1, [pc, #268]	@ (8000ccc <main+0x1d0>)
 8000bbe:	483e      	ldr	r0, [pc, #248]	@ (8000cb8 <main+0x1bc>)
 8000bc0:	f006 ff6e 	bl	8007aa0 <ATC_SendReceive>




  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000bc4:	213c      	movs	r1, #60	@ 0x3c
 8000bc6:	4842      	ldr	r0, [pc, #264]	@ (8000cd0 <main+0x1d4>)
 8000bc8:	f003 ff06 	bl	80049d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bcc:	213c      	movs	r1, #60	@ 0x3c
 8000bce:	4841      	ldr	r0, [pc, #260]	@ (8000cd4 <main+0x1d8>)
 8000bd0:	f003 ff02 	bl	80049d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000bd4:	213c      	movs	r1, #60	@ 0x3c
 8000bd6:	4840      	ldr	r0, [pc, #256]	@ (8000cd8 <main+0x1dc>)
 8000bd8:	f003 fefe 	bl	80049d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000bdc:	213c      	movs	r1, #60	@ 0x3c
 8000bde:	483f      	ldr	r0, [pc, #252]	@ (8000cdc <main+0x1e0>)
 8000be0:	f003 fefa 	bl	80049d8 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000be4:	2100      	movs	r1, #0
 8000be6:	483e      	ldr	r0, [pc, #248]	@ (8000ce0 <main+0x1e4>)
 8000be8:	f003 fcd6 	bl	8004598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000bec:	210c      	movs	r1, #12
 8000bee:	483c      	ldr	r0, [pc, #240]	@ (8000ce0 <main+0x1e4>)
 8000bf0:	f003 fcd2 	bl	8004598 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8000bf4:	483b      	ldr	r0, [pc, #236]	@ (8000ce4 <main+0x1e8>)
 8000bf6:	f003 fbff 	bl	80043f8 <HAL_TIM_Base_Start_IT>

  drv8835_init();
 8000bfa:	f7ff ff29 	bl	8000a50 <drv8835_init>
  motor_init(&motorA, &htim4);
 8000bfe:	4936      	ldr	r1, [pc, #216]	@ (8000cd8 <main+0x1dc>)
 8000c00:	4839      	ldr	r0, [pc, #228]	@ (8000ce8 <main+0x1ec>)
 8000c02:	f7ff fe8c 	bl	800091e <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 8000c06:	2101      	movs	r1, #1
 8000c08:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8000cec <main+0x1f0>
 8000c0c:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8000cf0 <main+0x1f4>
 8000c10:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000c14:	4837      	ldr	r0, [pc, #220]	@ (8000cf4 <main+0x1f8>)
 8000c16:	f7ff fdd3 	bl	80007c0 <pid_init>

  const char *readyMsg = "STM32 ready to receive data from ESP...\r\n";
 8000c1a:	4b37      	ldr	r3, [pc, #220]	@ (8000cf8 <main+0x1fc>)
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8000c1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c20:	f7ff fb0a 	bl	8000238 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c2e:	4833      	ldr	r0, [pc, #204]	@ (8000cfc <main+0x200>)
 8000c30:	f004 fdce 	bl	80057d0 <HAL_UART_Transmit>

  int speed_table[] = {0, 50, 100, 50};
 8000c34:	4b32      	ldr	r3, [pc, #200]	@ (8000d00 <main+0x204>)
 8000c36:	1d3c      	adds	r4, r7, #4
 8000c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int i = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t time_tick = HAL_GetTick();
 8000c42:	f001 f9cd 	bl	8001fe0 <HAL_GetTick>
 8000c46:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t max_time = 5000;
 8000c48:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
  //char buffer[32];

  char* response = NULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  int result = -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	623b      	str	r3, [r7, #32]
  uint32_t timeout = 5000;
 8000c58:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c5c:	61fb      	str	r3, [r7, #28]
  uint8_t items = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	76fb      	strb	r3, [r7, #27]

  //HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
  int x = 0;Set_PWM_Frequency(1000); // A4 - 440 Hz
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c6a:	f7ff ff13 	bl	8000a94 <Set_PWM_Frequency>

	  //ATC_Loop(&ESP);
	  //sprintf(buffer, "%lu\r\n", htim1.Instance->CNT);
	  //HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
	  //HAL_Delay(100);
	  if ((HAL_GetTick() - time_tick) > max_time) {
 8000c6e:	f001 f9b7 	bl	8001fe0 <HAL_GetTick>
 8000c72:	4602      	mov	r2, r0
 8000c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d2f7      	bcs.n	8000c6e <main+0x172>
		  time_tick = HAL_GetTick();
 8000c7e:	f001 f9af 	bl	8001fe0 <HAL_GetTick>
 8000c82:	6338      	str	r0, [r7, #48]	@ 0x30
		  motor_set_speed(&motorA, speed_table[i++]);
 8000c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	637a      	str	r2, [r7, #52]	@ 0x34
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	3338      	adds	r3, #56	@ 0x38
 8000c8e:	443b      	add	r3, r7
 8000c90:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4814      	ldr	r0, [pc, #80]	@ (8000ce8 <main+0x1ec>)
 8000c98:	f7ff fea7 	bl	80009ea <motor_set_speed>

		  i %=4;
 8000c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c9e:	425a      	negs	r2, r3
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	f002 0203 	and.w	r2, r2, #3
 8000ca8:	bf58      	it	pl
 8000caa:	4253      	negpl	r3, r2
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
	  if ((HAL_GetTick() - time_tick) > max_time) {
 8000cae:	e7de      	b.n	8000c6e <main+0x172>
 8000cb0:	0800806c 	.word	0x0800806c
 8000cb4:	20000348 	.word	0x20000348
 8000cb8:	20000078 	.word	0x20000078
 8000cbc:	08008070 	.word	0x08008070
 8000cc0:	08008078 	.word	0x08008078
 8000cc4:	08008088 	.word	0x08008088
 8000cc8:	08008098 	.word	0x08008098
 8000ccc:	080080ac 	.word	0x080080ac
 8000cd0:	200000e8 	.word	0x200000e8
 8000cd4:	20000180 	.word	0x20000180
 8000cd8:	200001cc 	.word	0x200001cc
 8000cdc:	200002b0 	.word	0x200002b0
 8000ce0:	20000134 	.word	0x20000134
 8000ce4:	20000264 	.word	0x20000264
 8000ce8:	200000b4 	.word	0x200000b4
 8000cec:	3f866666 	.word	0x3f866666
 8000cf0:	3d4ccccd 	.word	0x3d4ccccd
 8000cf4:	200000cc 	.word	0x200000cc
 8000cf8:	080080c8 	.word	0x080080c8
 8000cfc:	200003d0 	.word	0x200003d0
 8000d00:	080080f4 	.word	0x080080f4

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	@ 0x50
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2234      	movs	r2, #52	@ 0x34
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f007 f8d0 	bl	8007eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d28:	f002 f9b2 	bl	8003090 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <SystemClock_Config+0xdc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	4a2b      	ldr	r2, [pc, #172]	@ (8000de0 <SystemClock_Config+0xdc>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d38:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <SystemClock_Config+0xdc>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d44:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <SystemClock_Config+0xe0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d4c:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <SystemClock_Config+0xe0>)
 8000d4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <SystemClock_Config+0xe0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d64:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d74:	2304      	movs	r3, #4
 8000d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d78:	2360      	movs	r3, #96	@ 0x60
 8000d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d80:	2304      	movs	r3, #4
 8000d82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 f9df 	bl	8003150 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d98:	f000 f826 	bl	8000de8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d9c:	f002 f988 	bl	80030b0 <HAL_PWREx_EnableOverDrive>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000da6:	f000 f81f 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	230f      	movs	r3, #15
 8000dac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dae:	2302      	movs	r3, #2
 8000db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 fc70 	bl	80036ac <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000dd2:	f000 f809 	bl	8000de8 <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3750      	adds	r7, #80	@ 0x50
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40007000 	.word	0x40007000

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <HAL_MspInit+0x44>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	4a08      	ldr	r2, [pc, #32]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <NMI_Handler+0x4>

08000e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <MemManage_Handler+0x4>

08000e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e92:	f001 f891 	bl	8001fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <DMA1_Stream5_IRQHandler+0x10>)
 8000ea2:	f001 fb7f 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000458 	.word	0x20000458

08000eb0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <DMA1_Stream6_IRQHandler+0x10>)
 8000eb6:	f001 fb75 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200004b8 	.word	0x200004b8

08000ec4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000eca:	f003 fe13 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000e8 	.word	0x200000e8

08000ed8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ede:	f003 fe09 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000e8 	.word	0x200000e8

08000eec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000ef2:	f003 fdff 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000e8 	.word	0x200000e8

08000f00 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <TIM1_CC_IRQHandler+0x10>)
 8000f06:	f003 fdf5 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000e8 	.word	0x200000e8

08000f14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <TIM2_IRQHandler+0x10>)
 8000f1a:	f003 fdeb 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000134 	.word	0x20000134

08000f28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <TIM3_IRQHandler+0x10>)
 8000f2e:	f003 fde1 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000180 	.word	0x20000180

08000f3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <TIM4_IRQHandler+0x10>)
 8000f42:	f003 fdd7 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001cc 	.word	0x200001cc

08000f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <USART2_IRQHandler+0x10>)
 8000f56:	f004 fe59 	bl	8005c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000348 	.word	0x20000348

08000f64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <USART3_IRQHandler+0x10>)
 8000f6a:	f004 fe4f 	bl	8005c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200003d0 	.word	0x200003d0

08000f78 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000f7e:	f003 fdb9 	bl	8004af4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000f82:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000f84:	f003 fdb6 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200002b0 	.word	0x200002b0
 8000f90:	200002fc 	.word	0x200002fc

08000f94 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000f9a:	f003 fdab 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200002b0 	.word	0x200002b0

08000fa8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000fae:	f003 fda1 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002b0 	.word	0x200002b0

08000fbc <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <TIM8_CC_IRQHandler+0x10>)
 8000fc2:	f003 fd97 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200002b0 	.word	0x200002b0

08000fd0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <TIM5_IRQHandler+0x10>)
 8000fd6:	f003 fd8d 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000218 	.word	0x20000218

08000fe4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <TIM6_DAC_IRQHandler+0x10>)
 8000fea:	f003 fd83 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000264 	.word	0x20000264

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	@ (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f006 ff88 	bl	8007f3c <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20080000 	.word	0x20080000
 8001058:	00000400 	.word	0x00000400
 800105c:	200000e4 	.word	0x200000e4
 8001060:	20000b48 	.word	0x20000b48

08001064 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2224      	movs	r2, #36	@ 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f006 ff0e 	bl	8007eb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <MX_TIM1_Init+0xac>)
 80010a8:	4a23      	ldr	r2, [pc, #140]	@ (8001138 <MX_TIM1_Init+0xb0>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_TIM1_Init+0xac>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <MX_TIM1_Init+0xac>)
 80010b4:	2210      	movs	r2, #16
 80010b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_TIM1_Init+0xac>)
 80010ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <MX_TIM1_Init+0xac>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_TIM1_Init+0xac>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <MX_TIM1_Init+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010d2:	2303      	movs	r3, #3
 80010d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010da:	2301      	movs	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80010e2:	230f      	movs	r3, #15
 80010e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ea:	2301      	movs	r3, #1
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80010f2:	230f      	movs	r3, #15
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	480d      	ldr	r0, [pc, #52]	@ (8001134 <MX_TIM1_Init+0xac>)
 80010fe:	f003 fbc5 	bl	800488c <HAL_TIM_Encoder_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001108:	f7ff fe6e 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_TIM1_Init+0xac>)
 800111e:	f004 fa5d 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001128:	f7ff fe5e 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3730      	adds	r7, #48	@ 0x30
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000e8 	.word	0x200000e8
 8001138:	40010000 	.word	0x40010000

0800113c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <MX_TIM2_Init+0xc4>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001168:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <MX_TIM2_Init+0xc4>)
 800116a:	222f      	movs	r2, #47	@ 0x2f
 800116c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_TIM2_Init+0xc4>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001174:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <MX_TIM2_Init+0xc4>)
 8001176:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800117a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_TIM2_Init+0xc4>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_TIM2_Init+0xc4>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001188:	481d      	ldr	r0, [pc, #116]	@ (8001200 <MX_TIM2_Init+0xc4>)
 800118a:	f003 f9ad 	bl	80044e8 <HAL_TIM_PWM_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001194:	f7ff fe28 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4816      	ldr	r0, [pc, #88]	@ (8001200 <MX_TIM2_Init+0xc4>)
 80011a8:	f004 fa18 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011b2:	f7ff fe19 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b6:	2360      	movs	r3, #96	@ 0x60
 80011b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_TIM2_Init+0xc4>)
 80011ce:	f003 fd99 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011d8:	f7ff fe06 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	220c      	movs	r2, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_TIM2_Init+0xc4>)
 80011e4:	f003 fd8e 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80011ee:	f7ff fdfb 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <MX_TIM2_Init+0xc4>)
 80011f4:	f000 fbbc 	bl	8001970 <HAL_TIM_MspPostInit>

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000134 	.word	0x20000134

08001204 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	@ 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2224      	movs	r2, #36	@ 0x24
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f006 fe50 	bl	8007eb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001224:	4a21      	ldr	r2, [pc, #132]	@ (80012ac <MX_TIM3_Init+0xa8>)
 8001226:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001230:	2210      	movs	r2, #16
 8001232:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800123a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001248:	2303      	movs	r3, #3
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001250:	2301      	movs	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001258:	230f      	movs	r3, #15
 800125a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001260:	2301      	movs	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001268:	230f      	movs	r3, #15
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001274:	f003 fb0a 	bl	800488c <HAL_TIM_Encoder_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800127e:	f7ff fdb3 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001290:	f004 f9a4 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800129a:	f7ff fda5 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3730      	adds	r7, #48	@ 0x30
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000180 	.word	0x20000180
 80012ac:	40000400 	.word	0x40000400

080012b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	@ 0x30
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2224      	movs	r2, #36	@ 0x24
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fdfa 	bl	8007eb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <MX_TIM4_Init+0xa8>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80012da:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012dc:	2210      	movs	r2, #16
 80012de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012f4:	2303      	movs	r3, #3
 80012f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001304:	230f      	movs	r3, #15
 8001306:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800130c:	2301      	movs	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001314:	230f      	movs	r3, #15
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	@ (8001354 <MX_TIM4_Init+0xa4>)
 8001320:	f003 fab4 	bl	800488c <HAL_TIM_Encoder_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800132a:	f7ff fd5d 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	@ (8001354 <MX_TIM4_Init+0xa4>)
 800133c:	f004 f94e 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001346:	f7ff fd4f 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	@ 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001cc 	.word	0x200001cc
 8001358:	40000800 	.word	0x40000800

0800135c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <MX_TIM5_Init+0xc4>)
 8001382:	4a28      	ldr	r2, [pc, #160]	@ (8001424 <MX_TIM5_Init+0xc8>)
 8001384:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001386:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <MX_TIM5_Init+0xc4>)
 8001388:	222f      	movs	r2, #47	@ 0x2f
 800138a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <MX_TIM5_Init+0xc4>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001392:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <MX_TIM5_Init+0xc4>)
 8001394:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001398:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <MX_TIM5_Init+0xc4>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_TIM5_Init+0xc4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013a6:	481e      	ldr	r0, [pc, #120]	@ (8001420 <MX_TIM5_Init+0xc4>)
 80013a8:	f003 f89e 	bl	80044e8 <HAL_TIM_PWM_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80013b2:	f7ff fd19 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4816      	ldr	r0, [pc, #88]	@ (8001420 <MX_TIM5_Init+0xc4>)
 80013c6:	f004 f909 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80013d0:	f7ff fd0a 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d4:	2360      	movs	r3, #96	@ 0x60
 80013d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	@ (8001420 <MX_TIM5_Init+0xc4>)
 80013ec:	f003 fc8a 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80013f6:	f7ff fcf7 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	220c      	movs	r2, #12
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <MX_TIM5_Init+0xc4>)
 8001402:	f003 fc7f 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 800140c:	f7ff fcec 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <MX_TIM5_Init+0xc4>)
 8001412:	f000 faad 	bl	8001970 <HAL_TIM_MspPostInit>

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	@ 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000218 	.word	0x20000218
 8001424:	40000c00 	.word	0x40000c00

08001428 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MX_TIM6_Init+0x68>)
 800143a:	4a16      	ldr	r2, [pc, #88]	@ (8001494 <MX_TIM6_Init+0x6c>)
 800143c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_TIM6_Init+0x68>)
 8001440:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001444:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <MX_TIM6_Init+0x68>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <MX_TIM6_Init+0x68>)
 800144e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001452:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_TIM6_Init+0x68>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800145a:	480d      	ldr	r0, [pc, #52]	@ (8001490 <MX_TIM6_Init+0x68>)
 800145c:	f002 ff74 	bl	8004348 <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001466:	f7ff fcbf 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	@ (8001490 <MX_TIM6_Init+0x68>)
 8001478:	f004 f8b0 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001482:	f7ff fcb1 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000264 	.word	0x20000264
 8001494:	40001000 	.word	0x40001000

08001498 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	@ 0x30
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	2224      	movs	r2, #36	@ 0x24
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f006 fd06 	bl	8007eb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <MX_TIM8_Init+0xac>)
 80014b8:	4a23      	ldr	r2, [pc, #140]	@ (8001548 <MX_TIM8_Init+0xb0>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014bc:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <MX_TIM8_Init+0xac>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80014c2:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <MX_TIM8_Init+0xac>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <MX_TIM8_Init+0xac>)
 80014ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <MX_TIM8_Init+0xac>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <MX_TIM8_Init+0xac>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <MX_TIM8_Init+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014e2:	2303      	movs	r3, #3
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014ea:	2301      	movs	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80014f2:	230f      	movs	r3, #15
 80014f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014fa:	2301      	movs	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001502:	230f      	movs	r3, #15
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	4619      	mov	r1, r3
 800150c:	480d      	ldr	r0, [pc, #52]	@ (8001544 <MX_TIM8_Init+0xac>)
 800150e:	f003 f9bd 	bl	800488c <HAL_TIM_Encoder_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001518:	f7ff fc66 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_TIM8_Init+0xac>)
 800152e:	f004 f855 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001538:	f7ff fc56 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	@ 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200002b0 	.word	0x200002b0
 8001548:	40010400 	.word	0x40010400

0800154c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	615a      	str	r2, [r3, #20]
 8001562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001564:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <MX_TIM12_Init+0x84>)
 8001566:	4a1b      	ldr	r2, [pc, #108]	@ (80015d4 <MX_TIM12_Init+0x88>)
 8001568:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 800156a:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <MX_TIM12_Init+0x84>)
 800156c:	225f      	movs	r2, #95	@ 0x5f
 800156e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <MX_TIM12_Init+0x84>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <MX_TIM12_Init+0x84>)
 8001578:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800157c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <MX_TIM12_Init+0x84>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <MX_TIM12_Init+0x84>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800158a:	4811      	ldr	r0, [pc, #68]	@ (80015d0 <MX_TIM12_Init+0x84>)
 800158c:	f002 ffac 	bl	80044e8 <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001596:	f7ff fc27 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159a:	2360      	movs	r3, #96	@ 0x60
 800159c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2204      	movs	r2, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <MX_TIM12_Init+0x84>)
 80015b2:	f003 fba7 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80015bc:	f7ff fc14 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015c0:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <MX_TIM12_Init+0x84>)
 80015c2:	f000 f9d5 	bl	8001970 <HAL_TIM_MspPostInit>

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200002fc 	.word	0x200002fc
 80015d4:	40001800 	.word	0x40001800

080015d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b090      	sub	sp, #64	@ 0x40
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a93      	ldr	r2, [pc, #588]	@ (8001844 <HAL_TIM_Encoder_MspInit+0x26c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d149      	bne.n	800168e <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fa:	4b93      	ldr	r3, [pc, #588]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a92      	ldr	r2, [pc, #584]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b90      	ldr	r3, [pc, #576]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001610:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001612:	4b8d      	ldr	r3, [pc, #564]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a8c      	ldr	r2, [pc, #560]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b8a      	ldr	r3, [pc, #552]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 800162a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800163c:	2301      	movs	r3, #1
 800163e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001640:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001644:	4619      	mov	r1, r3
 8001646:	4881      	ldr	r0, [pc, #516]	@ (800184c <HAL_TIM_Encoder_MspInit+0x274>)
 8001648:	f001 fa22 	bl	8002a90 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2018      	movs	r0, #24
 8001652:	f000 fdd0 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001656:	2018      	movs	r0, #24
 8001658:	f000 fde9 	bl	800222e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2019      	movs	r0, #25
 8001662:	f000 fdc8 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001666:	2019      	movs	r0, #25
 8001668:	f000 fde1 	bl	800222e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	201a      	movs	r0, #26
 8001672:	f000 fdc0 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001676:	201a      	movs	r0, #26
 8001678:	f000 fdd9 	bl	800222e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	201b      	movs	r0, #27
 8001682:	f000 fdb8 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001686:	201b      	movs	r0, #27
 8001688:	f000 fdd1 	bl	800222e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800168c:	e0d5      	b.n	800183a <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6f      	ldr	r2, [pc, #444]	@ (8001850 <HAL_TIM_Encoder_MspInit+0x278>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d14c      	bne.n	8001732 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001698:	4b6b      	ldr	r3, [pc, #428]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	4a6a      	ldr	r2, [pc, #424]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a4:	4b68      	ldr	r3, [pc, #416]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	623b      	str	r3, [r7, #32]
 80016ae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b65      	ldr	r3, [pc, #404]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	4a64      	ldr	r2, [pc, #400]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80016bc:	4b62      	ldr	r3, [pc, #392]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 80016e0:	2340      	movs	r3, #64	@ 0x40
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f0:	2302      	movs	r3, #2
 80016f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016f8:	4619      	mov	r1, r3
 80016fa:	4856      	ldr	r0, [pc, #344]	@ (8001854 <HAL_TIM_Encoder_MspInit+0x27c>)
 80016fc:	f001 f9c8 	bl	8002a90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001700:	2320      	movs	r3, #32
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001710:	2302      	movs	r3, #2
 8001712:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001718:	4619      	mov	r1, r3
 800171a:	484f      	ldr	r0, [pc, #316]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x280>)
 800171c:	f001 f9b8 	bl	8002a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	201d      	movs	r0, #29
 8001726:	f000 fd66 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800172a:	201d      	movs	r0, #29
 800172c:	f000 fd7f 	bl	800222e <HAL_NVIC_EnableIRQ>
}
 8001730:	e083      	b.n	800183a <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a49      	ldr	r2, [pc, #292]	@ (800185c <HAL_TIM_Encoder_MspInit+0x284>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d131      	bne.n	80017a0 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800173c:	4b42      	ldr	r3, [pc, #264]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a41      	ldr	r2, [pc, #260]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
 8001748:	4b3f      	ldr	r3, [pc, #252]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001754:	4b3c      	ldr	r3, [pc, #240]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001758:	4a3b      	ldr	r2, [pc, #236]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001760:	4b39      	ldr	r3, [pc, #228]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 800176c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800177e:	2302      	movs	r3, #2
 8001780:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001782:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001786:	4619      	mov	r1, r3
 8001788:	4835      	ldr	r0, [pc, #212]	@ (8001860 <HAL_TIM_Encoder_MspInit+0x288>)
 800178a:	f001 f981 	bl	8002a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	201e      	movs	r0, #30
 8001794:	f000 fd2f 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001798:	201e      	movs	r0, #30
 800179a:	f000 fd48 	bl	800222e <HAL_NVIC_EnableIRQ>
}
 800179e:	e04c      	b.n	800183a <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001864 <HAL_TIM_Encoder_MspInit+0x28c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d147      	bne.n	800183a <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	4a26      	ldr	r2, [pc, #152]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a20      	ldr	r2, [pc, #128]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x270>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 80017da:	23c0      	movs	r3, #192	@ 0xc0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017ea:	2303      	movs	r3, #3
 80017ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	481c      	ldr	r0, [pc, #112]	@ (8001868 <HAL_TIM_Encoder_MspInit+0x290>)
 80017f6:	f001 f94b 	bl	8002a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	202b      	movs	r0, #43	@ 0x2b
 8001800:	f000 fcf9 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001804:	202b      	movs	r0, #43	@ 0x2b
 8001806:	f000 fd12 	bl	800222e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	202c      	movs	r0, #44	@ 0x2c
 8001810:	f000 fcf1 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001814:	202c      	movs	r0, #44	@ 0x2c
 8001816:	f000 fd0a 	bl	800222e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	202d      	movs	r0, #45	@ 0x2d
 8001820:	f000 fce9 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001824:	202d      	movs	r0, #45	@ 0x2d
 8001826:	f000 fd02 	bl	800222e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	202e      	movs	r0, #46	@ 0x2e
 8001830:	f000 fce1 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001834:	202e      	movs	r0, #46	@ 0x2e
 8001836:	f000 fcfa 	bl	800222e <HAL_NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3740      	adds	r7, #64	@ 0x40
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40010000 	.word	0x40010000
 8001848:	40023800 	.word	0x40023800
 800184c:	40021000 	.word	0x40021000
 8001850:	40000400 	.word	0x40000400
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	40000800 	.word	0x40000800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40010400 	.word	0x40010400
 8001868:	40020800 	.word	0x40020800

0800186c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187c:	d114      	bne.n	80018a8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187e:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <HAL_TIM_PWM_MspInit+0xac>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	4a25      	ldr	r2, [pc, #148]	@ (8001918 <HAL_TIM_PWM_MspInit+0xac>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6413      	str	r3, [r2, #64]	@ 0x40
 800188a:	4b23      	ldr	r3, [pc, #140]	@ (8001918 <HAL_TIM_PWM_MspInit+0xac>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	201c      	movs	r0, #28
 800189c:	f000 fcab 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a0:	201c      	movs	r0, #28
 80018a2:	f000 fcc4 	bl	800222e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80018a6:	e032      	b.n	800190e <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1b      	ldr	r2, [pc, #108]	@ (800191c <HAL_TIM_PWM_MspInit+0xb0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d114      	bne.n	80018dc <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018b2:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_TIM_PWM_MspInit+0xac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	4a18      	ldr	r2, [pc, #96]	@ (8001918 <HAL_TIM_PWM_MspInit+0xac>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018be:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <HAL_TIM_PWM_MspInit+0xac>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2032      	movs	r0, #50	@ 0x32
 80018d0:	f000 fc91 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80018d4:	2032      	movs	r0, #50	@ 0x32
 80018d6:	f000 fcaa 	bl	800222e <HAL_NVIC_EnableIRQ>
}
 80018da:	e018      	b.n	800190e <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <HAL_TIM_PWM_MspInit+0xb4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d113      	bne.n	800190e <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_TIM_PWM_MspInit+0xac>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <HAL_TIM_PWM_MspInit+0xac>)
 80018ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_TIM_PWM_MspInit+0xac>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	202b      	movs	r0, #43	@ 0x2b
 8001904:	f000 fc77 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001908:	202b      	movs	r0, #43	@ 0x2b
 800190a:	f000 fc90 	bl	800222e <HAL_NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40000c00 	.word	0x40000c00
 8001920:	40001800 	.word	0x40001800

08001924 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <HAL_TIM_Base_MspInit+0x44>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d113      	bne.n	800195e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_TIM_Base_MspInit+0x48>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4a0c      	ldr	r2, [pc, #48]	@ (800196c <HAL_TIM_Base_MspInit+0x48>)
 800193c:	f043 0310 	orr.w	r3, r3, #16
 8001940:	6413      	str	r3, [r2, #64]	@ 0x40
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_TIM_Base_MspInit+0x48>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	2036      	movs	r0, #54	@ 0x36
 8001954:	f000 fc4f 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001958:	2036      	movs	r0, #54	@ 0x36
 800195a:	f000 fc68 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40001000 	.word	0x40001000
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	@ 0x30
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001990:	d139      	bne.n	8001a06 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b41      	ldr	r3, [pc, #260]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a40      	ldr	r2, [pc, #256]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 80019c2:	2320      	movs	r3, #32
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	482f      	ldr	r0, [pc, #188]	@ (8001a9c <HAL_TIM_MspPostInit+0x12c>)
 80019de:	f001 f857 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 80019e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	4828      	ldr	r0, [pc, #160]	@ (8001aa0 <HAL_TIM_MspPostInit+0x130>)
 8001a00:	f001 f846 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001a04:	e043      	b.n	8001a8e <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a26      	ldr	r2, [pc, #152]	@ (8001aa4 <HAL_TIM_MspPostInit+0x134>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d11c      	bne.n	8001a4a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	4a20      	ldr	r2, [pc, #128]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001a28:	2309      	movs	r3, #9
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	4816      	ldr	r0, [pc, #88]	@ (8001a9c <HAL_TIM_MspPostInit+0x12c>)
 8001a44:	f001 f824 	bl	8002a90 <HAL_GPIO_Init>
}
 8001a48:	e021      	b.n	8001a8e <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a16      	ldr	r2, [pc, #88]	@ (8001aa8 <HAL_TIM_MspPostInit+0x138>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d11c      	bne.n	8001a8e <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a54:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	4a0f      	ldr	r2, [pc, #60]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a60:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <HAL_TIM_MspPostInit+0x128>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001a7e:	2309      	movs	r3, #9
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <HAL_TIM_MspPostInit+0x130>)
 8001a8a:	f001 f801 	bl	8002a90 <HAL_GPIO_Init>
}
 8001a8e:	bf00      	nop
 8001a90:	3730      	adds	r7, #48	@ 0x30
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40000c00 	.word	0x40000c00
 8001aa8:	40001800 	.word	0x40001800

08001aac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ab2:	4a15      	ldr	r2, [pc, #84]	@ (8001b08 <MX_USART2_UART_Init+0x5c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aee:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001af0:	f003 fe20 	bl	8005734 <HAL_UART_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001afa:	f7ff f975 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000348 	.word	0x20000348
 8001b08:	40004400 	.word	0x40004400

08001b0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b12:	4a15      	ldr	r2, [pc, #84]	@ (8001b68 <MX_USART3_UART_Init+0x5c>)
 8001b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_USART3_UART_Init+0x58>)
 8001b50:	f003 fdf0 	bl	8005734 <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b5a:	f7ff f945 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200003d0 	.word	0x200003d0
 8001b68:	40004800 	.word	0x40004800

08001b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0b0      	sub	sp, #192	@ 0xc0
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	2290      	movs	r2, #144	@ 0x90
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f006 f993 	bl	8007eb8 <memset>
  if(uartHandle->Instance==USART2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a79      	ldr	r2, [pc, #484]	@ (8001d7c <HAL_UART_MspInit+0x210>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	f040 80a0 	bne.w	8001cde <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 ffa4 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bb6:	f7ff f917 	bl	8000de8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bba:	4b71      	ldr	r3, [pc, #452]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	4a70      	ldr	r2, [pc, #448]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd2:	4b6b      	ldr	r3, [pc, #428]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a6a      	ldr	r2, [pc, #424]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b68      	ldr	r3, [pc, #416]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bea:	2360      	movs	r3, #96	@ 0x60
 8001bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c02:	2307      	movs	r3, #7
 8001c04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c08:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	485d      	ldr	r0, [pc, #372]	@ (8001d84 <HAL_UART_MspInit+0x218>)
 8001c10:	f000 ff3e 	bl	8002a90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c14:	4b5c      	ldr	r3, [pc, #368]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c16:	4a5d      	ldr	r2, [pc, #372]	@ (8001d8c <HAL_UART_MspInit+0x220>)
 8001c18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c20:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c22:	4b59      	ldr	r3, [pc, #356]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c28:	4b57      	ldr	r3, [pc, #348]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c2e:	4b56      	ldr	r3, [pc, #344]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c34:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c36:	4b54      	ldr	r3, [pc, #336]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c3c:	4b52      	ldr	r3, [pc, #328]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c42:	4b51      	ldr	r3, [pc, #324]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c48:	4b4f      	ldr	r3, [pc, #316]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c54:	484c      	ldr	r0, [pc, #304]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c56:	f000 fb05 	bl	8002264 <HAL_DMA_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001c60:	f7ff f8c2 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a48      	ldr	r2, [pc, #288]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c68:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c6a:	4a47      	ldr	r2, [pc, #284]	@ (8001d88 <HAL_UART_MspInit+0x21c>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c70:	4b47      	ldr	r3, [pc, #284]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001c72:	4a48      	ldr	r2, [pc, #288]	@ (8001d94 <HAL_UART_MspInit+0x228>)
 8001c74:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c76:	4b46      	ldr	r3, [pc, #280]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001c78:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c7e:	4b44      	ldr	r3, [pc, #272]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001c80:	2240      	movs	r2, #64	@ 0x40
 8001c82:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c84:	4b42      	ldr	r3, [pc, #264]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c8a:	4b41      	ldr	r3, [pc, #260]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001c8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c90:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c92:	4b3f      	ldr	r3, [pc, #252]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c98:	4b3d      	ldr	r3, [pc, #244]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001caa:	4b39      	ldr	r3, [pc, #228]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cb0:	4837      	ldr	r0, [pc, #220]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001cb2:	f000 fad7 	bl	8002264 <HAL_DMA_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001cbc:	f7ff f894 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a33      	ldr	r2, [pc, #204]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001cc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8001cc6:	4a32      	ldr	r2, [pc, #200]	@ (8001d90 <HAL_UART_MspInit+0x224>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2026      	movs	r0, #38	@ 0x26
 8001cd2:	f000 fa90 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cd6:	2026      	movs	r0, #38	@ 0x26
 8001cd8:	f000 faa9 	bl	800222e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cdc:	e049      	b.n	8001d72 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d98 <HAL_UART_MspInit+0x22c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d144      	bne.n	8001d72 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ce8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 fefe 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001d02:	f7ff f871 	bl	8000de8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_UART_MspInit+0x214>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d50:	2307      	movs	r3, #7
 8001d52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d56:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4809      	ldr	r0, [pc, #36]	@ (8001d84 <HAL_UART_MspInit+0x218>)
 8001d5e:	f000 fe97 	bl	8002a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2027      	movs	r0, #39	@ 0x27
 8001d68:	f000 fa45 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d6c:	2027      	movs	r0, #39	@ 0x27
 8001d6e:	f000 fa5e 	bl	800222e <HAL_NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	37c0      	adds	r7, #192	@ 0xc0
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	20000458 	.word	0x20000458
 8001d8c:	40026088 	.word	0x40026088
 8001d90:	200004b8 	.word	0x200004b8
 8001d94:	400260a0 	.word	0x400260a0
 8001d98:	40004800 	.word	0x40004800

08001d9c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001da0:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001da2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001da6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001daa:	2206      	movs	r2, #6
 8001dac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de0:	f001 f81b 	bl	8002e1a <HAL_PCD_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001dea:	f7fe fffd 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000518 	.word	0x20000518

08001df8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0ae      	sub	sp, #184	@ 0xb8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2290      	movs	r2, #144	@ 0x90
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f006 f84d 	bl	8007eb8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e26:	d159      	bne.n	8001edc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fe5d 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001e44:	f7fe ffd0 	bl	8000de8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <HAL_PCD_MspInit+0xec>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ee4 <HAL_PCD_MspInit+0xec>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e54:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <HAL_PCD_MspInit+0xec>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e60:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001e64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4818      	ldr	r0, [pc, #96]	@ (8001ee8 <HAL_PCD_MspInit+0xf0>)
 8001e88:	f000 fe02 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4810      	ldr	r0, [pc, #64]	@ (8001ee8 <HAL_PCD_MspInit+0xf0>)
 8001ea8:	f000 fdf2 	bl	8002a90 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001eac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <HAL_PCD_MspInit+0xec>)
 8001eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <HAL_PCD_MspInit+0xec>)
 8001eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb6:	6353      	str	r3, [r2, #52]	@ 0x34
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_PCD_MspInit+0xec>)
 8001eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <HAL_PCD_MspInit+0xec>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec8:	4a06      	ldr	r2, [pc, #24]	@ (8001ee4 <HAL_PCD_MspInit+0xec>)
 8001eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ece:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed0:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <HAL_PCD_MspInit+0xec>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001edc:	bf00      	nop
 8001ede:	37b8      	adds	r7, #184	@ 0xb8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef0:	f7ff f8b8 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef4:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ef6:	490d      	ldr	r1, [pc, #52]	@ (8001f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001efc:	e002      	b.n	8001f04 <LoopCopyDataInit>

08001efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f02:	3304      	adds	r3, #4

08001f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f08:	d3f9      	bcc.n	8001efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f10:	e001      	b.n	8001f16 <LoopFillZerobss>

08001f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f14:	3204      	adds	r2, #4

08001f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f18:	d3fb      	bcc.n	8001f12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f1a:	f006 f815 	bl	8007f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1e:	f7fe fded 	bl	8000afc <main>
  bx  lr    
 8001f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001f30:	08008134 	.word	0x08008134
  ldr r2, =_sbss
 8001f34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001f38:	20000b44 	.word	0x20000b44

08001f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC_IRQHandler>

08001f3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f42:	2003      	movs	r0, #3
 8001f44:	f000 f94c 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 f805 	bl	8001f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4e:	f7fe ff51 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f60:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_InitTick+0x54>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <HAL_InitTick+0x58>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f967 	bl	800224a <HAL_SYSTICK_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00e      	b.n	8001fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d80a      	bhi.n	8001fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f000 f92f 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f98:	4a06      	ldr	r2, [pc, #24]	@ (8001fb4 <HAL_InitTick+0x5c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_IncTick+0x20>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_IncTick+0x24>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <HAL_IncTick+0x24>)
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	200009f8 	.word	0x200009f8

08001fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	@ (8001ff4 <HAL_GetTick+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	200009f8 	.word	0x200009f8

08001ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff ffee 	bl	8001fe0 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d005      	beq.n	800201e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_Delay+0x44>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800201e:	bf00      	nop
 8002020:	f7ff ffde 	bl	8001fe0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d8f7      	bhi.n	8002020 <HAL_Delay+0x28>
  {
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008

08002040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <__NVIC_SetPriorityGrouping+0x40>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 800206a:	4313      	orrs	r3, r2
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <__NVIC_SetPriorityGrouping+0x40>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00
 8002084:	05fa0000 	.word	0x05fa0000

08002088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800208c:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <__NVIC_GetPriorityGrouping+0x18>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0307 	and.w	r3, r3, #7
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db0b      	blt.n	80020ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4907      	ldr	r1, [pc, #28]	@ (80020dc <__NVIC_EnableIRQ+0x38>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2001      	movs	r0, #1
 80020c6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	@ (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	@ (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	@ 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff8e 	bl	80020e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff29 	bl	8002040 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff3e 	bl	8002088 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff8e 	bl	8002134 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5d 	bl	80020e0 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff31 	bl	80020a4 <__NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffa2 	bl	800219c <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff feb6 	bl	8001fe0 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e099      	b.n	80023b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a0:	e00f      	b.n	80022c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a2:	f7ff fe9d 	bl	8001fe0 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d908      	bls.n	80022c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e078      	b.n	80023b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e8      	bne.n	80022a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4b38      	ldr	r3, [pc, #224]	@ (80023bc <HAL_DMA_Init+0x158>)
 80022dc:	4013      	ands	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	2b04      	cmp	r3, #4
 800231a:	d107      	bne.n	800232c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	4313      	orrs	r3, r2
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f023 0307 	bic.w	r3, r3, #7
 8002342:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	2b04      	cmp	r3, #4
 8002354:	d117      	bne.n	8002386 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fb15 	bl	8002998 <DMA_CheckFifoParam>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2240      	movs	r2, #64	@ 0x40
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002382:	2301      	movs	r3, #1
 8002384:	e016      	b.n	80023b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 facc 	bl	800292c <DMA_CalcBaseAndBitshift>
 8002394:	4603      	mov	r3, r0
 8002396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	223f      	movs	r2, #63	@ 0x3f
 800239e:	409a      	lsls	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	e010803f 	.word	0xe010803f

080023c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_DMA_Start_IT+0x26>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e048      	b.n	8002478 <HAL_DMA_Start_IT+0xb8>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d137      	bne.n	800246a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fa5e 	bl	80028d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	223f      	movs	r2, #63	@ 0x3f
 800241a:	409a      	lsls	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0216 	orr.w	r2, r2, #22
 800242e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800243e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0208 	orr.w	r2, r2, #8
 8002456:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e005      	b.n	8002476 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002472:	2302      	movs	r3, #2
 8002474:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002476:	7dfb      	ldrb	r3, [r7, #23]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248e:	f7ff fda7 	bl	8001fe0 <HAL_GetTick>
 8002492:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d008      	beq.n	80024b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2280      	movs	r2, #128	@ 0x80
 80024a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e052      	b.n	8002558 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0216 	bic.w	r2, r2, #22
 80024c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_DMA_Abort+0x62>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002502:	e013      	b.n	800252c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002504:	f7ff fd6c 	bl	8001fe0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b05      	cmp	r3, #5
 8002510:	d90c      	bls.n	800252c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2203      	movs	r2, #3
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e015      	b.n	8002558 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e4      	bne.n	8002504 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	223f      	movs	r2, #63	@ 0x3f
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d004      	beq.n	800257e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2280      	movs	r2, #128	@ 0x80
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00c      	b.n	8002598 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2205      	movs	r2, #5
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80025b0:	4b8e      	ldr	r3, [pc, #568]	@ (80027ec <HAL_DMA_IRQHandler+0x248>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a8e      	ldr	r2, [pc, #568]	@ (80027f0 <HAL_DMA_IRQHandler+0x24c>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ce:	2208      	movs	r2, #8
 80025d0:	409a      	lsls	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01a      	beq.n	8002610 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	2208      	movs	r2, #8
 80025fe:	409a      	lsls	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	2201      	movs	r2, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	2201      	movs	r2, #1
 8002634:	409a      	lsls	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	f043 0202 	orr.w	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	2204      	movs	r2, #4
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002668:	2204      	movs	r2, #4
 800266a:	409a      	lsls	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002674:	f043 0204 	orr.w	r2, r3, #4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	2210      	movs	r2, #16
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d043      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03c      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	2210      	movs	r2, #16
 80026a0:	409a      	lsls	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d018      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d024      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
 80026d2:	e01f      	b.n	8002714 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
 80026e4:	e016      	b.n	8002714 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d107      	bne.n	8002704 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0208 	bic.w	r2, r2, #8
 8002702:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	2220      	movs	r2, #32
 800271a:	409a      	lsls	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 808f 	beq.w	8002844 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8087 	beq.w	8002844 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	2220      	movs	r2, #32
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b05      	cmp	r3, #5
 800274c:	d136      	bne.n	80027bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0216 	bic.w	r2, r2, #22
 800275c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800276c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_DMA_IRQHandler+0x1da>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0208 	bic.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002792:	223f      	movs	r2, #63	@ 0x3f
 8002794:	409a      	lsls	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07e      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
        }
        return;
 80027ba:	e079      	b.n	80028b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01d      	beq.n	8002806 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10d      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d031      	beq.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
 80027e8:	e02c      	b.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
 80027ea:	bf00      	nop
 80027ec:	20000000 	.word	0x20000000
 80027f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d023      	beq.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
 8002804:	e01e      	b.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0210 	bic.w	r2, r2, #16
 8002822:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	2b00      	cmp	r3, #0
 800284a:	d032      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d022      	beq.n	800289e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2205      	movs	r2, #5
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	3301      	adds	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d307      	bcc.n	800288c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f2      	bne.n	8002870 <HAL_DMA_IRQHandler+0x2cc>
 800288a:	e000      	b.n	800288e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800288c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
 80028ae:	e000      	b.n	80028b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028b0:	bf00      	nop
    }
  }
}
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b40      	cmp	r3, #64	@ 0x40
 80028fc:	d108      	bne.n	8002910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800290e:	e007      	b.n	8002920 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3b10      	subs	r3, #16
 800293c:	4a13      	ldr	r2, [pc, #76]	@ (800298c <DMA_CalcBaseAndBitshift+0x60>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002946:	4a12      	ldr	r2, [pc, #72]	@ (8002990 <DMA_CalcBaseAndBitshift+0x64>)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d908      	bls.n	800296c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <DMA_CalcBaseAndBitshift+0x68>)
 8002962:	4013      	ands	r3, r2
 8002964:	1d1a      	adds	r2, r3, #4
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	659a      	str	r2, [r3, #88]	@ 0x58
 800296a:	e006      	b.n	800297a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <DMA_CalcBaseAndBitshift+0x68>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	aaaaaaab 	.word	0xaaaaaaab
 8002990:	0800811c 	.word	0x0800811c
 8002994:	fffffc00 	.word	0xfffffc00

08002998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11f      	bne.n	80029f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d856      	bhi.n	8002a66 <DMA_CheckFifoParam+0xce>
 80029b8:	a201      	add	r2, pc, #4	@ (adr r2, 80029c0 <DMA_CheckFifoParam+0x28>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029d1 	.word	0x080029d1
 80029c4:	080029e3 	.word	0x080029e3
 80029c8:	080029d1 	.word	0x080029d1
 80029cc:	08002a67 	.word	0x08002a67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d046      	beq.n	8002a6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e0:	e043      	b.n	8002a6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029ea:	d140      	bne.n	8002a6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f0:	e03d      	b.n	8002a6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029fa:	d121      	bne.n	8002a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d837      	bhi.n	8002a72 <DMA_CheckFifoParam+0xda>
 8002a02:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <DMA_CheckFifoParam+0x70>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a1f 	.word	0x08002a1f
 8002a10:	08002a19 	.word	0x08002a19
 8002a14:	08002a31 	.word	0x08002a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e030      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d025      	beq.n	8002a76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2e:	e022      	b.n	8002a76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a38:	d11f      	bne.n	8002a7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a3e:	e01c      	b.n	8002a7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d903      	bls.n	8002a4e <DMA_CheckFifoParam+0xb6>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d003      	beq.n	8002a54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a4c:	e018      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
      break;
 8002a52:	e015      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      break;
 8002a64:	e00b      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      break;
 8002a66:	bf00      	nop
 8002a68:	e00a      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e008      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e006      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e004      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	@ 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	e175      	b.n	8002d9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	f040 8164 	bne.w	8002d96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d005      	beq.n	8002ae6 <HAL_GPIO_Init+0x56>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d130      	bne.n	8002b48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2203      	movs	r2, #3
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 0201 	and.w	r2, r3, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d017      	beq.n	8002b84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d123      	bne.n	8002bd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	08da      	lsrs	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3208      	adds	r2, #8
 8002b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	220f      	movs	r2, #15
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	08da      	lsrs	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3208      	adds	r2, #8
 8002bd2:	69b9      	ldr	r1, [r7, #24]
 8002bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0203 	and.w	r2, r3, #3
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80be 	beq.w	8002d96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1a:	4b66      	ldr	r3, [pc, #408]	@ (8002db4 <HAL_GPIO_Init+0x324>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	4a65      	ldr	r2, [pc, #404]	@ (8002db4 <HAL_GPIO_Init+0x324>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c26:	4b63      	ldr	r3, [pc, #396]	@ (8002db4 <HAL_GPIO_Init+0x324>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c32:	4a61      	ldr	r2, [pc, #388]	@ (8002db8 <HAL_GPIO_Init+0x328>)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a58      	ldr	r2, [pc, #352]	@ (8002dbc <HAL_GPIO_Init+0x32c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d037      	beq.n	8002cce <HAL_GPIO_Init+0x23e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a57      	ldr	r2, [pc, #348]	@ (8002dc0 <HAL_GPIO_Init+0x330>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_GPIO_Init+0x23a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a56      	ldr	r2, [pc, #344]	@ (8002dc4 <HAL_GPIO_Init+0x334>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d02b      	beq.n	8002cc6 <HAL_GPIO_Init+0x236>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a55      	ldr	r2, [pc, #340]	@ (8002dc8 <HAL_GPIO_Init+0x338>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d025      	beq.n	8002cc2 <HAL_GPIO_Init+0x232>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a54      	ldr	r2, [pc, #336]	@ (8002dcc <HAL_GPIO_Init+0x33c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01f      	beq.n	8002cbe <HAL_GPIO_Init+0x22e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a53      	ldr	r2, [pc, #332]	@ (8002dd0 <HAL_GPIO_Init+0x340>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x22a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a52      	ldr	r2, [pc, #328]	@ (8002dd4 <HAL_GPIO_Init+0x344>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x226>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a51      	ldr	r2, [pc, #324]	@ (8002dd8 <HAL_GPIO_Init+0x348>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x222>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a50      	ldr	r2, [pc, #320]	@ (8002ddc <HAL_GPIO_Init+0x34c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x21e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8002de0 <HAL_GPIO_Init+0x350>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x21a>
 8002ca6:	2309      	movs	r3, #9
 8002ca8:	e012      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002caa:	230a      	movs	r3, #10
 8002cac:	e010      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cae:	2308      	movs	r3, #8
 8002cb0:	e00e      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e00c      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e00a      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cba:	2305      	movs	r3, #5
 8002cbc:	e008      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	e006      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e004      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e002      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	f002 0203 	and.w	r2, r2, #3
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	4093      	lsls	r3, r2
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ce0:	4935      	ldr	r1, [pc, #212]	@ (8002db8 <HAL_GPIO_Init+0x328>)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cee:	4b3d      	ldr	r3, [pc, #244]	@ (8002de4 <HAL_GPIO_Init+0x354>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d12:	4a34      	ldr	r2, [pc, #208]	@ (8002de4 <HAL_GPIO_Init+0x354>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d18:	4b32      	ldr	r3, [pc, #200]	@ (8002de4 <HAL_GPIO_Init+0x354>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d3c:	4a29      	ldr	r2, [pc, #164]	@ (8002de4 <HAL_GPIO_Init+0x354>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d42:	4b28      	ldr	r3, [pc, #160]	@ (8002de4 <HAL_GPIO_Init+0x354>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d66:	4a1f      	ldr	r2, [pc, #124]	@ (8002de4 <HAL_GPIO_Init+0x354>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <HAL_GPIO_Init+0x354>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d90:	4a14      	ldr	r2, [pc, #80]	@ (8002de4 <HAL_GPIO_Init+0x354>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	f67f ae86 	bls.w	8002ab0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3724      	adds	r7, #36	@ 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	40020800 	.word	0x40020800
 8002dc8:	40020c00 	.word	0x40020c00
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40021400 	.word	0x40021400
 8002dd4:	40021800 	.word	0x40021800
 8002dd8:	40021c00 	.word	0x40021c00
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40022400 	.word	0x40022400
 8002de4:	40013c00 	.word	0x40013c00

08002de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	4613      	mov	r3, r2
 8002df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002df8:	787b      	ldrb	r3, [r7, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e04:	e003      	b.n	8002e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	041a      	lsls	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	619a      	str	r2, [r3, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af02      	add	r7, sp, #8
 8002e20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e108      	b.n	800303e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe ffd6 	bl	8001df8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2203      	movs	r2, #3
 8002e50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e5a:	d102      	bne.n	8002e62 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 f996 	bl	8007198 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7c1a      	ldrb	r2, [r3, #16]
 8002e74:	f88d 2000 	strb.w	r2, [sp]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e7c:	f004 f932 	bl	80070e4 <USB_CoreInit>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0d5      	b.n	800303e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 f98e 	bl	80071ba <USB_SetCurrentMode>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0c6      	b.n	800303e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]
 8002eb4:	e04a      	b.n	8002f4c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3315      	adds	r3, #21
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3314      	adds	r3, #20
 8002eda:	7bfa      	ldrb	r2, [r7, #15]
 8002edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	b298      	uxth	r0, r3
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	332e      	adds	r3, #46	@ 0x2e
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3318      	adds	r3, #24
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	331c      	adds	r3, #28
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3320      	adds	r3, #32
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3324      	adds	r3, #36	@ 0x24
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	791b      	ldrb	r3, [r3, #4]
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d3af      	bcc.n	8002eb6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e044      	b.n	8002fe6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	791b      	ldrb	r3, [r3, #4]
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d3b5      	bcc.n	8002f5c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7c1a      	ldrb	r2, [r3, #16]
 8002ff8:	f88d 2000 	strb.w	r2, [sp]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003000:	f004 f928 	bl	8007254 <USB_DevInit>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e013      	b.n	800303e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7b1b      	ldrb	r3, [r3, #12]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f80b 	bl	8003048 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f004 fae3 	bl	8007602 <USB_DevDisconnect>

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003076:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_PCDEx_ActivateLPM+0x44>)
 8003078:	4313      	orrs	r3, r2
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	10000003 	.word	0x10000003

08003090 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003094:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40007000 	.word	0x40007000

080030b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <HAL_PWREx_EnableOverDrive+0x98>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	4a22      	ldr	r2, [pc, #136]	@ (8003148 <HAL_PWREx_EnableOverDrive+0x98>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c6:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <HAL_PWREx_EnableOverDrive+0x98>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030d2:	4b1e      	ldr	r3, [pc, #120]	@ (800314c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1d      	ldr	r2, [pc, #116]	@ (800314c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030de:	f7fe ff7f 	bl	8001fe0 <HAL_GetTick>
 80030e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030e4:	e009      	b.n	80030fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030e6:	f7fe ff7b 	bl	8001fe0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030f4:	d901      	bls.n	80030fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e022      	b.n	8003140 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030fa:	4b14      	ldr	r3, [pc, #80]	@ (800314c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003106:	d1ee      	bne.n	80030e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003108:	4b10      	ldr	r3, [pc, #64]	@ (800314c <HAL_PWREx_EnableOverDrive+0x9c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0f      	ldr	r2, [pc, #60]	@ (800314c <HAL_PWREx_EnableOverDrive+0x9c>)
 800310e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003112:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003114:	f7fe ff64 	bl	8001fe0 <HAL_GetTick>
 8003118:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800311a:	e009      	b.n	8003130 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800311c:	f7fe ff60 	bl	8001fe0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800312a:	d901      	bls.n	8003130 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e007      	b.n	8003140 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800313c:	d1ee      	bne.n	800311c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000

08003150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003158:	2300      	movs	r3, #0
 800315a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e29b      	b.n	800369e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8087 	beq.w	8003282 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003174:	4b96      	ldr	r3, [pc, #600]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b04      	cmp	r3, #4
 800317e:	d00c      	beq.n	800319a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003180:	4b93      	ldr	r3, [pc, #588]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d112      	bne.n	80031b2 <HAL_RCC_OscConfig+0x62>
 800318c:	4b90      	ldr	r3, [pc, #576]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003198:	d10b      	bne.n	80031b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319a:	4b8d      	ldr	r3, [pc, #564]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d06c      	beq.n	8003280 <HAL_RCC_OscConfig+0x130>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d168      	bne.n	8003280 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e275      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x7a>
 80031bc:	4b84      	ldr	r3, [pc, #528]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a83      	ldr	r2, [pc, #524]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	e02e      	b.n	8003228 <HAL_RCC_OscConfig+0xd8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x9c>
 80031d2:	4b7f      	ldr	r3, [pc, #508]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a7e      	ldr	r2, [pc, #504]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80031d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b7c      	ldr	r3, [pc, #496]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7b      	ldr	r2, [pc, #492]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80031e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e01d      	b.n	8003228 <HAL_RCC_OscConfig+0xd8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0xc0>
 80031f6:	4b76      	ldr	r3, [pc, #472]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a75      	ldr	r2, [pc, #468]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80031fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b73      	ldr	r3, [pc, #460]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a72      	ldr	r2, [pc, #456]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0xd8>
 8003210:	4b6f      	ldr	r3, [pc, #444]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a6e      	ldr	r2, [pc, #440]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b6c      	ldr	r3, [pc, #432]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6b      	ldr	r2, [pc, #428]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fed6 	bl	8001fe0 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fed2 	bl	8001fe0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	@ 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e229      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b61      	ldr	r3, [pc, #388]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0xe8>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe fec2 	bl	8001fe0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe febe 	bl	8001fe0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	@ 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e215      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	4b57      	ldr	r3, [pc, #348]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x110>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d069      	beq.n	8003362 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800328e:	4b50      	ldr	r3, [pc, #320]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329a:	4b4d      	ldr	r3, [pc, #308]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d11c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x190>
 80032a6:	4b4a      	ldr	r3, [pc, #296]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d116      	bne.n	80032e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	4b47      	ldr	r3, [pc, #284]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_RCC_OscConfig+0x17a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1e9      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	493d      	ldr	r1, [pc, #244]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	e040      	b.n	8003362 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d023      	beq.n	8003330 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e8:	4b39      	ldr	r3, [pc, #228]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a38      	ldr	r2, [pc, #224]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fe74 	bl	8001fe0 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fc:	f7fe fe70 	bl	8001fe0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e1c7      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330e:	4b30      	ldr	r3, [pc, #192]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331a:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4929      	ldr	r1, [pc, #164]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
 800332e:	e018      	b.n	8003362 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003330:	4b27      	ldr	r3, [pc, #156]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a26      	ldr	r2, [pc, #152]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe fe50 	bl	8001fe0 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003344:	f7fe fe4c 	bl	8001fe0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1a3      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003356:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d038      	beq.n	80033e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d019      	beq.n	80033aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003376:	4b16      	ldr	r3, [pc, #88]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 8003378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337a:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fe fe2d 	bl	8001fe0 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338a:	f7fe fe29 	bl	8001fe0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e180      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 800339e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x23a>
 80033a8:	e01a      	b.n	80033e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033aa:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80033ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ae:	4a08      	ldr	r2, [pc, #32]	@ (80033d0 <HAL_RCC_OscConfig+0x280>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b6:	f7fe fe13 	bl	8001fe0 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033be:	f7fe fe0f 	bl	8001fe0 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d903      	bls.n	80033d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e166      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
 80033d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	4b92      	ldr	r3, [pc, #584]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ee      	bne.n	80033be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a4 	beq.w	8003536 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10d      	bne.n	8003416 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	4b89      	ldr	r3, [pc, #548]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	4a88      	ldr	r2, [pc, #544]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003404:	6413      	str	r3, [r2, #64]	@ 0x40
 8003406:	4b86      	ldr	r3, [pc, #536]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003412:	2301      	movs	r3, #1
 8003414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003416:	4b83      	ldr	r3, [pc, #524]	@ (8003624 <HAL_RCC_OscConfig+0x4d4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d118      	bne.n	8003454 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003422:	4b80      	ldr	r3, [pc, #512]	@ (8003624 <HAL_RCC_OscConfig+0x4d4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a7f      	ldr	r2, [pc, #508]	@ (8003624 <HAL_RCC_OscConfig+0x4d4>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342e:	f7fe fdd7 	bl	8001fe0 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003436:	f7fe fdd3 	bl	8001fe0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b64      	cmp	r3, #100	@ 0x64
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e12a      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003448:	4b76      	ldr	r3, [pc, #472]	@ (8003624 <HAL_RCC_OscConfig+0x4d4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x31a>
 800345c:	4b70      	ldr	r3, [pc, #448]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003460:	4a6f      	ldr	r2, [pc, #444]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6713      	str	r3, [r2, #112]	@ 0x70
 8003468:	e02d      	b.n	80034c6 <HAL_RCC_OscConfig+0x376>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x33c>
 8003472:	4b6b      	ldr	r3, [pc, #428]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	4a6a      	ldr	r2, [pc, #424]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	@ 0x70
 800347e:	4b68      	ldr	r3, [pc, #416]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	4a67      	ldr	r2, [pc, #412]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	f023 0304 	bic.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	@ 0x70
 800348a:	e01c      	b.n	80034c6 <HAL_RCC_OscConfig+0x376>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b05      	cmp	r3, #5
 8003492:	d10c      	bne.n	80034ae <HAL_RCC_OscConfig+0x35e>
 8003494:	4b62      	ldr	r3, [pc, #392]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003498:	4a61      	ldr	r2, [pc, #388]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a0:	4b5f      	ldr	r3, [pc, #380]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ac:	e00b      	b.n	80034c6 <HAL_RCC_OscConfig+0x376>
 80034ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ba:	4b59      	ldr	r3, [pc, #356]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	4a58      	ldr	r2, [pc, #352]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80034c0:	f023 0304 	bic.w	r3, r3, #4
 80034c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d015      	beq.n	80034fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe fd87 	bl	8001fe0 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe fd83 	bl	8001fe0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0d8      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ee      	beq.n	80034d6 <HAL_RCC_OscConfig+0x386>
 80034f8:	e014      	b.n	8003524 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7fe fd71 	bl	8001fe0 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fe fd6d 	bl	8001fe0 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e0c2      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003518:	4b41      	ldr	r3, [pc, #260]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ee      	bne.n	8003502 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003524:	7dfb      	ldrb	r3, [r7, #23]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d105      	bne.n	8003536 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352a:	4b3d      	ldr	r3, [pc, #244]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	4a3c      	ldr	r2, [pc, #240]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80ae 	beq.w	800369c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003540:	4b37      	ldr	r3, [pc, #220]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d06d      	beq.n	8003628 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d14b      	bne.n	80035ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003554:	4b32      	ldr	r3, [pc, #200]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a31      	ldr	r2, [pc, #196]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 800355a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fd3e 	bl	8001fe0 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fe fd3a 	bl	8001fe0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e091      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	4b29      	ldr	r3, [pc, #164]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b0:	071b      	lsls	r3, r3, #28
 80035b2:	491b      	ldr	r1, [pc, #108]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a18      	ldr	r2, [pc, #96]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80035be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fd0c 	bl	8001fe0 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fd08 	bl	8001fe0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e05f      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035de:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x47c>
 80035ea:	e057      	b.n	800369c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 80035f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe fcf2 	bl	8001fe0 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe fcee 	bl	8001fe0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e045      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	4b03      	ldr	r3, [pc, #12]	@ (8003620 <HAL_RCC_OscConfig+0x4d0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x4b0>
 800361e:	e03d      	b.n	800369c <HAL_RCC_OscConfig+0x54c>
 8003620:	40023800 	.word	0x40023800
 8003624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003628:	4b1f      	ldr	r3, [pc, #124]	@ (80036a8 <HAL_RCC_OscConfig+0x558>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d030      	beq.n	8003698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d129      	bne.n	8003698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d122      	bne.n	8003698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800365e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003660:	4293      	cmp	r3, r2
 8003662:	d119      	bne.n	8003698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	3b01      	subs	r3, #1
 8003672:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d10f      	bne.n	8003698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d107      	bne.n	8003698 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0d0      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d910      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b67      	ldr	r3, [pc, #412]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 020f 	bic.w	r2, r3, #15
 80036da:	4965      	ldr	r1, [pc, #404]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b63      	ldr	r3, [pc, #396]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b8      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b59      	ldr	r3, [pc, #356]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a58      	ldr	r2, [pc, #352]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003712:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003716:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003724:	4b53      	ldr	r3, [pc, #332]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a52      	ldr	r2, [pc, #328]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800372a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800372e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b50      	ldr	r3, [pc, #320]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	494d      	ldr	r1, [pc, #308]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d040      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b47      	ldr	r3, [pc, #284]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e073      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b3d      	ldr	r3, [pc, #244]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06b      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b39      	ldr	r3, [pc, #228]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4936      	ldr	r1, [pc, #216]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a0:	f7fe fc1e 	bl	8001fe0 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fe fc1a 	bl	8001fe0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e053      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b2d      	ldr	r3, [pc, #180]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d210      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 020f 	bic.w	r2, r3, #15
 80037e6:	4922      	ldr	r1, [pc, #136]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e032      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b19      	ldr	r3, [pc, #100]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4916      	ldr	r1, [pc, #88]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800382a:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490e      	ldr	r1, [pc, #56]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383e:	f000 f821 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8003842:	4602      	mov	r2, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	490a      	ldr	r1, [pc, #40]	@ (8003878 <HAL_RCC_ClockConfig+0x1cc>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	4a09      	ldr	r2, [pc, #36]	@ (800387c <HAL_RCC_ClockConfig+0x1d0>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800385a:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_RCC_ClockConfig+0x1d4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fb7a 	bl	8001f58 <HAL_InitTick>

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023c00 	.word	0x40023c00
 8003874:	40023800 	.word	0x40023800
 8003878:	08008104 	.word	0x08008104
 800387c:	20000000 	.word	0x20000000
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003888:	b094      	sub	sp, #80	@ 0x50
 800388a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003890:	2300      	movs	r3, #0
 8003892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003894:	2300      	movs	r3, #0
 8003896:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800389c:	4b79      	ldr	r3, [pc, #484]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d00d      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x40>
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	f200 80e1 	bhi.w	8003a70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x34>
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d003      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x3a>
 80038b6:	e0db      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b8:	4b73      	ldr	r3, [pc, #460]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038bc:	e0db      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038be:	4b73      	ldr	r3, [pc, #460]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x208>)
 80038c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038c2:	e0d8      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d063      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038da:	4b6a      	ldr	r3, [pc, #424]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	099b      	lsrs	r3, r3, #6
 80038e0:	2200      	movs	r2, #0
 80038e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038f6:	4622      	mov	r2, r4
 80038f8:	462b      	mov	r3, r5
 80038fa:	f04f 0000 	mov.w	r0, #0
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	0159      	lsls	r1, r3, #5
 8003904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003908:	0150      	lsls	r0, r2, #5
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4621      	mov	r1, r4
 8003910:	1a51      	subs	r1, r2, r1
 8003912:	6139      	str	r1, [r7, #16]
 8003914:	4629      	mov	r1, r5
 8003916:	eb63 0301 	sbc.w	r3, r3, r1
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003928:	4659      	mov	r1, fp
 800392a:	018b      	lsls	r3, r1, #6
 800392c:	4651      	mov	r1, sl
 800392e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003932:	4651      	mov	r1, sl
 8003934:	018a      	lsls	r2, r1, #6
 8003936:	4651      	mov	r1, sl
 8003938:	ebb2 0801 	subs.w	r8, r2, r1
 800393c:	4659      	mov	r1, fp
 800393e:	eb63 0901 	sbc.w	r9, r3, r1
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003956:	4690      	mov	r8, r2
 8003958:	4699      	mov	r9, r3
 800395a:	4623      	mov	r3, r4
 800395c:	eb18 0303 	adds.w	r3, r8, r3
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	462b      	mov	r3, r5
 8003964:	eb49 0303 	adc.w	r3, r9, r3
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003976:	4629      	mov	r1, r5
 8003978:	024b      	lsls	r3, r1, #9
 800397a:	4621      	mov	r1, r4
 800397c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003980:	4621      	mov	r1, r4
 8003982:	024a      	lsls	r2, r1, #9
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800398a:	2200      	movs	r2, #0
 800398c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800398e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003994:	f7fc fc58 	bl	8000248 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4613      	mov	r3, r2
 800399e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039a0:	e058      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a2:	4b38      	ldr	r3, [pc, #224]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	2200      	movs	r2, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	4611      	mov	r1, r2
 80039ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039b2:	623b      	str	r3, [r7, #32]
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039bc:	4642      	mov	r2, r8
 80039be:	464b      	mov	r3, r9
 80039c0:	f04f 0000 	mov.w	r0, #0
 80039c4:	f04f 0100 	mov.w	r1, #0
 80039c8:	0159      	lsls	r1, r3, #5
 80039ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ce:	0150      	lsls	r0, r2, #5
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4641      	mov	r1, r8
 80039d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039da:	4649      	mov	r1, r9
 80039dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039f4:	ebb2 040a 	subs.w	r4, r2, sl
 80039f8:	eb63 050b 	sbc.w	r5, r3, fp
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	00eb      	lsls	r3, r5, #3
 8003a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0a:	00e2      	lsls	r2, r4, #3
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	461d      	mov	r5, r3
 8003a10:	4643      	mov	r3, r8
 8003a12:	18e3      	adds	r3, r4, r3
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	464b      	mov	r3, r9
 8003a18:	eb45 0303 	adc.w	r3, r5, r3
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	028b      	lsls	r3, r1, #10
 8003a2e:	4621      	mov	r1, r4
 8003a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a34:	4621      	mov	r1, r4
 8003a36:	028a      	lsls	r2, r1, #10
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	61fa      	str	r2, [r7, #28]
 8003a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a48:	f7fc fbfe 	bl	8000248 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4613      	mov	r3, r2
 8003a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3750      	adds	r7, #80	@ 0x50
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	007a1200 	.word	0x007a1200

08003a90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	@ (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000000 	.word	0x20000000

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4903      	ldr	r1, [pc, #12]	@ (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08008114 	.word	0x08008114

08003ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad4:	f7ff ffdc 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0b5b      	lsrs	r3, r3, #13
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4903      	ldr	r1, [pc, #12]	@ (8003af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	08008114 	.word	0x08008114

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d012      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b20:	4b69      	ldr	r3, [pc, #420]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a68      	ldr	r2, [pc, #416]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b26:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b2a:	6093      	str	r3, [r2, #8]
 8003b2c:	4b66      	ldr	r3, [pc, #408]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b34:	4964      	ldr	r1, [pc, #400]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d017      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b52:	4b5d      	ldr	r3, [pc, #372]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b60:	4959      	ldr	r1, [pc, #356]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b70:	d101      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b72:	2301      	movs	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d017      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	494a      	ldr	r1, [pc, #296]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 808b 	beq.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	4a39      	ldr	r2, [pc, #228]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be8:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bf4:	4b35      	ldr	r3, [pc, #212]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a34      	ldr	r2, [pc, #208]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fe f9ee 	bl	8001fe0 <HAL_GetTick>
 8003c04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7fe f9ea 	bl	8001fe0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	@ 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e38f      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c26:	4b28      	ldr	r3, [pc, #160]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d035      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d02e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c44:	4b20      	ldr	r3, [pc, #128]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c58:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c66:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c6c:	4b16      	ldr	r3, [pc, #88]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d114      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe f9b2 	bl	8001fe0 <HAL_GetTick>
 8003c7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7fe f9ae 	bl	8001fe0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e351      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ee      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cae:	d111      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cb0:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cbc:	4b04      	ldr	r3, [pc, #16]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	4901      	ldr	r1, [pc, #4]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	0ffffcff 	.word	0x0ffffcff
 8003cd4:	4bac      	ldr	r3, [pc, #688]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4aab      	ldr	r2, [pc, #684]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cda:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cde:	6093      	str	r3, [r2, #8]
 8003ce0:	4ba9      	ldr	r3, [pc, #676]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	49a6      	ldr	r1, [pc, #664]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d010      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cfe:	4ba2      	ldr	r3, [pc, #648]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d04:	4aa0      	ldr	r2, [pc, #640]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	499b      	ldr	r1, [pc, #620]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d2c:	4b96      	ldr	r3, [pc, #600]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d3a:	4993      	ldr	r1, [pc, #588]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d4e:	4b8e      	ldr	r3, [pc, #568]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d5c:	498a      	ldr	r1, [pc, #552]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d70:	4b85      	ldr	r3, [pc, #532]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7e:	4982      	ldr	r1, [pc, #520]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d92:	4b7d      	ldr	r3, [pc, #500]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	4979      	ldr	r1, [pc, #484]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db4:	4b74      	ldr	r3, [pc, #464]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	f023 0203 	bic.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	4971      	ldr	r1, [pc, #452]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ddc:	f023 020c 	bic.w	r2, r3, #12
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de4:	4968      	ldr	r1, [pc, #416]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df8:	4b63      	ldr	r3, [pc, #396]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e06:	4960      	ldr	r1, [pc, #384]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e20:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e28:	4957      	ldr	r1, [pc, #348]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e3c:	4b52      	ldr	r3, [pc, #328]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4a:	494f      	ldr	r1, [pc, #316]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	4946      	ldr	r1, [pc, #280]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e80:	4b41      	ldr	r3, [pc, #260]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8e:	493e      	ldr	r1, [pc, #248]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ea2:	4b39      	ldr	r3, [pc, #228]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb0:	4935      	ldr	r1, [pc, #212]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ec4:	4b30      	ldr	r3, [pc, #192]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed2:	492d      	ldr	r1, [pc, #180]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d011      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ee6:	4b28      	ldr	r3, [pc, #160]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ef4:	4924      	ldr	r1, [pc, #144]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f04:	d101      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f26:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f34:	4914      	ldr	r1, [pc, #80]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f48:	4b0f      	ldr	r3, [pc, #60]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f58:	490b      	ldr	r1, [pc, #44]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f7c:	4902      	ldr	r1, [pc, #8]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f84:	e002      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f98:	4b8a      	ldr	r3, [pc, #552]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa8:	4986      	ldr	r1, [pc, #536]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00b      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fbc:	4b81      	ldr	r3, [pc, #516]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fcc:	497d      	ldr	r1, [pc, #500]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d006      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80d6 	beq.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fe8:	4b76      	ldr	r3, [pc, #472]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a75      	ldr	r2, [pc, #468]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd fff4 	bl	8001fe0 <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ffc:	f7fd fff0 	bl	8001fe0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	@ 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e195      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800400e:	4b6d      	ldr	r3, [pc, #436]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d021      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11d      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800402e:	4b65      	ldr	r3, [pc, #404]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800403c:	4b61      	ldr	r3, [pc, #388]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800403e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004042:	0e1b      	lsrs	r3, r3, #24
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	019a      	lsls	r2, r3, #6
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	071b      	lsls	r3, r3, #28
 8004062:	4958      	ldr	r1, [pc, #352]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02e      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004094:	d129      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004096:	4b4b      	ldr	r3, [pc, #300]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040a4:	4b47      	ldr	r3, [pc, #284]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040aa:	0f1b      	lsrs	r3, r3, #28
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	019a      	lsls	r2, r3, #6
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	071b      	lsls	r3, r3, #28
 80040ca:	493e      	ldr	r1, [pc, #248]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040d2:	4b3c      	ldr	r3, [pc, #240]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d8:	f023 021f 	bic.w	r2, r3, #31
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	3b01      	subs	r3, #1
 80040e2:	4938      	ldr	r1, [pc, #224]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01d      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040f6:	4b33      	ldr	r3, [pc, #204]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040fc:	0e1b      	lsrs	r3, r3, #24
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004104:	4b2f      	ldr	r3, [pc, #188]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800410a:	0f1b      	lsrs	r3, r3, #28
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	019a      	lsls	r2, r3, #6
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	4926      	ldr	r1, [pc, #152]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d011      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	019a      	lsls	r2, r3, #6
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	071b      	lsls	r3, r3, #28
 800415a:	491a      	ldr	r1, [pc, #104]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004162:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004168:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800416c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416e:	f7fd ff37 	bl	8001fe0 <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004176:	f7fd ff33 	bl	8001fe0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b64      	cmp	r3, #100	@ 0x64
 8004182:	d901      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0d8      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004188:	4b0e      	ldr	r3, [pc, #56]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b01      	cmp	r3, #1
 8004198:	f040 80ce 	bne.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800419c:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a08      	ldr	r2, [pc, #32]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fd ff1a 	bl	8001fe0 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041ae:	e00b      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041b0:	f7fd ff16 	bl	8001fe0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	@ 0x64
 80041bc:	d904      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e0bb      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041d4:	d0ec      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d02e      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d12a      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041fe:	4b51      	ldr	r3, [pc, #324]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800420c:	4b4d      	ldr	r3, [pc, #308]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004212:	0f1b      	lsrs	r3, r3, #28
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	019a      	lsls	r2, r3, #6
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	061b      	lsls	r3, r3, #24
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	071b      	lsls	r3, r3, #28
 8004232:	4944      	ldr	r1, [pc, #272]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800423a:	4b42      	ldr	r3, [pc, #264]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800423c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004240:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	493d      	ldr	r1, [pc, #244]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d022      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004268:	d11d      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800426a:	4b36      	ldr	r3, [pc, #216]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	0e1b      	lsrs	r3, r3, #24
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004278:	4b32      	ldr	r3, [pc, #200]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427e:	0f1b      	lsrs	r3, r3, #28
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	019a      	lsls	r2, r3, #6
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	431a      	orrs	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	061b      	lsls	r3, r3, #24
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	071b      	lsls	r3, r3, #28
 800429e:	4929      	ldr	r1, [pc, #164]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d028      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b8:	0e1b      	lsrs	r3, r3, #24
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042c0:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	019a      	lsls	r2, r3, #6
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	431a      	orrs	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	071b      	lsls	r3, r3, #28
 80042e6:	4917      	ldr	r1, [pc, #92]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ee:	4b15      	ldr	r3, [pc, #84]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	4911      	ldr	r1, [pc, #68]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004304:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0e      	ldr	r2, [pc, #56]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800430e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fd fe66 	bl	8001fe0 <HAL_GetTick>
 8004314:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004318:	f7fd fe62 	bl	8001fe0 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	@ 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e007      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800432a:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004336:	d1ef      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800

08004348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e049      	b.n	80043ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd fad8 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f000 fdf8 	bl	8004f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d001      	beq.n	8004410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e054      	b.n	80044ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a26      	ldr	r2, [pc, #152]	@ (80044c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d022      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x80>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443a:	d01d      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x80>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a22      	ldr	r2, [pc, #136]	@ (80044cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d018      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x80>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a21      	ldr	r2, [pc, #132]	@ (80044d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x80>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1f      	ldr	r2, [pc, #124]	@ (80044d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00e      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x80>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1e      	ldr	r2, [pc, #120]	@ (80044d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d009      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x80>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <HAL_TIM_Base_Start_IT+0xe4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x80>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	@ (80044e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d115      	bne.n	80044a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	4b19      	ldr	r3, [pc, #100]	@ (80044e4 <HAL_TIM_Base_Start_IT+0xec>)
 8004480:	4013      	ands	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b06      	cmp	r3, #6
 8004488:	d015      	beq.n	80044b6 <HAL_TIM_Base_Start_IT+0xbe>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004490:	d011      	beq.n	80044b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a2:	e008      	b.n	80044b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e000      	b.n	80044b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	40010400 	.word	0x40010400
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40001800 	.word	0x40001800
 80044e4:	00010007 	.word	0x00010007

080044e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e049      	b.n	800458e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fd f9ac 	bl	800186c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f000 fd28 	bl	8004f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <HAL_TIM_PWM_Start+0x24>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e03c      	b.n	8004636 <HAL_TIM_PWM_Start+0x9e>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d109      	bne.n	80045d6 <HAL_TIM_PWM_Start+0x3e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	bf14      	ite	ne
 80045ce:	2301      	movne	r3, #1
 80045d0:	2300      	moveq	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	e02f      	b.n	8004636 <HAL_TIM_PWM_Start+0x9e>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d109      	bne.n	80045f0 <HAL_TIM_PWM_Start+0x58>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e022      	b.n	8004636 <HAL_TIM_PWM_Start+0x9e>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d109      	bne.n	800460a <HAL_TIM_PWM_Start+0x72>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	bf14      	ite	ne
 8004602:	2301      	movne	r3, #1
 8004604:	2300      	moveq	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	e015      	b.n	8004636 <HAL_TIM_PWM_Start+0x9e>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b10      	cmp	r3, #16
 800460e:	d109      	bne.n	8004624 <HAL_TIM_PWM_Start+0x8c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e008      	b.n	8004636 <HAL_TIM_PWM_Start+0x9e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e092      	b.n	8004764 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Start+0xb6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800464c:	e023      	b.n	8004696 <HAL_TIM_PWM_Start+0xfe>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0xc6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800465c:	e01b      	b.n	8004696 <HAL_TIM_PWM_Start+0xfe>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0xd6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800466c:	e013      	b.n	8004696 <HAL_TIM_PWM_Start+0xfe>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0xe6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800467c:	e00b      	b.n	8004696 <HAL_TIM_PWM_Start+0xfe>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b10      	cmp	r3, #16
 8004682:	d104      	bne.n	800468e <HAL_TIM_PWM_Start+0xf6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800468c:	e003      	b.n	8004696 <HAL_TIM_PWM_Start+0xfe>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2202      	movs	r2, #2
 8004692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2201      	movs	r2, #1
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 ff76 	bl	8005590 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a30      	ldr	r2, [pc, #192]	@ (800476c <HAL_TIM_PWM_Start+0x1d4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_TIM_PWM_Start+0x120>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004770 <HAL_TIM_PWM_Start+0x1d8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_TIM_PWM_Start+0x124>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_TIM_PWM_Start+0x126>
 80046bc:	2300      	movs	r3, #0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a25      	ldr	r2, [pc, #148]	@ (800476c <HAL_TIM_PWM_Start+0x1d4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d022      	beq.n	8004722 <HAL_TIM_PWM_Start+0x18a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e4:	d01d      	beq.n	8004722 <HAL_TIM_PWM_Start+0x18a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a22      	ldr	r2, [pc, #136]	@ (8004774 <HAL_TIM_PWM_Start+0x1dc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d018      	beq.n	8004722 <HAL_TIM_PWM_Start+0x18a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a20      	ldr	r2, [pc, #128]	@ (8004778 <HAL_TIM_PWM_Start+0x1e0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <HAL_TIM_PWM_Start+0x18a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1f      	ldr	r2, [pc, #124]	@ (800477c <HAL_TIM_PWM_Start+0x1e4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00e      	beq.n	8004722 <HAL_TIM_PWM_Start+0x18a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a19      	ldr	r2, [pc, #100]	@ (8004770 <HAL_TIM_PWM_Start+0x1d8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_TIM_PWM_Start+0x18a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1b      	ldr	r2, [pc, #108]	@ (8004780 <HAL_TIM_PWM_Start+0x1e8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <HAL_TIM_PWM_Start+0x18a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a19      	ldr	r2, [pc, #100]	@ (8004784 <HAL_TIM_PWM_Start+0x1ec>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d115      	bne.n	800474e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	4b17      	ldr	r3, [pc, #92]	@ (8004788 <HAL_TIM_PWM_Start+0x1f0>)
 800472a:	4013      	ands	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b06      	cmp	r3, #6
 8004732:	d015      	beq.n	8004760 <HAL_TIM_PWM_Start+0x1c8>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473a:	d011      	beq.n	8004760 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474c:	e008      	b.n	8004760 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e000      	b.n	8004762 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40014000 	.word	0x40014000
 8004784:	40001800 	.word	0x40001800
 8004788:	00010007 	.word	0x00010007

0800478c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fef6 	bl	8005590 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a36      	ldr	r2, [pc, #216]	@ (8004884 <HAL_TIM_PWM_Stop+0xf8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_TIM_PWM_Stop+0x2c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a35      	ldr	r2, [pc, #212]	@ (8004888 <HAL_TIM_PWM_Stop+0xfc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d101      	bne.n	80047bc <HAL_TIM_PWM_Stop+0x30>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <HAL_TIM_PWM_Stop+0x32>
 80047bc:	2300      	movs	r3, #0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d017      	beq.n	80047f2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10f      	bne.n	80047f2 <HAL_TIM_PWM_Stop+0x66>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6a1a      	ldr	r2, [r3, #32]
 80047d8:	f240 4344 	movw	r3, #1092	@ 0x444
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d107      	bne.n	80047f2 <HAL_TIM_PWM_Stop+0x66>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <HAL_TIM_PWM_Stop+0x96>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	f240 4344 	movw	r3, #1092	@ 0x444
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d107      	bne.n	8004822 <HAL_TIM_PWM_Stop+0x96>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Stop+0xa6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004830:	e023      	b.n	800487a <HAL_TIM_PWM_Stop+0xee>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b04      	cmp	r3, #4
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Stop+0xb6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004840:	e01b      	b.n	800487a <HAL_TIM_PWM_Stop+0xee>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Stop+0xc6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004850:	e013      	b.n	800487a <HAL_TIM_PWM_Stop+0xee>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Stop+0xd6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004860:	e00b      	b.n	800487a <HAL_TIM_PWM_Stop+0xee>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b10      	cmp	r3, #16
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Stop+0xe6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004870:	e003      	b.n	800487a <HAL_TIM_PWM_Stop+0xee>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40010000 	.word	0x40010000
 8004888:	40010400 	.word	0x40010400

0800488c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e08f      	b.n	80049c0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fc fe8f 	bl	80015d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6899      	ldr	r1, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b3e      	ldr	r3, [pc, #248]	@ (80049c8 <HAL_TIM_Encoder_Init+0x13c>)
 80048ce:	400b      	ands	r3, r1
 80048d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f000 fb4d 	bl	8004f7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4b31      	ldr	r3, [pc, #196]	@ (80049cc <HAL_TIM_Encoder_Init+0x140>)
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	4313      	orrs	r3, r2
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <HAL_TIM_Encoder_Init+0x144>)
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4b2a      	ldr	r3, [pc, #168]	@ (80049d4 <HAL_TIM_Encoder_Init+0x148>)
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	4313      	orrs	r3, r2
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	011a      	lsls	r2, r3, #4
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	031b      	lsls	r3, r3, #12
 800494c:	4313      	orrs	r3, r2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800495a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	4313      	orrs	r3, r2
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	fffebff8 	.word	0xfffebff8
 80049cc:	fffffcfc 	.word	0xfffffcfc
 80049d0:	fffff3f3 	.word	0xfffff3f3
 80049d4:	ffff0f0f 	.word	0xffff0f0f

080049d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d110      	bne.n	8004a2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d102      	bne.n	8004a14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a0e:	7b7b      	ldrb	r3, [r7, #13]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d001      	beq.n	8004a18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e069      	b.n	8004aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a28:	e031      	b.n	8004a8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d110      	bne.n	8004a52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a30:	7bbb      	ldrb	r3, [r7, #14]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d102      	bne.n	8004a3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a36:	7b3b      	ldrb	r3, [r7, #12]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d001      	beq.n	8004a40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e055      	b.n	8004aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a50:	e01d      	b.n	8004a8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d108      	bne.n	8004a6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a58:	7bbb      	ldrb	r3, [r7, #14]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d105      	bne.n	8004a6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a5e:	7b7b      	ldrb	r3, [r7, #13]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d102      	bne.n	8004a6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a64:	7b3b      	ldrb	r3, [r7, #12]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d001      	beq.n	8004a6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e03e      	b.n	8004aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_TIM_Encoder_Start+0xc4>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d008      	beq.n	8004aac <HAL_TIM_Encoder_Start+0xd4>
 8004a9a:	e00f      	b.n	8004abc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fd73 	bl	8005590 <TIM_CCxChannelCmd>
      break;
 8004aaa:	e016      	b.n	8004ada <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	2104      	movs	r1, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fd6b 	bl	8005590 <TIM_CCxChannelCmd>
      break;
 8004aba:	e00e      	b.n	8004ada <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fd63 	bl	8005590 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	2104      	movs	r1, #4
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fd5c 	bl	8005590 <TIM_CCxChannelCmd>
      break;
 8004ad8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d020      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0202 	mvn.w	r2, #2
 8004b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9fe 	bl	8004f40 <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f9f0 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fa01 	bl	8004f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d020      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01b      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0204 	mvn.w	r2, #4
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9d8 	bl	8004f40 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9ca 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f9db 	bl	8004f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d020      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01b      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0208 	mvn.w	r2, #8
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9b2 	bl	8004f40 <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f9a4 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f9b5 	bl	8004f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d020      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0210 	mvn.w	r2, #16
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2208      	movs	r2, #8
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f98c 	bl	8004f40 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f97e 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f98f 	bl	8004f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0201 	mvn.w	r2, #1
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fb ff06 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fd3f 	bl	800570c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00c      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fd37 	bl	8005720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00c      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f949 	bl	8004f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00c      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f06f 0220 	mvn.w	r2, #32
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fcff 	bl	80056f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e0ff      	b.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b14      	cmp	r3, #20
 8004d2e:	f200 80f0 	bhi.w	8004f12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d32:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d8d 	.word	0x08004d8d
 8004d3c:	08004f13 	.word	0x08004f13
 8004d40:	08004f13 	.word	0x08004f13
 8004d44:	08004f13 	.word	0x08004f13
 8004d48:	08004dcd 	.word	0x08004dcd
 8004d4c:	08004f13 	.word	0x08004f13
 8004d50:	08004f13 	.word	0x08004f13
 8004d54:	08004f13 	.word	0x08004f13
 8004d58:	08004e0f 	.word	0x08004e0f
 8004d5c:	08004f13 	.word	0x08004f13
 8004d60:	08004f13 	.word	0x08004f13
 8004d64:	08004f13 	.word	0x08004f13
 8004d68:	08004e4f 	.word	0x08004e4f
 8004d6c:	08004f13 	.word	0x08004f13
 8004d70:	08004f13 	.word	0x08004f13
 8004d74:	08004f13 	.word	0x08004f13
 8004d78:	08004e91 	.word	0x08004e91
 8004d7c:	08004f13 	.word	0x08004f13
 8004d80:	08004f13 	.word	0x08004f13
 8004d84:	08004f13 	.word	0x08004f13
 8004d88:	08004ed1 	.word	0x08004ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f99e 	bl	80050d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0208 	orr.w	r2, r2, #8
 8004da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0204 	bic.w	r2, r2, #4
 8004db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	619a      	str	r2, [r3, #24]
      break;
 8004dca:	e0a5      	b.n	8004f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f9f0 	bl	80051b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6999      	ldr	r1, [r3, #24]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	021a      	lsls	r2, r3, #8
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	619a      	str	r2, [r3, #24]
      break;
 8004e0c:	e084      	b.n	8004f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fa47 	bl	80052a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0208 	orr.w	r2, r2, #8
 8004e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0204 	bic.w	r2, r2, #4
 8004e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	61da      	str	r2, [r3, #28]
      break;
 8004e4c:	e064      	b.n	8004f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fa9d 	bl	8005394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69d9      	ldr	r1, [r3, #28]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	021a      	lsls	r2, r3, #8
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	61da      	str	r2, [r3, #28]
      break;
 8004e8e:	e043      	b.n	8004f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fad4 	bl	8005444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0204 	bic.w	r2, r2, #4
 8004eba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ece:	e023      	b.n	8004f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fb06 	bl	80054e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004efa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	021a      	lsls	r2, r3, #8
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f10:	e002      	b.n	8004f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
      break;
 8004f16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop

08004f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a46      	ldr	r2, [pc, #280]	@ (80050a8 <TIM_Base_SetConfig+0x12c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9a:	d00f      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a43      	ldr	r2, [pc, #268]	@ (80050ac <TIM_Base_SetConfig+0x130>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a42      	ldr	r2, [pc, #264]	@ (80050b0 <TIM_Base_SetConfig+0x134>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d007      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a41      	ldr	r2, [pc, #260]	@ (80050b4 <TIM_Base_SetConfig+0x138>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a40      	ldr	r2, [pc, #256]	@ (80050b8 <TIM_Base_SetConfig+0x13c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d108      	bne.n	8004fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a35      	ldr	r2, [pc, #212]	@ (80050a8 <TIM_Base_SetConfig+0x12c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d02b      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fdc:	d027      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a32      	ldr	r2, [pc, #200]	@ (80050ac <TIM_Base_SetConfig+0x130>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d023      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a31      	ldr	r2, [pc, #196]	@ (80050b0 <TIM_Base_SetConfig+0x134>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01f      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a30      	ldr	r2, [pc, #192]	@ (80050b4 <TIM_Base_SetConfig+0x138>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d01b      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80050b8 <TIM_Base_SetConfig+0x13c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d017      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2e      	ldr	r2, [pc, #184]	@ (80050bc <TIM_Base_SetConfig+0x140>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2d      	ldr	r2, [pc, #180]	@ (80050c0 <TIM_Base_SetConfig+0x144>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00f      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2c      	ldr	r2, [pc, #176]	@ (80050c4 <TIM_Base_SetConfig+0x148>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2b      	ldr	r2, [pc, #172]	@ (80050c8 <TIM_Base_SetConfig+0x14c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2a      	ldr	r2, [pc, #168]	@ (80050cc <TIM_Base_SetConfig+0x150>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a29      	ldr	r2, [pc, #164]	@ (80050d0 <TIM_Base_SetConfig+0x154>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d108      	bne.n	8005040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a10      	ldr	r2, [pc, #64]	@ (80050a8 <TIM_Base_SetConfig+0x12c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_Base_SetConfig+0xf8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a12      	ldr	r2, [pc, #72]	@ (80050b8 <TIM_Base_SetConfig+0x13c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d103      	bne.n	800507c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d105      	bne.n	800509a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f023 0201 	bic.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	611a      	str	r2, [r3, #16]
  }
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40010400 	.word	0x40010400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	40001800 	.word	0x40001800
 80050cc:	40001c00 	.word	0x40001c00
 80050d0:	40002000 	.word	0x40002000

080050d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f023 0201 	bic.w	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4b2b      	ldr	r3, [pc, #172]	@ (80051ac <TIM_OC1_SetConfig+0xd8>)
 8005100:	4013      	ands	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 0302 	bic.w	r3, r3, #2
 800511c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a21      	ldr	r2, [pc, #132]	@ (80051b0 <TIM_OC1_SetConfig+0xdc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC1_SetConfig+0x64>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a20      	ldr	r2, [pc, #128]	@ (80051b4 <TIM_OC1_SetConfig+0xe0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10c      	bne.n	8005152 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0308 	bic.w	r3, r3, #8
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <TIM_OC1_SetConfig+0xdc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_OC1_SetConfig+0x8e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a15      	ldr	r2, [pc, #84]	@ (80051b4 <TIM_OC1_SetConfig+0xe0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d111      	bne.n	8005186 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	fffeff8f 	.word	0xfffeff8f
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400

080051b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f023 0210 	bic.w	r2, r3, #16
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4b2e      	ldr	r3, [pc, #184]	@ (800529c <TIM_OC2_SetConfig+0xe4>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0320 	bic.w	r3, r3, #32
 8005202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a23      	ldr	r2, [pc, #140]	@ (80052a0 <TIM_OC2_SetConfig+0xe8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC2_SetConfig+0x68>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a22      	ldr	r2, [pc, #136]	@ (80052a4 <TIM_OC2_SetConfig+0xec>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10d      	bne.n	800523c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800523a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <TIM_OC2_SetConfig+0xe8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC2_SetConfig+0x94>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <TIM_OC2_SetConfig+0xec>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d113      	bne.n	8005274 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	feff8fff 	.word	0xfeff8fff
 80052a0:	40010000 	.word	0x40010000
 80052a4:	40010400 	.word	0x40010400

080052a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005388 <TIM_OC3_SetConfig+0xe0>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a22      	ldr	r2, [pc, #136]	@ (800538c <TIM_OC3_SetConfig+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC3_SetConfig+0x66>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a21      	ldr	r2, [pc, #132]	@ (8005390 <TIM_OC3_SetConfig+0xe8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d10d      	bne.n	800532a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a17      	ldr	r2, [pc, #92]	@ (800538c <TIM_OC3_SetConfig+0xe4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_OC3_SetConfig+0x92>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a16      	ldr	r2, [pc, #88]	@ (8005390 <TIM_OC3_SetConfig+0xe8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d113      	bne.n	8005362 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	621a      	str	r2, [r3, #32]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	fffeff8f 	.word	0xfffeff8f
 800538c:	40010000 	.word	0x40010000
 8005390:	40010400 	.word	0x40010400

08005394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4b1e      	ldr	r3, [pc, #120]	@ (8005438 <TIM_OC4_SetConfig+0xa4>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	031b      	lsls	r3, r3, #12
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a13      	ldr	r2, [pc, #76]	@ (800543c <TIM_OC4_SetConfig+0xa8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_OC4_SetConfig+0x68>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a12      	ldr	r2, [pc, #72]	@ (8005440 <TIM_OC4_SetConfig+0xac>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d109      	bne.n	8005410 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	019b      	lsls	r3, r3, #6
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	feff8fff 	.word	0xfeff8fff
 800543c:	40010000 	.word	0x40010000
 8005440:	40010400 	.word	0x40010400

08005444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <TIM_OC5_SetConfig+0x98>)
 8005470:	4013      	ands	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005484:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a12      	ldr	r2, [pc, #72]	@ (80054e0 <TIM_OC5_SetConfig+0x9c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d003      	beq.n	80054a2 <TIM_OC5_SetConfig+0x5e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a11      	ldr	r2, [pc, #68]	@ (80054e4 <TIM_OC5_SetConfig+0xa0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d109      	bne.n	80054b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	621a      	str	r2, [r3, #32]
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	fffeff8f 	.word	0xfffeff8f
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400

080054e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4b1c      	ldr	r3, [pc, #112]	@ (8005584 <TIM_OC6_SetConfig+0x9c>)
 8005514:	4013      	ands	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800552a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	051b      	lsls	r3, r3, #20
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a13      	ldr	r2, [pc, #76]	@ (8005588 <TIM_OC6_SetConfig+0xa0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_OC6_SetConfig+0x60>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a12      	ldr	r2, [pc, #72]	@ (800558c <TIM_OC6_SetConfig+0xa4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d109      	bne.n	800555c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800554e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	029b      	lsls	r3, r3, #10
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	feff8fff 	.word	0xfeff8fff
 8005588:	40010000 	.word	0x40010000
 800558c:	40010400 	.word	0x40010400

08005590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2201      	movs	r2, #1
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	43db      	mvns	r3, r3
 80055b2:	401a      	ands	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e06d      	b.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a30      	ldr	r2, [pc, #192]	@ (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2f      	ldr	r2, [pc, #188]	@ (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d108      	bne.n	800563a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800562e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a20      	ldr	r2, [pc, #128]	@ (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d022      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005666:	d01d      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1d      	ldr	r2, [pc, #116]	@ (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d018      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1c      	ldr	r2, [pc, #112]	@ (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1a      	ldr	r2, [pc, #104]	@ (80056ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00e      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a15      	ldr	r2, [pc, #84]	@ (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d009      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a16      	ldr	r2, [pc, #88]	@ (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a15      	ldr	r2, [pc, #84]	@ (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10c      	bne.n	80056be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40010400 	.word	0x40010400
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40000c00 	.word	0x40000c00
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40001800 	.word	0x40001800

080056f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e040      	b.n	80057c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fc fa08 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2224      	movs	r2, #36	@ 0x24
 8005760:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fff0 	bl	8006760 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fd89 	bl	8006298 <UART_SetConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e01b      	b.n	80057c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800579e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 f86f 	bl	80068a4 <UART_CheckIdleState>
 80057c6:	4603      	mov	r3, r0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	@ 0x28
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d177      	bne.n	80058d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_UART_Transmit+0x24>
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e070      	b.n	80058da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2221      	movs	r2, #33	@ 0x21
 8005804:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005806:	f7fc fbeb 	bl	8001fe0 <HAL_GetTick>
 800580a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005824:	d108      	bne.n	8005838 <HAL_UART_Transmit+0x68>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e003      	b.n	8005840 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005840:	e02f      	b.n	80058a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	2180      	movs	r1, #128	@ 0x80
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f001 f8d1 	bl	80069f4 <UART_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e03b      	b.n	80058da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005876:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	3302      	adds	r3, #2
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	e007      	b.n	8005890 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1c9      	bne.n	8005842 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	2140      	movs	r1, #64	@ 0x40
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f001 f89b 	bl	80069f4 <UART_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e005      	b.n	80058da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	@ 0x28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d165      	bne.n	80059c6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <HAL_UART_Transmit_DMA+0x22>
 8005900:	88fb      	ldrh	r3, [r7, #6]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e05e      	b.n	80059c8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	88fa      	ldrh	r2, [r7, #6]
 8005914:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2221      	movs	r2, #33	@ 0x21
 800592c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005932:	2b00      	cmp	r3, #0
 8005934:	d027      	beq.n	8005986 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593a:	4a25      	ldr	r2, [pc, #148]	@ (80059d0 <HAL_UART_Transmit_DMA+0xec>)
 800593c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005942:	4a24      	ldr	r2, [pc, #144]	@ (80059d4 <HAL_UART_Transmit_DMA+0xf0>)
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594a:	4a23      	ldr	r2, [pc, #140]	@ (80059d8 <HAL_UART_Transmit_DMA+0xf4>)
 800594c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005952:	2200      	movs	r2, #0
 8005954:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595e:	4619      	mov	r1, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3328      	adds	r3, #40	@ 0x28
 8005966:	461a      	mov	r2, r3
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	f7fc fd29 	bl	80023c0 <HAL_DMA_Start_IT>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2210      	movs	r2, #16
 8005978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e020      	b.n	80059c8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2240      	movs	r2, #64	@ 0x40
 800598c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	613b      	str	r3, [r7, #16]
   return(result);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3308      	adds	r3, #8
 80059ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ae:	623a      	str	r2, [r7, #32]
 80059b0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	69f9      	ldr	r1, [r7, #28]
 80059b4:	6a3a      	ldr	r2, [r7, #32]
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e5      	bne.n	800598e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e000      	b.n	80059c8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80059c6:	2302      	movs	r3, #2
  }
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3728      	adds	r7, #40	@ 0x28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	08006d25 	.word	0x08006d25
 80059d4:	08006dbb 	.word	0x08006dbb
 80059d8:	08006f3d 	.word	0x08006f3d

080059dc <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08e      	sub	sp, #56	@ 0x38
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a04:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e6      	bne.n	80059e4 <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a20:	2b80      	cmp	r3, #128	@ 0x80
 8005a22:	d137      	bne.n	8005a94 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3308      	adds	r3, #8
 8005a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a44:	61ba      	str	r2, [r7, #24]
 8005a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	613b      	str	r3, [r7, #16]
   return(result);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d019      	beq.n	8005a94 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a64:	2200      	movs	r2, #0
 8005a66:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fc fd07 	bl	8002480 <HAL_DMA_Abort>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00d      	beq.n	8005a94 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fc ff1b 	bl	80028b8 <HAL_DMA_GetError>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d105      	bne.n	8005a94 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2210      	movs	r2, #16
 8005a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e007      	b.n	8005aa4 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3738      	adds	r7, #56	@ 0x38
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b09a      	sub	sp, #104	@ 0x68
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ad4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ad8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e6      	bne.n	8005ab4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3308      	adds	r3, #8
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3308      	adds	r3, #8
 8005b04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b06:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e5      	bne.n	8005ae6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d118      	bne.n	8005b54 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f023 0310 	bic.w	r3, r3, #16
 8005b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b42:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e6      	bne.n	8005b22 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b40      	cmp	r3, #64	@ 0x40
 8005b60:	d137      	bne.n	8005bd2 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3308      	adds	r3, #8
 8005b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3308      	adds	r3, #8
 8005b80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b82:	61ba      	str	r2, [r7, #24]
 8005b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6979      	ldr	r1, [r7, #20]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e5      	bne.n	8005b62 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d019      	beq.n	8005bd2 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fc fc68 	bl	8002480 <HAL_DMA_Abort>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00d      	beq.n	8005bd2 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fc fe7c 	bl	80028b8 <HAL_DMA_GetError>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	d105      	bne.n	8005bd2 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2210      	movs	r2, #16
 8005bca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e017      	b.n	8005c02 <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	220f      	movs	r2, #15
 8005be0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699a      	ldr	r2, [r3, #24]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0208 	orr.w	r2, r2, #8
 8005bf0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3768      	adds	r7, #104	@ 0x68
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b0ba      	sub	sp, #232	@ 0xe8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005c36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d115      	bne.n	8005c74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00f      	beq.n	8005c74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d009      	beq.n	8005c74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 82ac 	beq.w	80061c2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
      }
      return;
 8005c72:	e2a6      	b.n	80061c2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8117 	beq.w	8005eac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c8e:	4b85      	ldr	r3, [pc, #532]	@ (8005ea4 <HAL_UART_IRQHandler+0x298>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 810a 	beq.w	8005eac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d011      	beq.n	8005cc8 <HAL_UART_IRQHandler+0xbc>
 8005ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cbe:	f043 0201 	orr.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d011      	beq.n	8005cf8 <HAL_UART_IRQHandler+0xec>
 8005cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00b      	beq.n	8005cf8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cee:	f043 0204 	orr.w	r2, r3, #4
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d011      	beq.n	8005d28 <HAL_UART_IRQHandler+0x11c>
 8005d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2204      	movs	r2, #4
 8005d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d1e:	f043 0202 	orr.w	r2, r3, #2
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d017      	beq.n	8005d64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d105      	bne.n	8005d4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2208      	movs	r2, #8
 8005d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d5a:	f043 0208 	orr.w	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d012      	beq.n	8005d96 <HAL_UART_IRQHandler+0x18a>
 8005d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00c      	beq.n	8005d96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8c:	f043 0220 	orr.w	r2, r3, #32
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8212 	beq.w	80061c6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dde:	2b40      	cmp	r3, #64	@ 0x40
 8005de0:	d005      	beq.n	8005dee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005de6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d04f      	beq.n	8005e8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 ff34 	bl	8006c5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfe:	2b40      	cmp	r3, #64	@ 0x40
 8005e00:	d141      	bne.n	8005e86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3308      	adds	r3, #8
 8005e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3308      	adds	r3, #8
 8005e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1d9      	bne.n	8005e02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d013      	beq.n	8005e7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5a:	4a13      	ldr	r2, [pc, #76]	@ (8005ea8 <HAL_UART_IRQHandler+0x29c>)
 8005e5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fc fb7c 	bl	8002560 <HAL_DMA_Abort_IT>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d017      	beq.n	8005e9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	e00f      	b.n	8005e9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f9d4 	bl	800622c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e84:	e00b      	b.n	8005e9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f9d0 	bl	800622c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	e007      	b.n	8005e9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f9cc 	bl	800622c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005e9c:	e193      	b.n	80061c6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e9e:	bf00      	nop
    return;
 8005ea0:	e191      	b.n	80061c6 <HAL_UART_IRQHandler+0x5ba>
 8005ea2:	bf00      	nop
 8005ea4:	04000120 	.word	0x04000120
 8005ea8:	08006fbb 	.word	0x08006fbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	f040 814c 	bne.w	800614e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8145 	beq.w	800614e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 813e 	beq.w	800614e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2210      	movs	r2, #16
 8005ed8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	f040 80b6 	bne.w	8006056 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ef6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 8165 	beq.w	80061ca <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	f080 815d 	bcs.w	80061ca <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f24:	f000 8086 	beq.w	8006034 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1da      	bne.n	8005f28 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3308      	adds	r3, #8
 8005f78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3308      	adds	r3, #8
 8005f92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e1      	bne.n	8005f72 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e3      	bne.n	8005fae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006004:	f023 0310 	bic.w	r3, r3, #16
 8006008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006016:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006018:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800601c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e4      	bne.n	8005ff4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800602e:	4618      	mov	r0, r3
 8006030:	f7fc fa26 	bl	8002480 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006046:	b29b      	uxth	r3, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	b29b      	uxth	r3, r3
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fa fb9e 	bl	8000790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006054:	e0b9      	b.n	80061ca <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006062:	b29b      	uxth	r3, r3
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 80ab 	beq.w	80061ce <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80a6 	beq.w	80061ce <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006092:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006096:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e4      	bne.n	8006082 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3308      	adds	r3, #8
 80060be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	623b      	str	r3, [r7, #32]
   return(result);
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80060de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e3      	bne.n	80060b8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	60fb      	str	r3, [r7, #12]
   return(result);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f023 0310 	bic.w	r3, r3, #16
 8006118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	69b9      	ldr	r1, [r7, #24]
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	617b      	str	r3, [r7, #20]
   return(result);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e4      	bne.n	8006104 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fa fb22 	bl	8000790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800614c:	e03f      	b.n	80061ce <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00e      	beq.n	8006178 <HAL_UART_IRQHandler+0x56c>
 800615a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800615e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d008      	beq.n	8006178 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800616e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f865 	bl	8006240 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006176:	e02d      	b.n	80061d4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00e      	beq.n	80061a2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01c      	beq.n	80061d2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
    }
    return;
 80061a0:	e017      	b.n	80061d2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d012      	beq.n	80061d4 <HAL_UART_IRQHandler+0x5c8>
 80061ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00c      	beq.n	80061d4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 ff13 	bl	8006fe6 <UART_EndTransmit_IT>
    return;
 80061c0:	e008      	b.n	80061d4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80061c2:	bf00      	nop
 80061c4:	e006      	b.n	80061d4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80061c6:	bf00      	nop
 80061c8:	e004      	b.n	80061d4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80061ca:	bf00      	nop
 80061cc:	e002      	b.n	80061d4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80061ce:	bf00      	nop
 80061d0:	e000      	b.n	80061d4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80061d2:	bf00      	nop
  }

}
 80061d4:	37e8      	adds	r7, #232	@ 0xe8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop

080061dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006260:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006268:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4313      	orrs	r3, r2
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4ba6      	ldr	r3, [pc, #664]	@ (800655c <UART_SetConfig+0x2c4>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	430a      	orrs	r2, r1
 8006308:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a94      	ldr	r2, [pc, #592]	@ (8006560 <UART_SetConfig+0x2c8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d120      	bne.n	8006356 <UART_SetConfig+0xbe>
 8006314:	4b93      	ldr	r3, [pc, #588]	@ (8006564 <UART_SetConfig+0x2cc>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b03      	cmp	r3, #3
 8006320:	d816      	bhi.n	8006350 <UART_SetConfig+0xb8>
 8006322:	a201      	add	r2, pc, #4	@ (adr r2, 8006328 <UART_SetConfig+0x90>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	08006339 	.word	0x08006339
 800632c:	08006345 	.word	0x08006345
 8006330:	0800633f 	.word	0x0800633f
 8006334:	0800634b 	.word	0x0800634b
 8006338:	2301      	movs	r3, #1
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e150      	b.n	80065e0 <UART_SetConfig+0x348>
 800633e:	2302      	movs	r3, #2
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e14d      	b.n	80065e0 <UART_SetConfig+0x348>
 8006344:	2304      	movs	r3, #4
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e14a      	b.n	80065e0 <UART_SetConfig+0x348>
 800634a:	2308      	movs	r3, #8
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e147      	b.n	80065e0 <UART_SetConfig+0x348>
 8006350:	2310      	movs	r3, #16
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e144      	b.n	80065e0 <UART_SetConfig+0x348>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a83      	ldr	r2, [pc, #524]	@ (8006568 <UART_SetConfig+0x2d0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d132      	bne.n	80063c6 <UART_SetConfig+0x12e>
 8006360:	4b80      	ldr	r3, [pc, #512]	@ (8006564 <UART_SetConfig+0x2cc>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006366:	f003 030c 	and.w	r3, r3, #12
 800636a:	2b0c      	cmp	r3, #12
 800636c:	d828      	bhi.n	80063c0 <UART_SetConfig+0x128>
 800636e:	a201      	add	r2, pc, #4	@ (adr r2, 8006374 <UART_SetConfig+0xdc>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	080063a9 	.word	0x080063a9
 8006378:	080063c1 	.word	0x080063c1
 800637c:	080063c1 	.word	0x080063c1
 8006380:	080063c1 	.word	0x080063c1
 8006384:	080063b5 	.word	0x080063b5
 8006388:	080063c1 	.word	0x080063c1
 800638c:	080063c1 	.word	0x080063c1
 8006390:	080063c1 	.word	0x080063c1
 8006394:	080063af 	.word	0x080063af
 8006398:	080063c1 	.word	0x080063c1
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063c1 	.word	0x080063c1
 80063a4:	080063bb 	.word	0x080063bb
 80063a8:	2300      	movs	r3, #0
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e118      	b.n	80065e0 <UART_SetConfig+0x348>
 80063ae:	2302      	movs	r3, #2
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e115      	b.n	80065e0 <UART_SetConfig+0x348>
 80063b4:	2304      	movs	r3, #4
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e112      	b.n	80065e0 <UART_SetConfig+0x348>
 80063ba:	2308      	movs	r3, #8
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e10f      	b.n	80065e0 <UART_SetConfig+0x348>
 80063c0:	2310      	movs	r3, #16
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e10c      	b.n	80065e0 <UART_SetConfig+0x348>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a68      	ldr	r2, [pc, #416]	@ (800656c <UART_SetConfig+0x2d4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d120      	bne.n	8006412 <UART_SetConfig+0x17a>
 80063d0:	4b64      	ldr	r3, [pc, #400]	@ (8006564 <UART_SetConfig+0x2cc>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063da:	2b30      	cmp	r3, #48	@ 0x30
 80063dc:	d013      	beq.n	8006406 <UART_SetConfig+0x16e>
 80063de:	2b30      	cmp	r3, #48	@ 0x30
 80063e0:	d814      	bhi.n	800640c <UART_SetConfig+0x174>
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d009      	beq.n	80063fa <UART_SetConfig+0x162>
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d810      	bhi.n	800640c <UART_SetConfig+0x174>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <UART_SetConfig+0x15c>
 80063ee:	2b10      	cmp	r3, #16
 80063f0:	d006      	beq.n	8006400 <UART_SetConfig+0x168>
 80063f2:	e00b      	b.n	800640c <UART_SetConfig+0x174>
 80063f4:	2300      	movs	r3, #0
 80063f6:	77fb      	strb	r3, [r7, #31]
 80063f8:	e0f2      	b.n	80065e0 <UART_SetConfig+0x348>
 80063fa:	2302      	movs	r3, #2
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e0ef      	b.n	80065e0 <UART_SetConfig+0x348>
 8006400:	2304      	movs	r3, #4
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e0ec      	b.n	80065e0 <UART_SetConfig+0x348>
 8006406:	2308      	movs	r3, #8
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e0e9      	b.n	80065e0 <UART_SetConfig+0x348>
 800640c:	2310      	movs	r3, #16
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e0e6      	b.n	80065e0 <UART_SetConfig+0x348>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a56      	ldr	r2, [pc, #344]	@ (8006570 <UART_SetConfig+0x2d8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d120      	bne.n	800645e <UART_SetConfig+0x1c6>
 800641c:	4b51      	ldr	r3, [pc, #324]	@ (8006564 <UART_SetConfig+0x2cc>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006422:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006426:	2bc0      	cmp	r3, #192	@ 0xc0
 8006428:	d013      	beq.n	8006452 <UART_SetConfig+0x1ba>
 800642a:	2bc0      	cmp	r3, #192	@ 0xc0
 800642c:	d814      	bhi.n	8006458 <UART_SetConfig+0x1c0>
 800642e:	2b80      	cmp	r3, #128	@ 0x80
 8006430:	d009      	beq.n	8006446 <UART_SetConfig+0x1ae>
 8006432:	2b80      	cmp	r3, #128	@ 0x80
 8006434:	d810      	bhi.n	8006458 <UART_SetConfig+0x1c0>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <UART_SetConfig+0x1a8>
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d006      	beq.n	800644c <UART_SetConfig+0x1b4>
 800643e:	e00b      	b.n	8006458 <UART_SetConfig+0x1c0>
 8006440:	2300      	movs	r3, #0
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e0cc      	b.n	80065e0 <UART_SetConfig+0x348>
 8006446:	2302      	movs	r3, #2
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e0c9      	b.n	80065e0 <UART_SetConfig+0x348>
 800644c:	2304      	movs	r3, #4
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e0c6      	b.n	80065e0 <UART_SetConfig+0x348>
 8006452:	2308      	movs	r3, #8
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e0c3      	b.n	80065e0 <UART_SetConfig+0x348>
 8006458:	2310      	movs	r3, #16
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e0c0      	b.n	80065e0 <UART_SetConfig+0x348>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a44      	ldr	r2, [pc, #272]	@ (8006574 <UART_SetConfig+0x2dc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d125      	bne.n	80064b4 <UART_SetConfig+0x21c>
 8006468:	4b3e      	ldr	r3, [pc, #248]	@ (8006564 <UART_SetConfig+0x2cc>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006476:	d017      	beq.n	80064a8 <UART_SetConfig+0x210>
 8006478:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800647c:	d817      	bhi.n	80064ae <UART_SetConfig+0x216>
 800647e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006482:	d00b      	beq.n	800649c <UART_SetConfig+0x204>
 8006484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006488:	d811      	bhi.n	80064ae <UART_SetConfig+0x216>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <UART_SetConfig+0x1fe>
 800648e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006492:	d006      	beq.n	80064a2 <UART_SetConfig+0x20a>
 8006494:	e00b      	b.n	80064ae <UART_SetConfig+0x216>
 8006496:	2300      	movs	r3, #0
 8006498:	77fb      	strb	r3, [r7, #31]
 800649a:	e0a1      	b.n	80065e0 <UART_SetConfig+0x348>
 800649c:	2302      	movs	r3, #2
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e09e      	b.n	80065e0 <UART_SetConfig+0x348>
 80064a2:	2304      	movs	r3, #4
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e09b      	b.n	80065e0 <UART_SetConfig+0x348>
 80064a8:	2308      	movs	r3, #8
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e098      	b.n	80065e0 <UART_SetConfig+0x348>
 80064ae:	2310      	movs	r3, #16
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e095      	b.n	80065e0 <UART_SetConfig+0x348>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a2f      	ldr	r2, [pc, #188]	@ (8006578 <UART_SetConfig+0x2e0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d125      	bne.n	800650a <UART_SetConfig+0x272>
 80064be:	4b29      	ldr	r3, [pc, #164]	@ (8006564 <UART_SetConfig+0x2cc>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064cc:	d017      	beq.n	80064fe <UART_SetConfig+0x266>
 80064ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064d2:	d817      	bhi.n	8006504 <UART_SetConfig+0x26c>
 80064d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064d8:	d00b      	beq.n	80064f2 <UART_SetConfig+0x25a>
 80064da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064de:	d811      	bhi.n	8006504 <UART_SetConfig+0x26c>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <UART_SetConfig+0x254>
 80064e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e8:	d006      	beq.n	80064f8 <UART_SetConfig+0x260>
 80064ea:	e00b      	b.n	8006504 <UART_SetConfig+0x26c>
 80064ec:	2301      	movs	r3, #1
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e076      	b.n	80065e0 <UART_SetConfig+0x348>
 80064f2:	2302      	movs	r3, #2
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e073      	b.n	80065e0 <UART_SetConfig+0x348>
 80064f8:	2304      	movs	r3, #4
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e070      	b.n	80065e0 <UART_SetConfig+0x348>
 80064fe:	2308      	movs	r3, #8
 8006500:	77fb      	strb	r3, [r7, #31]
 8006502:	e06d      	b.n	80065e0 <UART_SetConfig+0x348>
 8006504:	2310      	movs	r3, #16
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e06a      	b.n	80065e0 <UART_SetConfig+0x348>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <UART_SetConfig+0x2e4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d138      	bne.n	8006586 <UART_SetConfig+0x2ee>
 8006514:	4b13      	ldr	r3, [pc, #76]	@ (8006564 <UART_SetConfig+0x2cc>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800651e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006522:	d017      	beq.n	8006554 <UART_SetConfig+0x2bc>
 8006524:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006528:	d82a      	bhi.n	8006580 <UART_SetConfig+0x2e8>
 800652a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800652e:	d00b      	beq.n	8006548 <UART_SetConfig+0x2b0>
 8006530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006534:	d824      	bhi.n	8006580 <UART_SetConfig+0x2e8>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <UART_SetConfig+0x2aa>
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653e:	d006      	beq.n	800654e <UART_SetConfig+0x2b6>
 8006540:	e01e      	b.n	8006580 <UART_SetConfig+0x2e8>
 8006542:	2300      	movs	r3, #0
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e04b      	b.n	80065e0 <UART_SetConfig+0x348>
 8006548:	2302      	movs	r3, #2
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e048      	b.n	80065e0 <UART_SetConfig+0x348>
 800654e:	2304      	movs	r3, #4
 8006550:	77fb      	strb	r3, [r7, #31]
 8006552:	e045      	b.n	80065e0 <UART_SetConfig+0x348>
 8006554:	2308      	movs	r3, #8
 8006556:	77fb      	strb	r3, [r7, #31]
 8006558:	e042      	b.n	80065e0 <UART_SetConfig+0x348>
 800655a:	bf00      	nop
 800655c:	efff69f3 	.word	0xefff69f3
 8006560:	40011000 	.word	0x40011000
 8006564:	40023800 	.word	0x40023800
 8006568:	40004400 	.word	0x40004400
 800656c:	40004800 	.word	0x40004800
 8006570:	40004c00 	.word	0x40004c00
 8006574:	40005000 	.word	0x40005000
 8006578:	40011400 	.word	0x40011400
 800657c:	40007800 	.word	0x40007800
 8006580:	2310      	movs	r3, #16
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e02c      	b.n	80065e0 <UART_SetConfig+0x348>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a72      	ldr	r2, [pc, #456]	@ (8006754 <UART_SetConfig+0x4bc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d125      	bne.n	80065dc <UART_SetConfig+0x344>
 8006590:	4b71      	ldr	r3, [pc, #452]	@ (8006758 <UART_SetConfig+0x4c0>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006596:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800659a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800659e:	d017      	beq.n	80065d0 <UART_SetConfig+0x338>
 80065a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80065a4:	d817      	bhi.n	80065d6 <UART_SetConfig+0x33e>
 80065a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065aa:	d00b      	beq.n	80065c4 <UART_SetConfig+0x32c>
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b0:	d811      	bhi.n	80065d6 <UART_SetConfig+0x33e>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <UART_SetConfig+0x326>
 80065b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065ba:	d006      	beq.n	80065ca <UART_SetConfig+0x332>
 80065bc:	e00b      	b.n	80065d6 <UART_SetConfig+0x33e>
 80065be:	2300      	movs	r3, #0
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e00d      	b.n	80065e0 <UART_SetConfig+0x348>
 80065c4:	2302      	movs	r3, #2
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e00a      	b.n	80065e0 <UART_SetConfig+0x348>
 80065ca:	2304      	movs	r3, #4
 80065cc:	77fb      	strb	r3, [r7, #31]
 80065ce:	e007      	b.n	80065e0 <UART_SetConfig+0x348>
 80065d0:	2308      	movs	r3, #8
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e004      	b.n	80065e0 <UART_SetConfig+0x348>
 80065d6:	2310      	movs	r3, #16
 80065d8:	77fb      	strb	r3, [r7, #31]
 80065da:	e001      	b.n	80065e0 <UART_SetConfig+0x348>
 80065dc:	2310      	movs	r3, #16
 80065de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065e8:	d15b      	bne.n	80066a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80065ea:	7ffb      	ldrb	r3, [r7, #31]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d828      	bhi.n	8006642 <UART_SetConfig+0x3aa>
 80065f0:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0x360>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	08006625 	.word	0x08006625
 8006600:	0800662d 	.word	0x0800662d
 8006604:	08006643 	.word	0x08006643
 8006608:	08006633 	.word	0x08006633
 800660c:	08006643 	.word	0x08006643
 8006610:	08006643 	.word	0x08006643
 8006614:	08006643 	.word	0x08006643
 8006618:	0800663b 	.word	0x0800663b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661c:	f7fd fa44 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8006620:	61b8      	str	r0, [r7, #24]
        break;
 8006622:	e013      	b.n	800664c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006624:	f7fd fa54 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 8006628:	61b8      	str	r0, [r7, #24]
        break;
 800662a:	e00f      	b.n	800664c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800662c:	4b4b      	ldr	r3, [pc, #300]	@ (800675c <UART_SetConfig+0x4c4>)
 800662e:	61bb      	str	r3, [r7, #24]
        break;
 8006630:	e00c      	b.n	800664c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006632:	f7fd f927 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8006636:	61b8      	str	r0, [r7, #24]
        break;
 8006638:	e008      	b.n	800664c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800663e:	61bb      	str	r3, [r7, #24]
        break;
 8006640:	e004      	b.n	800664c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	77bb      	strb	r3, [r7, #30]
        break;
 800664a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d074      	beq.n	800673c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	005a      	lsls	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	441a      	add	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	fbb2 f3f3 	udiv	r3, r2, r3
 8006666:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b0f      	cmp	r3, #15
 800666c:	d916      	bls.n	800669c <UART_SetConfig+0x404>
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006674:	d212      	bcs.n	800669c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f023 030f 	bic.w	r3, r3, #15
 800667e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	b29b      	uxth	r3, r3
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	b29a      	uxth	r2, r3
 800668c:	89fb      	ldrh	r3, [r7, #14]
 800668e:	4313      	orrs	r3, r2
 8006690:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	89fa      	ldrh	r2, [r7, #14]
 8006698:	60da      	str	r2, [r3, #12]
 800669a:	e04f      	b.n	800673c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	77bb      	strb	r3, [r7, #30]
 80066a0:	e04c      	b.n	800673c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066a2:	7ffb      	ldrb	r3, [r7, #31]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d828      	bhi.n	80066fa <UART_SetConfig+0x462>
 80066a8:	a201      	add	r2, pc, #4	@ (adr r2, 80066b0 <UART_SetConfig+0x418>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	080066d5 	.word	0x080066d5
 80066b4:	080066dd 	.word	0x080066dd
 80066b8:	080066e5 	.word	0x080066e5
 80066bc:	080066fb 	.word	0x080066fb
 80066c0:	080066eb 	.word	0x080066eb
 80066c4:	080066fb 	.word	0x080066fb
 80066c8:	080066fb 	.word	0x080066fb
 80066cc:	080066fb 	.word	0x080066fb
 80066d0:	080066f3 	.word	0x080066f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d4:	f7fd f9e8 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 80066d8:	61b8      	str	r0, [r7, #24]
        break;
 80066da:	e013      	b.n	8006704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066dc:	f7fd f9f8 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 80066e0:	61b8      	str	r0, [r7, #24]
        break;
 80066e2:	e00f      	b.n	8006704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e4:	4b1d      	ldr	r3, [pc, #116]	@ (800675c <UART_SetConfig+0x4c4>)
 80066e6:	61bb      	str	r3, [r7, #24]
        break;
 80066e8:	e00c      	b.n	8006704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ea:	f7fd f8cb 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 80066ee:	61b8      	str	r0, [r7, #24]
        break;
 80066f0:	e008      	b.n	8006704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066f6:	61bb      	str	r3, [r7, #24]
        break;
 80066f8:	e004      	b.n	8006704 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	77bb      	strb	r3, [r7, #30]
        break;
 8006702:	bf00      	nop
    }

    if (pclk != 0U)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d018      	beq.n	800673c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	085a      	lsrs	r2, r3, #1
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	441a      	add	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2b0f      	cmp	r3, #15
 8006722:	d909      	bls.n	8006738 <UART_SetConfig+0x4a0>
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800672a:	d205      	bcs.n	8006738 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	e001      	b.n	800673c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006748:	7fbb      	ldrb	r3, [r7, #30]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40007c00 	.word	0x40007c00
 8006758:	40023800 	.word	0x40023800
 800675c:	00f42400 	.word	0x00f42400

08006760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01a      	beq.n	8006876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800685e:	d10a      	bne.n	8006876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	605a      	str	r2, [r3, #4]
  }
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b098      	sub	sp, #96	@ 0x60
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068b4:	f7fb fb94 	bl	8001fe0 <HAL_GetTick>
 80068b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d12e      	bne.n	8006926 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068d0:	2200      	movs	r2, #0
 80068d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f88c 	bl	80069f4 <UART_WaitOnFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d021      	beq.n	8006926 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006900:	647b      	str	r3, [r7, #68]	@ 0x44
 8006902:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800690e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e6      	bne.n	80068e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e062      	b.n	80069ec <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b04      	cmp	r3, #4
 8006932:	d149      	bne.n	80069c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006934:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800693c:	2200      	movs	r2, #0
 800693e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f856 	bl	80069f4 <UART_WaitOnFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d03c      	beq.n	80069c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	623b      	str	r3, [r7, #32]
   return(result);
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800696c:	633b      	str	r3, [r7, #48]	@ 0x30
 800696e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e6      	bne.n	800694e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3308      	adds	r3, #8
 800699e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069a0:	61fa      	str	r2, [r7, #28]
 80069a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	69b9      	ldr	r1, [r7, #24]
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	617b      	str	r3, [r7, #20]
   return(result);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e5      	bne.n	8006980 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e011      	b.n	80069ec <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3758      	adds	r7, #88	@ 0x58
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a04:	e04f      	b.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d04b      	beq.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0e:	f7fb fae7 	bl	8001fe0 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d302      	bcc.n	8006a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e04e      	b.n	8006ac6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d037      	beq.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b80      	cmp	r3, #128	@ 0x80
 8006a3a:	d034      	beq.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b40      	cmp	r3, #64	@ 0x40
 8006a40:	d031      	beq.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d110      	bne.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2208      	movs	r2, #8
 8006a56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f8ff 	bl	8006c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2208      	movs	r2, #8
 8006a62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e029      	b.n	8006ac6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a80:	d111      	bne.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f8e5 	bl	8006c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e00f      	b.n	8006ac6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	bf0c      	ite	eq
 8006ab6:	2301      	moveq	r3, #1
 8006ab8:	2300      	movne	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d0a0      	beq.n	8006a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b096      	sub	sp, #88	@ 0x58
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2222      	movs	r2, #34	@ 0x22
 8006af8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d028      	beq.n	8006b56 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b08:	4a3e      	ldr	r2, [pc, #248]	@ (8006c04 <UART_Start_Receive_DMA+0x134>)
 8006b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b10:	4a3d      	ldr	r2, [pc, #244]	@ (8006c08 <UART_Start_Receive_DMA+0x138>)
 8006b12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b18:	4a3c      	ldr	r2, [pc, #240]	@ (8006c0c <UART_Start_Receive_DMA+0x13c>)
 8006b1a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b20:	2200      	movs	r2, #0
 8006b22:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3324      	adds	r3, #36	@ 0x24
 8006b2e:	4619      	mov	r1, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b34:	461a      	mov	r2, r3
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	f7fb fc42 	bl	80023c0 <HAL_DMA_Start_IT>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d009      	beq.n	8006b56 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2210      	movs	r2, #16
 8006b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e051      	b.n	8006bfa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d018      	beq.n	8006b90 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b72:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b7e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e6      	bne.n	8006b5e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bb0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006bb2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e5      	bne.n	8006b90 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3308      	adds	r3, #8
 8006bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006be4:	623a      	str	r2, [r7, #32]
 8006be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	69f9      	ldr	r1, [r7, #28]
 8006bea:	6a3a      	ldr	r2, [r7, #32]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3758      	adds	r7, #88	@ 0x58
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	08006dd7 	.word	0x08006dd7
 8006c08:	08006eff 	.word	0x08006eff
 8006c0c:	08006f3d 	.word	0x08006f3d

08006c10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b089      	sub	sp, #36	@ 0x24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6979      	ldr	r1, [r7, #20]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	613b      	str	r3, [r7, #16]
   return(result);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e6      	bne.n	8006c18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006c50:	bf00      	nop
 8006c52:	3724      	adds	r7, #36	@ 0x24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b095      	sub	sp, #84	@ 0x54
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c82:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e6      	bne.n	8006c64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e5      	bne.n	8006c96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d118      	bne.n	8006d04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f023 0310 	bic.w	r3, r3, #16
 8006ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6979      	ldr	r1, [r7, #20]
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e6      	bne.n	8006cd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d18:	bf00      	nop
 8006d1a:	3754      	adds	r7, #84	@ 0x54
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b090      	sub	sp, #64	@ 0x40
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d3a:	d037      	beq.n	8006dac <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	e853 3f00 	ldrex	r3, [r3]
 8006d52:	623b      	str	r3, [r7, #32]
   return(result);
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d64:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e5      	bne.n	8006d44 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	69b9      	ldr	r1, [r7, #24]
 8006d9c:	69fa      	ldr	r2, [r7, #28]
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	617b      	str	r3, [r7, #20]
   return(result);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e6      	bne.n	8006d78 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006daa:	e002      	b.n	8006db2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006dac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006dae:	f7ff fa15 	bl	80061dc <HAL_UART_TxCpltCallback>
}
 8006db2:	bf00      	nop
 8006db4:	3740      	adds	r7, #64	@ 0x40
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7ff fa11 	bl	80061f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b09c      	sub	sp, #112	@ 0x70
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dec:	d071      	beq.n	8006ed2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e16:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e6      	bne.n	8006df6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3308      	adds	r3, #8
 8006e46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e48:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e4a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e5      	bne.n	8006e28 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e72:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e92:	2220      	movs	r2, #32
 8006e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d118      	bne.n	8006ed2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f023 0310 	bic.w	r3, r3, #16
 8006eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	69b9      	ldr	r1, [r7, #24]
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	617b      	str	r3, [r7, #20]
   return(result);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e6      	bne.n	8006ea0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d107      	bne.n	8006ef0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006eea:	f7f9 fc51 	bl	8000790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eee:	e002      	b.n	8006ef6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006ef0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ef2:	f7ff f987 	bl	8006204 <HAL_UART_RxCpltCallback>
}
 8006ef6:	bf00      	nop
 8006ef8:	3770      	adds	r7, #112	@ 0x70
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d109      	bne.n	8006f2e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	4619      	mov	r1, r3
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7f9 fc32 	bl	8000790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f2c:	e002      	b.n	8006f34 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f7ff f972 	bl	8006218 <HAL_UART_RxHalfCpltCallback>
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f62:	2b80      	cmp	r3, #128	@ 0x80
 8006f64:	d109      	bne.n	8006f7a <UART_DMAError+0x3e>
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b21      	cmp	r3, #33	@ 0x21
 8006f6a:	d106      	bne.n	8006f7a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006f74:	6978      	ldr	r0, [r7, #20]
 8006f76:	f7ff fe4b 	bl	8006c10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f84:	2b40      	cmp	r3, #64	@ 0x40
 8006f86:	d109      	bne.n	8006f9c <UART_DMAError+0x60>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b22      	cmp	r3, #34	@ 0x22
 8006f8c:	d106      	bne.n	8006f9c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006f96:	6978      	ldr	r0, [r7, #20]
 8006f98:	f7ff fe60 	bl	8006c5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fa2:	f043 0210 	orr.w	r2, r3, #16
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fac:	6978      	ldr	r0, [r7, #20]
 8006fae:	f7ff f93d 	bl	800622c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fb2:	bf00      	nop
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f7ff f927 	bl	800622c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b088      	sub	sp, #32
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6979      	ldr	r1, [r7, #20]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	613b      	str	r3, [r7, #16]
   return(result);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e6      	bne.n	8006fee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff f8d5 	bl	80061dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007032:	bf00      	nop
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b08c      	sub	sp, #48	@ 0x30
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	4613      	mov	r3, r2
 8007046:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800704e:	2b20      	cmp	r3, #32
 8007050:	d142      	bne.n	80070d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e03b      	b.n	80070da <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	461a      	mov	r2, r3
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f7ff fd2b 	bl	8006ad0 <UART_Start_Receive_DMA>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007080:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007084:	2b00      	cmp	r3, #0
 8007086:	d124      	bne.n	80070d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800708c:	2b01      	cmp	r3, #1
 800708e:	d11d      	bne.n	80070cc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2210      	movs	r2, #16
 8007096:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	617b      	str	r3, [r7, #20]
   return(result);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f043 0310 	orr.w	r3, r3, #16
 80070ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6a39      	ldr	r1, [r7, #32]
 80070bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e6      	bne.n	8007098 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80070ca:	e002      	b.n	80070d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80070d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070d6:	e000      	b.n	80070da <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80070d8:	2302      	movs	r3, #2
  }
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3730      	adds	r7, #48	@ 0x30
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070e4:	b084      	sub	sp, #16
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	f107 001c 	add.w	r0, r7, #28
 80070f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d121      	bne.n	8007142 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007102:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	4b21      	ldr	r3, [pc, #132]	@ (8007194 <USB_CoreInit+0xb0>)
 8007110:	4013      	ands	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007122:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007126:	2b01      	cmp	r3, #1
 8007128:	d105      	bne.n	8007136 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa92 	bl	8007660 <USB_CoreReset>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
 8007140:	e010      	b.n	8007164 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fa86 	bl	8007660 <USB_CoreReset>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007164:	7fbb      	ldrb	r3, [r7, #30]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d10b      	bne.n	8007182 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f043 0206 	orr.w	r2, r3, #6
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f043 0220 	orr.w	r2, r3, #32
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800718e:	b004      	add	sp, #16
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	ffbdffbf 	.word	0xffbdffbf

08007198 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f023 0201 	bic.w	r2, r3, #1
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d115      	bne.n	8007208 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071e8:	200a      	movs	r0, #10
 80071ea:	f7fa ff05 	bl	8001ff8 <HAL_Delay>
      ms += 10U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	330a      	adds	r3, #10
 80071f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fa25 	bl	8007644 <USB_GetMode>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d01e      	beq.n	800723e <USB_SetCurrentMode+0x84>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2bc7      	cmp	r3, #199	@ 0xc7
 8007204:	d9f0      	bls.n	80071e8 <USB_SetCurrentMode+0x2e>
 8007206:	e01a      	b.n	800723e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d115      	bne.n	800723a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800721a:	200a      	movs	r0, #10
 800721c:	f7fa feec 	bl	8001ff8 <HAL_Delay>
      ms += 10U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	330a      	adds	r3, #10
 8007224:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa0c 	bl	8007644 <USB_GetMode>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <USB_SetCurrentMode+0x84>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2bc7      	cmp	r3, #199	@ 0xc7
 8007236:	d9f0      	bls.n	800721a <USB_SetCurrentMode+0x60>
 8007238:	e001      	b.n	800723e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e005      	b.n	800724a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2bc8      	cmp	r3, #200	@ 0xc8
 8007242:	d101      	bne.n	8007248 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007254:	b084      	sub	sp, #16
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800726e:	2300      	movs	r3, #0
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	e009      	b.n	8007288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	3340      	adds	r3, #64	@ 0x40
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	2200      	movs	r2, #0
 8007280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	3301      	adds	r3, #1
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2b0e      	cmp	r3, #14
 800728c:	d9f2      	bls.n	8007274 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800728e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007292:	2b00      	cmp	r3, #0
 8007294:	d11c      	bne.n	80072d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072a4:	f043 0302 	orr.w	r3, r3, #2
 80072a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	e005      	b.n	80072dc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072e2:	461a      	mov	r2, r3
 80072e4:	2300      	movs	r3, #0
 80072e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d10d      	bne.n	800730c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072f8:	2100      	movs	r1, #0
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f968 	bl	80075d0 <USB_SetDevSpeed>
 8007300:	e008      	b.n	8007314 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007302:	2101      	movs	r1, #1
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f963 	bl	80075d0 <USB_SetDevSpeed>
 800730a:	e003      	b.n	8007314 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800730c:	2103      	movs	r1, #3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f95e 	bl	80075d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007314:	2110      	movs	r1, #16
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8fa 	bl	8007510 <USB_FlushTxFifo>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f924 	bl	8007574 <USB_FlushRxFifo>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733c:	461a      	mov	r2, r3
 800733e:	2300      	movs	r3, #0
 8007340:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007348:	461a      	mov	r2, r3
 800734a:	2300      	movs	r3, #0
 800734c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007354:	461a      	mov	r2, r3
 8007356:	2300      	movs	r3, #0
 8007358:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800735a:	2300      	movs	r3, #0
 800735c:	613b      	str	r3, [r7, #16]
 800735e:	e043      	b.n	80073e8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007372:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007376:	d118      	bne.n	80073aa <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800738a:	461a      	mov	r2, r3
 800738c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	e013      	b.n	80073bc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a0:	461a      	mov	r2, r3
 80073a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	e008      	b.n	80073bc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b6:	461a      	mov	r2, r3
 80073b8:	2300      	movs	r3, #0
 80073ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c8:	461a      	mov	r2, r3
 80073ca:	2300      	movs	r3, #0
 80073cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073da:	461a      	mov	r2, r3
 80073dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	3301      	adds	r3, #1
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073ec:	461a      	mov	r2, r3
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d3b5      	bcc.n	8007360 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	e043      	b.n	8007482 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800740c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007410:	d118      	bne.n	8007444 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007424:	461a      	mov	r2, r3
 8007426:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	e013      	b.n	8007456 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743a:	461a      	mov	r2, r3
 800743c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	e008      	b.n	8007456 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007450:	461a      	mov	r2, r3
 8007452:	2300      	movs	r3, #0
 8007454:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007462:	461a      	mov	r2, r3
 8007464:	2300      	movs	r3, #0
 8007466:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007474:	461a      	mov	r2, r3
 8007476:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800747a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	3301      	adds	r3, #1
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007486:	461a      	mov	r2, r3
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	4293      	cmp	r3, r2
 800748c:	d3b5      	bcc.n	80073fa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800749c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80074ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d105      	bne.n	80074c4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	f043 0210 	orr.w	r2, r3, #16
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699a      	ldr	r2, [r3, #24]
 80074c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007508 <USB_DevInit+0x2b4>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80074d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f043 0208 	orr.w	r2, r3, #8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80074e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d105      	bne.n	80074f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699a      	ldr	r2, [r3, #24]
 80074f0:	4b06      	ldr	r3, [pc, #24]	@ (800750c <USB_DevInit+0x2b8>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007504:	b004      	add	sp, #16
 8007506:	4770      	bx	lr
 8007508:	803c3800 	.word	0x803c3800
 800750c:	40000004 	.word	0x40000004

08007510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800752a:	d901      	bls.n	8007530 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e01b      	b.n	8007568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	daf2      	bge.n	800751e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	019b      	lsls	r3, r3, #6
 8007540:	f043 0220 	orr.w	r2, r3, #32
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007554:	d901      	bls.n	800755a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e006      	b.n	8007568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b20      	cmp	r3, #32
 8007564:	d0f0      	beq.n	8007548 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3301      	adds	r3, #1
 8007584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800758c:	d901      	bls.n	8007592 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e018      	b.n	80075c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	daf2      	bge.n	8007580 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2210      	movs	r2, #16
 80075a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075b0:	d901      	bls.n	80075b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e006      	b.n	80075c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0310 	and.w	r3, r3, #16
 80075be:	2b10      	cmp	r3, #16
 80075c0:	d0f0      	beq.n	80075a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	68f9      	ldr	r1, [r7, #12]
 80075ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075f0:	4313      	orrs	r3, r2
 80075f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007630:	f043 0302 	orr.w	r3, r3, #2
 8007634:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f003 0301 	and.w	r3, r3, #1
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3301      	adds	r3, #1
 8007670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007678:	d901      	bls.n	800767e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e01b      	b.n	80076b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	daf2      	bge.n	800766c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f043 0201 	orr.w	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3301      	adds	r3, #1
 800769a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076a2:	d901      	bls.n	80076a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e006      	b.n	80076b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d0f0      	beq.n	8007696 <USB_CoreReset+0x36>

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fb34 	bl	8007d3c <malloc>
 80076d4:	4603      	mov	r3, r0
 80076d6:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 80076d8:	68fb      	ldr	r3, [r7, #12]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <ATC_Free+0x26>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d007      	beq.n	8007708 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fb25 	bl	8007d4c <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
  }
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	8a9b      	ldrh	r3, [r3, #20]
 8007726:	461a      	mov	r2, r3
 8007728:	2100      	movs	r1, #0
 800772a:	f000 fbc5 	bl	8007eb8 <memset>
}
 800772e:	bf00      	nop
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b086      	sub	sp, #24
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	4613      	mov	r3, r2
 8007742:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007744:	2300      	movs	r3, #0
 8007746:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	88fa      	ldrh	r2, [r7, #6]
 800774c:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	88fa      	ldrh	r2, [r7, #6]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe f8c4 	bl	80058e4 <HAL_UART_Transmit_DMA>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
 8007766:	e000      	b.n	800776a <ATC_TxRaw+0x34>
      break;
 8007768:	bf00      	nop

  } while (0);

  return answer;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe fd67 	bl	8006254 <HAL_UART_GetState>
 8007786:	4603      	mov	r3, r0
 8007788:	2b21      	cmp	r3, #33	@ 0x21
 800778a:	d007      	beq.n	800779c <ATC_TxBusy+0x28>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fd5f 	bl	8006254 <HAL_UART_GetState>
 8007796:	4603      	mov	r3, r0
 8007798:	2b23      	cmp	r3, #35	@ 0x23
 800779a:	d101      	bne.n	80077a0 <ATC_TxBusy+0x2c>
  {
    return true;
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 80077a0:	2300      	movs	r3, #0
  }
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 80077b8:	f7fa fc12 	bl	8001fe0 <HAL_GetTick>
 80077bc:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 80077be:	2001      	movs	r0, #1
 80077c0:	f000 fab1 	bl	8007d26 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe fd43 	bl	8006254 <HAL_UART_GetState>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b22      	cmp	r3, #34	@ 0x22
 80077d2:	d007      	beq.n	80077e4 <ATC_TxWait+0x3a>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fe fd3b 	bl	8006254 <HAL_UART_GetState>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d102      	bne.n	80077ea <ATC_TxWait+0x40>
    {
      answer = true;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
      break;
 80077e8:	e01c      	b.n	8007824 <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fd30 	bl	8006254 <HAL_UART_GetState>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2be0      	cmp	r3, #224	@ 0xe0
 80077f8:	d014      	beq.n	8007824 <ATC_TxWait+0x7a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fd28 	bl	8006254 <HAL_UART_GetState>
 8007804:	4603      	mov	r3, r0
 8007806:	2ba0      	cmp	r3, #160	@ 0xa0
 8007808:	d00c      	beq.n	8007824 <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800780a:	f7fa fbe9 	bl	8001fe0 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d8d1      	bhi.n	80077be <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe f8dc 	bl	80059dc <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <ATC_CheckResponse>:
}

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8b1b      	ldrh	r3, [r3, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d023      	beq.n	800788c <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007844:	2300      	movs	r3, #0
 8007846:	81bb      	strh	r3, [r7, #12]
 8007848:	e01b      	b.n	8007882 <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800784e:	89ba      	ldrh	r2, [r7, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	320a      	adds	r2, #10
 8007854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007858:	4619      	mov	r1, r3
 800785a:	f000 fb48 	bl	8007eee <strstr>
 800785e:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8007872:	89bb      	ldrh	r3, [r7, #12]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	3301      	adds	r3, #1
 8007878:	73fb      	strb	r3, [r7, #15]
        break;
 800787a:	e007      	b.n	800788c <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800787c:	89bb      	ldrh	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	81bb      	strh	r3, [r7, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	8adb      	ldrh	r3, [r3, #22]
 8007886:	89ba      	ldrh	r2, [r7, #12]
 8007888:	429a      	cmp	r2, r3
 800788a:	d3de      	bcc.n	800784a <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fcea 	bl	800627c <HAL_UART_GetError>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01f      	beq.n	80078ee <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe f8f4 	bl	8005aac <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	69d9      	ldr	r1, [r3, #28]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8a9b      	ldrh	r3, [r3, #20]
 80078d0:	461a      	mov	r2, r3
 80078d2:	f7ff fbb2 	bl	800703a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0208 	bic.w	r2, r2, #8
 80078ec:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fcae 	bl	8006254 <HAL_UART_GetState>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b22      	cmp	r3, #34	@ 0x22
 80078fc:	d027      	beq.n	800794e <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fca6 	bl	8006254 <HAL_UART_GetState>
 8007908:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800790a:	2b23      	cmp	r3, #35	@ 0x23
 800790c:	d01f      	beq.n	800794e <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f04f 32ff 	mov.w	r2, #4294967295
 8007918:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe f8c4 	bl	8005aac <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	69d9      	ldr	r1, [r3, #28]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8a9b      	ldrh	r3, [r3, #20]
 8007930:	461a      	mov	r2, r3
 8007932:	f7ff fb82 	bl	800703a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0208 	bic.w	r2, r2, #8
 800794c:	601a      	str	r2, [r3, #0]
  }
}
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d075      	beq.n	8007a5c <ATC_Init+0x106>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d072      	beq.n	8007a5c <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007976:	223c      	movs	r2, #60	@ 0x3c
 8007978:	2100      	movs	r1, #0
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fa9c 	bl	8007eb8 <memset>
    if (pName != NULL)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d006      	beq.n	8007994 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3304      	adds	r3, #4
 800798a:	2207      	movs	r2, #7
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 fa9a 	bl	8007ec8 <strncpy>
    }
    hAtc->hUart = hUart;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff fe90 	bl	80076c2 <ATC_Malloc>
 80079a2:	4602      	mov	r2, r0
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d04e      	beq.n	8007a4e <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	88fa      	ldrh	r2, [r7, #6]
 80079b6:	2100      	movs	r1, #0
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fa7d 	bl	8007eb8 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 80079be:	88fb      	ldrh	r3, [r7, #6]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff fe7e 	bl	80076c2 <ATC_Malloc>
 80079c6:	4602      	mov	r2, r0
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d03e      	beq.n	8007a52 <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	88fa      	ldrh	r2, [r7, #6]
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fa6b 	bl	8007eb8 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 80079e2:	88fb      	ldrh	r3, [r7, #6]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff fe6c 	bl	80076c2 <ATC_Malloc>
 80079ea:	4602      	mov	r2, r0
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d02e      	beq.n	8007a56 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	2100      	movs	r1, #0
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fa59 	bl	8007eb8 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	88fa      	ldrh	r2, [r7, #6]
 8007a0a:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	69d9      	ldr	r1, [r3, #28]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8a9b      	ldrh	r3, [r3, #20]
 8007a24:	461a      	mov	r2, r3
 8007a26:	f7ff fb08 	bl	800703a <HAL_UARTEx_ReceiveToIdle_DMA>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d114      	bne.n	8007a5a <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0208 	bic.w	r2, r2, #8
 8007a46:	601a      	str	r2, [r3, #0]
    answer = true;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	75fb      	strb	r3, [r7, #23]
 8007a4c:	e006      	b.n	8007a5c <ATC_Init+0x106>
      break;
 8007a4e:	bf00      	nop
 8007a50:	e004      	b.n	8007a5c <ATC_Init+0x106>
      break;
 8007a52:	bf00      	nop
 8007a54:	e002      	b.n	8007a5c <ATC_Init+0x106>
      break;
 8007a56:	bf00      	nop
 8007a58:	e000      	b.n	8007a5c <ATC_Init+0x106>
      break;
 8007a5a:	bf00      	nop

  } while (0);

  if (answer == false)
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	f083 0301 	eor.w	r3, r3, #1
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d016      	beq.n	8007a96 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	331c      	adds	r3, #28
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fe34 	bl	80076e2 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3324      	adds	r3, #36	@ 0x24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fe2b 	bl	80076e2 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007a8c:	223c      	movs	r2, #60	@ 0x3c
 8007a8e:	2100      	movs	r1, #0
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 fa11 	bl	8007eb8 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8007aa0:	b590      	push	{r4, r7, lr}
 8007aa2:	b08d      	sub	sp, #52	@ 0x34
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7ff fe5e 	bl	8007774 <ATC_TxBusy>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8007abe:	f06f 0303 	mvn.w	r3, #3
 8007ac2:	e0c8      	b.n	8007c56 <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 8007ac4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007ac8:	2b05      	cmp	r3, #5
 8007aca:	d902      	bls.n	8007ad2 <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 8007acc:	f06f 0304 	mvn.w	r3, #4
 8007ad0:	e0c1      	b.n	8007c56 <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff fedf 	bl	8007896 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8007ad8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007adc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8007ade:	2300      	movs	r3, #0
 8007ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ae2:	e04b      	b.n	8007b7c <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	1d1a      	adds	r2, r3, #4
 8007ae8:	617a      	str	r2, [r7, #20]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8007aee:	69b8      	ldr	r0, [r7, #24]
 8007af0:	f7f8 fba2 	bl	8000238 <strlen>
 8007af4:	4603      	mov	r3, r0
 8007af6:	3301      	adds	r3, #1
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff fde2 	bl	80076c2 <ATC_Malloc>
 8007afe:	4601      	mov	r1, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b04:	320a      	adds	r2, #10
 8007b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b0e:	320a      	adds	r2, #10
 8007b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d119      	bne.n	8007b4c <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007b1e:	e00d      	b.n	8007b3c <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8007b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b24:	330a      	adds	r3, #10
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fdd8 	bl	80076e2 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8007b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b36:	3301      	adds	r3, #1
 8007b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b42:	429a      	cmp	r2, r3
 8007b44:	dcec      	bgt.n	8007b20 <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 8007b46:	f06f 0302 	mvn.w	r3, #2
 8007b4a:	e084      	b.n	8007c56 <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b50:	320a      	adds	r2, #10
 8007b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b56:	69b9      	ldr	r1, [r7, #24]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fa1b 	bl	8007f94 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b62:	320a      	adds	r2, #10
 8007b64:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007b68:	69b8      	ldr	r0, [r7, #24]
 8007b6a:	f7f8 fb65 	bl	8000238 <strlen>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4423      	add	r3, r4
 8007b72:	2200      	movs	r2, #0
 8007b74:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8007b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b78:	3301      	adds	r3, #1
 8007b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b7c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007b80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b82:	429a      	cmp	r2, r3
 8007b84:	dbae      	blt.n	8007ae4 <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f7ff fdc2 	bl	8007710 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8007b8c:	68b8      	ldr	r0, [r7, #8]
 8007b8e:	f7f8 fb53 	bl	8000238 <strlen>
 8007b92:	4603      	mov	r3, r0
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	461a      	mov	r2, r3
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff fdcb 	bl	8007736 <ATC_TxRaw>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f083 0301 	eor.w	r3, r3, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8007bac:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007bb2:	e00d      	b.n	8007bd0 <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f7ff fdf7 	bl	80077aa <ATC_TxWait>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f083 0301 	eor.w	r3, r3, #1
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8007bc8:	f06f 0301 	mvn.w	r3, #1
 8007bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007bce:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8007bd0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d022      	beq.n	8007c1e <ATC_SendReceive+0x17e>
 8007bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d11f      	bne.n	8007c1e <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 8007bde:	f7fa f9ff 	bl	8001fe0 <HAL_GetTick>
 8007be2:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 8007be4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8007bee:	e00e      	b.n	8007c0e <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	f000 f898 	bl	8007d26 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff fe18 	bl	800782e <ATC_CheckResponse>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 8007c02:	7ffb      	ldrb	r3, [r7, #31]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 8007c08:	7ffb      	ldrb	r3, [r7, #31]
 8007c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c0c:	e007      	b.n	8007c1e <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 8007c0e:	f7fa f9e7 	bl	8001fe0 <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d8e8      	bhi.n	8007bf0 <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c2a:	e00d      	b.n	8007c48 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8007c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c30:	330a      	adds	r3, #10
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff fd52 	bl	80076e2 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8007c3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c42:	3301      	adds	r3, #1
 8007c44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007c4c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3eb      	bcc.n	8007c2c <ATC_SendReceive+0x18c>
  }
  return answer;
 8007c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3734      	adds	r7, #52	@ 0x34
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd90      	pop	{r4, r7, pc}

08007c5e <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8007c6a:	887a      	ldrh	r2, [r7, #2]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	8a9b      	ldrh	r3, [r3, #20]
 8007c70:	4619      	mov	r1, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	8b1b      	ldrh	r3, [r3, #24]
 8007c76:	1acb      	subs	r3, r1, r3
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	dd05      	ble.n	8007c88 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8a9a      	ldrh	r2, [r3, #20]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	8b1b      	ldrh	r3, [r3, #24]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	8b12      	ldrh	r2, [r2, #24]
 8007c90:	1898      	adds	r0, r3, r2
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	887a      	ldrh	r2, [r7, #2]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f000 f983 	bl	8007fa4 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8b1a      	ldrh	r2, [r3, #24]
 8007ca2:	887b      	ldrh	r3, [r7, #2]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69d9      	ldr	r1, [r3, #28]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8a9b      	ldrh	r3, [r3, #20]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f7ff f9be 	bl	800703a <HAL_UARTEx_ReceiveToIdle_DMA>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10c      	bne.n	8007cde <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0208 	bic.w	r2, r2, #8
 8007cda:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8007cdc:	e01f      	b.n	8007d1e <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce8:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fd fedc 	bl	8005aac <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69d9      	ldr	r1, [r3, #28]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	8a9b      	ldrh	r3, [r3, #20]
 8007d00:	461a      	mov	r2, r3
 8007d02:	f7ff f99a 	bl	800703a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0208 	bic.w	r2, r2, #8
 8007d1c:	601a      	str	r2, [r3, #0]
}
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fa f962 	bl	8001ff8 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <malloc>:
 8007d3c:	4b02      	ldr	r3, [pc, #8]	@ (8007d48 <malloc+0xc>)
 8007d3e:	4601      	mov	r1, r0
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	f000 b82d 	b.w	8007da0 <_malloc_r>
 8007d46:	bf00      	nop
 8007d48:	2000000c 	.word	0x2000000c

08007d4c <free>:
 8007d4c:	4b02      	ldr	r3, [pc, #8]	@ (8007d58 <free+0xc>)
 8007d4e:	4601      	mov	r1, r0
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	f000 b935 	b.w	8007fc0 <_free_r>
 8007d56:	bf00      	nop
 8007d58:	2000000c 	.word	0x2000000c

08007d5c <sbrk_aligned>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d9c <sbrk_aligned+0x40>)
 8007d60:	460c      	mov	r4, r1
 8007d62:	6831      	ldr	r1, [r6, #0]
 8007d64:	4605      	mov	r5, r0
 8007d66:	b911      	cbnz	r1, 8007d6e <sbrk_aligned+0x12>
 8007d68:	f000 f8d8 	bl	8007f1c <_sbrk_r>
 8007d6c:	6030      	str	r0, [r6, #0]
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 f8d3 	bl	8007f1c <_sbrk_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	d103      	bne.n	8007d82 <sbrk_aligned+0x26>
 8007d7a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d7e:	4620      	mov	r0, r4
 8007d80:	bd70      	pop	{r4, r5, r6, pc}
 8007d82:	1cc4      	adds	r4, r0, #3
 8007d84:	f024 0403 	bic.w	r4, r4, #3
 8007d88:	42a0      	cmp	r0, r4
 8007d8a:	d0f8      	beq.n	8007d7e <sbrk_aligned+0x22>
 8007d8c:	1a21      	subs	r1, r4, r0
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f000 f8c4 	bl	8007f1c <_sbrk_r>
 8007d94:	3001      	adds	r0, #1
 8007d96:	d1f2      	bne.n	8007d7e <sbrk_aligned+0x22>
 8007d98:	e7ef      	b.n	8007d7a <sbrk_aligned+0x1e>
 8007d9a:	bf00      	nop
 8007d9c:	200009fc 	.word	0x200009fc

08007da0 <_malloc_r>:
 8007da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da4:	1ccd      	adds	r5, r1, #3
 8007da6:	f025 0503 	bic.w	r5, r5, #3
 8007daa:	3508      	adds	r5, #8
 8007dac:	2d0c      	cmp	r5, #12
 8007dae:	bf38      	it	cc
 8007db0:	250c      	movcc	r5, #12
 8007db2:	2d00      	cmp	r5, #0
 8007db4:	4606      	mov	r6, r0
 8007db6:	db01      	blt.n	8007dbc <_malloc_r+0x1c>
 8007db8:	42a9      	cmp	r1, r5
 8007dba:	d904      	bls.n	8007dc6 <_malloc_r+0x26>
 8007dbc:	230c      	movs	r3, #12
 8007dbe:	6033      	str	r3, [r6, #0]
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e9c <_malloc_r+0xfc>
 8007dca:	f000 f869 	bl	8007ea0 <__malloc_lock>
 8007dce:	f8d8 3000 	ldr.w	r3, [r8]
 8007dd2:	461c      	mov	r4, r3
 8007dd4:	bb44      	cbnz	r4, 8007e28 <_malloc_r+0x88>
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff ffbf 	bl	8007d5c <sbrk_aligned>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	4604      	mov	r4, r0
 8007de2:	d158      	bne.n	8007e96 <_malloc_r+0xf6>
 8007de4:	f8d8 4000 	ldr.w	r4, [r8]
 8007de8:	4627      	mov	r7, r4
 8007dea:	2f00      	cmp	r7, #0
 8007dec:	d143      	bne.n	8007e76 <_malloc_r+0xd6>
 8007dee:	2c00      	cmp	r4, #0
 8007df0:	d04b      	beq.n	8007e8a <_malloc_r+0xea>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	4639      	mov	r1, r7
 8007df6:	4630      	mov	r0, r6
 8007df8:	eb04 0903 	add.w	r9, r4, r3
 8007dfc:	f000 f88e 	bl	8007f1c <_sbrk_r>
 8007e00:	4581      	cmp	r9, r0
 8007e02:	d142      	bne.n	8007e8a <_malloc_r+0xea>
 8007e04:	6821      	ldr	r1, [r4, #0]
 8007e06:	1a6d      	subs	r5, r5, r1
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7ff ffa6 	bl	8007d5c <sbrk_aligned>
 8007e10:	3001      	adds	r0, #1
 8007e12:	d03a      	beq.n	8007e8a <_malloc_r+0xea>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	442b      	add	r3, r5
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	bb62      	cbnz	r2, 8007e7c <_malloc_r+0xdc>
 8007e22:	f8c8 7000 	str.w	r7, [r8]
 8007e26:	e00f      	b.n	8007e48 <_malloc_r+0xa8>
 8007e28:	6822      	ldr	r2, [r4, #0]
 8007e2a:	1b52      	subs	r2, r2, r5
 8007e2c:	d420      	bmi.n	8007e70 <_malloc_r+0xd0>
 8007e2e:	2a0b      	cmp	r2, #11
 8007e30:	d917      	bls.n	8007e62 <_malloc_r+0xc2>
 8007e32:	1961      	adds	r1, r4, r5
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	6025      	str	r5, [r4, #0]
 8007e38:	bf18      	it	ne
 8007e3a:	6059      	strne	r1, [r3, #4]
 8007e3c:	6863      	ldr	r3, [r4, #4]
 8007e3e:	bf08      	it	eq
 8007e40:	f8c8 1000 	streq.w	r1, [r8]
 8007e44:	5162      	str	r2, [r4, r5]
 8007e46:	604b      	str	r3, [r1, #4]
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 f82f 	bl	8007eac <__malloc_unlock>
 8007e4e:	f104 000b 	add.w	r0, r4, #11
 8007e52:	1d23      	adds	r3, r4, #4
 8007e54:	f020 0007 	bic.w	r0, r0, #7
 8007e58:	1ac2      	subs	r2, r0, r3
 8007e5a:	bf1c      	itt	ne
 8007e5c:	1a1b      	subne	r3, r3, r0
 8007e5e:	50a3      	strne	r3, [r4, r2]
 8007e60:	e7af      	b.n	8007dc2 <_malloc_r+0x22>
 8007e62:	6862      	ldr	r2, [r4, #4]
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	bf0c      	ite	eq
 8007e68:	f8c8 2000 	streq.w	r2, [r8]
 8007e6c:	605a      	strne	r2, [r3, #4]
 8007e6e:	e7eb      	b.n	8007e48 <_malloc_r+0xa8>
 8007e70:	4623      	mov	r3, r4
 8007e72:	6864      	ldr	r4, [r4, #4]
 8007e74:	e7ae      	b.n	8007dd4 <_malloc_r+0x34>
 8007e76:	463c      	mov	r4, r7
 8007e78:	687f      	ldr	r7, [r7, #4]
 8007e7a:	e7b6      	b.n	8007dea <_malloc_r+0x4a>
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	d1fb      	bne.n	8007e7c <_malloc_r+0xdc>
 8007e84:	2300      	movs	r3, #0
 8007e86:	6053      	str	r3, [r2, #4]
 8007e88:	e7de      	b.n	8007e48 <_malloc_r+0xa8>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	6033      	str	r3, [r6, #0]
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 f80c 	bl	8007eac <__malloc_unlock>
 8007e94:	e794      	b.n	8007dc0 <_malloc_r+0x20>
 8007e96:	6005      	str	r5, [r0, #0]
 8007e98:	e7d6      	b.n	8007e48 <_malloc_r+0xa8>
 8007e9a:	bf00      	nop
 8007e9c:	20000a00 	.word	0x20000a00

08007ea0 <__malloc_lock>:
 8007ea0:	4801      	ldr	r0, [pc, #4]	@ (8007ea8 <__malloc_lock+0x8>)
 8007ea2:	f000 b875 	b.w	8007f90 <__retarget_lock_acquire_recursive>
 8007ea6:	bf00      	nop
 8007ea8:	20000b40 	.word	0x20000b40

08007eac <__malloc_unlock>:
 8007eac:	4801      	ldr	r0, [pc, #4]	@ (8007eb4 <__malloc_unlock+0x8>)
 8007eae:	f000 b870 	b.w	8007f92 <__retarget_lock_release_recursive>
 8007eb2:	bf00      	nop
 8007eb4:	20000b40 	.word	0x20000b40

08007eb8 <memset>:
 8007eb8:	4402      	add	r2, r0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d100      	bne.n	8007ec2 <memset+0xa>
 8007ec0:	4770      	bx	lr
 8007ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ec6:	e7f9      	b.n	8007ebc <memset+0x4>

08007ec8 <strncpy>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	3901      	subs	r1, #1
 8007ecc:	4603      	mov	r3, r0
 8007ece:	b132      	cbz	r2, 8007ede <strncpy+0x16>
 8007ed0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007ed4:	f803 4b01 	strb.w	r4, [r3], #1
 8007ed8:	3a01      	subs	r2, #1
 8007eda:	2c00      	cmp	r4, #0
 8007edc:	d1f7      	bne.n	8007ece <strncpy+0x6>
 8007ede:	441a      	add	r2, r3
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d100      	bne.n	8007ee8 <strncpy+0x20>
 8007ee6:	bd10      	pop	{r4, pc}
 8007ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8007eec:	e7f9      	b.n	8007ee2 <strncpy+0x1a>

08007eee <strstr>:
 8007eee:	780a      	ldrb	r2, [r1, #0]
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	b96a      	cbnz	r2, 8007f10 <strstr+0x22>
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d109      	bne.n	8007f0e <strstr+0x20>
 8007efa:	460c      	mov	r4, r1
 8007efc:	4605      	mov	r5, r0
 8007efe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0f6      	beq.n	8007ef4 <strstr+0x6>
 8007f06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007f0a:	429e      	cmp	r6, r3
 8007f0c:	d0f7      	beq.n	8007efe <strstr+0x10>
 8007f0e:	3001      	adds	r0, #1
 8007f10:	7803      	ldrb	r3, [r0, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1ef      	bne.n	8007ef6 <strstr+0x8>
 8007f16:	4618      	mov	r0, r3
 8007f18:	e7ec      	b.n	8007ef4 <strstr+0x6>
	...

08007f1c <_sbrk_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d06      	ldr	r5, [pc, #24]	@ (8007f38 <_sbrk_r+0x1c>)
 8007f20:	2300      	movs	r3, #0
 8007f22:	4604      	mov	r4, r0
 8007f24:	4608      	mov	r0, r1
 8007f26:	602b      	str	r3, [r5, #0]
 8007f28:	f7f9 f866 	bl	8000ff8 <_sbrk>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_sbrk_r+0x1a>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_sbrk_r+0x1a>
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	20000b3c 	.word	0x20000b3c

08007f3c <__errno>:
 8007f3c:	4b01      	ldr	r3, [pc, #4]	@ (8007f44 <__errno+0x8>)
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	2000000c 	.word	0x2000000c

08007f48 <__libc_init_array>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8007f80 <__libc_init_array+0x38>)
 8007f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8007f84 <__libc_init_array+0x3c>)
 8007f4e:	1b64      	subs	r4, r4, r5
 8007f50:	10a4      	asrs	r4, r4, #2
 8007f52:	2600      	movs	r6, #0
 8007f54:	42a6      	cmp	r6, r4
 8007f56:	d109      	bne.n	8007f6c <__libc_init_array+0x24>
 8007f58:	4d0b      	ldr	r5, [pc, #44]	@ (8007f88 <__libc_init_array+0x40>)
 8007f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8007f8c <__libc_init_array+0x44>)
 8007f5c:	f000 f87a 	bl	8008054 <_init>
 8007f60:	1b64      	subs	r4, r4, r5
 8007f62:	10a4      	asrs	r4, r4, #2
 8007f64:	2600      	movs	r6, #0
 8007f66:	42a6      	cmp	r6, r4
 8007f68:	d105      	bne.n	8007f76 <__libc_init_array+0x2e>
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}
 8007f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f70:	4798      	blx	r3
 8007f72:	3601      	adds	r6, #1
 8007f74:	e7ee      	b.n	8007f54 <__libc_init_array+0xc>
 8007f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7a:	4798      	blx	r3
 8007f7c:	3601      	adds	r6, #1
 8007f7e:	e7f2      	b.n	8007f66 <__libc_init_array+0x1e>
 8007f80:	0800812c 	.word	0x0800812c
 8007f84:	0800812c 	.word	0x0800812c
 8007f88:	0800812c 	.word	0x0800812c
 8007f8c:	08008130 	.word	0x08008130

08007f90 <__retarget_lock_acquire_recursive>:
 8007f90:	4770      	bx	lr

08007f92 <__retarget_lock_release_recursive>:
 8007f92:	4770      	bx	lr

08007f94 <strcpy>:
 8007f94:	4603      	mov	r3, r0
 8007f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f9a:	f803 2b01 	strb.w	r2, [r3], #1
 8007f9e:	2a00      	cmp	r2, #0
 8007fa0:	d1f9      	bne.n	8007f96 <strcpy+0x2>
 8007fa2:	4770      	bx	lr

08007fa4 <memcpy>:
 8007fa4:	440a      	add	r2, r1
 8007fa6:	4291      	cmp	r1, r2
 8007fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fac:	d100      	bne.n	8007fb0 <memcpy+0xc>
 8007fae:	4770      	bx	lr
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fba:	4291      	cmp	r1, r2
 8007fbc:	d1f9      	bne.n	8007fb2 <memcpy+0xe>
 8007fbe:	bd10      	pop	{r4, pc}

08007fc0 <_free_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	2900      	cmp	r1, #0
 8007fc6:	d041      	beq.n	800804c <_free_r+0x8c>
 8007fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fcc:	1f0c      	subs	r4, r1, #4
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	bfb8      	it	lt
 8007fd2:	18e4      	addlt	r4, r4, r3
 8007fd4:	f7ff ff64 	bl	8007ea0 <__malloc_lock>
 8007fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008050 <_free_r+0x90>)
 8007fda:	6813      	ldr	r3, [r2, #0]
 8007fdc:	b933      	cbnz	r3, 8007fec <_free_r+0x2c>
 8007fde:	6063      	str	r3, [r4, #4]
 8007fe0:	6014      	str	r4, [r2, #0]
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fe8:	f7ff bf60 	b.w	8007eac <__malloc_unlock>
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	d908      	bls.n	8008002 <_free_r+0x42>
 8007ff0:	6820      	ldr	r0, [r4, #0]
 8007ff2:	1821      	adds	r1, r4, r0
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	bf01      	itttt	eq
 8007ff8:	6819      	ldreq	r1, [r3, #0]
 8007ffa:	685b      	ldreq	r3, [r3, #4]
 8007ffc:	1809      	addeq	r1, r1, r0
 8007ffe:	6021      	streq	r1, [r4, #0]
 8008000:	e7ed      	b.n	8007fde <_free_r+0x1e>
 8008002:	461a      	mov	r2, r3
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	b10b      	cbz	r3, 800800c <_free_r+0x4c>
 8008008:	42a3      	cmp	r3, r4
 800800a:	d9fa      	bls.n	8008002 <_free_r+0x42>
 800800c:	6811      	ldr	r1, [r2, #0]
 800800e:	1850      	adds	r0, r2, r1
 8008010:	42a0      	cmp	r0, r4
 8008012:	d10b      	bne.n	800802c <_free_r+0x6c>
 8008014:	6820      	ldr	r0, [r4, #0]
 8008016:	4401      	add	r1, r0
 8008018:	1850      	adds	r0, r2, r1
 800801a:	4283      	cmp	r3, r0
 800801c:	6011      	str	r1, [r2, #0]
 800801e:	d1e0      	bne.n	8007fe2 <_free_r+0x22>
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	6053      	str	r3, [r2, #4]
 8008026:	4408      	add	r0, r1
 8008028:	6010      	str	r0, [r2, #0]
 800802a:	e7da      	b.n	8007fe2 <_free_r+0x22>
 800802c:	d902      	bls.n	8008034 <_free_r+0x74>
 800802e:	230c      	movs	r3, #12
 8008030:	602b      	str	r3, [r5, #0]
 8008032:	e7d6      	b.n	8007fe2 <_free_r+0x22>
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	1821      	adds	r1, r4, r0
 8008038:	428b      	cmp	r3, r1
 800803a:	bf04      	itt	eq
 800803c:	6819      	ldreq	r1, [r3, #0]
 800803e:	685b      	ldreq	r3, [r3, #4]
 8008040:	6063      	str	r3, [r4, #4]
 8008042:	bf04      	itt	eq
 8008044:	1809      	addeq	r1, r1, r0
 8008046:	6021      	streq	r1, [r4, #0]
 8008048:	6054      	str	r4, [r2, #4]
 800804a:	e7ca      	b.n	8007fe2 <_free_r+0x22>
 800804c:	bd38      	pop	{r3, r4, r5, pc}
 800804e:	bf00      	nop
 8008050:	20000a00 	.word	0x20000a00

08008054 <_init>:
 8008054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008056:	bf00      	nop
 8008058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805a:	bc08      	pop	{r3}
 800805c:	469e      	mov	lr, r3
 800805e:	4770      	bx	lr

08008060 <_fini>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	bf00      	nop
 8008064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008066:	bc08      	pop	{r3}
 8008068:	469e      	mov	lr, r3
 800806a:	4770      	bx	lr
