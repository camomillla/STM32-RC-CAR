
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a60  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007c58  08007c58  00008c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc0  08007cc0  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc0  08007cc0  00008cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc8  08007cc8  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc8  08007cc8  00008cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ccc  08007ccc  00008ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007cd0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  2000005c  08007d2c  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  08007d2c  00009af8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183db  00000000  00000000  0000908a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c5  00000000  00000000  00021465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00024c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f98  00000000  00000000  00026060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a02a  00000000  00000000  00026ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a764  00000000  00000000  00051022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff3d1  00000000  00000000  0006b786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016ab57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005798  00000000  00000000  0016ab9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00170334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007c40 	.word	0x08007c40

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	08007c40 	.word	0x08007c40

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053e:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <MX_DMA_Init+0x48>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a0f      	ldr	r2, [pc, #60]	@ (8000580 <MX_DMA_Init+0x48>)
 8000544:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <MX_DMA_Init+0x48>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	2010      	movs	r0, #16
 800055c:	f001 fd4b 	bl	8001ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000560:	2010      	movs	r0, #16
 8000562:	f001 fd64 	bl	800202e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2011      	movs	r0, #17
 800056c:	f001 fd43 	bl	8001ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000570:	2011      	movs	r0, #17
 8000572:	f001 fd5c 	bl	800202e <HAL_NVIC_EnableIRQ>

}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800

08000584 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	@ 0x30
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b77      	ldr	r3, [pc, #476]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a76      	ldr	r2, [pc, #472]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b74      	ldr	r3, [pc, #464]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	61bb      	str	r3, [r7, #24]
 80005b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b71      	ldr	r3, [pc, #452]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a70      	ldr	r2, [pc, #448]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b6e      	ldr	r3, [pc, #440]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b6b      	ldr	r3, [pc, #428]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a6a      	ldr	r2, [pc, #424]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b68      	ldr	r3, [pc, #416]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b65      	ldr	r3, [pc, #404]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a64      	ldr	r2, [pc, #400]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b62      	ldr	r3, [pc, #392]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a5e      	ldr	r2, [pc, #376]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000600:	f043 0310 	orr.w	r3, r3, #16
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b5c      	ldr	r3, [pc, #368]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0310 	and.w	r3, r3, #16
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	4b59      	ldr	r3, [pc, #356]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a58      	ldr	r2, [pc, #352]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b56      	ldr	r3, [pc, #344]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800062a:	4b53      	ldr	r3, [pc, #332]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a52      	ldr	r2, [pc, #328]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b50      	ldr	r3, [pc, #320]	@ (8000778 <MX_GPIO_Init+0x1f4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000648:	484c      	ldr	r0, [pc, #304]	@ (800077c <MX_GPIO_Init+0x1f8>)
 800064a:	f002 facd 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2140      	movs	r1, #64	@ 0x40
 8000652:	484b      	ldr	r0, [pc, #300]	@ (8000780 <MX_GPIO_Init+0x1fc>)
 8000654:	f002 fac8 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2110      	movs	r1, #16
 800065c:	4849      	ldr	r0, [pc, #292]	@ (8000784 <MX_GPIO_Init+0x200>)
 800065e:	f002 fac3 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000662:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000668:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4843      	ldr	r0, [pc, #268]	@ (8000788 <MX_GPIO_Init+0x204>)
 800067a:	f002 f909 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800067e:	2332      	movs	r3, #50	@ 0x32
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068a:	2303      	movs	r3, #3
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800068e:	230b      	movs	r3, #11
 8000690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	483b      	ldr	r0, [pc, #236]	@ (8000788 <MX_GPIO_Init+0x204>)
 800069a:	f002 f8f9 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800069e:	2386      	movs	r3, #134	@ 0x86
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ae:	230b      	movs	r3, #11
 80006b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4834      	ldr	r0, [pc, #208]	@ (800078c <MX_GPIO_Init+0x208>)
 80006ba:	f002 f8e9 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006be:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4829      	ldr	r0, [pc, #164]	@ (800077c <MX_GPIO_Init+0x1f8>)
 80006d8:	f002 f8da 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ee:	230b      	movs	r3, #11
 80006f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4820      	ldr	r0, [pc, #128]	@ (800077c <MX_GPIO_Init+0x1f8>)
 80006fa:	f002 f8c9 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006fe:	2340      	movs	r3, #64	@ 0x40
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	481a      	ldr	r0, [pc, #104]	@ (8000780 <MX_GPIO_Init+0x1fc>)
 8000716:	f002 f8bb 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800071a:	2380      	movs	r3, #128	@ 0x80
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4814      	ldr	r0, [pc, #80]	@ (8000780 <MX_GPIO_Init+0x1fc>)
 800072e:	f002 f8af 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000732:	2310      	movs	r3, #16
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	480e      	ldr	r0, [pc, #56]	@ (8000784 <MX_GPIO_Init+0x200>)
 800074a:	f002 f8a1 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800074e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000760:	230b      	movs	r3, #11
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_GPIO_Init+0x1fc>)
 800076c:	f002 f890 	bl	8002890 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3730      	adds	r7, #48	@ 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40020400 	.word	0x40020400
 8000780:	40021800 	.word	0x40021800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40020800 	.word	0x40020800
 800078c:	40020000 	.word	0x40020000

08000790 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x28>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d104      	bne.n	80007b0 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 80007a6:	887b      	ldrh	r3, [r7, #2]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x2c>)
 80007ac:	f007 f84d 	bl	800784a <ATC_IdleLineCallback>
	}
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40004400 	.word	0x40004400
 80007bc:	20000078 	.word	0x20000078

080007c0 <pid_init>:
	float Kd;			//Wzmocnienie członu różniczkującego*/
	int anti_windup_limit;		//Anti-Windup - ograniczenie członu całkującego*/
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6178      	str	r0, [r7, #20]
 80007c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80007cc:	edc7 0a03 	vstr	s1, [r7, #12]
 80007d0:	ed87 1a02 	vstr	s2, [r7, #8]
 80007d4:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	615a      	str	r2, [r3, #20]
}
 80007fa:	bf00      	nop
 80007fc:	371c      	adds	r7, #28
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <pid_reset>:

void pid_reset(PID *pid_data)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 8000826:	b480      	push	{r7}
 8000828:	b089      	sub	sp, #36	@ 0x24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	441a      	add	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	ed93 7a02 	vldr	s14, [r3, #8]
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	ee07 3a90 	vmov	s15, r3
 8000852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085a:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	ed93 7a03 	vldr	s14, [r3, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000874:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	ed93 7a04 	vldr	s14, [r3, #16]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	ee07 3a90 	vmov	s15, r3
 800088a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000892:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80008a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ae:	db08      	blt.n	80008c2 <pid_calculate+0x9c>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008bc:	edc7 7a07 	vstr	s15, [r7, #28]
 80008c0:	e016      	b.n	80008f0 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	425b      	negs	r3, r3
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80008d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008dc:	d808      	bhi.n	80008f0 <pid_calculate+0xca>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	425b      	negs	r3, r3
 80008e4:	ee07 3a90 	vmov	s15, r3
 80008e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ec:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 80008f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80008fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80008fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000902:	edd7 7a04 	vldr	s15, [r7, #16]
 8000906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800090a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800090e:	ee17 3a90 	vmov	r3, s15
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	@ 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000934:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f82a 	bl	80009bc <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000970:	fb02 f303 	mul.w	r3, r2, r3
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	8892      	ldrh	r2, [r2, #4]
 8000978:	fb93 f2f2 	sdiv	r2, r3, r2
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6919      	ldr	r1, [r3, #16]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	461a      	mov	r2, r3
 8000990:	f7ff ff49 	bl	8000826 <pid_calculate>
 8000994:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	441a      	add	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	db04      	blt.n	80009b4 <motor_calculate_speed+0x5a>
	{
		//drv8835_set_motorA_direction(CW);
		drv8835_set_motorA_speed(m->actual_PWM);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f832 	bl	8000a18 <drv8835_set_motorA_speed>
	else
	{
		//drv8835_set_motorA_direction(CCW);
		//drv8835_set_motorA_speed(-m->actual_PWM);
	}
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	461a      	mov	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d004      	beq.n	8000a08 <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3318      	adds	r3, #24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff feff 	bl	8000806 <pid_reset>

	m->set_speed = set_speed;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	611a      	str	r2, [r3, #16]
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000a22:	88fa      	ldrh	r2, [r7, #6]
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <drv8835_set_motorA_speed+0x34>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d303      	bcc.n	8000a36 <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <drv8835_set_motorA_speed+0x34>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a34:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <drv8835_set_motorA_speed+0x34>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	88fa      	ldrh	r2, [r7, #6]
 8000a3c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000134 	.word	0x20000134

08000a50 <drv8835_init>:

void drv8835_init()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	//drv8835_mode_control(Phase_Enable_Mode);
	//drv8835_set_motorA_direction(CCW);
	drv8835_set_motorA_speed(0);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ffdf 	bl	8000a18 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <drv8835_init+0x18>)
 8000a5e:	f003 fc9b 	bl	8004398 <HAL_TIM_PWM_Start>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000134 	.word	0x20000134

08000a6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d102      	bne.n	8000a84 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000a7e:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a80:	f7ff ff6b 	bl	800095a <motor_calculate_speed>
	}
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	200000b4 	.word	0x200000b4

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b08b      	sub	sp, #44	@ 0x2c
 8000a98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9a:	f001 f950 	bl	8001d3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9e:	f000 f8bd 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa2:	f7ff fd6f 	bl	8000584 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa6:	f7ff fd47 	bl	8000538 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000aaa:	f000 ff2f 	bl	800190c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000aae:	f001 f875 	bl	8001b9c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000ab2:	f000 fefb 	bl	80018ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ab6:	f000 fa6f 	bl	8000f98 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000aba:	f000 fb2b 	bl	8001114 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000abe:	f000 fb7f 	bl	80011c0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ac2:	f000 fc71 	bl	80013a8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000ac6:	f000 fac1 	bl	800104c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000aca:	f000 fc35 	bl	8001338 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000ace:	f000 fbcd 	bl	800126c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  ATC_Init(&ESP, &huart2, 512, "ESP");
 8000ad2:	4b42      	ldr	r3, [pc, #264]	@ (8000bdc <main+0x148>)
 8000ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad8:	4941      	ldr	r1, [pc, #260]	@ (8000be0 <main+0x14c>)
 8000ada:	4842      	ldr	r0, [pc, #264]	@ (8000be4 <main+0x150>)
 8000adc:	f006 fd31 	bl	8007542 <ATC_Init>
  ATC_SendReceive(&ESP, "AT\r\n", 1000, NULL, 1000, 0);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000af0:	493d      	ldr	r1, [pc, #244]	@ (8000be8 <main+0x154>)
 8000af2:	483c      	ldr	r0, [pc, #240]	@ (8000be4 <main+0x150>)
 8000af4:	f006 fdca 	bl	800768c <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWMODE=1\r\n", 1000, NULL, 1000, 0);
 8000af8:	2300      	movs	r3, #0
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2300      	movs	r3, #0
 8000b04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b08:	4938      	ldr	r1, [pc, #224]	@ (8000bec <main+0x158>)
 8000b0a:	4836      	ldr	r0, [pc, #216]	@ (8000be4 <main+0x150>)
 8000b0c:	f006 fdbe 	bl	800768c <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWJAP=\"DeathLock\",\"\"\r\n", 5000, NULL, 5000, 0);
 8000b10:	2300      	movs	r3, #0
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b20:	4933      	ldr	r1, [pc, #204]	@ (8000bf0 <main+0x15c>)
 8000b22:	4830      	ldr	r0, [pc, #192]	@ (8000be4 <main+0x150>)
 8000b24:	f006 fdb2 	bl	800768c <ATC_SendReceive>




  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000b28:	213c      	movs	r1, #60	@ 0x3c
 8000b2a:	4832      	ldr	r0, [pc, #200]	@ (8000bf4 <main+0x160>)
 8000b2c:	f003 fdd4 	bl	80046d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b30:	213c      	movs	r1, #60	@ 0x3c
 8000b32:	4831      	ldr	r0, [pc, #196]	@ (8000bf8 <main+0x164>)
 8000b34:	f003 fdd0 	bl	80046d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000b38:	213c      	movs	r1, #60	@ 0x3c
 8000b3a:	4830      	ldr	r0, [pc, #192]	@ (8000bfc <main+0x168>)
 8000b3c:	f003 fdcc 	bl	80046d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000b40:	213c      	movs	r1, #60	@ 0x3c
 8000b42:	482f      	ldr	r0, [pc, #188]	@ (8000c00 <main+0x16c>)
 8000b44:	f003 fdc8 	bl	80046d8 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	482e      	ldr	r0, [pc, #184]	@ (8000c04 <main+0x170>)
 8000b4c:	f003 fc24 	bl	8004398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b50:	210c      	movs	r1, #12
 8000b52:	482c      	ldr	r0, [pc, #176]	@ (8000c04 <main+0x170>)
 8000b54:	f003 fc20 	bl	8004398 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8000b58:	482b      	ldr	r0, [pc, #172]	@ (8000c08 <main+0x174>)
 8000b5a:	f003 fb4d 	bl	80041f8 <HAL_TIM_Base_Start_IT>

  drv8835_init();
 8000b5e:	f7ff ff77 	bl	8000a50 <drv8835_init>
  motor_init(&motorA, &htim4);
 8000b62:	4926      	ldr	r1, [pc, #152]	@ (8000bfc <main+0x168>)
 8000b64:	4829      	ldr	r0, [pc, #164]	@ (8000c0c <main+0x178>)
 8000b66:	f7ff feda 	bl	800091e <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 8000b6a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b6e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8000b72:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8000c10 <main+0x17c>
 8000b76:	eeb1 0a02 	vmov.f32	s0, #18	@ 0x40900000  4.5
 8000b7a:	4826      	ldr	r0, [pc, #152]	@ (8000c14 <main+0x180>)
 8000b7c:	f7ff fe20 	bl	80007c0 <pid_init>

  int speed_table[] = {50, 100, 25, 125};
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <main+0x184>)
 8000b82:	1d3c      	adds	r4, r7, #4
 8000b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int i = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  uint32_t time_tick = HAL_GetTick();
 8000b8e:	f001 f927 	bl	8001de0 <HAL_GetTick>
 8000b92:	61b8      	str	r0, [r7, #24]
  uint32_t max_time = 5000;
 8000b94:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b98:	617b      	str	r3, [r7, #20]
    /* USER CODE BEGIN 3 */
	  //ATC_Loop(&ESP);
	  //sprintf(buffer, "%lu\r\n", htim1.Instance->CNT);
	  //HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
	  //HAL_Delay(100);
	  if ((HAL_GetTick() - time_tick) > max_time) {
 8000b9a:	f001 f921 	bl	8001de0 <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d2f7      	bcs.n	8000b9a <main+0x106>
		  time_tick = HAL_GetTick();
 8000baa:	f001 f919 	bl	8001de0 <HAL_GetTick>
 8000bae:	61b8      	str	r0, [r7, #24]
		  motor_set_speed(&motorA, speed_table[i++]);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	61fa      	str	r2, [r7, #28]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	3320      	adds	r3, #32
 8000bba:	443b      	add	r3, r7
 8000bbc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4812      	ldr	r0, [pc, #72]	@ (8000c0c <main+0x178>)
 8000bc4:	f7ff ff11 	bl	80009ea <motor_set_speed>

		  i %= 4;
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	425a      	negs	r2, r3
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	f002 0203 	and.w	r2, r2, #3
 8000bd4:	bf58      	it	pl
 8000bd6:	4253      	negpl	r3, r2
 8000bd8:	61fb      	str	r3, [r7, #28]
	  if ((HAL_GetTick() - time_tick) > max_time) {
 8000bda:	e7de      	b.n	8000b9a <main+0x106>
 8000bdc:	08007c58 	.word	0x08007c58
 8000be0:	200002fc 	.word	0x200002fc
 8000be4:	20000078 	.word	0x20000078
 8000be8:	08007c5c 	.word	0x08007c5c
 8000bec:	08007c64 	.word	0x08007c64
 8000bf0:	08007c74 	.word	0x08007c74
 8000bf4:	200000e8 	.word	0x200000e8
 8000bf8:	20000180 	.word	0x20000180
 8000bfc:	200001cc 	.word	0x200001cc
 8000c00:	200002b0 	.word	0x200002b0
 8000c04:	20000134 	.word	0x20000134
 8000c08:	20000264 	.word	0x20000264
 8000c0c:	200000b4 	.word	0x200000b4
 8000c10:	3f4ccccd 	.word	0x3f4ccccd
 8000c14:	200000cc 	.word	0x200000cc
 8000c18:	08007c90 	.word	0x08007c90

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b094      	sub	sp, #80	@ 0x50
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	2234      	movs	r2, #52	@ 0x34
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f006 ff3a 	bl	8007aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c40:	f002 f926 	bl	8002e90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <SystemClock_Config+0xdc>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf8 <SystemClock_Config+0xdc>)
 8000c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c50:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <SystemClock_Config+0xdc>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <SystemClock_Config+0xe0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c64:	4a25      	ldr	r2, [pc, #148]	@ (8000cfc <SystemClock_Config+0xe0>)
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <SystemClock_Config+0xe0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c7c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c82:	2302      	movs	r3, #2
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c90:	2360      	movs	r3, #96	@ 0x60
 8000c92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 f953 	bl	8002f50 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cb0:	f000 f826 	bl	8000d00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cb4:	f002 f8fc 	bl	8002eb0 <HAL_PWREx_EnableOverDrive>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cbe:	f000 f81f 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	2103      	movs	r1, #3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 fbe4 	bl	80034ac <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000cea:	f000 f809 	bl	8000d00 <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	@ 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <Error_Handler+0x8>

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_MspInit+0x44>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000daa:	f001 f805 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <DMA1_Stream5_IRQHandler+0x10>)
 8000dba:	f001 faf3 	bl	80023a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000040c 	.word	0x2000040c

08000dc8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <DMA1_Stream6_IRQHandler+0x10>)
 8000dce:	f001 fae9 	bl	80023a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000046c 	.word	0x2000046c

08000ddc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000de2:	f003 fd07 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000e8 	.word	0x200000e8

08000df0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000df6:	f003 fcfd 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000e8 	.word	0x200000e8

08000e04 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e0a:	f003 fcf3 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000e8 	.word	0x200000e8

08000e18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <TIM1_CC_IRQHandler+0x10>)
 8000e1e:	f003 fce9 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000e8 	.word	0x200000e8

08000e2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <TIM2_IRQHandler+0x10>)
 8000e32:	f003 fcdf 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000134 	.word	0x20000134

08000e40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <TIM3_IRQHandler+0x10>)
 8000e46:	f003 fcd5 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000180 	.word	0x20000180

08000e54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <TIM4_IRQHandler+0x10>)
 8000e5a:	f003 fccb 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001cc 	.word	0x200001cc

08000e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <USART2_IRQHandler+0x10>)
 8000e6e:	f004 fcc3 	bl	80057f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200002fc 	.word	0x200002fc

08000e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <USART3_IRQHandler+0x10>)
 8000e82:	f004 fcb9 	bl	80057f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000384 	.word	0x20000384

08000e90 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000e96:	f003 fcad 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200002b0 	.word	0x200002b0

08000ea4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000eaa:	f003 fca3 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200002b0 	.word	0x200002b0

08000eb8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ebe:	f003 fc99 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200002b0 	.word	0x200002b0

08000ecc <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM8_CC_IRQHandler+0x10>)
 8000ed2:	f003 fc8f 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200002b0 	.word	0x200002b0

08000ee0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <TIM5_IRQHandler+0x10>)
 8000ee6:	f003 fc85 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000218 	.word	0x20000218

08000ef4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <TIM6_DAC_IRQHandler+0x10>)
 8000efa:	f003 fc7b 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000264 	.word	0x20000264

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f006 fdf6 	bl	8007b28 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20080000 	.word	0x20080000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200000e4 	.word	0x200000e4
 8000f70:	20000af8 	.word	0x20000af8

08000f74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	@ 0x30
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2224      	movs	r2, #36	@ 0x24
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 fd7c 	bl	8007aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fb8:	4a23      	ldr	r2, [pc, #140]	@ (8001048 <MX_TIM1_Init+0xb0>)
 8000fba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_TIM1_Init+0xac>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fea:	2301      	movs	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001002:	230f      	movs	r3, #15
 8001004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	480d      	ldr	r0, [pc, #52]	@ (8001044 <MX_TIM1_Init+0xac>)
 800100e:	f003 fabd 	bl	800458c <HAL_TIM_Encoder_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001018:	f7ff fe72 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	@ (8001044 <MX_TIM1_Init+0xac>)
 800102e:	f004 f955 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001038:	f7ff fe62 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3730      	adds	r7, #48	@ 0x30
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000e8 	.word	0x200000e8
 8001048:	40010000 	.word	0x40010000

0800104c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	@ 0x28
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001070:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <MX_TIM2_Init+0xc4>)
 8001072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <MX_TIM2_Init+0xc4>)
 800107a:	222f      	movs	r2, #47	@ 0x2f
 800107c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <MX_TIM2_Init+0xc4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001084:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <MX_TIM2_Init+0xc4>)
 8001086:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800108a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <MX_TIM2_Init+0xc4>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <MX_TIM2_Init+0xc4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001098:	481d      	ldr	r0, [pc, #116]	@ (8001110 <MX_TIM2_Init+0xc4>)
 800109a:	f003 f925 	bl	80042e8 <HAL_TIM_PWM_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80010a4:	f7ff fe2c 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4816      	ldr	r0, [pc, #88]	@ (8001110 <MX_TIM2_Init+0xc4>)
 80010b8:	f004 f910 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80010c2:	f7ff fe1d 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c6:	2360      	movs	r3, #96	@ 0x60
 80010c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <MX_TIM2_Init+0xc4>)
 80010de:	f003 fc91 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010e8:	f7ff fe0a 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	220c      	movs	r2, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	4807      	ldr	r0, [pc, #28]	@ (8001110 <MX_TIM2_Init+0xc4>)
 80010f4:	f003 fc86 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80010fe:	f7ff fdff 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001102:	4803      	ldr	r0, [pc, #12]	@ (8001110 <MX_TIM2_Init+0xc4>)
 8001104:	f000 fb5a 	bl	80017bc <HAL_TIM_MspPostInit>

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000134 	.word	0x20000134

08001114 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	@ 0x30
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2224      	movs	r2, #36	@ 0x24
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f006 fcbe 	bl	8007aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_TIM3_Init+0xa4>)
 8001134:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <MX_TIM3_Init+0xa8>)
 8001136:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_TIM3_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800113e:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <MX_TIM3_Init+0xa4>)
 8001140:	2210      	movs	r2, #16
 8001142:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001144:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_TIM3_Init+0xa4>)
 8001146:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800114a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_TIM3_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <MX_TIM3_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001158:	2303      	movs	r3, #3
 800115a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001168:	230f      	movs	r3, #15
 800116a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001178:	230f      	movs	r3, #15
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_TIM3_Init+0xa4>)
 8001184:	f003 fa02 	bl	800458c <HAL_TIM_Encoder_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800118e:	f7ff fdb7 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <MX_TIM3_Init+0xa4>)
 80011a0:	f004 f89c 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80011aa:	f7ff fda9 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3730      	adds	r7, #48	@ 0x30
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000180 	.word	0x20000180
 80011bc:	40000400 	.word	0x40000400

080011c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2224      	movs	r2, #36	@ 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 fc68 	bl	8007aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <MX_TIM4_Init+0xa4>)
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <MX_TIM4_Init+0xa8>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <MX_TIM4_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <MX_TIM4_Init+0xa4>)
 80011ec:	2210      	movs	r2, #16
 80011ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <MX_TIM4_Init+0xa4>)
 80011f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <MX_TIM4_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <MX_TIM4_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001204:	2303      	movs	r3, #3
 8001206:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001214:	230f      	movs	r3, #15
 8001216:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800121c:	2301      	movs	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001224:	230f      	movs	r3, #15
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	@ (8001264 <MX_TIM4_Init+0xa4>)
 8001230:	f003 f9ac 	bl	800458c <HAL_TIM_Encoder_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800123a:	f7ff fd61 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	@ (8001264 <MX_TIM4_Init+0xa4>)
 800124c:	f004 f846 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001256:	f7ff fd53 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	@ 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001cc 	.word	0x200001cc
 8001268:	40000800 	.word	0x40000800

0800126c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <MX_TIM5_Init+0xc4>)
 8001292:	4a28      	ldr	r2, [pc, #160]	@ (8001334 <MX_TIM5_Init+0xc8>)
 8001294:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <MX_TIM5_Init+0xc4>)
 8001298:	222f      	movs	r2, #47	@ 0x2f
 800129a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <MX_TIM5_Init+0xc4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80012a2:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <MX_TIM5_Init+0xc4>)
 80012a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_TIM5_Init+0xc4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <MX_TIM5_Init+0xc4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012b6:	481e      	ldr	r0, [pc, #120]	@ (8001330 <MX_TIM5_Init+0xc4>)
 80012b8:	f003 f816 	bl	80042e8 <HAL_TIM_PWM_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80012c2:	f7ff fd1d 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4816      	ldr	r0, [pc, #88]	@ (8001330 <MX_TIM5_Init+0xc4>)
 80012d6:	f004 f801 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80012e0:	f7ff fd0e 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e4:	2360      	movs	r3, #96	@ 0x60
 80012e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <MX_TIM5_Init+0xc4>)
 80012fc:	f003 fb82 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001306:	f7ff fcfb 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	220c      	movs	r2, #12
 800130e:	4619      	mov	r1, r3
 8001310:	4807      	ldr	r0, [pc, #28]	@ (8001330 <MX_TIM5_Init+0xc4>)
 8001312:	f003 fb77 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 800131c:	f7ff fcf0 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001320:	4803      	ldr	r0, [pc, #12]	@ (8001330 <MX_TIM5_Init+0xc4>)
 8001322:	f000 fa4b 	bl	80017bc <HAL_TIM_MspPostInit>

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	@ 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000218 	.word	0x20000218
 8001334:	40000c00 	.word	0x40000c00

08001338 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_TIM6_Init+0x68>)
 800134a:	4a16      	ldr	r2, [pc, #88]	@ (80013a4 <MX_TIM6_Init+0x6c>)
 800134c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_TIM6_Init+0x68>)
 8001350:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001354:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_TIM6_Init+0x68>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800135c:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <MX_TIM6_Init+0x68>)
 800135e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001362:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_TIM6_Init+0x68>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_TIM6_Init+0x68>)
 800136c:	f002 feec 	bl	8004148 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001376:	f7ff fcc3 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <MX_TIM6_Init+0x68>)
 8001388:	f003 ffa8 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001392:	f7ff fcb5 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000264 	.word	0x20000264
 80013a4:	40001000 	.word	0x40001000

080013a8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	@ 0x30
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2224      	movs	r2, #36	@ 0x24
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f006 fb74 	bl	8007aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <MX_TIM8_Init+0xac>)
 80013c8:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <MX_TIM8_Init+0xb0>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013cc:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <MX_TIM8_Init+0xac>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80013d2:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <MX_TIM8_Init+0xac>)
 80013d4:	2210      	movs	r2, #16
 80013d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <MX_TIM8_Init+0xac>)
 80013da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <MX_TIM8_Init+0xac>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_TIM8_Init+0xac>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <MX_TIM8_Init+0xac>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013f2:	2303      	movs	r3, #3
 80013f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013fa:	2301      	movs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001402:	230f      	movs	r3, #15
 8001404:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800140a:	2301      	movs	r3, #1
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001412:	230f      	movs	r3, #15
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <MX_TIM8_Init+0xac>)
 800141e:	f003 f8b5 	bl	800458c <HAL_TIM_Encoder_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001428:	f7ff fc6a 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_TIM8_Init+0xac>)
 800143e:	f003 ff4d 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001448:	f7ff fc5a 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	@ 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200002b0 	.word	0x200002b0
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b090      	sub	sp, #64	@ 0x40
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a93      	ldr	r2, [pc, #588]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x26c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d149      	bne.n	8001512 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	4b93      	ldr	r3, [pc, #588]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a92      	ldr	r2, [pc, #584]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b90      	ldr	r3, [pc, #576]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001494:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	4b8d      	ldr	r3, [pc, #564]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a8c      	ldr	r2, [pc, #560]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b8a      	ldr	r3, [pc, #552]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 80014ae:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014c8:	4619      	mov	r1, r3
 80014ca:	4881      	ldr	r0, [pc, #516]	@ (80016d0 <HAL_TIM_Encoder_MspInit+0x274>)
 80014cc:	f001 f9e0 	bl	8002890 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2018      	movs	r0, #24
 80014d6:	f000 fd8e 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80014da:	2018      	movs	r0, #24
 80014dc:	f000 fda7 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2019      	movs	r0, #25
 80014e6:	f000 fd86 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014ea:	2019      	movs	r0, #25
 80014ec:	f000 fd9f 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	201a      	movs	r0, #26
 80014f6:	f000 fd7e 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80014fa:	201a      	movs	r0, #26
 80014fc:	f000 fd97 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	201b      	movs	r0, #27
 8001506:	f000 fd76 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800150a:	201b      	movs	r0, #27
 800150c:	f000 fd8f 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001510:	e0d5      	b.n	80016be <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6f      	ldr	r2, [pc, #444]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x278>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d14c      	bne.n	80015b6 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151c:	4b6b      	ldr	r3, [pc, #428]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	4a6a      	ldr	r2, [pc, #424]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	6413      	str	r3, [r2, #64]	@ 0x40
 8001528:	4b68      	ldr	r3, [pc, #416]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	623b      	str	r3, [r7, #32]
 8001532:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b65      	ldr	r3, [pc, #404]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	4a64      	ldr	r2, [pc, #400]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001540:	4b62      	ldr	r3, [pc, #392]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b5f      	ldr	r3, [pc, #380]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	4a5e      	ldr	r2, [pc, #376]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001552:	f043 0302 	orr.w	r3, r3, #2
 8001556:	6313      	str	r3, [r2, #48]	@ 0x30
 8001558:	4b5c      	ldr	r3, [pc, #368]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8001564:	2340      	movs	r3, #64	@ 0x40
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001574:	2302      	movs	r3, #2
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800157c:	4619      	mov	r1, r3
 800157e:	4856      	ldr	r0, [pc, #344]	@ (80016d8 <HAL_TIM_Encoder_MspInit+0x27c>)
 8001580:	f001 f986 	bl	8002890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001584:	2320      	movs	r3, #32
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001594:	2302      	movs	r3, #2
 8001596:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800159c:	4619      	mov	r1, r3
 800159e:	484f      	ldr	r0, [pc, #316]	@ (80016dc <HAL_TIM_Encoder_MspInit+0x280>)
 80015a0:	f001 f976 	bl	8002890 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	201d      	movs	r0, #29
 80015aa:	f000 fd24 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015ae:	201d      	movs	r0, #29
 80015b0:	f000 fd3d 	bl	800202e <HAL_NVIC_EnableIRQ>
}
 80015b4:	e083      	b.n	80016be <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a49      	ldr	r2, [pc, #292]	@ (80016e0 <HAL_TIM_Encoder_MspInit+0x284>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d131      	bne.n	8001624 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015c0:	4b42      	ldr	r3, [pc, #264]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	4a41      	ldr	r2, [pc, #260]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80015cc:	4b3f      	ldr	r3, [pc, #252]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b3c      	ldr	r3, [pc, #240]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015dc:	4a3b      	ldr	r2, [pc, #236]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e4:	4b39      	ldr	r3, [pc, #228]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 80015f0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001602:	2302      	movs	r3, #2
 8001604:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001606:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800160a:	4619      	mov	r1, r3
 800160c:	4835      	ldr	r0, [pc, #212]	@ (80016e4 <HAL_TIM_Encoder_MspInit+0x288>)
 800160e:	f001 f93f 	bl	8002890 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	201e      	movs	r0, #30
 8001618:	f000 fced 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800161c:	201e      	movs	r0, #30
 800161e:	f000 fd06 	bl	800202e <HAL_NVIC_EnableIRQ>
}
 8001622:	e04c      	b.n	80016be <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a2f      	ldr	r2, [pc, #188]	@ (80016e8 <HAL_TIM_Encoder_MspInit+0x28c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d147      	bne.n	80016be <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800162e:	4b27      	ldr	r3, [pc, #156]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	4a26      	ldr	r2, [pc, #152]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6453      	str	r3, [r2, #68]	@ 0x44
 800163a:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x270>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 800165e:	23c0      	movs	r3, #192	@ 0xc0
 8001660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800166e:	2303      	movs	r3, #3
 8001670:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001676:	4619      	mov	r1, r3
 8001678:	481c      	ldr	r0, [pc, #112]	@ (80016ec <HAL_TIM_Encoder_MspInit+0x290>)
 800167a:	f001 f909 	bl	8002890 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	202b      	movs	r0, #43	@ 0x2b
 8001684:	f000 fcb7 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001688:	202b      	movs	r0, #43	@ 0x2b
 800168a:	f000 fcd0 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	202c      	movs	r0, #44	@ 0x2c
 8001694:	f000 fcaf 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001698:	202c      	movs	r0, #44	@ 0x2c
 800169a:	f000 fcc8 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	202d      	movs	r0, #45	@ 0x2d
 80016a4:	f000 fca7 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80016a8:	202d      	movs	r0, #45	@ 0x2d
 80016aa:	f000 fcc0 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	202e      	movs	r0, #46	@ 0x2e
 80016b4:	f000 fc9f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80016b8:	202e      	movs	r0, #46	@ 0x2e
 80016ba:	f000 fcb8 	bl	800202e <HAL_NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3740      	adds	r7, #64	@ 0x40
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40000800 	.word	0x40000800
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	40010400 	.word	0x40010400
 80016ec:	40020800 	.word	0x40020800

080016f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001700:	d114      	bne.n	800172c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_TIM_PWM_MspInit+0x78>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a18      	ldr	r2, [pc, #96]	@ (8001768 <HAL_TIM_PWM_MspInit+0x78>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <HAL_TIM_PWM_MspInit+0x78>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	201c      	movs	r0, #28
 8001720:	f000 fc69 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001724:	201c      	movs	r0, #28
 8001726:	f000 fc82 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800172a:	e018      	b.n	800175e <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM5)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0e      	ldr	r2, [pc, #56]	@ (800176c <HAL_TIM_PWM_MspInit+0x7c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d113      	bne.n	800175e <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <HAL_TIM_PWM_MspInit+0x78>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <HAL_TIM_PWM_MspInit+0x78>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_TIM_PWM_MspInit+0x78>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2032      	movs	r0, #50	@ 0x32
 8001754:	f000 fc4f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001758:	2032      	movs	r0, #50	@ 0x32
 800175a:	f000 fc68 	bl	800202e <HAL_NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40000c00 	.word	0x40000c00

08001770 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <HAL_TIM_Base_MspInit+0x44>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d113      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001782:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <HAL_TIM_Base_MspInit+0x48>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a0c      	ldr	r2, [pc, #48]	@ (80017b8 <HAL_TIM_Base_MspInit+0x48>)
 8001788:	f043 0310 	orr.w	r3, r3, #16
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_TIM_Base_MspInit+0x48>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2036      	movs	r0, #54	@ 0x36
 80017a0:	f000 fc29 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a4:	2036      	movs	r0, #54	@ 0x36
 80017a6:	f000 fc42 	bl	800202e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40001000 	.word	0x40001000
 80017b8:	40023800 	.word	0x40023800

080017bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017dc:	d139      	bne.n	8001852 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <HAL_TIM_MspPostInit+0xe0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a2e      	ldr	r2, [pc, #184]	@ (800189c <HAL_TIM_MspPostInit+0xe0>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <HAL_TIM_MspPostInit+0xe0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4b29      	ldr	r3, [pc, #164]	@ (800189c <HAL_TIM_MspPostInit+0xe0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a28      	ldr	r2, [pc, #160]	@ (800189c <HAL_TIM_MspPostInit+0xe0>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <HAL_TIM_MspPostInit+0xe0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 800180e:	2320      	movs	r3, #32
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800181e:	2301      	movs	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	481d      	ldr	r0, [pc, #116]	@ (80018a0 <HAL_TIM_MspPostInit+0xe4>)
 800182a:	f001 f831 	bl	8002890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 800182e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001840:	2301      	movs	r3, #1
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4816      	ldr	r0, [pc, #88]	@ (80018a4 <HAL_TIM_MspPostInit+0xe8>)
 800184c:	f001 f820 	bl	8002890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001850:	e020      	b.n	8001894 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM5)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <HAL_TIM_MspPostInit+0xec>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d11b      	bne.n	8001894 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_TIM_MspPostInit+0xe0>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001860:	4a0e      	ldr	r2, [pc, #56]	@ (800189c <HAL_TIM_MspPostInit+0xe0>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6313      	str	r3, [r2, #48]	@ 0x30
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <HAL_TIM_MspPostInit+0xe0>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001874:	2309      	movs	r3, #9
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001884:	2302      	movs	r3, #2
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4804      	ldr	r0, [pc, #16]	@ (80018a0 <HAL_TIM_MspPostInit+0xe4>)
 8001890:	f000 fffe 	bl	8002890 <HAL_GPIO_Init>
}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	@ 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40000c00 	.word	0x40000c00

080018ac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b0:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018b2:	4a15      	ldr	r2, [pc, #84]	@ (8001908 <MX_USART2_UART_Init+0x5c>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <MX_USART2_UART_Init+0x58>)
 80018f0:	f003 fda0 	bl	8005434 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018fa:	f7ff fa01 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002fc 	.word	0x200002fc
 8001908:	40004400 	.word	0x40004400

0800190c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 8001912:	4a15      	ldr	r2, [pc, #84]	@ (8001968 <MX_USART3_UART_Init+0x5c>)
 8001914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 8001918:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800191c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_USART3_UART_Init+0x58>)
 8001950:	f003 fd70 	bl	8005434 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800195a:	f7ff f9d1 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000384 	.word	0x20000384
 8001968:	40004800 	.word	0x40004800

0800196c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0b0      	sub	sp, #192	@ 0xc0
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	2290      	movs	r2, #144	@ 0x90
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f006 f889 	bl	8007aa4 <memset>
  if(uartHandle->Instance==USART2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a79      	ldr	r2, [pc, #484]	@ (8001b7c <HAL_UART_MspInit+0x210>)
 8001998:	4293      	cmp	r3, r2
 800199a:	f040 80a0 	bne.w	8001ade <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800199e:	2380      	movs	r3, #128	@ 0x80
 80019a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 ffa4 	bl	80038f8 <HAL_RCCEx_PeriphCLKConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019b6:	f7ff f9a3 	bl	8000d00 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ba:	4b71      	ldr	r3, [pc, #452]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	4a70      	ldr	r2, [pc, #448]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b68      	ldr	r3, [pc, #416]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019ea:	2360      	movs	r3, #96	@ 0x60
 80019ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a02:	2307      	movs	r3, #7
 8001a04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a08:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	485d      	ldr	r0, [pc, #372]	@ (8001b84 <HAL_UART_MspInit+0x218>)
 8001a10:	f000 ff3e 	bl	8002890 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a14:	4b5c      	ldr	r3, [pc, #368]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a16:	4a5d      	ldr	r2, [pc, #372]	@ (8001b8c <HAL_UART_MspInit+0x220>)
 8001a18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a20:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a22:	4b59      	ldr	r3, [pc, #356]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a28:	4b57      	ldr	r3, [pc, #348]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a2e:	4b56      	ldr	r3, [pc, #344]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a34:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a36:	4b54      	ldr	r3, [pc, #336]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a3c:	4b52      	ldr	r3, [pc, #328]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a42:	4b51      	ldr	r3, [pc, #324]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a48:	4b4f      	ldr	r3, [pc, #316]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a54:	484c      	ldr	r0, [pc, #304]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a56:	f000 fb05 	bl	8002064 <HAL_DMA_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001a60:	f7ff f94e 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a48      	ldr	r2, [pc, #288]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a68:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a6a:	4a47      	ldr	r2, [pc, #284]	@ (8001b88 <HAL_UART_MspInit+0x21c>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001a70:	4b47      	ldr	r3, [pc, #284]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001a72:	4a48      	ldr	r2, [pc, #288]	@ (8001b94 <HAL_UART_MspInit+0x228>)
 8001a74:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001a76:	4b46      	ldr	r3, [pc, #280]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001a78:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a7e:	4b44      	ldr	r3, [pc, #272]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001a80:	2240      	movs	r2, #64	@ 0x40
 8001a82:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a84:	4b42      	ldr	r3, [pc, #264]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a8a:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a90:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a92:	4b3f      	ldr	r3, [pc, #252]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a98:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aaa:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ab0:	4837      	ldr	r0, [pc, #220]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001ab2:	f000 fad7 	bl	8002064 <HAL_DMA_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001abc:	f7ff f920 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a33      	ldr	r2, [pc, #204]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001ac4:	671a      	str	r2, [r3, #112]	@ 0x70
 8001ac6:	4a32      	ldr	r2, [pc, #200]	@ (8001b90 <HAL_UART_MspInit+0x224>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2026      	movs	r0, #38	@ 0x26
 8001ad2:	f000 fa90 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ad6:	2026      	movs	r0, #38	@ 0x26
 8001ad8:	f000 faa9 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001adc:	e049      	b.n	8001b72 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b98 <HAL_UART_MspInit+0x22c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d144      	bne.n	8001b72 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 fefe 	bl	80038f8 <HAL_RCCEx_PeriphCLKConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001b02:	f7ff f8fd 	bl	8000d00 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a17      	ldr	r2, [pc, #92]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <HAL_UART_MspInit+0x214>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b50:	2307      	movs	r3, #7
 8001b52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b56:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4809      	ldr	r0, [pc, #36]	@ (8001b84 <HAL_UART_MspInit+0x218>)
 8001b5e:	f000 fe97 	bl	8002890 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2027      	movs	r0, #39	@ 0x27
 8001b68:	f000 fa45 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b6c:	2027      	movs	r0, #39	@ 0x27
 8001b6e:	f000 fa5e 	bl	800202e <HAL_NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	37c0      	adds	r7, #192	@ 0xc0
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40004400 	.word	0x40004400
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	2000040c 	.word	0x2000040c
 8001b8c:	40026088 	.word	0x40026088
 8001b90:	2000046c 	.word	0x2000046c
 8001b94:	400260a0 	.word	0x400260a0
 8001b98:	40004800 	.word	0x40004800

08001b9c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ba2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ba6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001baa:	2206      	movs	r2, #6
 8001bac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001be0:	f001 f81b 	bl	8002c1a <HAL_PCD_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001bea:	f7ff f889 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200004cc 	.word	0x200004cc

08001bf8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0ae      	sub	sp, #184	@ 0xb8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2290      	movs	r2, #144	@ 0x90
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f005 ff43 	bl	8007aa4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c26:	d159      	bne.n	8001cdc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fe5d 	bl	80038f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c44:	f7ff f85c 	bl	8000d00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <HAL_PCD_MspInit+0xec>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ce4 <HAL_PCD_MspInit+0xec>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c54:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <HAL_PCD_MspInit+0xec>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c60:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4818      	ldr	r0, [pc, #96]	@ (8001ce8 <HAL_PCD_MspInit+0xf0>)
 8001c88:	f000 fe02 	bl	8002890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4810      	ldr	r0, [pc, #64]	@ (8001ce8 <HAL_PCD_MspInit+0xf0>)
 8001ca8:	f000 fdf2 	bl	8002890 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_PCD_MspInit+0xec>)
 8001cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce4 <HAL_PCD_MspInit+0xec>)
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb6:	6353      	str	r3, [r2, #52]	@ 0x34
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_PCD_MspInit+0xec>)
 8001cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <HAL_PCD_MspInit+0xec>)
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc8:	4a06      	ldr	r2, [pc, #24]	@ (8001ce4 <HAL_PCD_MspInit+0xec>)
 8001cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cce:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <HAL_PCD_MspInit+0xec>)
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	37b8      	adds	r7, #184	@ 0xb8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf0:	f7ff f940 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf4:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf6:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f005 ff0b 	bl	8007b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7fe feb9 	bl	8000a94 <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d30:	08007cd0 	.word	0x08007cd0
  ldr r2, =_sbss
 8001d34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d38:	20000af8 	.word	0x20000af8

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>

08001d3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d42:	2003      	movs	r0, #3
 8001d44:	f000 f94c 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f000 f805 	bl	8001d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4e:	f7fe ffdd 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_InitTick+0x54>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_InitTick+0x58>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f967 	bl	800204a <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f000 f92f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	@ (8001db4 <HAL_InitTick+0x5c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	@ (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	200009ac 	.word	0x200009ac

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	200009ac 	.word	0x200009ac

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000008 	.word	0x20000008

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x40>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x40>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00
 8001e84:	05fa0000 	.word	0x05fa0000

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	@ (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	@ (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	@ (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	@ 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff29 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff3e 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff8e 	bl	8001f34 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5d 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff31 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffa2 	bl	8001f9c <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff feb6 	bl	8001de0 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e099      	b.n	80021b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a0:	e00f      	b.n	80020c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a2:	f7ff fe9d 	bl	8001de0 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b05      	cmp	r3, #5
 80020ae:	d908      	bls.n	80020c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2203      	movs	r2, #3
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e078      	b.n	80021b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e8      	bne.n	80020a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <HAL_DMA_Init+0x158>)
 80020dc:	4013      	ands	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	2b04      	cmp	r3, #4
 800211a:	d107      	bne.n	800212c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	4313      	orrs	r3, r2
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f023 0307 	bic.w	r3, r3, #7
 8002142:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4313      	orrs	r3, r2
 800214c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	2b04      	cmp	r3, #4
 8002154:	d117      	bne.n	8002186 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00e      	beq.n	8002186 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fb15 	bl	8002798 <DMA_CheckFifoParam>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2240      	movs	r2, #64	@ 0x40
 8002178:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002182:	2301      	movs	r3, #1
 8002184:	e016      	b.n	80021b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 facc 	bl	800272c <DMA_CalcBaseAndBitshift>
 8002194:	4603      	mov	r3, r0
 8002196:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219c:	223f      	movs	r2, #63	@ 0x3f
 800219e:	409a      	lsls	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	e010803f 	.word	0xe010803f

080021c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_DMA_Start_IT+0x26>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e048      	b.n	8002278 <HAL_DMA_Start_IT+0xb8>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d137      	bne.n	800226a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fa5e 	bl	80026d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	223f      	movs	r2, #63	@ 0x3f
 800221a:	409a      	lsls	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0216 	orr.w	r2, r2, #22
 800222e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800223e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0208 	orr.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e005      	b.n	8002276 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002272:	2302      	movs	r3, #2
 8002274:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800228e:	f7ff fda7 	bl	8001de0 <HAL_GetTick>
 8002292:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d008      	beq.n	80022b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2280      	movs	r2, #128	@ 0x80
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e052      	b.n	8002358 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0216 	bic.w	r2, r2, #22
 80022c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <HAL_DMA_Abort+0x62>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0208 	bic.w	r2, r2, #8
 80022f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002302:	e013      	b.n	800232c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002304:	f7ff fd6c 	bl	8001de0 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b05      	cmp	r3, #5
 8002310:	d90c      	bls.n	800232c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2203      	movs	r2, #3
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e015      	b.n	8002358 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e4      	bne.n	8002304 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233e:	223f      	movs	r2, #63	@ 0x3f
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d004      	beq.n	800237e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2280      	movs	r2, #128	@ 0x80
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00c      	b.n	8002398 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2205      	movs	r2, #5
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023b0:	4b8e      	ldr	r3, [pc, #568]	@ (80025ec <HAL_DMA_IRQHandler+0x248>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a8e      	ldr	r2, [pc, #568]	@ (80025f0 <HAL_DMA_IRQHandler+0x24c>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0a9b      	lsrs	r3, r3, #10
 80023bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	2208      	movs	r2, #8
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01a      	beq.n	8002410 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0204 	bic.w	r2, r2, #4
 80023f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fc:	2208      	movs	r2, #8
 80023fe:	409a      	lsls	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	2201      	movs	r2, #1
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d012      	beq.n	8002446 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002432:	2201      	movs	r2, #1
 8002434:	409a      	lsls	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243e:	f043 0202 	orr.w	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244a:	2204      	movs	r2, #4
 800244c:	409a      	lsls	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00b      	beq.n	800247c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	2204      	movs	r2, #4
 800246a:	409a      	lsls	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	f043 0204 	orr.w	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	2210      	movs	r2, #16
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d043      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d03c      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249e:	2210      	movs	r2, #16
 80024a0:	409a      	lsls	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d018      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d108      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d024      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
 80024d2:	e01f      	b.n	8002514 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
 80024e4:	e016      	b.n	8002514 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0208 	bic.w	r2, r2, #8
 8002502:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	2220      	movs	r2, #32
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 808f 	beq.w	8002644 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8087 	beq.w	8002644 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253a:	2220      	movs	r2, #32
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b05      	cmp	r3, #5
 800254c:	d136      	bne.n	80025bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0216 	bic.w	r2, r2, #22
 800255c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800256c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_DMA_IRQHandler+0x1da>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0208 	bic.w	r2, r2, #8
 800258c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	223f      	movs	r2, #63	@ 0x3f
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d07e      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
        }
        return;
 80025ba:	e079      	b.n	80026b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d031      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
 80025e8:	e02c      	b.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000
 80025f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d023      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
 8002604:	e01e      	b.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0210 	bic.w	r2, r2, #16
 8002622:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002648:	2b00      	cmp	r3, #0
 800264a:	d032      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d022      	beq.n	800269e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2205      	movs	r2, #5
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3301      	adds	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	d307      	bcc.n	800268c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f2      	bne.n	8002670 <HAL_DMA_IRQHandler+0x2cc>
 800268a:	e000      	b.n	800268e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800268c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e000      	b.n	80026b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026b0:	bf00      	nop
    }
  }
}
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b40      	cmp	r3, #64	@ 0x40
 80026fc:	d108      	bne.n	8002710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800270e:	e007      	b.n	8002720 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	60da      	str	r2, [r3, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	3b10      	subs	r3, #16
 800273c:	4a13      	ldr	r2, [pc, #76]	@ (800278c <DMA_CalcBaseAndBitshift+0x60>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002746:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <DMA_CalcBaseAndBitshift+0x64>)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d908      	bls.n	800276c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <DMA_CalcBaseAndBitshift+0x68>)
 8002762:	4013      	ands	r3, r2
 8002764:	1d1a      	adds	r2, r3, #4
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	659a      	str	r2, [r3, #88]	@ 0x58
 800276a:	e006      	b.n	800277a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <DMA_CalcBaseAndBitshift+0x68>)
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	aaaaaaab 	.word	0xaaaaaaab
 8002790:	08007cb8 	.word	0x08007cb8
 8002794:	fffffc00 	.word	0xfffffc00

08002798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11f      	bne.n	80027f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d856      	bhi.n	8002866 <DMA_CheckFifoParam+0xce>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <DMA_CheckFifoParam+0x28>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027e3 	.word	0x080027e3
 80027c8:	080027d1 	.word	0x080027d1
 80027cc:	08002867 	.word	0x08002867
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d046      	beq.n	800286a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e0:	e043      	b.n	800286a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027ea:	d140      	bne.n	800286e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e03d      	b.n	800286e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027fa:	d121      	bne.n	8002840 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d837      	bhi.n	8002872 <DMA_CheckFifoParam+0xda>
 8002802:	a201      	add	r2, pc, #4	@ (adr r2, 8002808 <DMA_CheckFifoParam+0x70>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	08002819 	.word	0x08002819
 800280c:	0800281f 	.word	0x0800281f
 8002810:	08002819 	.word	0x08002819
 8002814:	08002831 	.word	0x08002831
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e030      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002822:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d025      	beq.n	8002876 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282e:	e022      	b.n	8002876 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002834:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002838:	d11f      	bne.n	800287a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800283e:	e01c      	b.n	800287a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d903      	bls.n	800284e <DMA_CheckFifoParam+0xb6>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d003      	beq.n	8002854 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800284c:	e018      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      break;
 8002852:	e015      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00e      	beq.n	800287e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      break;
 8002864:	e00b      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      break;
 8002866:	bf00      	nop
 8002868:	e00a      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 800286a:	bf00      	nop
 800286c:	e008      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
 8002870:	e006      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 8002872:	bf00      	nop
 8002874:	e004      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 8002876:	bf00      	nop
 8002878:	e002      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;   
 800287a:	bf00      	nop
 800287c:	e000      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 800287e:	bf00      	nop
    }
  } 
  
  return status; 
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop

08002890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e175      	b.n	8002b9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f040 8164 	bne.w	8002b96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d005      	beq.n	80028e6 <HAL_GPIO_Init+0x56>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d130      	bne.n	8002948 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 0201 	and.w	r2, r3, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b03      	cmp	r3, #3
 8002952:	d017      	beq.n	8002984 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d123      	bne.n	80029d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	08da      	lsrs	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3208      	adds	r2, #8
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0203 	and.w	r2, r3, #3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80be 	beq.w	8002b96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1a:	4b66      	ldr	r3, [pc, #408]	@ (8002bb4 <HAL_GPIO_Init+0x324>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	4a65      	ldr	r2, [pc, #404]	@ (8002bb4 <HAL_GPIO_Init+0x324>)
 8002a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a26:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_GPIO_Init+0x324>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a32:	4a61      	ldr	r2, [pc, #388]	@ (8002bb8 <HAL_GPIO_Init+0x328>)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	220f      	movs	r2, #15
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a58      	ldr	r2, [pc, #352]	@ (8002bbc <HAL_GPIO_Init+0x32c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d037      	beq.n	8002ace <HAL_GPIO_Init+0x23e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a57      	ldr	r2, [pc, #348]	@ (8002bc0 <HAL_GPIO_Init+0x330>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d031      	beq.n	8002aca <HAL_GPIO_Init+0x23a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a56      	ldr	r2, [pc, #344]	@ (8002bc4 <HAL_GPIO_Init+0x334>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d02b      	beq.n	8002ac6 <HAL_GPIO_Init+0x236>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a55      	ldr	r2, [pc, #340]	@ (8002bc8 <HAL_GPIO_Init+0x338>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d025      	beq.n	8002ac2 <HAL_GPIO_Init+0x232>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a54      	ldr	r2, [pc, #336]	@ (8002bcc <HAL_GPIO_Init+0x33c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01f      	beq.n	8002abe <HAL_GPIO_Init+0x22e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a53      	ldr	r2, [pc, #332]	@ (8002bd0 <HAL_GPIO_Init+0x340>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d019      	beq.n	8002aba <HAL_GPIO_Init+0x22a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a52      	ldr	r2, [pc, #328]	@ (8002bd4 <HAL_GPIO_Init+0x344>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_GPIO_Init+0x226>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a51      	ldr	r2, [pc, #324]	@ (8002bd8 <HAL_GPIO_Init+0x348>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00d      	beq.n	8002ab2 <HAL_GPIO_Init+0x222>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a50      	ldr	r2, [pc, #320]	@ (8002bdc <HAL_GPIO_Init+0x34c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <HAL_GPIO_Init+0x21e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8002be0 <HAL_GPIO_Init+0x350>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_GPIO_Init+0x21a>
 8002aa6:	2309      	movs	r3, #9
 8002aa8:	e012      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002aaa:	230a      	movs	r3, #10
 8002aac:	e010      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002aae:	2308      	movs	r3, #8
 8002ab0:	e00e      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00c      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ab6:	2306      	movs	r3, #6
 8002ab8:	e00a      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002aba:	2305      	movs	r3, #5
 8002abc:	e008      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e004      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f002 0203 	and.w	r2, r2, #3
 8002ad6:	0092      	lsls	r2, r2, #2
 8002ad8:	4093      	lsls	r3, r2
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ae0:	4935      	ldr	r1, [pc, #212]	@ (8002bb8 <HAL_GPIO_Init+0x328>)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aee:	4b3d      	ldr	r3, [pc, #244]	@ (8002be4 <HAL_GPIO_Init+0x354>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b12:	4a34      	ldr	r2, [pc, #208]	@ (8002be4 <HAL_GPIO_Init+0x354>)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b18:	4b32      	ldr	r3, [pc, #200]	@ (8002be4 <HAL_GPIO_Init+0x354>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b3c:	4a29      	ldr	r2, [pc, #164]	@ (8002be4 <HAL_GPIO_Init+0x354>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b42:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <HAL_GPIO_Init+0x354>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b66:	4a1f      	ldr	r2, [pc, #124]	@ (8002be4 <HAL_GPIO_Init+0x354>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002be4 <HAL_GPIO_Init+0x354>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b90:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <HAL_GPIO_Init+0x354>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	2b0f      	cmp	r3, #15
 8002ba0:	f67f ae86 	bls.w	80028b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3724      	adds	r7, #36	@ 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40013800 	.word	0x40013800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40021400 	.word	0x40021400
 8002bd4:	40021800 	.word	0x40021800
 8002bd8:	40021c00 	.word	0x40021c00
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40022400 	.word	0x40022400
 8002be4:	40013c00 	.word	0x40013c00

08002be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf8:	787b      	ldrb	r3, [r7, #1]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c04:	e003      	b.n	8002c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c06:	887b      	ldrh	r3, [r7, #2]
 8002c08:	041a      	lsls	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	619a      	str	r2, [r3, #24]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af02      	add	r7, sp, #8
 8002c20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e108      	b.n	8002e3e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe ffd6 	bl	8001bf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2203      	movs	r2, #3
 8002c50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c5a:	d102      	bne.n	8002c62 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 f88c 	bl	8006d84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7c1a      	ldrb	r2, [r3, #16]
 8002c74:	f88d 2000 	strb.w	r2, [sp]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c7c:	f004 f828 	bl	8006cd0 <USB_CoreInit>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0d5      	b.n	8002e3e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 f884 	bl	8006da6 <USB_SetCurrentMode>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0c6      	b.n	8002e3e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	e04a      	b.n	8002d4c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3315      	adds	r3, #21
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3314      	adds	r3, #20
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	b298      	uxth	r0, r3
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	332e      	adds	r3, #46	@ 0x2e
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3318      	adds	r3, #24
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	331c      	adds	r3, #28
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3320      	adds	r3, #32
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3324      	adds	r3, #36	@ 0x24
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	791b      	ldrb	r3, [r3, #4]
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d3af      	bcc.n	8002cb6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
 8002d5a:	e044      	b.n	8002de6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	3301      	adds	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	791b      	ldrb	r3, [r3, #4]
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3b5      	bcc.n	8002d5c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7c1a      	ldrb	r2, [r3, #16]
 8002df8:	f88d 2000 	strb.w	r2, [sp]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e00:	f004 f81e 	bl	8006e40 <USB_DevInit>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e013      	b.n	8002e3e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7b1b      	ldrb	r3, [r3, #12]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f80b 	bl	8002e48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 f9d9 	bl	80071ee <USB_DevDisconnect>

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e76:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_PCDEx_ActivateLPM+0x44>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	10000003 	.word	0x10000003

08002e90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e94:	4b05      	ldr	r3, [pc, #20]	@ (8002eac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40007000 	.word	0x40007000

08002eb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	4a22      	ldr	r2, [pc, #136]	@ (8002f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002edc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ede:	f7fe ff7f 	bl	8001de0 <HAL_GetTick>
 8002ee2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ee4:	e009      	b.n	8002efa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ee6:	f7fe ff7b 	bl	8001de0 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ef4:	d901      	bls.n	8002efa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e022      	b.n	8002f40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002efa:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f08:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f14:	f7fe ff64 	bl	8001de0 <HAL_GetTick>
 8002f18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f1a:	e009      	b.n	8002f30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f1c:	f7fe ff60 	bl	8001de0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f2a:	d901      	bls.n	8002f30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e007      	b.n	8002f40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f3c:	d1ee      	bne.n	8002f1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e29b      	b.n	800349e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8087 	beq.w	8003082 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f74:	4b96      	ldr	r3, [pc, #600]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d00c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f80:	4b93      	ldr	r3, [pc, #588]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d112      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x62>
 8002f8c:	4b90      	ldr	r3, [pc, #576]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9a:	4b8d      	ldr	r3, [pc, #564]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d06c      	beq.n	8003080 <HAL_RCC_OscConfig+0x130>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d168      	bne.n	8003080 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e275      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x7a>
 8002fbc:	4b84      	ldr	r3, [pc, #528]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a83      	ldr	r2, [pc, #524]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e02e      	b.n	8003028 <HAL_RCC_OscConfig+0xd8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x9c>
 8002fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b7c      	ldr	r3, [pc, #496]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7b      	ldr	r2, [pc, #492]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e01d      	b.n	8003028 <HAL_RCC_OscConfig+0xd8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0xc0>
 8002ff6:	4b76      	ldr	r3, [pc, #472]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a75      	ldr	r2, [pc, #468]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b73      	ldr	r3, [pc, #460]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a72      	ldr	r2, [pc, #456]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0xd8>
 8003010:	4b6f      	ldr	r3, [pc, #444]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6e      	ldr	r2, [pc, #440]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b6c      	ldr	r3, [pc, #432]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6b      	ldr	r2, [pc, #428]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fed6 	bl	8001de0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fed2 	bl	8001de0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	@ 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e229      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b61      	ldr	r3, [pc, #388]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0xe8>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fec2 	bl	8001de0 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7fe febe 	bl	8001de0 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	@ 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e215      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	4b57      	ldr	r3, [pc, #348]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x110>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d069      	beq.n	8003162 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308e:	4b50      	ldr	r3, [pc, #320]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309a:	4b4d      	ldr	r3, [pc, #308]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d11c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x190>
 80030a6:	4b4a      	ldr	r3, [pc, #296]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	4b47      	ldr	r3, [pc, #284]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x17a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e1e9      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b41      	ldr	r3, [pc, #260]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	493d      	ldr	r1, [pc, #244]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	e040      	b.n	8003162 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d023      	beq.n	8003130 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e8:	4b39      	ldr	r3, [pc, #228]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a38      	ldr	r2, [pc, #224]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fe74 	bl	8001de0 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fe fe70 	bl	8001de0 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1c7      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	4b30      	ldr	r3, [pc, #192]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b2d      	ldr	r3, [pc, #180]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4929      	ldr	r1, [pc, #164]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
 800312e:	e018      	b.n	8003162 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003130:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a26      	ldr	r2, [pc, #152]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fe50 	bl	8001de0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003144:	f7fe fe4c 	bl	8001de0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1a3      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	4b1e      	ldr	r3, [pc, #120]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d038      	beq.n	80031e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d019      	beq.n	80031aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003176:	4b16      	ldr	r3, [pc, #88]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 8003178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317a:	4a15      	ldr	r2, [pc, #84]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fe fe2d 	bl	8001de0 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318a:	f7fe fe29 	bl	8001de0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e180      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 800319e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x23a>
 80031a8:	e01a      	b.n	80031e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031aa:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 80031ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ae:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <HAL_RCC_OscConfig+0x280>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fe fe13 	bl	8001de0 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031be:	f7fe fe0f 	bl	8001de0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d903      	bls.n	80031d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e166      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
 80031d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	4b92      	ldr	r3, [pc, #584]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ee      	bne.n	80031be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80a4 	beq.w	8003336 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10d      	bne.n	8003216 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4b89      	ldr	r3, [pc, #548]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	4a88      	ldr	r2, [pc, #544]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	@ 0x40
 8003206:	4b86      	ldr	r3, [pc, #536]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003216:	4b83      	ldr	r3, [pc, #524]	@ (8003424 <HAL_RCC_OscConfig+0x4d4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d118      	bne.n	8003254 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003222:	4b80      	ldr	r3, [pc, #512]	@ (8003424 <HAL_RCC_OscConfig+0x4d4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7f      	ldr	r2, [pc, #508]	@ (8003424 <HAL_RCC_OscConfig+0x4d4>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800322c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322e:	f7fe fdd7 	bl	8001de0 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003236:	f7fe fdd3 	bl	8001de0 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b64      	cmp	r3, #100	@ 0x64
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e12a      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003248:	4b76      	ldr	r3, [pc, #472]	@ (8003424 <HAL_RCC_OscConfig+0x4d4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x31a>
 800325c:	4b70      	ldr	r3, [pc, #448]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003260:	4a6f      	ldr	r2, [pc, #444]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	@ 0x70
 8003268:	e02d      	b.n	80032c6 <HAL_RCC_OscConfig+0x376>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0x33c>
 8003272:	4b6b      	ldr	r3, [pc, #428]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003276:	4a6a      	ldr	r2, [pc, #424]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6713      	str	r3, [r2, #112]	@ 0x70
 800327e:	4b68      	ldr	r3, [pc, #416]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003282:	4a67      	ldr	r2, [pc, #412]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	6713      	str	r3, [r2, #112]	@ 0x70
 800328a:	e01c      	b.n	80032c6 <HAL_RCC_OscConfig+0x376>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d10c      	bne.n	80032ae <HAL_RCC_OscConfig+0x35e>
 8003294:	4b62      	ldr	r3, [pc, #392]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003298:	4a61      	ldr	r2, [pc, #388]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a0:	4b5f      	ldr	r3, [pc, #380]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ac:	e00b      	b.n	80032c6 <HAL_RCC_OscConfig+0x376>
 80032ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ba:	4b59      	ldr	r3, [pc, #356]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032be:	4a58      	ldr	r2, [pc, #352]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d015      	beq.n	80032fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fe fd87 	bl	8001de0 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe fd83 	bl	8001de0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0d8      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ee      	beq.n	80032d6 <HAL_RCC_OscConfig+0x386>
 80032f8:	e014      	b.n	8003324 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fe fd71 	bl	8001de0 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fe fd6d 	bl	8001de0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0c2      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003318:	4b41      	ldr	r3, [pc, #260]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332a:	4b3d      	ldr	r3, [pc, #244]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	4a3c      	ldr	r2, [pc, #240]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80ae 	beq.w	800349c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003340:	4b37      	ldr	r3, [pc, #220]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b08      	cmp	r3, #8
 800334a:	d06d      	beq.n	8003428 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d14b      	bne.n	80033ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003354:	4b32      	ldr	r3, [pc, #200]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a31      	ldr	r2, [pc, #196]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800335a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800335e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fd3e 	bl	8001de0 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe fd3a 	bl	8001de0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e091      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	4b29      	ldr	r3, [pc, #164]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	3b01      	subs	r3, #1
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	071b      	lsls	r3, r3, #28
 80033b2:	491b      	ldr	r1, [pc, #108]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a18      	ldr	r2, [pc, #96]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fd0c 	bl	8001de0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe fd08 	bl	8001de0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e05f      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x47c>
 80033ea:	e057      	b.n	800349c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fcf2 	bl	8001de0 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fcee 	bl	8001de0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e045      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b03      	ldr	r3, [pc, #12]	@ (8003420 <HAL_RCC_OscConfig+0x4d0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x4b0>
 800341e:	e03d      	b.n	800349c <HAL_RCC_OscConfig+0x54c>
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003428:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <HAL_RCC_OscConfig+0x558>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d030      	beq.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d129      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d122      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800345e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d119      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d10f      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800

080034ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0d0      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d910      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b67      	ldr	r3, [pc, #412]	@ (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 020f 	bic.w	r2, r3, #15
 80034da:	4965      	ldr	r1, [pc, #404]	@ (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b63      	ldr	r3, [pc, #396]	@ (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b8      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b59      	ldr	r3, [pc, #356]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a58      	ldr	r2, [pc, #352]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003512:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003516:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003524:	4b53      	ldr	r3, [pc, #332]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a52      	ldr	r2, [pc, #328]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800352a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800352e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b50      	ldr	r3, [pc, #320]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	494d      	ldr	r1, [pc, #308]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d040      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b47      	ldr	r3, [pc, #284]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d115      	bne.n	800358e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e073      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	4b3d      	ldr	r3, [pc, #244]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e06b      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b39      	ldr	r3, [pc, #228]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4936      	ldr	r1, [pc, #216]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fe fc1e 	bl	8001de0 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fe fc1a 	bl	8001de0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e053      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2d      	ldr	r3, [pc, #180]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b27      	ldr	r3, [pc, #156]	@ (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d210      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 020f 	bic.w	r2, r3, #15
 80035e6:	4922      	ldr	r1, [pc, #136]	@ (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b20      	ldr	r3, [pc, #128]	@ (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e032      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b19      	ldr	r3, [pc, #100]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4916      	ldr	r1, [pc, #88]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800362a:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490e      	ldr	r1, [pc, #56]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800363e:	f000 f821 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490a      	ldr	r1, [pc, #40]	@ (8003678 <HAL_RCC_ClockConfig+0x1cc>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a09      	ldr	r2, [pc, #36]	@ (800367c <HAL_RCC_ClockConfig+0x1d0>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800365a:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <HAL_RCC_ClockConfig+0x1d4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fb7a 	bl	8001d58 <HAL_InitTick>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023c00 	.word	0x40023c00
 8003674:	40023800 	.word	0x40023800
 8003678:	08007ca0 	.word	0x08007ca0
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b094      	sub	sp, #80	@ 0x50
 800368a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003690:	2300      	movs	r3, #0
 8003692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003694:	2300      	movs	r3, #0
 8003696:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369c:	4b79      	ldr	r3, [pc, #484]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d00d      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x40>
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	f200 80e1 	bhi.w	8003870 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x3a>
 80036b6:	e0db      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b73      	ldr	r3, [pc, #460]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036bc:	e0db      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036be:	4b73      	ldr	r3, [pc, #460]	@ (800388c <HAL_RCC_GetSysClockFreq+0x208>)
 80036c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036c2:	e0d8      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d063      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b6a      	ldr	r3, [pc, #424]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2200      	movs	r2, #0
 80036e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ee:	2300      	movs	r3, #0
 80036f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036f6:	4622      	mov	r2, r4
 80036f8:	462b      	mov	r3, r5
 80036fa:	f04f 0000 	mov.w	r0, #0
 80036fe:	f04f 0100 	mov.w	r1, #0
 8003702:	0159      	lsls	r1, r3, #5
 8003704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003708:	0150      	lsls	r0, r2, #5
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4621      	mov	r1, r4
 8003710:	1a51      	subs	r1, r2, r1
 8003712:	6139      	str	r1, [r7, #16]
 8003714:	4629      	mov	r1, r5
 8003716:	eb63 0301 	sbc.w	r3, r3, r1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003728:	4659      	mov	r1, fp
 800372a:	018b      	lsls	r3, r1, #6
 800372c:	4651      	mov	r1, sl
 800372e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003732:	4651      	mov	r1, sl
 8003734:	018a      	lsls	r2, r1, #6
 8003736:	4651      	mov	r1, sl
 8003738:	ebb2 0801 	subs.w	r8, r2, r1
 800373c:	4659      	mov	r1, fp
 800373e:	eb63 0901 	sbc.w	r9, r3, r1
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003756:	4690      	mov	r8, r2
 8003758:	4699      	mov	r9, r3
 800375a:	4623      	mov	r3, r4
 800375c:	eb18 0303 	adds.w	r3, r8, r3
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	462b      	mov	r3, r5
 8003764:	eb49 0303 	adc.w	r3, r9, r3
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003776:	4629      	mov	r1, r5
 8003778:	024b      	lsls	r3, r1, #9
 800377a:	4621      	mov	r1, r4
 800377c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003780:	4621      	mov	r1, r4
 8003782:	024a      	lsls	r2, r1, #9
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800378a:	2200      	movs	r2, #0
 800378c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800378e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003794:	f7fc fd58 	bl	8000248 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a0:	e058      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b38      	ldr	r3, [pc, #224]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	2200      	movs	r2, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	4611      	mov	r1, r2
 80037ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	f04f 0000 	mov.w	r0, #0
 80037c4:	f04f 0100 	mov.w	r1, #0
 80037c8:	0159      	lsls	r1, r3, #5
 80037ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ce:	0150      	lsls	r0, r2, #5
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4641      	mov	r1, r8
 80037d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80037da:	4649      	mov	r1, r9
 80037dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037f4:	ebb2 040a 	subs.w	r4, r2, sl
 80037f8:	eb63 050b 	sbc.w	r5, r3, fp
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	00eb      	lsls	r3, r5, #3
 8003806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800380a:	00e2      	lsls	r2, r4, #3
 800380c:	4614      	mov	r4, r2
 800380e:	461d      	mov	r5, r3
 8003810:	4643      	mov	r3, r8
 8003812:	18e3      	adds	r3, r4, r3
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	464b      	mov	r3, r9
 8003818:	eb45 0303 	adc.w	r3, r5, r3
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800382a:	4629      	mov	r1, r5
 800382c:	028b      	lsls	r3, r1, #10
 800382e:	4621      	mov	r1, r4
 8003830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003834:	4621      	mov	r1, r4
 8003836:	028a      	lsls	r2, r1, #10
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800383e:	2200      	movs	r2, #0
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	61fa      	str	r2, [r7, #28]
 8003844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003848:	f7fc fcfe 	bl	8000248 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4613      	mov	r3, r2
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	3301      	adds	r3, #1
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003864:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800386e:	e002      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x204>)
 8003872:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003878:	4618      	mov	r0, r3
 800387a:	3750      	adds	r7, #80	@ 0x50
 800387c:	46bd      	mov	sp, r7
 800387e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	00f42400 	.word	0x00f42400
 800388c:	007a1200 	.word	0x007a1200

08003890 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003894:	4b03      	ldr	r3, [pc, #12]	@ (80038a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000000 	.word	0x20000000

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038ac:	f7ff fff0 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0a9b      	lsrs	r3, r3, #10
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	@ (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40023800 	.word	0x40023800
 80038cc:	08007cb0 	.word	0x08007cb0

080038d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038d4:	f7ff ffdc 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0b5b      	lsrs	r3, r3, #13
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	@ (80038f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	08007cb0 	.word	0x08007cb0

080038f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003920:	4b69      	ldr	r3, [pc, #420]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a68      	ldr	r2, [pc, #416]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003926:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800392a:	6093      	str	r3, [r2, #8]
 800392c:	4b66      	ldr	r3, [pc, #408]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003934:	4964      	ldr	r1, [pc, #400]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003942:	2301      	movs	r3, #1
 8003944:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d017      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003952:	4b5d      	ldr	r3, [pc, #372]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003958:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003960:	4959      	ldr	r1, [pc, #356]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003970:	d101      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003972:	2301      	movs	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800397e:	2301      	movs	r3, #1
 8003980:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d017      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800398e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003994:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	494a      	ldr	r1, [pc, #296]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ac:	d101      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039ae:	2301      	movs	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 808b 	beq.w	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	4a39      	ldr	r2, [pc, #228]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039e8:	4b37      	ldr	r3, [pc, #220]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039f4:	4b35      	ldr	r3, [pc, #212]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a34      	ldr	r2, [pc, #208]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fe f9ee 	bl	8001de0 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7fe f9ea 	bl	8001de0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	@ 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e38f      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a26:	4b28      	ldr	r3, [pc, #160]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d035      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d02e      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a44:	4b20      	ldr	r3, [pc, #128]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a58:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a66:	4a18      	ldr	r2, [pc, #96]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a6c:	4b16      	ldr	r3, [pc, #88]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d114      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe f9b2 	bl	8001de0 <HAL_GetTick>
 8003a7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fe f9ae 	bl	8001de0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e351      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ee      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aae:	d111      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ab0:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003abc:	4b04      	ldr	r3, [pc, #16]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	4901      	ldr	r1, [pc, #4]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40007000 	.word	0x40007000
 8003ad0:	0ffffcff 	.word	0x0ffffcff
 8003ad4:	4bac      	ldr	r3, [pc, #688]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4aab      	ldr	r2, [pc, #684]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ada:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ade:	6093      	str	r3, [r2, #8]
 8003ae0:	4ba9      	ldr	r3, [pc, #676]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aec:	49a6      	ldr	r1, [pc, #664]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d010      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003afe:	4ba2      	ldr	r3, [pc, #648]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b04:	4aa0      	ldr	r2, [pc, #640]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b0e:	4b9e      	ldr	r3, [pc, #632]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b18:	499b      	ldr	r1, [pc, #620]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b2c:	4b96      	ldr	r3, [pc, #600]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b3a:	4993      	ldr	r1, [pc, #588]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b4e:	4b8e      	ldr	r3, [pc, #568]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b5c:	498a      	ldr	r1, [pc, #552]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b70:	4b85      	ldr	r3, [pc, #532]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b7e:	4982      	ldr	r1, [pc, #520]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b92:	4b7d      	ldr	r3, [pc, #500]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba0:	4979      	ldr	r1, [pc, #484]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb4:	4b74      	ldr	r3, [pc, #464]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	f023 0203 	bic.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	4971      	ldr	r1, [pc, #452]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f023 020c 	bic.w	r2, r3, #12
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be4:	4968      	ldr	r1, [pc, #416]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bf8:	4b63      	ldr	r3, [pc, #396]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c06:	4960      	ldr	r1, [pc, #384]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c28:	4957      	ldr	r1, [pc, #348]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c3c:	4b52      	ldr	r3, [pc, #328]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4a:	494f      	ldr	r1, [pc, #316]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	4946      	ldr	r1, [pc, #280]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c80:	4b41      	ldr	r3, [pc, #260]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8e:	493e      	ldr	r1, [pc, #248]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ca2:	4b39      	ldr	r3, [pc, #228]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb0:	4935      	ldr	r1, [pc, #212]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cc4:	4b30      	ldr	r3, [pc, #192]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd2:	492d      	ldr	r1, [pc, #180]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d011      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ce6:	4b28      	ldr	r3, [pc, #160]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cf4:	4924      	ldr	r1, [pc, #144]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d04:	d101      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d16:	2301      	movs	r3, #1
 8003d18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d26:	4b18      	ldr	r3, [pc, #96]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d34:	4914      	ldr	r1, [pc, #80]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d48:	4b0f      	ldr	r3, [pc, #60]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d58:	490b      	ldr	r1, [pc, #44]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00f      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d6c:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d7c:	4902      	ldr	r1, [pc, #8]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d84:	e002      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d98:	4b8a      	ldr	r3, [pc, #552]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da8:	4986      	ldr	r1, [pc, #536]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003dbc:	4b81      	ldr	r3, [pc, #516]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dcc:	497d      	ldr	r1, [pc, #500]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d006      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80d6 	beq.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003de8:	4b76      	ldr	r3, [pc, #472]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a75      	ldr	r2, [pc, #468]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df4:	f7fd fff4 	bl	8001de0 <HAL_GetTick>
 8003df8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dfc:	f7fd fff0 	bl	8001de0 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	@ 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e195      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d021      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11d      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e2e:	4b65      	ldr	r3, [pc, #404]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e3c:	4b61      	ldr	r3, [pc, #388]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e42:	0e1b      	lsrs	r3, r3, #24
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	019a      	lsls	r2, r3, #6
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	061b      	lsls	r3, r3, #24
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	071b      	lsls	r3, r3, #28
 8003e62:	4958      	ldr	r1, [pc, #352]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d02e      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e94:	d129      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e96:	4b4b      	ldr	r3, [pc, #300]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ea4:	4b47      	ldr	r3, [pc, #284]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eaa:	0f1b      	lsrs	r3, r3, #28
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	019a      	lsls	r2, r3, #6
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	071b      	lsls	r3, r3, #28
 8003eca:	493e      	ldr	r1, [pc, #248]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ed8:	f023 021f 	bic.w	r2, r3, #31
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	4938      	ldr	r1, [pc, #224]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01d      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ef6:	4b33      	ldr	r3, [pc, #204]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003efc:	0e1b      	lsrs	r3, r3, #24
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f04:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f0a:	0f1b      	lsrs	r3, r3, #28
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	019a      	lsls	r2, r3, #6
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	071b      	lsls	r3, r3, #28
 8003f2a:	4926      	ldr	r1, [pc, #152]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d011      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	019a      	lsls	r2, r3, #6
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	071b      	lsls	r3, r3, #28
 8003f5a:	491a      	ldr	r1, [pc, #104]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f62:	4b18      	ldr	r3, [pc, #96]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a17      	ldr	r2, [pc, #92]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6e:	f7fd ff37 	bl	8001de0 <HAL_GetTick>
 8003f72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f76:	f7fd ff33 	bl	8001de0 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b64      	cmp	r3, #100	@ 0x64
 8003f82:	d901      	bls.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0d8      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f88:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	f040 80ce 	bne.w	8004138 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f9c:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a08      	ldr	r2, [pc, #32]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa8:	f7fd ff1a 	bl	8001de0 <HAL_GetTick>
 8003fac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fb0:	f7fd ff16 	bl	8001de0 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	@ 0x64
 8003fbc:	d904      	bls.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e0bb      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd4:	d0ec      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02e      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d12a      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ffe:	4b51      	ldr	r3, [pc, #324]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800400c:	4b4d      	ldr	r3, [pc, #308]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	0f1b      	lsrs	r3, r3, #28
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	019a      	lsls	r2, r3, #6
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	431a      	orrs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	071b      	lsls	r3, r3, #28
 8004032:	4944      	ldr	r1, [pc, #272]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800403a:	4b42      	ldr	r3, [pc, #264]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800403c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004040:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004048:	3b01      	subs	r3, #1
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	493d      	ldr	r1, [pc, #244]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d022      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004068:	d11d      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800406a:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004070:	0e1b      	lsrs	r3, r3, #24
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004078:	4b32      	ldr	r3, [pc, #200]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	0f1b      	lsrs	r3, r3, #28
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	019a      	lsls	r2, r3, #6
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	431a      	orrs	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	061b      	lsls	r3, r3, #24
 8004098:	431a      	orrs	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	071b      	lsls	r3, r3, #28
 800409e:	4929      	ldr	r1, [pc, #164]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d028      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040b2:	4b24      	ldr	r3, [pc, #144]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040c0:	4b20      	ldr	r3, [pc, #128]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	019a      	lsls	r2, r3, #6
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	431a      	orrs	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	071b      	lsls	r3, r3, #28
 80040e6:	4917      	ldr	r1, [pc, #92]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040ee:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	4911      	ldr	r1, [pc, #68]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004104:	4b0f      	ldr	r3, [pc, #60]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0e      	ldr	r2, [pc, #56]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004110:	f7fd fe66 	bl	8001de0 <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004118:	f7fd fe62 	bl	8001de0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	@ 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e007      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004136:	d1ef      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800

08004148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e049      	b.n	80041ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fafe 	bl	8001770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 fd78 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e054      	b.n	80042ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a26      	ldr	r2, [pc, #152]	@ (80042c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423a:	d01d      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a22      	ldr	r2, [pc, #136]	@ (80042cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d018      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a21      	ldr	r2, [pc, #132]	@ (80042d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1f      	ldr	r2, [pc, #124]	@ (80042d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1e      	ldr	r2, [pc, #120]	@ (80042d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1c      	ldr	r2, [pc, #112]	@ (80042dc <HAL_TIM_Base_Start_IT+0xe4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1b      	ldr	r2, [pc, #108]	@ (80042e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d115      	bne.n	80042a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	4b19      	ldr	r3, [pc, #100]	@ (80042e4 <HAL_TIM_Base_Start_IT+0xec>)
 8004280:	4013      	ands	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b06      	cmp	r3, #6
 8004288:	d015      	beq.n	80042b6 <HAL_TIM_Base_Start_IT+0xbe>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004290:	d011      	beq.n	80042b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a2:	e008      	b.n	80042b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e000      	b.n	80042b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40010400 	.word	0x40010400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40001800 	.word	0x40001800
 80042e4:	00010007 	.word	0x00010007

080042e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e049      	b.n	800438e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fd f9ee 	bl	80016f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f000 fca8 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <HAL_TIM_PWM_Start+0x24>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e03c      	b.n	8004436 <HAL_TIM_PWM_Start+0x9e>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d109      	bne.n	80043d6 <HAL_TIM_PWM_Start+0x3e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	e02f      	b.n	8004436 <HAL_TIM_PWM_Start+0x9e>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d109      	bne.n	80043f0 <HAL_TIM_PWM_Start+0x58>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	e022      	b.n	8004436 <HAL_TIM_PWM_Start+0x9e>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d109      	bne.n	800440a <HAL_TIM_PWM_Start+0x72>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	bf14      	ite	ne
 8004402:	2301      	movne	r3, #1
 8004404:	2300      	moveq	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	e015      	b.n	8004436 <HAL_TIM_PWM_Start+0x9e>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b10      	cmp	r3, #16
 800440e:	d109      	bne.n	8004424 <HAL_TIM_PWM_Start+0x8c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e008      	b.n	8004436 <HAL_TIM_PWM_Start+0x9e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e092      	b.n	8004564 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <HAL_TIM_PWM_Start+0xb6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800444c:	e023      	b.n	8004496 <HAL_TIM_PWM_Start+0xfe>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b04      	cmp	r3, #4
 8004452:	d104      	bne.n	800445e <HAL_TIM_PWM_Start+0xc6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800445c:	e01b      	b.n	8004496 <HAL_TIM_PWM_Start+0xfe>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d104      	bne.n	800446e <HAL_TIM_PWM_Start+0xd6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800446c:	e013      	b.n	8004496 <HAL_TIM_PWM_Start+0xfe>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b0c      	cmp	r3, #12
 8004472:	d104      	bne.n	800447e <HAL_TIM_PWM_Start+0xe6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800447c:	e00b      	b.n	8004496 <HAL_TIM_PWM_Start+0xfe>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b10      	cmp	r3, #16
 8004482:	d104      	bne.n	800448e <HAL_TIM_PWM_Start+0xf6>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800448c:	e003      	b.n	8004496 <HAL_TIM_PWM_Start+0xfe>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2201      	movs	r2, #1
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fef6 	bl	8005290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a30      	ldr	r2, [pc, #192]	@ (800456c <HAL_TIM_PWM_Start+0x1d4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_TIM_PWM_Start+0x120>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004570 <HAL_TIM_PWM_Start+0x1d8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <HAL_TIM_PWM_Start+0x124>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <HAL_TIM_PWM_Start+0x126>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a25      	ldr	r2, [pc, #148]	@ (800456c <HAL_TIM_PWM_Start+0x1d4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_TIM_PWM_Start+0x18a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e4:	d01d      	beq.n	8004522 <HAL_TIM_PWM_Start+0x18a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a22      	ldr	r2, [pc, #136]	@ (8004574 <HAL_TIM_PWM_Start+0x1dc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_TIM_PWM_Start+0x18a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a20      	ldr	r2, [pc, #128]	@ (8004578 <HAL_TIM_PWM_Start+0x1e0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_TIM_PWM_Start+0x18a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <HAL_TIM_PWM_Start+0x1e4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_TIM_PWM_Start+0x18a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a19      	ldr	r2, [pc, #100]	@ (8004570 <HAL_TIM_PWM_Start+0x1d8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_TIM_PWM_Start+0x18a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1b      	ldr	r2, [pc, #108]	@ (8004580 <HAL_TIM_PWM_Start+0x1e8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_TIM_PWM_Start+0x18a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a19      	ldr	r2, [pc, #100]	@ (8004584 <HAL_TIM_PWM_Start+0x1ec>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d115      	bne.n	800454e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	4b17      	ldr	r3, [pc, #92]	@ (8004588 <HAL_TIM_PWM_Start+0x1f0>)
 800452a:	4013      	ands	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b06      	cmp	r3, #6
 8004532:	d015      	beq.n	8004560 <HAL_TIM_PWM_Start+0x1c8>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800453a:	d011      	beq.n	8004560 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454c:	e008      	b.n	8004560 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0201 	orr.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e000      	b.n	8004562 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004560:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40010000 	.word	0x40010000
 8004570:	40010400 	.word	0x40010400
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40014000 	.word	0x40014000
 8004584:	40001800 	.word	0x40001800
 8004588:	00010007 	.word	0x00010007

0800458c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e08f      	b.n	80046c0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fc ff51 	bl	800145c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6899      	ldr	r1, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b3e      	ldr	r3, [pc, #248]	@ (80046c8 <HAL_TIM_Encoder_Init+0x13c>)
 80045ce:	400b      	ands	r3, r1
 80045d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f000 fb4d 	bl	8004c7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4b31      	ldr	r3, [pc, #196]	@ (80046cc <HAL_TIM_Encoder_Init+0x140>)
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	4313      	orrs	r3, r2
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <HAL_TIM_Encoder_Init+0x144>)
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4b2a      	ldr	r3, [pc, #168]	@ (80046d4 <HAL_TIM_Encoder_Init+0x148>)
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	4313      	orrs	r3, r2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	011a      	lsls	r2, r3, #4
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	031b      	lsls	r3, r3, #12
 800464c:	4313      	orrs	r3, r2
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800465a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	4313      	orrs	r3, r2
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	fffebff8 	.word	0xfffebff8
 80046cc:	fffffcfc 	.word	0xfffffcfc
 80046d0:	fffff3f3 	.word	0xfffff3f3
 80046d4:	ffff0f0f 	.word	0xffff0f0f

080046d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004700:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d110      	bne.n	800472a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d102      	bne.n	8004714 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800470e:	7b7b      	ldrb	r3, [r7, #13]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d001      	beq.n	8004718 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e069      	b.n	80047ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004728:	e031      	b.n	800478e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d110      	bne.n	8004752 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004730:	7bbb      	ldrb	r3, [r7, #14]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d102      	bne.n	800473c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004736:	7b3b      	ldrb	r3, [r7, #12]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d001      	beq.n	8004740 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e055      	b.n	80047ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004750:	e01d      	b.n	800478e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d108      	bne.n	800476a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004758:	7bbb      	ldrb	r3, [r7, #14]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d105      	bne.n	800476a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	7b7b      	ldrb	r3, [r7, #13]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d102      	bne.n	800476a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004764:	7b3b      	ldrb	r3, [r7, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e03e      	b.n	80047ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_TIM_Encoder_Start+0xc4>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d008      	beq.n	80047ac <HAL_TIM_Encoder_Start+0xd4>
 800479a:	e00f      	b.n	80047bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fd73 	bl	8005290 <TIM_CCxChannelCmd>
      break;
 80047aa:	e016      	b.n	80047da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2201      	movs	r2, #1
 80047b2:	2104      	movs	r1, #4
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fd6b 	bl	8005290 <TIM_CCxChannelCmd>
      break;
 80047ba:	e00e      	b.n	80047da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2201      	movs	r2, #1
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fd63 	bl	8005290 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	2104      	movs	r1, #4
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fd5c 	bl	8005290 <TIM_CCxChannelCmd>
      break;
 80047d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d020      	beq.n	8004858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0202 	mvn.w	r2, #2
 8004828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f9fe 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f9f0 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fa01 	bl	8004c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d020      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0204 	mvn.w	r2, #4
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f9d8 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f9ca 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f9db 	bl	8004c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d020      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0208 	mvn.w	r2, #8
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2204      	movs	r2, #4
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f9b2 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9a4 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f9b5 	bl	8004c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d020      	beq.n	800493c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01b      	beq.n	800493c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0210 	mvn.w	r2, #16
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2208      	movs	r2, #8
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f98c 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f97e 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f98f 	bl	8004c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00c      	beq.n	8004960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0201 	mvn.w	r2, #1
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc f886 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fd3f 	bl	800540c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00c      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fd37 	bl	8005420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00c      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f949 	bl	8004c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0220 	mvn.w	r2, #32
 80049f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fcff 	bl	80053f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0ff      	b.n	8004c22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b14      	cmp	r3, #20
 8004a2e:	f200 80f0 	bhi.w	8004c12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a32:	a201      	add	r2, pc, #4	@ (adr r2, 8004a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004c13 	.word	0x08004c13
 8004a40:	08004c13 	.word	0x08004c13
 8004a44:	08004c13 	.word	0x08004c13
 8004a48:	08004acd 	.word	0x08004acd
 8004a4c:	08004c13 	.word	0x08004c13
 8004a50:	08004c13 	.word	0x08004c13
 8004a54:	08004c13 	.word	0x08004c13
 8004a58:	08004b0f 	.word	0x08004b0f
 8004a5c:	08004c13 	.word	0x08004c13
 8004a60:	08004c13 	.word	0x08004c13
 8004a64:	08004c13 	.word	0x08004c13
 8004a68:	08004b4f 	.word	0x08004b4f
 8004a6c:	08004c13 	.word	0x08004c13
 8004a70:	08004c13 	.word	0x08004c13
 8004a74:	08004c13 	.word	0x08004c13
 8004a78:	08004b91 	.word	0x08004b91
 8004a7c:	08004c13 	.word	0x08004c13
 8004a80:	08004c13 	.word	0x08004c13
 8004a84:	08004c13 	.word	0x08004c13
 8004a88:	08004bd1 	.word	0x08004bd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f99e 	bl	8004dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	619a      	str	r2, [r3, #24]
      break;
 8004aca:	e0a5      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f9f0 	bl	8004eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	619a      	str	r2, [r3, #24]
      break;
 8004b0c:	e084      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa47 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0208 	orr.w	r2, r2, #8
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
      break;
 8004b4c:	e064      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fa9d 	bl	8005094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	61da      	str	r2, [r3, #28]
      break;
 8004b8e:	e043      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fad4 	bl	8005144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bce:	e023      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fb06 	bl	80051e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c10:	e002      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	75fb      	strb	r3, [r7, #23]
      break;
 8004c16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop

08004c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a46      	ldr	r2, [pc, #280]	@ (8004da8 <TIM_Base_SetConfig+0x12c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c9a:	d00f      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a43      	ldr	r2, [pc, #268]	@ (8004dac <TIM_Base_SetConfig+0x130>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a42      	ldr	r2, [pc, #264]	@ (8004db0 <TIM_Base_SetConfig+0x134>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a41      	ldr	r2, [pc, #260]	@ (8004db4 <TIM_Base_SetConfig+0x138>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a40      	ldr	r2, [pc, #256]	@ (8004db8 <TIM_Base_SetConfig+0x13c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d108      	bne.n	8004cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a35      	ldr	r2, [pc, #212]	@ (8004da8 <TIM_Base_SetConfig+0x12c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d02b      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cdc:	d027      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a32      	ldr	r2, [pc, #200]	@ (8004dac <TIM_Base_SetConfig+0x130>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d023      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a31      	ldr	r2, [pc, #196]	@ (8004db0 <TIM_Base_SetConfig+0x134>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01f      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a30      	ldr	r2, [pc, #192]	@ (8004db4 <TIM_Base_SetConfig+0x138>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01b      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8004db8 <TIM_Base_SetConfig+0x13c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d017      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2e      	ldr	r2, [pc, #184]	@ (8004dbc <TIM_Base_SetConfig+0x140>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc0 <TIM_Base_SetConfig+0x144>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00f      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc4 <TIM_Base_SetConfig+0x148>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc8 <TIM_Base_SetConfig+0x14c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2a      	ldr	r2, [pc, #168]	@ (8004dcc <TIM_Base_SetConfig+0x150>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a29      	ldr	r2, [pc, #164]	@ (8004dd0 <TIM_Base_SetConfig+0x154>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d108      	bne.n	8004d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a10      	ldr	r2, [pc, #64]	@ (8004da8 <TIM_Base_SetConfig+0x12c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_Base_SetConfig+0xf8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a12      	ldr	r2, [pc, #72]	@ (8004db8 <TIM_Base_SetConfig+0x13c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d103      	bne.n	8004d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	611a      	str	r2, [r3, #16]
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40010400 	.word	0x40010400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800
 8004dc8:	40001800 	.word	0x40001800
 8004dcc:	40001c00 	.word	0x40001c00
 8004dd0:	40002000 	.word	0x40002000

08004dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 0201 	bic.w	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8004eac <TIM_OC1_SetConfig+0xd8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0302 	bic.w	r3, r3, #2
 8004e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a21      	ldr	r2, [pc, #132]	@ (8004eb0 <TIM_OC1_SetConfig+0xdc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC1_SetConfig+0x64>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a20      	ldr	r2, [pc, #128]	@ (8004eb4 <TIM_OC1_SetConfig+0xe0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d10c      	bne.n	8004e52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0308 	bic.w	r3, r3, #8
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 0304 	bic.w	r3, r3, #4
 8004e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a16      	ldr	r2, [pc, #88]	@ (8004eb0 <TIM_OC1_SetConfig+0xdc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC1_SetConfig+0x8e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	@ (8004eb4 <TIM_OC1_SetConfig+0xe0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d111      	bne.n	8004e86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	621a      	str	r2, [r3, #32]
}
 8004ea0:	bf00      	nop
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	fffeff8f 	.word	0xfffeff8f
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f023 0210 	bic.w	r2, r3, #16
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8004f9c <TIM_OC2_SetConfig+0xe4>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0320 	bic.w	r3, r3, #32
 8004f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a23      	ldr	r2, [pc, #140]	@ (8004fa0 <TIM_OC2_SetConfig+0xe8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_OC2_SetConfig+0x68>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a22      	ldr	r2, [pc, #136]	@ (8004fa4 <TIM_OC2_SetConfig+0xec>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10d      	bne.n	8004f3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a18      	ldr	r2, [pc, #96]	@ (8004fa0 <TIM_OC2_SetConfig+0xe8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC2_SetConfig+0x94>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a17      	ldr	r2, [pc, #92]	@ (8004fa4 <TIM_OC2_SetConfig+0xec>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d113      	bne.n	8004f74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	feff8fff 	.word	0xfeff8fff
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8005088 <TIM_OC3_SetConfig+0xe0>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a22      	ldr	r2, [pc, #136]	@ (800508c <TIM_OC3_SetConfig+0xe4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_OC3_SetConfig+0x66>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a21      	ldr	r2, [pc, #132]	@ (8005090 <TIM_OC3_SetConfig+0xe8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10d      	bne.n	800502a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a17      	ldr	r2, [pc, #92]	@ (800508c <TIM_OC3_SetConfig+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_OC3_SetConfig+0x92>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a16      	ldr	r2, [pc, #88]	@ (8005090 <TIM_OC3_SetConfig+0xe8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d113      	bne.n	8005062 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	fffeff8f 	.word	0xfffeff8f
 800508c:	40010000 	.word	0x40010000
 8005090:	40010400 	.word	0x40010400

08005094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4b1e      	ldr	r3, [pc, #120]	@ (8005138 <TIM_OC4_SetConfig+0xa4>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a13      	ldr	r2, [pc, #76]	@ (800513c <TIM_OC4_SetConfig+0xa8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC4_SetConfig+0x68>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a12      	ldr	r2, [pc, #72]	@ (8005140 <TIM_OC4_SetConfig+0xac>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	feff8fff 	.word	0xfeff8fff
 800513c:	40010000 	.word	0x40010000
 8005140:	40010400 	.word	0x40010400

08005144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4b1b      	ldr	r3, [pc, #108]	@ (80051dc <TIM_OC5_SetConfig+0x98>)
 8005170:	4013      	ands	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a12      	ldr	r2, [pc, #72]	@ (80051e0 <TIM_OC5_SetConfig+0x9c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_OC5_SetConfig+0x5e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a11      	ldr	r2, [pc, #68]	@ (80051e4 <TIM_OC5_SetConfig+0xa0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d109      	bne.n	80051b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	fffeff8f 	.word	0xfffeff8f
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400

080051e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4b1c      	ldr	r3, [pc, #112]	@ (8005284 <TIM_OC6_SetConfig+0x9c>)
 8005214:	4013      	ands	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800522a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	051b      	lsls	r3, r3, #20
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a13      	ldr	r2, [pc, #76]	@ (8005288 <TIM_OC6_SetConfig+0xa0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC6_SetConfig+0x60>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a12      	ldr	r2, [pc, #72]	@ (800528c <TIM_OC6_SetConfig+0xa4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d109      	bne.n	800525c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	feff8fff 	.word	0xfeff8fff
 8005288:	40010000 	.word	0x40010000
 800528c:	40010400 	.word	0x40010400

08005290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	2201      	movs	r2, #1
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	401a      	ands	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e06d      	b.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a30      	ldr	r2, [pc, #192]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2f      	ldr	r2, [pc, #188]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800532e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a20      	ldr	r2, [pc, #128]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d022      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005366:	d01d      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1d      	ldr	r2, [pc, #116]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d018      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1a      	ldr	r2, [pc, #104]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00e      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a15      	ldr	r2, [pc, #84]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d009      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a16      	ldr	r2, [pc, #88]	@ (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a15      	ldr	r2, [pc, #84]	@ (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10c      	bne.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40001800 	.word	0x40001800

080053f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e040      	b.n	80054c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fc fa88 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	@ 0x24
 8005460:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 ff66 	bl	800634c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fcff 	bl	8005e84 <UART_SetConfig>
 8005486:	4603      	mov	r3, r0
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e01b      	b.n	80054c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800549e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 ffe5 	bl	8006490 <UART_CheckIdleState>
 80054c6:	4603      	mov	r3, r0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	@ 0x28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d165      	bne.n	80055b2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_UART_Transmit_DMA+0x22>
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e05e      	b.n	80055b4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2221      	movs	r2, #33	@ 0x21
 8005518:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551e:	2b00      	cmp	r3, #0
 8005520:	d027      	beq.n	8005572 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005526:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <HAL_UART_Transmit_DMA+0xec>)
 8005528:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	4a24      	ldr	r2, [pc, #144]	@ (80055c0 <HAL_UART_Transmit_DMA+0xf0>)
 8005530:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005536:	4a23      	ldr	r2, [pc, #140]	@ (80055c4 <HAL_UART_Transmit_DMA+0xf4>)
 8005538:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553e:	2200      	movs	r2, #0
 8005540:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554a:	4619      	mov	r1, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3328      	adds	r3, #40	@ 0x28
 8005552:	461a      	mov	r2, r3
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	f7fc fe33 	bl	80021c0 <HAL_DMA_Start_IT>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2210      	movs	r2, #16
 8005564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e020      	b.n	80055b4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2240      	movs	r2, #64	@ 0x40
 8005578:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	613b      	str	r3, [r7, #16]
   return(result);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3308      	adds	r3, #8
 8005598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559a:	623a      	str	r2, [r7, #32]
 800559c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	69f9      	ldr	r1, [r7, #28]
 80055a0:	6a3a      	ldr	r2, [r7, #32]
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e5      	bne.n	800557a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3728      	adds	r7, #40	@ 0x28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	08006911 	.word	0x08006911
 80055c0:	080069a7 	.word	0x080069a7
 80055c4:	08006b29 	.word	0x08006b29

080055c8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	@ 0x38
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80055e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e6      	bne.n	80055d0 <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560c:	2b80      	cmp	r3, #128	@ 0x80
 800560e:	d137      	bne.n	8005680 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005626:	633b      	str	r3, [r7, #48]	@ 0x30
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005630:	61ba      	str	r2, [r7, #24]
 8005632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6979      	ldr	r1, [r7, #20]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	613b      	str	r3, [r7, #16]
   return(result);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005648:	2b00      	cmp	r3, #0
 800564a:	d019      	beq.n	8005680 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005650:	2200      	movs	r2, #0
 8005652:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005658:	4618      	mov	r0, r3
 800565a:	f7fc fe11 	bl	8002280 <HAL_DMA_Abort>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00d      	beq.n	8005680 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005668:	4618      	mov	r0, r3
 800566a:	f7fd f825 	bl	80026b8 <HAL_DMA_GetError>
 800566e:	4603      	mov	r3, r0
 8005670:	2b20      	cmp	r3, #32
 8005672:	d105      	bne.n	8005680 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2210      	movs	r2, #16
 8005678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e007      	b.n	8005690 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3738      	adds	r7, #56	@ 0x38
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b09a      	sub	sp, #104	@ 0x68
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80056ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056be:	657b      	str	r3, [r7, #84]	@ 0x54
 80056c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80056cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e6      	bne.n	80056a0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80056f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800570a:	2b01      	cmp	r3, #1
 800570c:	d118      	bne.n	8005740 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	61fb      	str	r3, [r7, #28]
   return(result);
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f023 0310 	bic.w	r3, r3, #16
 8005722:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800572c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800572e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e6      	bne.n	800570e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574a:	2b40      	cmp	r3, #64	@ 0x40
 800574c:	d137      	bne.n	80057be <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	60bb      	str	r3, [r7, #8]
   return(result);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005764:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3308      	adds	r3, #8
 800576c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800576e:	61ba      	str	r2, [r7, #24]
 8005770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6979      	ldr	r1, [r7, #20]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	613b      	str	r3, [r7, #16]
   return(result);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e5      	bne.n	800574e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005786:	2b00      	cmp	r3, #0
 8005788:	d019      	beq.n	80057be <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800578e:	2200      	movs	r2, #0
 8005790:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005796:	4618      	mov	r0, r3
 8005798:	f7fc fd72 	bl	8002280 <HAL_DMA_Abort>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fc ff86 	bl	80026b8 <HAL_DMA_GetError>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d105      	bne.n	80057be <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2210      	movs	r2, #16
 80057b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e017      	b.n	80057ee <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	220f      	movs	r2, #15
 80057cc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0208 	orr.w	r2, r2, #8
 80057dc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3768      	adds	r7, #104	@ 0x68
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b0ba      	sub	sp, #232	@ 0xe8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800581e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005822:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005826:	4013      	ands	r3, r2
 8005828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800582c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d115      	bne.n	8005860 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00f      	beq.n	8005860 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 82ac 	beq.w	8005dae <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	4798      	blx	r3
      }
      return;
 800585e:	e2a6      	b.n	8005dae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8117 	beq.w	8005a98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800586a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005876:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800587a:	4b85      	ldr	r3, [pc, #532]	@ (8005a90 <HAL_UART_IRQHandler+0x298>)
 800587c:	4013      	ands	r3, r2
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 810a 	beq.w	8005a98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d011      	beq.n	80058b4 <HAL_UART_IRQHandler+0xbc>
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2201      	movs	r2, #1
 80058a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058aa:	f043 0201 	orr.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d011      	beq.n	80058e4 <HAL_UART_IRQHandler+0xec>
 80058c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2202      	movs	r2, #2
 80058d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058da:	f043 0204 	orr.w	r2, r3, #4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d011      	beq.n	8005914 <HAL_UART_IRQHandler+0x11c>
 80058f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2204      	movs	r2, #4
 8005902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800590a:	f043 0202 	orr.w	r2, r3, #2
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d017      	beq.n	8005950 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800592c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005930:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00b      	beq.n	8005950 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2208      	movs	r2, #8
 800593e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005946:	f043 0208 	orr.w	r2, r3, #8
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005958:	2b00      	cmp	r3, #0
 800595a:	d012      	beq.n	8005982 <HAL_UART_IRQHandler+0x18a>
 800595c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005960:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00c      	beq.n	8005982 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005978:	f043 0220 	orr.w	r2, r3, #32
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8212 	beq.w	8005db2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00d      	beq.n	80059b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800599a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	d005      	beq.n	80059da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d04f      	beq.n	8005a7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 ff34 	bl	8006848 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ea:	2b40      	cmp	r3, #64	@ 0x40
 80059ec:	d141      	bne.n	8005a72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3308      	adds	r3, #8
 80059f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1d9      	bne.n	80059ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d013      	beq.n	8005a6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a46:	4a13      	ldr	r2, [pc, #76]	@ (8005a94 <HAL_UART_IRQHandler+0x29c>)
 8005a48:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fc fc86 	bl	8002360 <HAL_DMA_Abort_IT>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d017      	beq.n	8005a8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a64:	4610      	mov	r0, r2
 8005a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	e00f      	b.n	8005a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9d4 	bl	8005e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	e00b      	b.n	8005a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f9d0 	bl	8005e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	e007      	b.n	8005a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f9cc 	bl	8005e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005a88:	e193      	b.n	8005db2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8a:	bf00      	nop
    return;
 8005a8c:	e191      	b.n	8005db2 <HAL_UART_IRQHandler+0x5ba>
 8005a8e:	bf00      	nop
 8005a90:	04000120 	.word	0x04000120
 8005a94:	08006ba7 	.word	0x08006ba7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	f040 814c 	bne.w	8005d3a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8145 	beq.w	8005d3a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 813e 	beq.w	8005d3a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2210      	movs	r2, #16
 8005ac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad0:	2b40      	cmp	r3, #64	@ 0x40
 8005ad2:	f040 80b6 	bne.w	8005c42 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ae2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 8165 	beq.w	8005db6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005af6:	429a      	cmp	r2, r3
 8005af8:	f080 815d 	bcs.w	8005db6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b10:	f000 8086 	beq.w	8005c20 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1da      	bne.n	8005b14 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3308      	adds	r3, #8
 8005b64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e1      	bne.n	8005b5e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005baa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e3      	bne.n	8005b9a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bf0:	f023 0310 	bic.w	r3, r3, #16
 8005bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e4      	bne.n	8005be0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fc fb30 	bl	8002280 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fa fda8 	bl	8000790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c40:	e0b9      	b.n	8005db6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80ab 	beq.w	8005dba <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80a6 	beq.w	8005dba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e4      	bne.n	8005c6e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e3      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f023 0310 	bic.w	r3, r3, #16
 8005d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	69b9      	ldr	r1, [r7, #24]
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e4      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fa fd2c 	bl	8000790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d38:	e03f      	b.n	8005dba <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00e      	beq.n	8005d64 <HAL_UART_IRQHandler+0x56c>
 8005d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f865 	bl	8005e2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d62:	e02d      	b.n	8005dc0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01c      	beq.n	8005dbe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
    }
    return;
 8005d8c:	e017      	b.n	8005dbe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d012      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x5c8>
 8005d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00c      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 ff13 	bl	8006bd2 <UART_EndTransmit_IT>
    return;
 8005dac:	e008      	b.n	8005dc0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005dae:	bf00      	nop
 8005db0:	e006      	b.n	8005dc0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005db2:	bf00      	nop
 8005db4:	e004      	b.n	8005dc0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005dbe:	bf00      	nop
  }

}
 8005dc0:	37e8      	adds	r7, #232	@ 0xe8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop

08005dc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e4c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e54:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4ba6      	ldr	r3, [pc, #664]	@ (8006148 <UART_SetConfig+0x2c4>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	6979      	ldr	r1, [r7, #20]
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a94      	ldr	r2, [pc, #592]	@ (800614c <UART_SetConfig+0x2c8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d120      	bne.n	8005f42 <UART_SetConfig+0xbe>
 8005f00:	4b93      	ldr	r3, [pc, #588]	@ (8006150 <UART_SetConfig+0x2cc>)
 8005f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d816      	bhi.n	8005f3c <UART_SetConfig+0xb8>
 8005f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <UART_SetConfig+0x90>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f25 	.word	0x08005f25
 8005f18:	08005f31 	.word	0x08005f31
 8005f1c:	08005f2b 	.word	0x08005f2b
 8005f20:	08005f37 	.word	0x08005f37
 8005f24:	2301      	movs	r3, #1
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	e150      	b.n	80061cc <UART_SetConfig+0x348>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	77fb      	strb	r3, [r7, #31]
 8005f2e:	e14d      	b.n	80061cc <UART_SetConfig+0x348>
 8005f30:	2304      	movs	r3, #4
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e14a      	b.n	80061cc <UART_SetConfig+0x348>
 8005f36:	2308      	movs	r3, #8
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e147      	b.n	80061cc <UART_SetConfig+0x348>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e144      	b.n	80061cc <UART_SetConfig+0x348>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a83      	ldr	r2, [pc, #524]	@ (8006154 <UART_SetConfig+0x2d0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d132      	bne.n	8005fb2 <UART_SetConfig+0x12e>
 8005f4c:	4b80      	ldr	r3, [pc, #512]	@ (8006150 <UART_SetConfig+0x2cc>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f52:	f003 030c 	and.w	r3, r3, #12
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d828      	bhi.n	8005fac <UART_SetConfig+0x128>
 8005f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f60 <UART_SetConfig+0xdc>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	08005fad 	.word	0x08005fad
 8005f68:	08005fad 	.word	0x08005fad
 8005f6c:	08005fad 	.word	0x08005fad
 8005f70:	08005fa1 	.word	0x08005fa1
 8005f74:	08005fad 	.word	0x08005fad
 8005f78:	08005fad 	.word	0x08005fad
 8005f7c:	08005fad 	.word	0x08005fad
 8005f80:	08005f9b 	.word	0x08005f9b
 8005f84:	08005fad 	.word	0x08005fad
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fad 	.word	0x08005fad
 8005f90:	08005fa7 	.word	0x08005fa7
 8005f94:	2300      	movs	r3, #0
 8005f96:	77fb      	strb	r3, [r7, #31]
 8005f98:	e118      	b.n	80061cc <UART_SetConfig+0x348>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	77fb      	strb	r3, [r7, #31]
 8005f9e:	e115      	b.n	80061cc <UART_SetConfig+0x348>
 8005fa0:	2304      	movs	r3, #4
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e112      	b.n	80061cc <UART_SetConfig+0x348>
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e10f      	b.n	80061cc <UART_SetConfig+0x348>
 8005fac:	2310      	movs	r3, #16
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e10c      	b.n	80061cc <UART_SetConfig+0x348>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a68      	ldr	r2, [pc, #416]	@ (8006158 <UART_SetConfig+0x2d4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d120      	bne.n	8005ffe <UART_SetConfig+0x17a>
 8005fbc:	4b64      	ldr	r3, [pc, #400]	@ (8006150 <UART_SetConfig+0x2cc>)
 8005fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fc6:	2b30      	cmp	r3, #48	@ 0x30
 8005fc8:	d013      	beq.n	8005ff2 <UART_SetConfig+0x16e>
 8005fca:	2b30      	cmp	r3, #48	@ 0x30
 8005fcc:	d814      	bhi.n	8005ff8 <UART_SetConfig+0x174>
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d009      	beq.n	8005fe6 <UART_SetConfig+0x162>
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d810      	bhi.n	8005ff8 <UART_SetConfig+0x174>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <UART_SetConfig+0x15c>
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d006      	beq.n	8005fec <UART_SetConfig+0x168>
 8005fde:	e00b      	b.n	8005ff8 <UART_SetConfig+0x174>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e0f2      	b.n	80061cc <UART_SetConfig+0x348>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	e0ef      	b.n	80061cc <UART_SetConfig+0x348>
 8005fec:	2304      	movs	r3, #4
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e0ec      	b.n	80061cc <UART_SetConfig+0x348>
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	e0e9      	b.n	80061cc <UART_SetConfig+0x348>
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e0e6      	b.n	80061cc <UART_SetConfig+0x348>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a56      	ldr	r2, [pc, #344]	@ (800615c <UART_SetConfig+0x2d8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d120      	bne.n	800604a <UART_SetConfig+0x1c6>
 8006008:	4b51      	ldr	r3, [pc, #324]	@ (8006150 <UART_SetConfig+0x2cc>)
 800600a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800600e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006012:	2bc0      	cmp	r3, #192	@ 0xc0
 8006014:	d013      	beq.n	800603e <UART_SetConfig+0x1ba>
 8006016:	2bc0      	cmp	r3, #192	@ 0xc0
 8006018:	d814      	bhi.n	8006044 <UART_SetConfig+0x1c0>
 800601a:	2b80      	cmp	r3, #128	@ 0x80
 800601c:	d009      	beq.n	8006032 <UART_SetConfig+0x1ae>
 800601e:	2b80      	cmp	r3, #128	@ 0x80
 8006020:	d810      	bhi.n	8006044 <UART_SetConfig+0x1c0>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <UART_SetConfig+0x1a8>
 8006026:	2b40      	cmp	r3, #64	@ 0x40
 8006028:	d006      	beq.n	8006038 <UART_SetConfig+0x1b4>
 800602a:	e00b      	b.n	8006044 <UART_SetConfig+0x1c0>
 800602c:	2300      	movs	r3, #0
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e0cc      	b.n	80061cc <UART_SetConfig+0x348>
 8006032:	2302      	movs	r3, #2
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e0c9      	b.n	80061cc <UART_SetConfig+0x348>
 8006038:	2304      	movs	r3, #4
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e0c6      	b.n	80061cc <UART_SetConfig+0x348>
 800603e:	2308      	movs	r3, #8
 8006040:	77fb      	strb	r3, [r7, #31]
 8006042:	e0c3      	b.n	80061cc <UART_SetConfig+0x348>
 8006044:	2310      	movs	r3, #16
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e0c0      	b.n	80061cc <UART_SetConfig+0x348>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a44      	ldr	r2, [pc, #272]	@ (8006160 <UART_SetConfig+0x2dc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d125      	bne.n	80060a0 <UART_SetConfig+0x21c>
 8006054:	4b3e      	ldr	r3, [pc, #248]	@ (8006150 <UART_SetConfig+0x2cc>)
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800605e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006062:	d017      	beq.n	8006094 <UART_SetConfig+0x210>
 8006064:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006068:	d817      	bhi.n	800609a <UART_SetConfig+0x216>
 800606a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800606e:	d00b      	beq.n	8006088 <UART_SetConfig+0x204>
 8006070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006074:	d811      	bhi.n	800609a <UART_SetConfig+0x216>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <UART_SetConfig+0x1fe>
 800607a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800607e:	d006      	beq.n	800608e <UART_SetConfig+0x20a>
 8006080:	e00b      	b.n	800609a <UART_SetConfig+0x216>
 8006082:	2300      	movs	r3, #0
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e0a1      	b.n	80061cc <UART_SetConfig+0x348>
 8006088:	2302      	movs	r3, #2
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e09e      	b.n	80061cc <UART_SetConfig+0x348>
 800608e:	2304      	movs	r3, #4
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e09b      	b.n	80061cc <UART_SetConfig+0x348>
 8006094:	2308      	movs	r3, #8
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e098      	b.n	80061cc <UART_SetConfig+0x348>
 800609a:	2310      	movs	r3, #16
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e095      	b.n	80061cc <UART_SetConfig+0x348>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006164 <UART_SetConfig+0x2e0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d125      	bne.n	80060f6 <UART_SetConfig+0x272>
 80060aa:	4b29      	ldr	r3, [pc, #164]	@ (8006150 <UART_SetConfig+0x2cc>)
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060b8:	d017      	beq.n	80060ea <UART_SetConfig+0x266>
 80060ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060be:	d817      	bhi.n	80060f0 <UART_SetConfig+0x26c>
 80060c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060c4:	d00b      	beq.n	80060de <UART_SetConfig+0x25a>
 80060c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060ca:	d811      	bhi.n	80060f0 <UART_SetConfig+0x26c>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <UART_SetConfig+0x254>
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d4:	d006      	beq.n	80060e4 <UART_SetConfig+0x260>
 80060d6:	e00b      	b.n	80060f0 <UART_SetConfig+0x26c>
 80060d8:	2301      	movs	r3, #1
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e076      	b.n	80061cc <UART_SetConfig+0x348>
 80060de:	2302      	movs	r3, #2
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e073      	b.n	80061cc <UART_SetConfig+0x348>
 80060e4:	2304      	movs	r3, #4
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e070      	b.n	80061cc <UART_SetConfig+0x348>
 80060ea:	2308      	movs	r3, #8
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e06d      	b.n	80061cc <UART_SetConfig+0x348>
 80060f0:	2310      	movs	r3, #16
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e06a      	b.n	80061cc <UART_SetConfig+0x348>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006168 <UART_SetConfig+0x2e4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d138      	bne.n	8006172 <UART_SetConfig+0x2ee>
 8006100:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <UART_SetConfig+0x2cc>)
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006106:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800610a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800610e:	d017      	beq.n	8006140 <UART_SetConfig+0x2bc>
 8006110:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006114:	d82a      	bhi.n	800616c <UART_SetConfig+0x2e8>
 8006116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800611a:	d00b      	beq.n	8006134 <UART_SetConfig+0x2b0>
 800611c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006120:	d824      	bhi.n	800616c <UART_SetConfig+0x2e8>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <UART_SetConfig+0x2aa>
 8006126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800612a:	d006      	beq.n	800613a <UART_SetConfig+0x2b6>
 800612c:	e01e      	b.n	800616c <UART_SetConfig+0x2e8>
 800612e:	2300      	movs	r3, #0
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e04b      	b.n	80061cc <UART_SetConfig+0x348>
 8006134:	2302      	movs	r3, #2
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e048      	b.n	80061cc <UART_SetConfig+0x348>
 800613a:	2304      	movs	r3, #4
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e045      	b.n	80061cc <UART_SetConfig+0x348>
 8006140:	2308      	movs	r3, #8
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e042      	b.n	80061cc <UART_SetConfig+0x348>
 8006146:	bf00      	nop
 8006148:	efff69f3 	.word	0xefff69f3
 800614c:	40011000 	.word	0x40011000
 8006150:	40023800 	.word	0x40023800
 8006154:	40004400 	.word	0x40004400
 8006158:	40004800 	.word	0x40004800
 800615c:	40004c00 	.word	0x40004c00
 8006160:	40005000 	.word	0x40005000
 8006164:	40011400 	.word	0x40011400
 8006168:	40007800 	.word	0x40007800
 800616c:	2310      	movs	r3, #16
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e02c      	b.n	80061cc <UART_SetConfig+0x348>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a72      	ldr	r2, [pc, #456]	@ (8006340 <UART_SetConfig+0x4bc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d125      	bne.n	80061c8 <UART_SetConfig+0x344>
 800617c:	4b71      	ldr	r3, [pc, #452]	@ (8006344 <UART_SetConfig+0x4c0>)
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006182:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006186:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800618a:	d017      	beq.n	80061bc <UART_SetConfig+0x338>
 800618c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006190:	d817      	bhi.n	80061c2 <UART_SetConfig+0x33e>
 8006192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006196:	d00b      	beq.n	80061b0 <UART_SetConfig+0x32c>
 8006198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800619c:	d811      	bhi.n	80061c2 <UART_SetConfig+0x33e>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <UART_SetConfig+0x326>
 80061a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061a6:	d006      	beq.n	80061b6 <UART_SetConfig+0x332>
 80061a8:	e00b      	b.n	80061c2 <UART_SetConfig+0x33e>
 80061aa:	2300      	movs	r3, #0
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e00d      	b.n	80061cc <UART_SetConfig+0x348>
 80061b0:	2302      	movs	r3, #2
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e00a      	b.n	80061cc <UART_SetConfig+0x348>
 80061b6:	2304      	movs	r3, #4
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e007      	b.n	80061cc <UART_SetConfig+0x348>
 80061bc:	2308      	movs	r3, #8
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e004      	b.n	80061cc <UART_SetConfig+0x348>
 80061c2:	2310      	movs	r3, #16
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e001      	b.n	80061cc <UART_SetConfig+0x348>
 80061c8:	2310      	movs	r3, #16
 80061ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d4:	d15b      	bne.n	800628e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061d6:	7ffb      	ldrb	r3, [r7, #31]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d828      	bhi.n	800622e <UART_SetConfig+0x3aa>
 80061dc:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <UART_SetConfig+0x360>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006219 	.word	0x08006219
 80061f0:	0800622f 	.word	0x0800622f
 80061f4:	0800621f 	.word	0x0800621f
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	0800622f 	.word	0x0800622f
 8006200:	0800622f 	.word	0x0800622f
 8006204:	08006227 	.word	0x08006227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006208:	f7fd fb4e 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 800620c:	61b8      	str	r0, [r7, #24]
        break;
 800620e:	e013      	b.n	8006238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7fd fb5e 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8006214:	61b8      	str	r0, [r7, #24]
        break;
 8006216:	e00f      	b.n	8006238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006218:	4b4b      	ldr	r3, [pc, #300]	@ (8006348 <UART_SetConfig+0x4c4>)
 800621a:	61bb      	str	r3, [r7, #24]
        break;
 800621c:	e00c      	b.n	8006238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800621e:	f7fd fa31 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8006222:	61b8      	str	r0, [r7, #24]
        break;
 8006224:	e008      	b.n	8006238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800622a:	61bb      	str	r3, [r7, #24]
        break;
 800622c:	e004      	b.n	8006238 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	77bb      	strb	r3, [r7, #30]
        break;
 8006236:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d074      	beq.n	8006328 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	005a      	lsls	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d916      	bls.n	8006288 <UART_SetConfig+0x404>
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006260:	d212      	bcs.n	8006288 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f023 030f 	bic.w	r3, r3, #15
 800626a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	b29b      	uxth	r3, r3
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	b29a      	uxth	r2, r3
 8006278:	89fb      	ldrh	r3, [r7, #14]
 800627a:	4313      	orrs	r3, r2
 800627c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	89fa      	ldrh	r2, [r7, #14]
 8006284:	60da      	str	r2, [r3, #12]
 8006286:	e04f      	b.n	8006328 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	77bb      	strb	r3, [r7, #30]
 800628c:	e04c      	b.n	8006328 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800628e:	7ffb      	ldrb	r3, [r7, #31]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d828      	bhi.n	80062e6 <UART_SetConfig+0x462>
 8006294:	a201      	add	r2, pc, #4	@ (adr r2, 800629c <UART_SetConfig+0x418>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062c1 	.word	0x080062c1
 80062a0:	080062c9 	.word	0x080062c9
 80062a4:	080062d1 	.word	0x080062d1
 80062a8:	080062e7 	.word	0x080062e7
 80062ac:	080062d7 	.word	0x080062d7
 80062b0:	080062e7 	.word	0x080062e7
 80062b4:	080062e7 	.word	0x080062e7
 80062b8:	080062e7 	.word	0x080062e7
 80062bc:	080062df 	.word	0x080062df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c0:	f7fd faf2 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 80062c4:	61b8      	str	r0, [r7, #24]
        break;
 80062c6:	e013      	b.n	80062f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c8:	f7fd fb02 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 80062cc:	61b8      	str	r0, [r7, #24]
        break;
 80062ce:	e00f      	b.n	80062f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006348 <UART_SetConfig+0x4c4>)
 80062d2:	61bb      	str	r3, [r7, #24]
        break;
 80062d4:	e00c      	b.n	80062f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d6:	f7fd f9d5 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 80062da:	61b8      	str	r0, [r7, #24]
        break;
 80062dc:	e008      	b.n	80062f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062e2:	61bb      	str	r3, [r7, #24]
        break;
 80062e4:	e004      	b.n	80062f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	77bb      	strb	r3, [r7, #30]
        break;
 80062ee:	bf00      	nop
    }

    if (pclk != 0U)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d018      	beq.n	8006328 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	085a      	lsrs	r2, r3, #1
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	441a      	add	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	fbb2 f3f3 	udiv	r3, r2, r3
 8006308:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b0f      	cmp	r3, #15
 800630e:	d909      	bls.n	8006324 <UART_SetConfig+0x4a0>
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006316:	d205      	bcs.n	8006324 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60da      	str	r2, [r3, #12]
 8006322:	e001      	b.n	8006328 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006334:	7fbb      	ldrb	r3, [r7, #30]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40007c00 	.word	0x40007c00
 8006344:	40023800 	.word	0x40023800
 8006348:	00f42400 	.word	0x00f42400

0800634c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01a      	beq.n	8006462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800644a:	d10a      	bne.n	8006462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b098      	sub	sp, #96	@ 0x60
 8006494:	af02      	add	r7, sp, #8
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064a0:	f7fb fc9e 	bl	8001de0 <HAL_GetTick>
 80064a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d12e      	bne.n	8006512 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064bc:	2200      	movs	r2, #0
 80064be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f88c 	bl	80065e0 <UART_WaitOnFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d021      	beq.n	8006512 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e6      	bne.n	80064ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e062      	b.n	80065d8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b04      	cmp	r3, #4
 800651e:	d149      	bne.n	80065b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006528:	2200      	movs	r2, #0
 800652a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f856 	bl	80065e0 <UART_WaitOnFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d03c      	beq.n	80065b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	623b      	str	r3, [r7, #32]
   return(result);
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800654e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006558:	633b      	str	r3, [r7, #48]	@ 0x30
 800655a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800655e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e6      	bne.n	800653a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	60fb      	str	r3, [r7, #12]
   return(result);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3308      	adds	r3, #8
 800658a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800658c:	61fa      	str	r2, [r7, #28]
 800658e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	69b9      	ldr	r1, [r7, #24]
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	617b      	str	r3, [r7, #20]
   return(result);
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e5      	bne.n	800656c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e011      	b.n	80065d8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3758      	adds	r7, #88	@ 0x58
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f0:	e04f      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d04b      	beq.n	8006692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fa:	f7fb fbf1 	bl	8001de0 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	429a      	cmp	r2, r3
 8006608:	d302      	bcc.n	8006610 <UART_WaitOnFlagUntilTimeout+0x30>
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e04e      	b.n	80066b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d037      	beq.n	8006692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b80      	cmp	r3, #128	@ 0x80
 8006626:	d034      	beq.n	8006692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b40      	cmp	r3, #64	@ 0x40
 800662c:	d031      	beq.n	8006692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b08      	cmp	r3, #8
 800663a:	d110      	bne.n	800665e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2208      	movs	r2, #8
 8006642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f8ff 	bl	8006848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2208      	movs	r2, #8
 800664e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e029      	b.n	80066b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800666c:	d111      	bne.n	8006692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f8e5 	bl	8006848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e00f      	b.n	80066b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69da      	ldr	r2, [r3, #28]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4013      	ands	r3, r2
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	429a      	cmp	r2, r3
 80066a0:	bf0c      	ite	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	2300      	movne	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d0a0      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b096      	sub	sp, #88	@ 0x58
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	88fa      	ldrh	r2, [r7, #6]
 80066d4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2222      	movs	r2, #34	@ 0x22
 80066e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d028      	beq.n	8006742 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f4:	4a3e      	ldr	r2, [pc, #248]	@ (80067f0 <UART_Start_Receive_DMA+0x134>)
 80066f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066fc:	4a3d      	ldr	r2, [pc, #244]	@ (80067f4 <UART_Start_Receive_DMA+0x138>)
 80066fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006704:	4a3c      	ldr	r2, [pc, #240]	@ (80067f8 <UART_Start_Receive_DMA+0x13c>)
 8006706:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670c:	2200      	movs	r2, #0
 800670e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3324      	adds	r3, #36	@ 0x24
 800671a:	4619      	mov	r1, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006720:	461a      	mov	r2, r3
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	f7fb fd4c 	bl	80021c0 <HAL_DMA_Start_IT>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2210      	movs	r2, #16
 8006732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e051      	b.n	80067e6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d018      	beq.n	800677c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800675e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800676a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800676e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e6      	bne.n	800674a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3308      	adds	r3, #8
 8006782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	653b      	str	r3, [r7, #80]	@ 0x50
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800679c:	637a      	str	r2, [r7, #52]	@ 0x34
 800679e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80067aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3308      	adds	r3, #8
 80067b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	613b      	str	r3, [r7, #16]
   return(result);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067d0:	623a      	str	r2, [r7, #32]
 80067d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	69f9      	ldr	r1, [r7, #28]
 80067d6:	6a3a      	ldr	r2, [r7, #32]
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e5      	bne.n	80067b0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3758      	adds	r7, #88	@ 0x58
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	080069c3 	.word	0x080069c3
 80067f4:	08006aeb 	.word	0x08006aeb
 80067f8:	08006b29 	.word	0x08006b29

080067fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b089      	sub	sp, #36	@ 0x24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	60bb      	str	r3, [r7, #8]
   return(result);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6979      	ldr	r1, [r7, #20]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	613b      	str	r3, [r7, #16]
   return(result);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e6      	bne.n	8006804 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800683c:	bf00      	nop
 800683e:	3724      	adds	r7, #36	@ 0x24
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b095      	sub	sp, #84	@ 0x54
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800686e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006870:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800687c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e6      	bne.n	8006850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3308      	adds	r3, #8
 8006888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	61fb      	str	r3, [r7, #28]
   return(result);
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e5      	bne.n	8006882 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d118      	bne.n	80068f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f023 0310 	bic.w	r3, r3, #16
 80068d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6979      	ldr	r1, [r7, #20]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e6      	bne.n	80068be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006904:	bf00      	nop
 8006906:	3754      	adds	r7, #84	@ 0x54
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b090      	sub	sp, #64	@ 0x40
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006926:	d037      	beq.n	8006998 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800692a:	2200      	movs	r2, #0
 800692c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	623b      	str	r3, [r7, #32]
   return(result);
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006950:	633a      	str	r2, [r7, #48]	@ 0x30
 8006952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	60fb      	str	r3, [r7, #12]
   return(result);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34
 800697a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	69b9      	ldr	r1, [r7, #24]
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	617b      	str	r3, [r7, #20]
   return(result);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e6      	bne.n	8006964 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006996:	e002      	b.n	800699e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006998:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800699a:	f7ff fa15 	bl	8005dc8 <HAL_UART_TxCpltCallback>
}
 800699e:	bf00      	nop
 80069a0:	3740      	adds	r7, #64	@ 0x40
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff fa11 	bl	8005ddc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b09c      	sub	sp, #112	@ 0x70
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ce:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069d8:	d071      	beq.n	8006abe <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80069da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069dc:	2200      	movs	r2, #0
 80069de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a02:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e6      	bne.n	80069e2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a34:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a36:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e5      	bne.n	8006a14 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	623b      	str	r3, [r7, #32]
   return(result);
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3308      	adds	r3, #8
 8006a66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a68:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e5      	bne.n	8006a48 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d118      	bne.n	8006abe <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f023 0310 	bic.w	r3, r3, #16
 8006aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	69b9      	ldr	r1, [r7, #24]
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e6      	bne.n	8006a8c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d107      	bne.n	8006adc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ace:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ad6:	f7f9 fe5b 	bl	8000790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ada:	e002      	b.n	8006ae2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006adc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ade:	f7ff f987 	bl	8005df0 <HAL_UART_RxCpltCallback>
}
 8006ae2:	bf00      	nop
 8006ae4:	3770      	adds	r7, #112	@ 0x70
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d109      	bne.n	8006b1a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	4619      	mov	r1, r3
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7f9 fe3c 	bl	8000790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b18:	e002      	b.n	8006b20 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff f972 	bl	8005e04 <HAL_UART_RxHalfCpltCallback>
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b4e:	2b80      	cmp	r3, #128	@ 0x80
 8006b50:	d109      	bne.n	8006b66 <UART_DMAError+0x3e>
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b21      	cmp	r3, #33	@ 0x21
 8006b56:	d106      	bne.n	8006b66 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006b60:	6978      	ldr	r0, [r7, #20]
 8006b62:	f7ff fe4b 	bl	80067fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b70:	2b40      	cmp	r3, #64	@ 0x40
 8006b72:	d109      	bne.n	8006b88 <UART_DMAError+0x60>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b22      	cmp	r3, #34	@ 0x22
 8006b78:	d106      	bne.n	8006b88 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006b82:	6978      	ldr	r0, [r7, #20]
 8006b84:	f7ff fe60 	bl	8006848 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b8e:	f043 0210 	orr.w	r2, r3, #16
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b98:	6978      	ldr	r0, [r7, #20]
 8006b9a:	f7ff f93d 	bl	8005e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b9e:	bf00      	nop
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff f927 	bl	8005e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b088      	sub	sp, #32
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6979      	ldr	r1, [r7, #20]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	613b      	str	r3, [r7, #16]
   return(result);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e6      	bne.n	8006bda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff f8d5 	bl	8005dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c1e:	bf00      	nop
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b08c      	sub	sp, #48	@ 0x30
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	4613      	mov	r3, r2
 8006c32:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d142      	bne.n	8006cc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8006c44:	88fb      	ldrh	r3, [r7, #6]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e03b      	b.n	8006cc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff fd2b 	bl	80066bc <UART_Start_Receive_DMA>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d124      	bne.n	8006cbe <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d11d      	bne.n	8006cb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2210      	movs	r2, #16
 8006c82:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	617b      	str	r3, [r7, #20]
   return(result);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f043 0310 	orr.w	r3, r3, #16
 8006c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6a39      	ldr	r1, [r7, #32]
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e6      	bne.n	8006c84 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8006cb6:	e002      	b.n	8006cbe <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cc2:	e000      	b.n	8006cc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
  }
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3730      	adds	r7, #48	@ 0x30
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	f107 001c 	add.w	r0, r7, #28
 8006cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ce2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d121      	bne.n	8006d2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	4b21      	ldr	r3, [pc, #132]	@ (8006d80 <USB_CoreInit+0xb0>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d105      	bne.n	8006d22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa92 	bl	800724c <USB_CoreReset>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e010      	b.n	8006d50 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa86 	bl	800724c <USB_CoreReset>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d50:	7fbb      	ldrb	r3, [r7, #30]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d10b      	bne.n	8006d6e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f043 0206 	orr.w	r2, r3, #6
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d7a:	b004      	add	sp, #16
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	ffbdffbf 	.word	0xffbdffbf

08006d84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f023 0201 	bic.w	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d115      	bne.n	8006df4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dd4:	200a      	movs	r0, #10
 8006dd6:	f7fb f80f 	bl	8001df8 <HAL_Delay>
      ms += 10U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	330a      	adds	r3, #10
 8006dde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fa25 	bl	8007230 <USB_GetMode>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d01e      	beq.n	8006e2a <USB_SetCurrentMode+0x84>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2bc7      	cmp	r3, #199	@ 0xc7
 8006df0:	d9f0      	bls.n	8006dd4 <USB_SetCurrentMode+0x2e>
 8006df2:	e01a      	b.n	8006e2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d115      	bne.n	8006e26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e06:	200a      	movs	r0, #10
 8006e08:	f7fa fff6 	bl	8001df8 <HAL_Delay>
      ms += 10U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	330a      	adds	r3, #10
 8006e10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa0c 	bl	8007230 <USB_GetMode>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <USB_SetCurrentMode+0x84>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e22:	d9f0      	bls.n	8006e06 <USB_SetCurrentMode+0x60>
 8006e24:	e001      	b.n	8006e2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e005      	b.n	8006e36 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e2e:	d101      	bne.n	8006e34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e40:	b084      	sub	sp, #16
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b086      	sub	sp, #24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	e009      	b.n	8006e74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	3340      	adds	r3, #64	@ 0x40
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3301      	adds	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2b0e      	cmp	r3, #14
 8006e78:	d9f2      	bls.n	8006e60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d11c      	bne.n	8006ebc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e90:	f043 0302 	orr.w	r3, r3, #2
 8006e94:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e005      	b.n	8006ec8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ece:	461a      	mov	r2, r3
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ed4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d10d      	bne.n	8006ef8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f968 	bl	80071bc <USB_SetDevSpeed>
 8006eec:	e008      	b.n	8006f00 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006eee:	2101      	movs	r1, #1
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f963 	bl	80071bc <USB_SetDevSpeed>
 8006ef6:	e003      	b.n	8006f00 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ef8:	2103      	movs	r1, #3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f95e 	bl	80071bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f00:	2110      	movs	r1, #16
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f8fa 	bl	80070fc <USB_FlushTxFifo>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f924 	bl	8007160 <USB_FlushRxFifo>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f28:	461a      	mov	r2, r3
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f34:	461a      	mov	r2, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f40:	461a      	mov	r2, r3
 8006f42:	2300      	movs	r3, #0
 8006f44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f46:	2300      	movs	r3, #0
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	e043      	b.n	8006fd4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f62:	d118      	bne.n	8006f96 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f76:	461a      	mov	r2, r3
 8006f78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e013      	b.n	8006fa8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e008      	b.n	8006fa8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fd8:	461a      	mov	r2, r3
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d3b5      	bcc.n	8006f4c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	613b      	str	r3, [r7, #16]
 8006fe4:	e043      	b.n	800706e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ffc:	d118      	bne.n	8007030 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007010:	461a      	mov	r2, r3
 8007012:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	e013      	b.n	8007042 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007026:	461a      	mov	r2, r3
 8007028:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	e008      	b.n	8007042 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703c:	461a      	mov	r2, r3
 800703e:	2300      	movs	r3, #0
 8007040:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800704e:	461a      	mov	r2, r3
 8007050:	2300      	movs	r3, #0
 8007052:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007060:	461a      	mov	r2, r3
 8007062:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007066:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	3301      	adds	r3, #1
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007072:	461a      	mov	r2, r3
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4293      	cmp	r3, r2
 8007078:	d3b5      	bcc.n	8006fe6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800708c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800709a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800709c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d105      	bne.n	80070b0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f043 0210 	orr.w	r2, r3, #16
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699a      	ldr	r2, [r3, #24]
 80070b4:	4b0f      	ldr	r3, [pc, #60]	@ (80070f4 <USB_DevInit+0x2b4>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	f043 0208 	orr.w	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d105      	bne.n	80070e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <USB_DevInit+0x2b8>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f0:	b004      	add	sp, #16
 80070f2:	4770      	bx	lr
 80070f4:	803c3800 	.word	0x803c3800
 80070f8:	40000004 	.word	0x40000004

080070fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007116:	d901      	bls.n	800711c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e01b      	b.n	8007154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	daf2      	bge.n	800710a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	019b      	lsls	r3, r3, #6
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007140:	d901      	bls.n	8007146 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e006      	b.n	8007154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b20      	cmp	r3, #32
 8007150:	d0f0      	beq.n	8007134 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007178:	d901      	bls.n	800717e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e018      	b.n	80071b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	daf2      	bge.n	800716c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2210      	movs	r2, #16
 800718e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3301      	adds	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800719c:	d901      	bls.n	80071a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e006      	b.n	80071b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d0f0      	beq.n	8007190 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071dc:	4313      	orrs	r3, r2
 80071de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007208:	f023 0303 	bic.w	r3, r3, #3
 800720c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800721c:	f043 0302 	orr.w	r3, r3, #2
 8007220:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	f003 0301 	and.w	r3, r3, #1
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007264:	d901      	bls.n	800726a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e01b      	b.n	80072a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	daf2      	bge.n	8007258 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f043 0201 	orr.w	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800728e:	d901      	bls.n	8007294 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e006      	b.n	80072a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b01      	cmp	r3, #1
 800729e:	d0f0      	beq.n	8007282 <USB_CoreReset+0x36>

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fb34 	bl	8007928 <malloc>
 80072c0:	4603      	mov	r3, r0
 80072c2:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 80072c4:	68fb      	ldr	r3, [r7, #12]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <ATC_Free+0x26>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fb25 	bl	8007938 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
  }
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	8a9b      	ldrh	r3, [r3, #20]
 8007312:	461a      	mov	r2, r3
 8007314:	2100      	movs	r1, #0
 8007316:	f000 fbc5 	bl	8007aa4 <memset>
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b086      	sub	sp, #24
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	4613      	mov	r3, r2
 800732e:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007330:	2300      	movs	r3, #0
 8007332:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	88fa      	ldrh	r2, [r7, #6]
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe f8c4 	bl	80054d0 <HAL_UART_Transmit_DMA>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d102      	bne.n	8007354 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 800734e:	2301      	movs	r3, #1
 8007350:	75fb      	strb	r3, [r7, #23]
 8007352:	e000      	b.n	8007356 <ATC_TxRaw+0x34>
      break;
 8007354:	bf00      	nop

  } while (0);

  return answer;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe fd67 	bl	8005e40 <HAL_UART_GetState>
 8007372:	4603      	mov	r3, r0
 8007374:	2b21      	cmp	r3, #33	@ 0x21
 8007376:	d007      	beq.n	8007388 <ATC_TxBusy+0x28>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fd5f 	bl	8005e40 <HAL_UART_GetState>
 8007382:	4603      	mov	r3, r0
 8007384:	2b23      	cmp	r3, #35	@ 0x23
 8007386:	d101      	bne.n	800738c <ATC_TxBusy+0x2c>
  {
    return true;
 8007388:	2301      	movs	r3, #1
 800738a:	e000      	b.n	800738e <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800738c:	2300      	movs	r3, #0
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 80073a4:	f7fa fd1c 	bl	8001de0 <HAL_GetTick>
 80073a8:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 80073aa:	2001      	movs	r0, #1
 80073ac:	f000 fab1 	bl	8007912 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fd43 	bl	8005e40 <HAL_UART_GetState>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b22      	cmp	r3, #34	@ 0x22
 80073be:	d007      	beq.n	80073d0 <ATC_TxWait+0x3a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fd3b 	bl	8005e40 <HAL_UART_GetState>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d102      	bne.n	80073d6 <ATC_TxWait+0x40>
    {
      answer = true;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
      break;
 80073d4:	e01c      	b.n	8007410 <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe fd30 	bl	8005e40 <HAL_UART_GetState>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2be0      	cmp	r3, #224	@ 0xe0
 80073e4:	d014      	beq.n	8007410 <ATC_TxWait+0x7a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fd28 	bl	8005e40 <HAL_UART_GetState>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80073f4:	d00c      	beq.n	8007410 <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 80073f6:	f7fa fcf3 	bl	8001de0 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	429a      	cmp	r2, r3
 8007404:	d8d1      	bhi.n	80073aa <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe f8dc 	bl	80055c8 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <ATC_CheckResponse>:
}

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8b1b      	ldrh	r3, [r3, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d023      	beq.n	8007478 <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007430:	2300      	movs	r3, #0
 8007432:	81bb      	strh	r3, [r7, #12]
 8007434:	e01b      	b.n	800746e <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800743a:	89ba      	ldrh	r2, [r7, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	320a      	adds	r2, #10
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	4619      	mov	r1, r3
 8007446:	f000 fb48 	bl	8007ada <strstr>
 800744a:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 800745e:	89bb      	ldrh	r3, [r7, #12]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	3301      	adds	r3, #1
 8007464:	73fb      	strb	r3, [r7, #15]
        break;
 8007466:	e007      	b.n	8007478 <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007468:	89bb      	ldrh	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	81bb      	strh	r3, [r7, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	8adb      	ldrh	r3, [r3, #22]
 8007472:	89ba      	ldrh	r2, [r7, #12]
 8007474:	429a      	cmp	r2, r3
 8007476:	d3de      	bcc.n	8007436 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fcea 	bl	8005e68 <HAL_UART_GetError>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01f      	beq.n	80074da <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f04f 32ff 	mov.w	r2, #4294967295
 80074a4:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe f8f4 	bl	8005698 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69d9      	ldr	r1, [r3, #28]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8a9b      	ldrh	r3, [r3, #20]
 80074bc:	461a      	mov	r2, r3
 80074be:	f7ff fbb2 	bl	8006c26 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0208 	bic.w	r2, r2, #8
 80074d8:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe fcae 	bl	8005e40 <HAL_UART_GetState>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b22      	cmp	r3, #34	@ 0x22
 80074e8:	d027      	beq.n	800753a <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fca6 	bl	8005e40 <HAL_UART_GetState>
 80074f4:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80074f6:	2b23      	cmp	r3, #35	@ 0x23
 80074f8:	d01f      	beq.n	800753a <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f04f 32ff 	mov.w	r2, #4294967295
 8007504:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe f8c4 	bl	8005698 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69d9      	ldr	r1, [r3, #28]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8a9b      	ldrh	r3, [r3, #20]
 800751c:	461a      	mov	r2, r3
 800751e:	f7ff fb82 	bl	8006c26 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0208 	bic.w	r2, r2, #8
 8007538:	601a      	str	r2, [r3, #0]
  }
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007552:	2300      	movs	r3, #0
 8007554:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d075      	beq.n	8007648 <ATC_Init+0x106>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d072      	beq.n	8007648 <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007562:	223c      	movs	r2, #60	@ 0x3c
 8007564:	2100      	movs	r1, #0
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fa9c 	bl	8007aa4 <memset>
    if (pName != NULL)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d006      	beq.n	8007580 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3304      	adds	r3, #4
 8007576:	2207      	movs	r2, #7
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fa9a 	bl	8007ab4 <strncpy>
    }
    hAtc->hUart = hUart;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fe90 	bl	80072ae <ATC_Malloc>
 800758e:	4602      	mov	r2, r0
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d04e      	beq.n	800763a <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	88fa      	ldrh	r2, [r7, #6]
 80075a2:	2100      	movs	r1, #0
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fa7d 	bl	8007aa4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 80075aa:	88fb      	ldrh	r3, [r7, #6]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fe7e 	bl	80072ae <ATC_Malloc>
 80075b2:	4602      	mov	r2, r0
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d03e      	beq.n	800763e <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	88fa      	ldrh	r2, [r7, #6]
 80075c6:	2100      	movs	r1, #0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fa6b 	bl	8007aa4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 80075ce:	88fb      	ldrh	r3, [r7, #6]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fe6c 	bl	80072ae <ATC_Malloc>
 80075d6:	4602      	mov	r2, r0
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d02e      	beq.n	8007642 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e8:	88fa      	ldrh	r2, [r7, #6]
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fa59 	bl	8007aa4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	88fa      	ldrh	r2, [r7, #6]
 80075f6:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007602:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	69d9      	ldr	r1, [r3, #28]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8a9b      	ldrh	r3, [r3, #20]
 8007610:	461a      	mov	r2, r3
 8007612:	f7ff fb08 	bl	8006c26 <HAL_UARTEx_ReceiveToIdle_DMA>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d114      	bne.n	8007646 <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0208 	bic.w	r2, r2, #8
 8007632:	601a      	str	r2, [r3, #0]
    answer = true;
 8007634:	2301      	movs	r3, #1
 8007636:	75fb      	strb	r3, [r7, #23]
 8007638:	e006      	b.n	8007648 <ATC_Init+0x106>
      break;
 800763a:	bf00      	nop
 800763c:	e004      	b.n	8007648 <ATC_Init+0x106>
      break;
 800763e:	bf00      	nop
 8007640:	e002      	b.n	8007648 <ATC_Init+0x106>
      break;
 8007642:	bf00      	nop
 8007644:	e000      	b.n	8007648 <ATC_Init+0x106>
      break;
 8007646:	bf00      	nop

  } while (0);

  if (answer == false)
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	f083 0301 	eor.w	r3, r3, #1
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d016      	beq.n	8007682 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d004      	beq.n	8007666 <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	331c      	adds	r3, #28
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fe34 	bl	80072ce <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d004      	beq.n	8007678 <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3324      	adds	r3, #36	@ 0x24
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff fe2b 	bl	80072ce <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007678:	223c      	movs	r2, #60	@ 0x3c
 800767a:	2100      	movs	r1, #0
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fa11 	bl	8007aa4 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8007682:	7dfb      	ldrb	r3, [r7, #23]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b08d      	sub	sp, #52	@ 0x34
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 800769a:	2300      	movs	r3, #0
 800769c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff fe5e 	bl	8007360 <ATC_TxBusy>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 80076aa:	f06f 0303 	mvn.w	r3, #3
 80076ae:	e0c8      	b.n	8007842 <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 80076b0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80076b4:	2b05      	cmp	r3, #5
 80076b6:	d902      	bls.n	80076be <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 80076b8:	f06f 0304 	mvn.w	r3, #4
 80076bc:	e0c1      	b.n	8007842 <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fedf 	bl	8007482 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 80076c4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80076c8:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 80076ca:	2300      	movs	r3, #0
 80076cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076ce:	e04b      	b.n	8007768 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	1d1a      	adds	r2, r3, #4
 80076d4:	617a      	str	r2, [r7, #20]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 80076da:	69b8      	ldr	r0, [r7, #24]
 80076dc:	f7f8 fdac 	bl	8000238 <strlen>
 80076e0:	4603      	mov	r3, r0
 80076e2:	3301      	adds	r3, #1
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fde2 	bl	80072ae <ATC_Malloc>
 80076ea:	4601      	mov	r1, r0
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076f0:	320a      	adds	r2, #10
 80076f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076fa:	320a      	adds	r2, #10
 80076fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d119      	bne.n	8007738 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 8007704:	2300      	movs	r3, #0
 8007706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800770a:	e00d      	b.n	8007728 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800770c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007710:	330a      	adds	r3, #10
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff fdd8 	bl	80072ce <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800771e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007722:	3301      	adds	r3, #1
 8007724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800772c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800772e:	429a      	cmp	r2, r3
 8007730:	dcec      	bgt.n	800770c <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 8007732:	f06f 0302 	mvn.w	r3, #2
 8007736:	e084      	b.n	8007842 <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800773c:	320a      	adds	r2, #10
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	69b9      	ldr	r1, [r7, #24]
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fa1b 	bl	8007b80 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800774e:	320a      	adds	r2, #10
 8007750:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007754:	69b8      	ldr	r0, [r7, #24]
 8007756:	f7f8 fd6f 	bl	8000238 <strlen>
 800775a:	4603      	mov	r3, r0
 800775c:	4423      	add	r3, r4
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	3301      	adds	r3, #1
 8007766:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007768:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800776c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800776e:	429a      	cmp	r2, r3
 8007770:	dbae      	blt.n	80076d0 <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f7ff fdc2 	bl	80072fc <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8007778:	68b8      	ldr	r0, [r7, #8]
 800777a:	f7f8 fd5d 	bl	8000238 <strlen>
 800777e:	4603      	mov	r3, r0
 8007780:	b29b      	uxth	r3, r3
 8007782:	461a      	mov	r2, r3
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff fdcb 	bl	8007322 <ATC_TxRaw>
 800778c:	4603      	mov	r3, r0
 800778e:	f083 0301 	eor.w	r3, r3, #1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8007798:	f04f 33ff 	mov.w	r3, #4294967295
 800779c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800779e:	e00d      	b.n	80077bc <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 80077a0:	6879      	ldr	r1, [r7, #4]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7ff fdf7 	bl	8007396 <ATC_TxWait>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f083 0301 	eor.w	r3, r3, #1
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 80077b4:	f06f 0301 	mvn.w	r3, #1
 80077b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80077ba:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 80077bc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d022      	beq.n	800780a <ATC_SendReceive+0x17e>
 80077c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d11f      	bne.n	800780a <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 80077ca:	f7fa fb09 	bl	8001de0 <HAL_GetTick>
 80077ce:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 80077d0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 80077da:	e00e      	b.n	80077fa <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 80077dc:	2001      	movs	r0, #1
 80077de:	f000 f898 	bl	8007912 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff fe18 	bl	800741a <ATC_CheckResponse>
 80077ea:	4603      	mov	r3, r0
 80077ec:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 80077ee:	7ffb      	ldrb	r3, [r7, #31]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 80077f4:	7ffb      	ldrb	r3, [r7, #31]
 80077f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80077f8:	e007      	b.n	800780a <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 80077fa:	f7fa faf1 	bl	8001de0 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007806:	429a      	cmp	r2, r3
 8007808:	d8e8      	bhi.n	80077dc <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8007810:	2300      	movs	r3, #0
 8007812:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007816:	e00d      	b.n	8007834 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8007818:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800781c:	330a      	adds	r3, #10
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fd52 	bl	80072ce <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800782a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800782e:	3301      	adds	r3, #1
 8007830:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007834:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007838:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800783c:	429a      	cmp	r2, r3
 800783e:	d3eb      	bcc.n	8007818 <ATC_SendReceive+0x18c>
  }
  return answer;
 8007840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007842:	4618      	mov	r0, r3
 8007844:	3734      	adds	r7, #52	@ 0x34
 8007846:	46bd      	mov	sp, r7
 8007848:	bd90      	pop	{r4, r7, pc}

0800784a <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8007856:	887a      	ldrh	r2, [r7, #2]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8a9b      	ldrh	r3, [r3, #20]
 800785c:	4619      	mov	r1, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	8b1b      	ldrh	r3, [r3, #24]
 8007862:	1acb      	subs	r3, r1, r3
 8007864:	429a      	cmp	r2, r3
 8007866:	dd05      	ble.n	8007874 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	8a9a      	ldrh	r2, [r3, #20]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	8b1b      	ldrh	r3, [r3, #24]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	8b12      	ldrh	r2, [r2, #24]
 800787c:	1898      	adds	r0, r3, r2
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	887a      	ldrh	r2, [r7, #2]
 8007884:	4619      	mov	r1, r3
 8007886:	f000 f983 	bl	8007b90 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	8b1a      	ldrh	r2, [r3, #24]
 800788e:	887b      	ldrh	r3, [r7, #2]
 8007890:	4413      	add	r3, r2
 8007892:	b29a      	uxth	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8a9b      	ldrh	r3, [r3, #20]
 80078a4:	461a      	mov	r2, r3
 80078a6:	f7ff f9be 	bl	8006c26 <HAL_UARTEx_ReceiveToIdle_DMA>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10c      	bne.n	80078ca <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0208 	bic.w	r2, r2, #8
 80078c6:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 80078c8:	e01f      	b.n	800790a <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f04f 32ff 	mov.w	r2, #4294967295
 80078d4:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fd fedc 	bl	8005698 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6818      	ldr	r0, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	69d9      	ldr	r1, [r3, #28]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8a9b      	ldrh	r3, [r3, #20]
 80078ec:	461a      	mov	r2, r3
 80078ee:	f7ff f99a 	bl	8006c26 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0208 	bic.w	r2, r2, #8
 8007908:	601a      	str	r2, [r3, #0]
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fa fa6c 	bl	8001df8 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <malloc>:
 8007928:	4b02      	ldr	r3, [pc, #8]	@ (8007934 <malloc+0xc>)
 800792a:	4601      	mov	r1, r0
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	f000 b82d 	b.w	800798c <_malloc_r>
 8007932:	bf00      	nop
 8007934:	2000000c 	.word	0x2000000c

08007938 <free>:
 8007938:	4b02      	ldr	r3, [pc, #8]	@ (8007944 <free+0xc>)
 800793a:	4601      	mov	r1, r0
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f000 b935 	b.w	8007bac <_free_r>
 8007942:	bf00      	nop
 8007944:	2000000c 	.word	0x2000000c

08007948 <sbrk_aligned>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4e0f      	ldr	r6, [pc, #60]	@ (8007988 <sbrk_aligned+0x40>)
 800794c:	460c      	mov	r4, r1
 800794e:	6831      	ldr	r1, [r6, #0]
 8007950:	4605      	mov	r5, r0
 8007952:	b911      	cbnz	r1, 800795a <sbrk_aligned+0x12>
 8007954:	f000 f8d8 	bl	8007b08 <_sbrk_r>
 8007958:	6030      	str	r0, [r6, #0]
 800795a:	4621      	mov	r1, r4
 800795c:	4628      	mov	r0, r5
 800795e:	f000 f8d3 	bl	8007b08 <_sbrk_r>
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d103      	bne.n	800796e <sbrk_aligned+0x26>
 8007966:	f04f 34ff 	mov.w	r4, #4294967295
 800796a:	4620      	mov	r0, r4
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	1cc4      	adds	r4, r0, #3
 8007970:	f024 0403 	bic.w	r4, r4, #3
 8007974:	42a0      	cmp	r0, r4
 8007976:	d0f8      	beq.n	800796a <sbrk_aligned+0x22>
 8007978:	1a21      	subs	r1, r4, r0
 800797a:	4628      	mov	r0, r5
 800797c:	f000 f8c4 	bl	8007b08 <_sbrk_r>
 8007980:	3001      	adds	r0, #1
 8007982:	d1f2      	bne.n	800796a <sbrk_aligned+0x22>
 8007984:	e7ef      	b.n	8007966 <sbrk_aligned+0x1e>
 8007986:	bf00      	nop
 8007988:	200009b0 	.word	0x200009b0

0800798c <_malloc_r>:
 800798c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007990:	1ccd      	adds	r5, r1, #3
 8007992:	f025 0503 	bic.w	r5, r5, #3
 8007996:	3508      	adds	r5, #8
 8007998:	2d0c      	cmp	r5, #12
 800799a:	bf38      	it	cc
 800799c:	250c      	movcc	r5, #12
 800799e:	2d00      	cmp	r5, #0
 80079a0:	4606      	mov	r6, r0
 80079a2:	db01      	blt.n	80079a8 <_malloc_r+0x1c>
 80079a4:	42a9      	cmp	r1, r5
 80079a6:	d904      	bls.n	80079b2 <_malloc_r+0x26>
 80079a8:	230c      	movs	r3, #12
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	2000      	movs	r0, #0
 80079ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a88 <_malloc_r+0xfc>
 80079b6:	f000 f869 	bl	8007a8c <__malloc_lock>
 80079ba:	f8d8 3000 	ldr.w	r3, [r8]
 80079be:	461c      	mov	r4, r3
 80079c0:	bb44      	cbnz	r4, 8007a14 <_malloc_r+0x88>
 80079c2:	4629      	mov	r1, r5
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7ff ffbf 	bl	8007948 <sbrk_aligned>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	4604      	mov	r4, r0
 80079ce:	d158      	bne.n	8007a82 <_malloc_r+0xf6>
 80079d0:	f8d8 4000 	ldr.w	r4, [r8]
 80079d4:	4627      	mov	r7, r4
 80079d6:	2f00      	cmp	r7, #0
 80079d8:	d143      	bne.n	8007a62 <_malloc_r+0xd6>
 80079da:	2c00      	cmp	r4, #0
 80079dc:	d04b      	beq.n	8007a76 <_malloc_r+0xea>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	4639      	mov	r1, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	eb04 0903 	add.w	r9, r4, r3
 80079e8:	f000 f88e 	bl	8007b08 <_sbrk_r>
 80079ec:	4581      	cmp	r9, r0
 80079ee:	d142      	bne.n	8007a76 <_malloc_r+0xea>
 80079f0:	6821      	ldr	r1, [r4, #0]
 80079f2:	1a6d      	subs	r5, r5, r1
 80079f4:	4629      	mov	r1, r5
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff ffa6 	bl	8007948 <sbrk_aligned>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d03a      	beq.n	8007a76 <_malloc_r+0xea>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	442b      	add	r3, r5
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	f8d8 3000 	ldr.w	r3, [r8]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	bb62      	cbnz	r2, 8007a68 <_malloc_r+0xdc>
 8007a0e:	f8c8 7000 	str.w	r7, [r8]
 8007a12:	e00f      	b.n	8007a34 <_malloc_r+0xa8>
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	1b52      	subs	r2, r2, r5
 8007a18:	d420      	bmi.n	8007a5c <_malloc_r+0xd0>
 8007a1a:	2a0b      	cmp	r2, #11
 8007a1c:	d917      	bls.n	8007a4e <_malloc_r+0xc2>
 8007a1e:	1961      	adds	r1, r4, r5
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	6025      	str	r5, [r4, #0]
 8007a24:	bf18      	it	ne
 8007a26:	6059      	strne	r1, [r3, #4]
 8007a28:	6863      	ldr	r3, [r4, #4]
 8007a2a:	bf08      	it	eq
 8007a2c:	f8c8 1000 	streq.w	r1, [r8]
 8007a30:	5162      	str	r2, [r4, r5]
 8007a32:	604b      	str	r3, [r1, #4]
 8007a34:	4630      	mov	r0, r6
 8007a36:	f000 f82f 	bl	8007a98 <__malloc_unlock>
 8007a3a:	f104 000b 	add.w	r0, r4, #11
 8007a3e:	1d23      	adds	r3, r4, #4
 8007a40:	f020 0007 	bic.w	r0, r0, #7
 8007a44:	1ac2      	subs	r2, r0, r3
 8007a46:	bf1c      	itt	ne
 8007a48:	1a1b      	subne	r3, r3, r0
 8007a4a:	50a3      	strne	r3, [r4, r2]
 8007a4c:	e7af      	b.n	80079ae <_malloc_r+0x22>
 8007a4e:	6862      	ldr	r2, [r4, #4]
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	bf0c      	ite	eq
 8007a54:	f8c8 2000 	streq.w	r2, [r8]
 8007a58:	605a      	strne	r2, [r3, #4]
 8007a5a:	e7eb      	b.n	8007a34 <_malloc_r+0xa8>
 8007a5c:	4623      	mov	r3, r4
 8007a5e:	6864      	ldr	r4, [r4, #4]
 8007a60:	e7ae      	b.n	80079c0 <_malloc_r+0x34>
 8007a62:	463c      	mov	r4, r7
 8007a64:	687f      	ldr	r7, [r7, #4]
 8007a66:	e7b6      	b.n	80079d6 <_malloc_r+0x4a>
 8007a68:	461a      	mov	r2, r3
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	d1fb      	bne.n	8007a68 <_malloc_r+0xdc>
 8007a70:	2300      	movs	r3, #0
 8007a72:	6053      	str	r3, [r2, #4]
 8007a74:	e7de      	b.n	8007a34 <_malloc_r+0xa8>
 8007a76:	230c      	movs	r3, #12
 8007a78:	6033      	str	r3, [r6, #0]
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 f80c 	bl	8007a98 <__malloc_unlock>
 8007a80:	e794      	b.n	80079ac <_malloc_r+0x20>
 8007a82:	6005      	str	r5, [r0, #0]
 8007a84:	e7d6      	b.n	8007a34 <_malloc_r+0xa8>
 8007a86:	bf00      	nop
 8007a88:	200009b4 	.word	0x200009b4

08007a8c <__malloc_lock>:
 8007a8c:	4801      	ldr	r0, [pc, #4]	@ (8007a94 <__malloc_lock+0x8>)
 8007a8e:	f000 b875 	b.w	8007b7c <__retarget_lock_acquire_recursive>
 8007a92:	bf00      	nop
 8007a94:	20000af4 	.word	0x20000af4

08007a98 <__malloc_unlock>:
 8007a98:	4801      	ldr	r0, [pc, #4]	@ (8007aa0 <__malloc_unlock+0x8>)
 8007a9a:	f000 b870 	b.w	8007b7e <__retarget_lock_release_recursive>
 8007a9e:	bf00      	nop
 8007aa0:	20000af4 	.word	0x20000af4

08007aa4 <memset>:
 8007aa4:	4402      	add	r2, r0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d100      	bne.n	8007aae <memset+0xa>
 8007aac:	4770      	bx	lr
 8007aae:	f803 1b01 	strb.w	r1, [r3], #1
 8007ab2:	e7f9      	b.n	8007aa8 <memset+0x4>

08007ab4 <strncpy>:
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	3901      	subs	r1, #1
 8007ab8:	4603      	mov	r3, r0
 8007aba:	b132      	cbz	r2, 8007aca <strncpy+0x16>
 8007abc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007ac0:	f803 4b01 	strb.w	r4, [r3], #1
 8007ac4:	3a01      	subs	r2, #1
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	d1f7      	bne.n	8007aba <strncpy+0x6>
 8007aca:	441a      	add	r2, r3
 8007acc:	2100      	movs	r1, #0
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d100      	bne.n	8007ad4 <strncpy+0x20>
 8007ad2:	bd10      	pop	{r4, pc}
 8007ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad8:	e7f9      	b.n	8007ace <strncpy+0x1a>

08007ada <strstr>:
 8007ada:	780a      	ldrb	r2, [r1, #0]
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	b96a      	cbnz	r2, 8007afc <strstr+0x22>
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d109      	bne.n	8007afa <strstr+0x20>
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	4605      	mov	r5, r0
 8007aea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0f6      	beq.n	8007ae0 <strstr+0x6>
 8007af2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007af6:	429e      	cmp	r6, r3
 8007af8:	d0f7      	beq.n	8007aea <strstr+0x10>
 8007afa:	3001      	adds	r0, #1
 8007afc:	7803      	ldrb	r3, [r0, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1ef      	bne.n	8007ae2 <strstr+0x8>
 8007b02:	4618      	mov	r0, r3
 8007b04:	e7ec      	b.n	8007ae0 <strstr+0x6>
	...

08007b08 <_sbrk_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d06      	ldr	r5, [pc, #24]	@ (8007b24 <_sbrk_r+0x1c>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	f7f9 f9f8 	bl	8000f08 <_sbrk>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_sbrk_r+0x1a>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_sbrk_r+0x1a>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	20000af0 	.word	0x20000af0

08007b28 <__errno>:
 8007b28:	4b01      	ldr	r3, [pc, #4]	@ (8007b30 <__errno+0x8>)
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	2000000c 	.word	0x2000000c

08007b34 <__libc_init_array>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	4d0d      	ldr	r5, [pc, #52]	@ (8007b6c <__libc_init_array+0x38>)
 8007b38:	4c0d      	ldr	r4, [pc, #52]	@ (8007b70 <__libc_init_array+0x3c>)
 8007b3a:	1b64      	subs	r4, r4, r5
 8007b3c:	10a4      	asrs	r4, r4, #2
 8007b3e:	2600      	movs	r6, #0
 8007b40:	42a6      	cmp	r6, r4
 8007b42:	d109      	bne.n	8007b58 <__libc_init_array+0x24>
 8007b44:	4d0b      	ldr	r5, [pc, #44]	@ (8007b74 <__libc_init_array+0x40>)
 8007b46:	4c0c      	ldr	r4, [pc, #48]	@ (8007b78 <__libc_init_array+0x44>)
 8007b48:	f000 f87a 	bl	8007c40 <_init>
 8007b4c:	1b64      	subs	r4, r4, r5
 8007b4e:	10a4      	asrs	r4, r4, #2
 8007b50:	2600      	movs	r6, #0
 8007b52:	42a6      	cmp	r6, r4
 8007b54:	d105      	bne.n	8007b62 <__libc_init_array+0x2e>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b5c:	4798      	blx	r3
 8007b5e:	3601      	adds	r6, #1
 8007b60:	e7ee      	b.n	8007b40 <__libc_init_array+0xc>
 8007b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b66:	4798      	blx	r3
 8007b68:	3601      	adds	r6, #1
 8007b6a:	e7f2      	b.n	8007b52 <__libc_init_array+0x1e>
 8007b6c:	08007cc8 	.word	0x08007cc8
 8007b70:	08007cc8 	.word	0x08007cc8
 8007b74:	08007cc8 	.word	0x08007cc8
 8007b78:	08007ccc 	.word	0x08007ccc

08007b7c <__retarget_lock_acquire_recursive>:
 8007b7c:	4770      	bx	lr

08007b7e <__retarget_lock_release_recursive>:
 8007b7e:	4770      	bx	lr

08007b80 <strcpy>:
 8007b80:	4603      	mov	r3, r0
 8007b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b86:	f803 2b01 	strb.w	r2, [r3], #1
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	d1f9      	bne.n	8007b82 <strcpy+0x2>
 8007b8e:	4770      	bx	lr

08007b90 <memcpy>:
 8007b90:	440a      	add	r2, r1
 8007b92:	4291      	cmp	r1, r2
 8007b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b98:	d100      	bne.n	8007b9c <memcpy+0xc>
 8007b9a:	4770      	bx	lr
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ba6:	4291      	cmp	r1, r2
 8007ba8:	d1f9      	bne.n	8007b9e <memcpy+0xe>
 8007baa:	bd10      	pop	{r4, pc}

08007bac <_free_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4605      	mov	r5, r0
 8007bb0:	2900      	cmp	r1, #0
 8007bb2:	d041      	beq.n	8007c38 <_free_r+0x8c>
 8007bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bb8:	1f0c      	subs	r4, r1, #4
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bfb8      	it	lt
 8007bbe:	18e4      	addlt	r4, r4, r3
 8007bc0:	f7ff ff64 	bl	8007a8c <__malloc_lock>
 8007bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c3c <_free_r+0x90>)
 8007bc6:	6813      	ldr	r3, [r2, #0]
 8007bc8:	b933      	cbnz	r3, 8007bd8 <_free_r+0x2c>
 8007bca:	6063      	str	r3, [r4, #4]
 8007bcc:	6014      	str	r4, [r2, #0]
 8007bce:	4628      	mov	r0, r5
 8007bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bd4:	f7ff bf60 	b.w	8007a98 <__malloc_unlock>
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	d908      	bls.n	8007bee <_free_r+0x42>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	1821      	adds	r1, r4, r0
 8007be0:	428b      	cmp	r3, r1
 8007be2:	bf01      	itttt	eq
 8007be4:	6819      	ldreq	r1, [r3, #0]
 8007be6:	685b      	ldreq	r3, [r3, #4]
 8007be8:	1809      	addeq	r1, r1, r0
 8007bea:	6021      	streq	r1, [r4, #0]
 8007bec:	e7ed      	b.n	8007bca <_free_r+0x1e>
 8007bee:	461a      	mov	r2, r3
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	b10b      	cbz	r3, 8007bf8 <_free_r+0x4c>
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d9fa      	bls.n	8007bee <_free_r+0x42>
 8007bf8:	6811      	ldr	r1, [r2, #0]
 8007bfa:	1850      	adds	r0, r2, r1
 8007bfc:	42a0      	cmp	r0, r4
 8007bfe:	d10b      	bne.n	8007c18 <_free_r+0x6c>
 8007c00:	6820      	ldr	r0, [r4, #0]
 8007c02:	4401      	add	r1, r0
 8007c04:	1850      	adds	r0, r2, r1
 8007c06:	4283      	cmp	r3, r0
 8007c08:	6011      	str	r1, [r2, #0]
 8007c0a:	d1e0      	bne.n	8007bce <_free_r+0x22>
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	6053      	str	r3, [r2, #4]
 8007c12:	4408      	add	r0, r1
 8007c14:	6010      	str	r0, [r2, #0]
 8007c16:	e7da      	b.n	8007bce <_free_r+0x22>
 8007c18:	d902      	bls.n	8007c20 <_free_r+0x74>
 8007c1a:	230c      	movs	r3, #12
 8007c1c:	602b      	str	r3, [r5, #0]
 8007c1e:	e7d6      	b.n	8007bce <_free_r+0x22>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	1821      	adds	r1, r4, r0
 8007c24:	428b      	cmp	r3, r1
 8007c26:	bf04      	itt	eq
 8007c28:	6819      	ldreq	r1, [r3, #0]
 8007c2a:	685b      	ldreq	r3, [r3, #4]
 8007c2c:	6063      	str	r3, [r4, #4]
 8007c2e:	bf04      	itt	eq
 8007c30:	1809      	addeq	r1, r1, r0
 8007c32:	6021      	streq	r1, [r4, #0]
 8007c34:	6054      	str	r4, [r2, #4]
 8007c36:	e7ca      	b.n	8007bce <_free_r+0x22>
 8007c38:	bd38      	pop	{r3, r4, r5, pc}
 8007c3a:	bf00      	nop
 8007c3c:	200009b4 	.word	0x200009b4

08007c40 <_init>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr

08007c4c <_fini>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr
