
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e90  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008090  08008090  00009090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008134  08008134  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008134  08008134  00009134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800813c  0800813c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800813c  0800813c  0000913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008140  08008140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008144  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  2000005c  080081a0  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000acc  080081a0  0000aacc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182d2  00000000  00000000  0000a08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003746  00000000  00000000  0002235c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00025aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7a  00000000  00000000  00026eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a02a  00000000  00000000  00027e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6a7  00000000  00000000  00051e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff35b  00000000  00000000  0006c4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c8  00000000  00000000  0016b89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00171164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08008078 	.word	0x08008078

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08008078 	.word	0x08008078

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <MX_DMA_Init+0x48>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000628 <MX_DMA_Init+0x48>)
 80005ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <MX_DMA_Init+0x48>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2010      	movs	r0, #16
 8000604:	f001 fbad 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000608:	2010      	movs	r0, #16
 800060a:	f001 fbc6 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2011      	movs	r0, #17
 8000614:	f001 fba5 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000618:	2011      	movs	r0, #17
 800061a:	f001 fbbe 	bl	8001d9a <HAL_NVIC_EnableIRQ>

}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	@ 0x30
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b77      	ldr	r3, [pc, #476]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a76      	ldr	r2, [pc, #472]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b74      	ldr	r3, [pc, #464]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	61bb      	str	r3, [r7, #24]
 8000658:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	4b71      	ldr	r3, [pc, #452]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a70      	ldr	r2, [pc, #448]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b6e      	ldr	r3, [pc, #440]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b6b      	ldr	r3, [pc, #428]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a6a      	ldr	r2, [pc, #424]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b68      	ldr	r3, [pc, #416]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b65      	ldr	r3, [pc, #404]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a64      	ldr	r2, [pc, #400]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b62      	ldr	r3, [pc, #392]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a5e      	ldr	r2, [pc, #376]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b5c      	ldr	r3, [pc, #368]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0310 	and.w	r3, r3, #16
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b59      	ldr	r3, [pc, #356]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a58      	ldr	r2, [pc, #352]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b56      	ldr	r3, [pc, #344]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d2:	4b53      	ldr	r3, [pc, #332]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a52      	ldr	r2, [pc, #328]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b50      	ldr	r3, [pc, #320]	@ (8000820 <MX_GPIO_Init+0x1f4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006f0:	484c      	ldr	r0, [pc, #304]	@ (8000824 <MX_GPIO_Init+0x1f8>)
 80006f2:	f002 f92f 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	@ 0x40
 80006fa:	484b      	ldr	r0, [pc, #300]	@ (8000828 <MX_GPIO_Init+0x1fc>)
 80006fc:	f002 f92a 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2110      	movs	r1, #16
 8000704:	4849      	ldr	r0, [pc, #292]	@ (800082c <MX_GPIO_Init+0x200>)
 8000706:	f002 f925 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800070a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000710:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4843      	ldr	r0, [pc, #268]	@ (8000830 <MX_GPIO_Init+0x204>)
 8000722:	f001 ff6b 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000726:	2332      	movs	r3, #50	@ 0x32
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000736:	230b      	movs	r3, #11
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	483b      	ldr	r0, [pc, #236]	@ (8000830 <MX_GPIO_Init+0x204>)
 8000742:	f001 ff5b 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000746:	2386      	movs	r3, #134	@ 0x86
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000756:	230b      	movs	r3, #11
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4834      	ldr	r0, [pc, #208]	@ (8000834 <MX_GPIO_Init+0x208>)
 8000762:	f001 ff4b 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000766:	f244 0381 	movw	r3, #16513	@ 0x4081
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4829      	ldr	r0, [pc, #164]	@ (8000824 <MX_GPIO_Init+0x1f8>)
 8000780:	f001 ff3c 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000784:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000796:	230b      	movs	r3, #11
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4820      	ldr	r0, [pc, #128]	@ (8000824 <MX_GPIO_Init+0x1f8>)
 80007a2:	f001 ff2b 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007a6:	2340      	movs	r3, #64	@ 0x40
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	481a      	ldr	r0, [pc, #104]	@ (8000828 <MX_GPIO_Init+0x1fc>)
 80007be:	f001 ff1d 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007c2:	2380      	movs	r3, #128	@ 0x80
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4814      	ldr	r0, [pc, #80]	@ (8000828 <MX_GPIO_Init+0x1fc>)
 80007d6:	f001 ff11 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007da:	2310      	movs	r3, #16
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	480e      	ldr	r0, [pc, #56]	@ (800082c <MX_GPIO_Init+0x200>)
 80007f2:	f001 ff03 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007f6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000808:	230b      	movs	r3, #11
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_GPIO_Init+0x1fc>)
 8000814:	f001 fef2 	bl	80025fc <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3730      	adds	r7, #48	@ 0x30
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020400 	.word	0x40020400
 8000828:	40021800 	.word	0x40021800
 800082c:	40020c00 	.word	0x40020c00
 8000830:	40020800 	.word	0x40020800
 8000834:	40020000 	.word	0x40020000

08000838 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a05      	ldr	r2, [pc, #20]	@ (8000860 <HAL_UARTEx_RxEventCallback+0x28>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d104      	bne.n	8000858 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000854:	f006 febf 	bl	80075d6 <ATC_IdleLineCallback>
	}
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40004400 	.word	0x40004400
 8000864:	20000078 	.word	0x20000078

08000868 <HAL_TIM_PeriodElapsedCallback>:
	m->set_speed = 0;
    m->actual_PWM = 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
	{
		//motor_calculate_speed(&motorA);
	}
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	@ 0x30
 8000880:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f001 f912 	bl	8001aaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f87f 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f7ff fecf 	bl	800062c <MX_GPIO_Init>
  MX_DMA_Init();
 800088e:	f7ff fea7 	bl	80005e0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000892:	f000 fef1 	bl	8001678 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000896:	f001 f837 	bl	8001908 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800089a:	f000 febd 	bl	8001618 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800089e:	f000 fa31 	bl	8000d04 <MX_TIM1_Init>
  MX_TIM3_Init();
 80008a2:	f000 faed 	bl	8000e80 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008a6:	f000 fb41 	bl	8000f2c <MX_TIM4_Init>
  MX_TIM8_Init();
 80008aa:	f000 fc33 	bl	8001114 <MX_TIM8_Init>
  MX_TIM2_Init();
 80008ae:	f000 fa83 	bl	8000db8 <MX_TIM2_Init>
  MX_TIM6_Init();
 80008b2:	f000 fbf7 	bl	80010a4 <MX_TIM6_Init>
  MX_TIM5_Init();
 80008b6:	f000 fb8f 	bl	8000fd8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ATC_Init(&ESP, &huart2, 512, "ESP");
 80008ba:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <main+0xdc>)
 80008bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c0:	4926      	ldr	r1, [pc, #152]	@ (800095c <main+0xe0>)
 80008c2:	4827      	ldr	r0, [pc, #156]	@ (8000960 <main+0xe4>)
 80008c4:	f006 fd03 	bl	80072ce <ATC_Init>
  resp = ATC_SendReceive(&ESP, "AT+CWMODE=3\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80008c8:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <main+0xe8>)
 80008ca:	9303      	str	r3, [sp, #12]
 80008cc:	4b26      	ldr	r3, [pc, #152]	@ (8000968 <main+0xec>)
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	2302      	movs	r3, #2
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	2364      	movs	r3, #100	@ 0x64
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2300      	movs	r3, #0
 80008da:	2264      	movs	r2, #100	@ 0x64
 80008dc:	4923      	ldr	r1, [pc, #140]	@ (800096c <main+0xf0>)
 80008de:	4820      	ldr	r0, [pc, #128]	@ (8000960 <main+0xe4>)
 80008e0:	f006 fd9a 	bl	8007418 <ATC_SendReceive>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <main+0xf4>)
 80008e8:	6013      	str	r3, [r2, #0]
  resp = ATC_SendReceive(&ESP, "AT+CWSAP=\"SIECTEST\",\"\",1,0\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80008ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <main+0xe8>)
 80008ec:	9303      	str	r3, [sp, #12]
 80008ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <main+0xec>)
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2302      	movs	r3, #2
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2364      	movs	r3, #100	@ 0x64
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	2264      	movs	r2, #100	@ 0x64
 80008fe:	491d      	ldr	r1, [pc, #116]	@ (8000974 <main+0xf8>)
 8000900:	4817      	ldr	r0, [pc, #92]	@ (8000960 <main+0xe4>)
 8000902:	f006 fd89 	bl	8007418 <ATC_SendReceive>
 8000906:	4603      	mov	r3, r0
 8000908:	4a19      	ldr	r2, [pc, #100]	@ (8000970 <main+0xf4>)
 800090a:	6013      	str	r3, [r2, #0]

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800090c:	213c      	movs	r1, #60	@ 0x3c
 800090e:	481a      	ldr	r0, [pc, #104]	@ (8000978 <main+0xfc>)
 8000910:	f003 fd1e 	bl	8004350 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000914:	2100      	movs	r1, #0
 8000916:	4819      	ldr	r0, [pc, #100]	@ (800097c <main+0x100>)
 8000918:	f003 fb7a 	bl	8004010 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800091c:	210c      	movs	r1, #12
 800091e:	4817      	ldr	r0, [pc, #92]	@ (800097c <main+0x100>)
 8000920:	f003 fb76 	bl	8004010 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(buffer, "%lu\r\n", htim1.Instance->CNT);
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <main+0xfc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800092a:	463b      	mov	r3, r7
 800092c:	4914      	ldr	r1, [pc, #80]	@ (8000980 <main+0x104>)
 800092e:	4618      	mov	r0, r3
 8000930:	f006 ff7e 	bl	8007830 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000934:	463b      	mov	r3, r7
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc82 	bl	8000240 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	b29a      	uxth	r2, r3
 8000940:	4639      	mov	r1, r7
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	480f      	ldr	r0, [pc, #60]	@ (8000984 <main+0x108>)
 8000948:	f004 fbfe 	bl	8005148 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800094c:	2064      	movs	r0, #100	@ 0x64
 800094e:	f001 f909 	bl	8001b64 <HAL_Delay>
	  sprintf(buffer, "%lu\r\n", htim1.Instance->CNT);
 8000952:	bf00      	nop
 8000954:	e7e6      	b.n	8000924 <main+0xa8>
 8000956:	bf00      	nop
 8000958:	08008090 	.word	0x08008090
 800095c:	200002d0 	.word	0x200002d0
 8000960:	20000078 	.word	0x20000078
 8000964:	080080a4 	.word	0x080080a4
 8000968:	080080b0 	.word	0x080080b0
 800096c:	08008094 	.word	0x08008094
 8000970:	200000b4 	.word	0x200000b4
 8000974:	080080b8 	.word	0x080080b8
 8000978:	200000bc 	.word	0x200000bc
 800097c:	20000108 	.word	0x20000108
 8000980:	080080d8 	.word	0x080080d8
 8000984:	20000358 	.word	0x20000358

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	@ 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2234      	movs	r2, #52	@ 0x34
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f006 ff6a 	bl	8007870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009ac:	f002 f926 	bl	8002bfc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <SystemClock_Config+0xdc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a64 <SystemClock_Config+0xdc>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <SystemClock_Config+0xdc>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c8:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <SystemClock_Config+0xe0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009d0:	4a25      	ldr	r2, [pc, #148]	@ (8000a68 <SystemClock_Config+0xe0>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <SystemClock_Config+0xe0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009fc:	2360      	movs	r3, #96	@ 0x60
 80009fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a04:	2304      	movs	r3, #4
 8000a06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 f953 	bl	8002cbc <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a1c:	f000 f826 	bl	8000a6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a20:	f002 f8fc 	bl	8002c1c <HAL_PWREx_EnableOverDrive>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a2a:	f000 f81f 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2e:	230f      	movs	r3, #15
 8000a30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a32:	2302      	movs	r3, #2
 8000a34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	2103      	movs	r1, #3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fbe4 	bl	8003218 <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a56:	f000 f809 	bl	8000a6c <Error_Handler>
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3750      	adds	r7, #80	@ 0x50
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40007000 	.word	0x40007000

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <Error_Handler+0x8>

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_MspInit+0x44>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a0e      	ldr	r2, [pc, #56]	@ (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x44>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b16:	f001 f805 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <DMA1_Stream5_IRQHandler+0x10>)
 8000b26:	f001 faf3 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200003e0 	.word	0x200003e0

08000b34 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <DMA1_Stream6_IRQHandler+0x10>)
 8000b3a:	f001 fae9 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000440 	.word	0x20000440

08000b48 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000b4e:	f003 fc8d 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000bc 	.word	0x200000bc

08000b5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b62:	f003 fc83 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000bc 	.word	0x200000bc

08000b70 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b76:	f003 fc79 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000bc 	.word	0x200000bc

08000b84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <TIM1_CC_IRQHandler+0x10>)
 8000b8a:	f003 fc6f 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000bc 	.word	0x200000bc

08000b98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <TIM2_IRQHandler+0x10>)
 8000b9e:	f003 fc65 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000108 	.word	0x20000108

08000bac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <TIM3_IRQHandler+0x10>)
 8000bb2:	f003 fc5b 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000154 	.word	0x20000154

08000bc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <TIM4_IRQHandler+0x10>)
 8000bc6:	f003 fc51 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200001a0 	.word	0x200001a0

08000bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <USART2_IRQHandler+0x10>)
 8000bda:	f004 fcd3 	bl	8005584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200002d0 	.word	0x200002d0

08000be8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <USART3_IRQHandler+0x10>)
 8000bee:	f004 fcc9 	bl	8005584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000358 	.word	0x20000358

08000bfc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000c02:	f003 fc33 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000284 	.word	0x20000284

08000c10 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c14:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000c16:	f003 fc29 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000284 	.word	0x20000284

08000c24 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c2a:	f003 fc1f 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000284 	.word	0x20000284

08000c38 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <TIM8_CC_IRQHandler+0x10>)
 8000c3e:	f003 fc15 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000284 	.word	0x20000284

08000c4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <TIM5_IRQHandler+0x10>)
 8000c52:	f003 fc0b 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200001ec 	.word	0x200001ec

08000c60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <TIM6_DAC_IRQHandler+0x10>)
 8000c66:	f003 fc01 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000238 	.word	0x20000238

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	@ (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f006 fe26 	bl	80078f4 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20080000 	.word	0x20080000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	200000b8 	.word	0x200000b8
 8000cdc:	20000ad0 	.word	0x20000ad0

08000ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	@ 0x30
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2224      	movs	r2, #36	@ 0x24
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f006 fdac 	bl	8007870 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d22:	4b23      	ldr	r3, [pc, #140]	@ (8000db0 <MX_TIM1_Init+0xac>)
 8000d24:	4a23      	ldr	r2, [pc, #140]	@ (8000db4 <MX_TIM1_Init+0xb0>)
 8000d26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d28:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <MX_TIM1_Init+0xac>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d2e:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <MX_TIM1_Init+0xac>)
 8000d30:	2210      	movs	r2, #16
 8000d32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <MX_TIM1_Init+0xac>)
 8000d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <MX_TIM1_Init+0xac>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_TIM1_Init+0xac>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <MX_TIM1_Init+0xac>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000d5e:	230f      	movs	r3, #15
 8000d60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d66:	2301      	movs	r3, #1
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000d6e:	230f      	movs	r3, #15
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <MX_TIM1_Init+0xac>)
 8000d7a:	f003 fa43 	bl	8004204 <HAL_TIM_Encoder_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000d84:	f7ff fe72 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_TIM1_Init+0xac>)
 8000d9a:	f004 f8db 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000da4:	f7ff fe62 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3730      	adds	r7, #48	@ 0x30
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200000bc 	.word	0x200000bc
 8000db4:	40010000 	.word	0x40010000

08000db8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000dde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000de4:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000de6:	222f      	movs	r2, #47	@ 0x2f
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b24      	ldr	r3, [pc, #144]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000df2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e04:	481d      	ldr	r0, [pc, #116]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000e06:	f003 f8ac 	bl	8003f62 <HAL_TIM_PWM_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e10:	f7ff fe2c 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4816      	ldr	r0, [pc, #88]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000e24:	f004 f896 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e2e:	f7ff fe1d 	bl	8000a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	@ 0x60
 8000e34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	4619      	mov	r1, r3
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000e4a:	f003 fc17 	bl	800467c <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e54:	f7ff fe0a 	bl	8000a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000e60:	f003 fc0c 	bl	800467c <HAL_TIM_PWM_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e6a:	f7ff fdff 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e6e:	4803      	ldr	r0, [pc, #12]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000e70:	f000 fb5a 	bl	8001528 <HAL_TIM_MspPostInit>

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	@ 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000108 	.word	0x20000108

08000e80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	@ 0x30
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2224      	movs	r2, #36	@ 0x24
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f006 fcee 	bl	8007870 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	463b      	mov	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_TIM3_Init+0xa4>)
 8000ea0:	4a21      	ldr	r2, [pc, #132]	@ (8000f28 <MX_TIM3_Init+0xa8>)
 8000ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <MX_TIM3_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <MX_TIM3_Init+0xa4>)
 8000eac:	2210      	movs	r2, #16
 8000eae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <MX_TIM3_Init+0xa4>)
 8000eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_TIM3_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <MX_TIM3_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000edc:	2301      	movs	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <MX_TIM3_Init+0xa4>)
 8000ef0:	f003 f988 	bl	8004204 <HAL_TIM_Encoder_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000efa:	f7ff fdb7 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <MX_TIM3_Init+0xa4>)
 8000f0c:	f004 f822 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000f16:	f7ff fda9 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	@ 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000154 	.word	0x20000154
 8000f28:	40000400 	.word	0x40000400

08000f2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	@ 0x30
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	2224      	movs	r2, #36	@ 0x24
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 fc98 	bl	8007870 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <MX_TIM4_Init+0xa4>)
 8000f4c:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <MX_TIM4_Init+0xa8>)
 8000f4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MX_TIM4_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <MX_TIM4_Init+0xa4>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_TIM4_Init+0xa4>)
 8000f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <MX_TIM4_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_TIM4_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f70:	2303      	movs	r3, #3
 8000f72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000f80:	230f      	movs	r3, #15
 8000f82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000f90:	230f      	movs	r3, #15
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_TIM4_Init+0xa4>)
 8000f9c:	f003 f932 	bl	8004204 <HAL_TIM_Encoder_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000fa6:	f7ff fd61 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <MX_TIM4_Init+0xa4>)
 8000fb8:	f003 ffcc 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000fc2:	f7ff fd53 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3730      	adds	r7, #48	@ 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001a0 	.word	0x200001a0
 8000fd4:	40000800 	.word	0x40000800

08000fd8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <MX_TIM5_Init+0xc4>)
 8000ffe:	4a28      	ldr	r2, [pc, #160]	@ (80010a0 <MX_TIM5_Init+0xc8>)
 8001000:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001002:	4b26      	ldr	r3, [pc, #152]	@ (800109c <MX_TIM5_Init+0xc4>)
 8001004:	222f      	movs	r2, #47	@ 0x2f
 8001006:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b24      	ldr	r3, [pc, #144]	@ (800109c <MX_TIM5_Init+0xc4>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800100e:	4b23      	ldr	r3, [pc, #140]	@ (800109c <MX_TIM5_Init+0xc4>)
 8001010:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001014:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b21      	ldr	r3, [pc, #132]	@ (800109c <MX_TIM5_Init+0xc4>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <MX_TIM5_Init+0xc4>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001022:	481e      	ldr	r0, [pc, #120]	@ (800109c <MX_TIM5_Init+0xc4>)
 8001024:	f002 ff9d 	bl	8003f62 <HAL_TIM_PWM_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800102e:	f7ff fd1d 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4816      	ldr	r0, [pc, #88]	@ (800109c <MX_TIM5_Init+0xc4>)
 8001042:	f003 ff87 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800104c:	f7ff fd0e 	bl	8000a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001050:	2360      	movs	r3, #96	@ 0x60
 8001052:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	480d      	ldr	r0, [pc, #52]	@ (800109c <MX_TIM5_Init+0xc4>)
 8001068:	f003 fb08 	bl	800467c <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001072:	f7ff fcfb 	bl	8000a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	220c      	movs	r2, #12
 800107a:	4619      	mov	r1, r3
 800107c:	4807      	ldr	r0, [pc, #28]	@ (800109c <MX_TIM5_Init+0xc4>)
 800107e:	f003 fafd 	bl	800467c <HAL_TIM_PWM_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001088:	f7ff fcf0 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800108c:	4803      	ldr	r0, [pc, #12]	@ (800109c <MX_TIM5_Init+0xc4>)
 800108e:	f000 fa4b 	bl	8001528 <HAL_TIM_MspPostInit>

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200001ec 	.word	0x200001ec
 80010a0:	40000c00 	.word	0x40000c00

080010a4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <MX_TIM6_Init+0x68>)
 80010b6:	4a16      	ldr	r2, [pc, #88]	@ (8001110 <MX_TIM6_Init+0x6c>)
 80010b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_TIM6_Init+0x68>)
 80010bc:	f242 527f 	movw	r2, #9599	@ 0x257f
 80010c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_TIM6_Init+0x68>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80010c8:	4b10      	ldr	r3, [pc, #64]	@ (800110c <MX_TIM6_Init+0x68>)
 80010ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_TIM6_Init+0x68>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010d6:	480d      	ldr	r0, [pc, #52]	@ (800110c <MX_TIM6_Init+0x68>)
 80010d8:	f002 feec 	bl	8003eb4 <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80010e2:	f7ff fcc3 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	@ (800110c <MX_TIM6_Init+0x68>)
 80010f4:	f003 ff2e 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80010fe:	f7ff fcb5 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000238 	.word	0x20000238
 8001110:	40001000 	.word	0x40001000

08001114 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	@ 0x30
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2224      	movs	r2, #36	@ 0x24
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f006 fba4 	bl	8007870 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001132:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <MX_TIM8_Init+0xac>)
 8001134:	4a23      	ldr	r2, [pc, #140]	@ (80011c4 <MX_TIM8_Init+0xb0>)
 8001136:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001138:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <MX_TIM8_Init+0xac>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800113e:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <MX_TIM8_Init+0xac>)
 8001140:	2210      	movs	r2, #16
 8001142:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001144:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <MX_TIM8_Init+0xac>)
 8001146:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800114a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <MX_TIM8_Init+0xac>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001152:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <MX_TIM8_Init+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <MX_TIM8_Init+0xac>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800115e:	2303      	movs	r3, #3
 8001160:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001166:	2301      	movs	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800116e:	230f      	movs	r3, #15
 8001170:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001176:	2301      	movs	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800117e:	230f      	movs	r3, #15
 8001180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <MX_TIM8_Init+0xac>)
 800118a:	f003 f83b 	bl	8004204 <HAL_TIM_Encoder_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001194:	f7ff fc6a 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <MX_TIM8_Init+0xac>)
 80011aa:	f003 fed3 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80011b4:	f7ff fc5a 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3730      	adds	r7, #48	@ 0x30
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000284 	.word	0x20000284
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b090      	sub	sp, #64	@ 0x40
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a93      	ldr	r2, [pc, #588]	@ (8001434 <HAL_TIM_Encoder_MspInit+0x26c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d149      	bne.n	800127e <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ea:	4b93      	ldr	r3, [pc, #588]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a92      	ldr	r2, [pc, #584]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b90      	ldr	r3, [pc, #576]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001200:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	4b8d      	ldr	r3, [pc, #564]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a8c      	ldr	r2, [pc, #560]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b8a      	ldr	r3, [pc, #552]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
 8001218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF1E11_Pin;
 800121a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800122c:	2301      	movs	r3, #1
 800122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001234:	4619      	mov	r1, r3
 8001236:	4881      	ldr	r0, [pc, #516]	@ (800143c <HAL_TIM_Encoder_MspInit+0x274>)
 8001238:	f001 f9e0 	bl	80025fc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2018      	movs	r0, #24
 8001242:	f000 fd8e 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001246:	2018      	movs	r0, #24
 8001248:	f000 fda7 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2019      	movs	r0, #25
 8001252:	f000 fd86 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001256:	2019      	movs	r0, #25
 8001258:	f000 fd9f 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	201a      	movs	r0, #26
 8001262:	f000 fd7e 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001266:	201a      	movs	r0, #26
 8001268:	f000 fd97 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	201b      	movs	r0, #27
 8001272:	f000 fd76 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001276:	201b      	movs	r0, #27
 8001278:	f000 fd8f 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800127c:	e0d5      	b.n	800142a <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6f      	ldr	r2, [pc, #444]	@ (8001440 <HAL_TIM_Encoder_MspInit+0x278>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d14c      	bne.n	8001322 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001288:	4b6b      	ldr	r3, [pc, #428]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	4a6a      	ldr	r2, [pc, #424]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	6413      	str	r3, [r2, #64]	@ 0x40
 8001294:	4b68      	ldr	r3, [pc, #416]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	623b      	str	r3, [r7, #32]
 800129e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b65      	ldr	r3, [pc, #404]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	4a64      	ldr	r2, [pc, #400]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ac:	4b62      	ldr	r3, [pc, #392]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	4a5e      	ldr	r2, [pc, #376]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 80012d0:	2340      	movs	r3, #64	@ 0x40
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e0:	2302      	movs	r3, #2
 80012e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e8:	4619      	mov	r1, r3
 80012ea:	4856      	ldr	r0, [pc, #344]	@ (8001444 <HAL_TIM_Encoder_MspInit+0x27c>)
 80012ec:	f001 f986 	bl	80025fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 80012f0:	2320      	movs	r3, #32
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001300:	2302      	movs	r3, #2
 8001302:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	484f      	ldr	r0, [pc, #316]	@ (8001448 <HAL_TIM_Encoder_MspInit+0x280>)
 800130c:	f001 f976 	bl	80025fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	201d      	movs	r0, #29
 8001316:	f000 fd24 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800131a:	201d      	movs	r0, #29
 800131c:	f000 fd3d 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 8001320:	e083      	b.n	800142a <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a49      	ldr	r2, [pc, #292]	@ (800144c <HAL_TIM_Encoder_MspInit+0x284>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d131      	bne.n	8001390 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800132c:	4b42      	ldr	r3, [pc, #264]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	4a41      	ldr	r2, [pc, #260]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6413      	str	r3, [r2, #64]	@ 0x40
 8001338:	4b3f      	ldr	r3, [pc, #252]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001344:	4b3c      	ldr	r3, [pc, #240]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	4a3b      	ldr	r2, [pc, #236]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001350:	4b39      	ldr	r3, [pc, #228]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 800135c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800136e:	2302      	movs	r3, #2
 8001370:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001376:	4619      	mov	r1, r3
 8001378:	4835      	ldr	r0, [pc, #212]	@ (8001450 <HAL_TIM_Encoder_MspInit+0x288>)
 800137a:	f001 f93f 	bl	80025fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	201e      	movs	r0, #30
 8001384:	f000 fced 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001388:	201e      	movs	r0, #30
 800138a:	f000 fd06 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 800138e:	e04c      	b.n	800142a <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2f      	ldr	r2, [pc, #188]	@ (8001454 <HAL_TIM_Encoder_MspInit+0x28c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d147      	bne.n	800142a <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800139a:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	4a26      	ldr	r2, [pc, #152]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a6:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a20      	ldr	r2, [pc, #128]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <HAL_TIM_Encoder_MspInit+0x270>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 80013ca:	23c0      	movs	r3, #192	@ 0xc0
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80013da:	2303      	movs	r3, #3
 80013dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e2:	4619      	mov	r1, r3
 80013e4:	481c      	ldr	r0, [pc, #112]	@ (8001458 <HAL_TIM_Encoder_MspInit+0x290>)
 80013e6:	f001 f909 	bl	80025fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	202b      	movs	r0, #43	@ 0x2b
 80013f0:	f000 fcb7 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80013f4:	202b      	movs	r0, #43	@ 0x2b
 80013f6:	f000 fcd0 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	202c      	movs	r0, #44	@ 0x2c
 8001400:	f000 fcaf 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001404:	202c      	movs	r0, #44	@ 0x2c
 8001406:	f000 fcc8 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	202d      	movs	r0, #45	@ 0x2d
 8001410:	f000 fca7 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001414:	202d      	movs	r0, #45	@ 0x2d
 8001416:	f000 fcc0 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	202e      	movs	r0, #46	@ 0x2e
 8001420:	f000 fc9f 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001424:	202e      	movs	r0, #46	@ 0x2e
 8001426:	f000 fcb8 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3740      	adds	r7, #64	@ 0x40
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40010000 	.word	0x40010000
 8001438:	40023800 	.word	0x40023800
 800143c:	40021000 	.word	0x40021000
 8001440:	40000400 	.word	0x40000400
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40000800 	.word	0x40000800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40010400 	.word	0x40010400
 8001458:	40020800 	.word	0x40020800

0800145c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800146c:	d114      	bne.n	8001498 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_TIM_PWM_MspInit+0x78>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <HAL_TIM_PWM_MspInit+0x78>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6413      	str	r3, [r2, #64]	@ 0x40
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_TIM_PWM_MspInit+0x78>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	201c      	movs	r0, #28
 800148c:	f000 fc69 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001490:	201c      	movs	r0, #28
 8001492:	f000 fc82 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001496:	e018      	b.n	80014ca <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM5)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <HAL_TIM_PWM_MspInit+0x7c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d113      	bne.n	80014ca <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <HAL_TIM_PWM_MspInit+0x78>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <HAL_TIM_PWM_MspInit+0x78>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_TIM_PWM_MspInit+0x78>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2032      	movs	r0, #50	@ 0x32
 80014c0:	f000 fc4f 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80014c4:	2032      	movs	r0, #50	@ 0x32
 80014c6:	f000 fc68 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40000c00 	.word	0x40000c00

080014dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d113      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <HAL_TIM_Base_MspInit+0x48>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001524 <HAL_TIM_Base_MspInit+0x48>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_TIM_Base_MspInit+0x48>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2036      	movs	r0, #54	@ 0x36
 800150c:	f000 fc29 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001510:	2036      	movs	r0, #54	@ 0x36
 8001512:	f000 fc42 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40001000 	.word	0x40001000
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001548:	d139      	bne.n	80015be <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <HAL_TIM_MspPostInit+0xe0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a2e      	ldr	r2, [pc, #184]	@ (8001608 <HAL_TIM_MspPostInit+0xe0>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b2c      	ldr	r3, [pc, #176]	@ (8001608 <HAL_TIM_MspPostInit+0xe0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b29      	ldr	r3, [pc, #164]	@ (8001608 <HAL_TIM_MspPostInit+0xe0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a28      	ldr	r2, [pc, #160]	@ (8001608 <HAL_TIM_MspPostInit+0xe0>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <HAL_TIM_MspPostInit+0xe0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 800157a:	2320      	movs	r3, #32
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800158a:	2301      	movs	r3, #1
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	481d      	ldr	r0, [pc, #116]	@ (800160c <HAL_TIM_MspPostInit+0xe4>)
 8001596:	f001 f831 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 800159a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ac:	2301      	movs	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4816      	ldr	r0, [pc, #88]	@ (8001610 <HAL_TIM_MspPostInit+0xe8>)
 80015b8:	f001 f820 	bl	80025fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80015bc:	e020      	b.n	8001600 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM5)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a14      	ldr	r2, [pc, #80]	@ (8001614 <HAL_TIM_MspPostInit+0xec>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d11b      	bne.n	8001600 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_TIM_MspPostInit+0xe0>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_TIM_MspPostInit+0xe0>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_TIM_MspPostInit+0xe0>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 80015e0:	2309      	movs	r3, #9
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015f0:	2302      	movs	r3, #2
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4804      	ldr	r0, [pc, #16]	@ (800160c <HAL_TIM_MspPostInit+0xe4>)
 80015fc:	f000 fffe 	bl	80025fc <HAL_GPIO_Init>
}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	@ 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000
 8001610:	40020400 	.word	0x40020400
 8001614:	40000c00 	.word	0x40000c00

08001618 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800161e:	4a15      	ldr	r2, [pc, #84]	@ (8001674 <MX_USART2_UART_Init+0x5c>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800165c:	f003 fd26 	bl	80050ac <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001666:	f7ff fa01 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002d0 	.word	0x200002d0
 8001674:	40004400 	.word	0x40004400

08001678 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 800167e:	4a15      	ldr	r2, [pc, #84]	@ (80016d4 <MX_USART3_UART_Init+0x5c>)
 8001680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_USART3_UART_Init+0x58>)
 80016bc:	f003 fcf6 	bl	80050ac <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016c6:	f7ff f9d1 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000358 	.word	0x20000358
 80016d4:	40004800 	.word	0x40004800

080016d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0b0      	sub	sp, #192	@ 0xc0
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	2290      	movs	r2, #144	@ 0x90
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f006 f8b9 	bl	8007870 <memset>
  if(uartHandle->Instance==USART2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a79      	ldr	r2, [pc, #484]	@ (80018e8 <HAL_UART_MspInit+0x210>)
 8001704:	4293      	cmp	r3, r2
 8001706:	f040 80a0 	bne.w	800184a <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800170e:	2300      	movs	r3, #0
 8001710:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4618      	mov	r0, r3
 8001718:	f001 ffa4 	bl	8003664 <HAL_RCCEx_PeriphCLKConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001722:	f7ff f9a3 	bl	8000a6c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001726:	4b71      	ldr	r3, [pc, #452]	@ (80018ec <HAL_UART_MspInit+0x214>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a70      	ldr	r2, [pc, #448]	@ (80018ec <HAL_UART_MspInit+0x214>)
 800172c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b6e      	ldr	r3, [pc, #440]	@ (80018ec <HAL_UART_MspInit+0x214>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800173e:	4b6b      	ldr	r3, [pc, #428]	@ (80018ec <HAL_UART_MspInit+0x214>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a6a      	ldr	r2, [pc, #424]	@ (80018ec <HAL_UART_MspInit+0x214>)
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b68      	ldr	r3, [pc, #416]	@ (80018ec <HAL_UART_MspInit+0x214>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001756:	2360      	movs	r3, #96	@ 0x60
 8001758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800176e:	2307      	movs	r3, #7
 8001770:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001774:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001778:	4619      	mov	r1, r3
 800177a:	485d      	ldr	r0, [pc, #372]	@ (80018f0 <HAL_UART_MspInit+0x218>)
 800177c:	f000 ff3e 	bl	80025fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001780:	4b5c      	ldr	r3, [pc, #368]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 8001782:	4a5d      	ldr	r2, [pc, #372]	@ (80018f8 <HAL_UART_MspInit+0x220>)
 8001784:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001786:	4b5b      	ldr	r3, [pc, #364]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 8001788:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800178c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178e:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001794:	4b57      	ldr	r3, [pc, #348]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800179a:	4b56      	ldr	r3, [pc, #344]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 800179c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a2:	4b54      	ldr	r3, [pc, #336]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a8:	4b52      	ldr	r3, [pc, #328]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017ae:	4b51      	ldr	r3, [pc, #324]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017b4:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ba:	4b4e      	ldr	r3, [pc, #312]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017c0:	484c      	ldr	r0, [pc, #304]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 80017c2:	f000 fb05 	bl	8001dd0 <HAL_DMA_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80017cc:	f7ff f94e 	bl	8000a6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a48      	ldr	r2, [pc, #288]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 80017d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80017d6:	4a47      	ldr	r2, [pc, #284]	@ (80018f4 <HAL_UART_MspInit+0x21c>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80017dc:	4b47      	ldr	r3, [pc, #284]	@ (80018fc <HAL_UART_MspInit+0x224>)
 80017de:	4a48      	ldr	r2, [pc, #288]	@ (8001900 <HAL_UART_MspInit+0x228>)
 80017e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017e2:	4b46      	ldr	r3, [pc, #280]	@ (80018fc <HAL_UART_MspInit+0x224>)
 80017e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ea:	4b44      	ldr	r3, [pc, #272]	@ (80018fc <HAL_UART_MspInit+0x224>)
 80017ec:	2240      	movs	r2, #64	@ 0x40
 80017ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f0:	4b42      	ldr	r3, [pc, #264]	@ (80018fc <HAL_UART_MspInit+0x224>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017f6:	4b41      	ldr	r3, [pc, #260]	@ (80018fc <HAL_UART_MspInit+0x224>)
 80017f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017fe:	4b3f      	ldr	r3, [pc, #252]	@ (80018fc <HAL_UART_MspInit+0x224>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001804:	4b3d      	ldr	r3, [pc, #244]	@ (80018fc <HAL_UART_MspInit+0x224>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800180a:	4b3c      	ldr	r3, [pc, #240]	@ (80018fc <HAL_UART_MspInit+0x224>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001810:	4b3a      	ldr	r3, [pc, #232]	@ (80018fc <HAL_UART_MspInit+0x224>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001816:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <HAL_UART_MspInit+0x224>)
 8001818:	2200      	movs	r2, #0
 800181a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800181c:	4837      	ldr	r0, [pc, #220]	@ (80018fc <HAL_UART_MspInit+0x224>)
 800181e:	f000 fad7 	bl	8001dd0 <HAL_DMA_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001828:	f7ff f920 	bl	8000a6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a33      	ldr	r2, [pc, #204]	@ (80018fc <HAL_UART_MspInit+0x224>)
 8001830:	671a      	str	r2, [r3, #112]	@ 0x70
 8001832:	4a32      	ldr	r2, [pc, #200]	@ (80018fc <HAL_UART_MspInit+0x224>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	2026      	movs	r0, #38	@ 0x26
 800183e:	f000 fa90 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001842:	2026      	movs	r0, #38	@ 0x26
 8001844:	f000 faa9 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001848:	e049      	b.n	80018de <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2d      	ldr	r2, [pc, #180]	@ (8001904 <HAL_UART_MspInit+0x22c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d144      	bne.n	80018de <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001858:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800185a:	2300      	movs	r3, #0
 800185c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4618      	mov	r0, r3
 8001864:	f001 fefe 	bl	8003664 <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 800186e:	f7ff f8fd 	bl	8000a6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <HAL_UART_MspInit+0x214>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <HAL_UART_MspInit+0x214>)
 8001878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_UART_MspInit+0x214>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800188a:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <HAL_UART_MspInit+0x214>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <HAL_UART_MspInit+0x214>)
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <HAL_UART_MspInit+0x214>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018bc:	2307      	movs	r3, #7
 80018be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018c6:	4619      	mov	r1, r3
 80018c8:	4809      	ldr	r0, [pc, #36]	@ (80018f0 <HAL_UART_MspInit+0x218>)
 80018ca:	f000 fe97 	bl	80025fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2027      	movs	r0, #39	@ 0x27
 80018d4:	f000 fa45 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018d8:	2027      	movs	r0, #39	@ 0x27
 80018da:	f000 fa5e 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	37c0      	adds	r7, #192	@ 0xc0
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40004400 	.word	0x40004400
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	200003e0 	.word	0x200003e0
 80018f8:	40026088 	.word	0x40026088
 80018fc:	20000440 	.word	0x20000440
 8001900:	400260a0 	.word	0x400260a0
 8001904:	40004800 	.word	0x40004800

08001908 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800190e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001916:	2206      	movs	r2, #6
 8001918:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800191c:	2202      	movs	r2, #2
 800191e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001928:	2202      	movs	r2, #2
 800192a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800192e:	2201      	movs	r2, #1
 8001930:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001940:	2201      	movs	r2, #1
 8001942:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001946:	2200      	movs	r2, #0
 8001948:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800194c:	f001 f81b 	bl	8002986 <HAL_PCD_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001956:	f7ff f889 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200004a0 	.word	0x200004a0

08001964 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0ae      	sub	sp, #184	@ 0xb8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2290      	movs	r2, #144	@ 0x90
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f005 ff73 	bl	8007870 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001992:	d159      	bne.n	8001a48 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001994:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001998:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fe5d 	bl	8003664 <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80019b0:	f7ff f85c 	bl	8000a6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b26      	ldr	r3, [pc, #152]	@ (8001a50 <HAL_PCD_MspInit+0xec>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b8:	4a25      	ldr	r2, [pc, #148]	@ (8001a50 <HAL_PCD_MspInit+0xec>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_PCD_MspInit+0xec>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019cc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80019d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019e6:	230a      	movs	r3, #10
 80019e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4818      	ldr	r0, [pc, #96]	@ (8001a54 <HAL_PCD_MspInit+0xf0>)
 80019f4:	f000 fe02 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4810      	ldr	r0, [pc, #64]	@ (8001a54 <HAL_PCD_MspInit+0xf0>)
 8001a14:	f000 fdf2 	bl	80025fc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_PCD_MspInit+0xec>)
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <HAL_PCD_MspInit+0xec>)
 8001a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a22:	6353      	str	r3, [r2, #52]	@ 0x34
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_PCD_MspInit+0xec>)
 8001a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <HAL_PCD_MspInit+0xec>)
 8001a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a34:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <HAL_PCD_MspInit+0xec>)
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <HAL_PCD_MspInit+0xec>)
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a48:	bf00      	nop
 8001a4a:	37b8      	adds	r7, #184	@ 0xb8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a5c:	f7ff f940 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a86:	f005 ff3b 	bl	8007900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7fe fef7 	bl	800087c <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a9c:	08008144 	.word	0x08008144
  ldr r2, =_sbss
 8001aa0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001aa4:	20000acc 	.word	0x20000acc

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>

08001aaa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aae:	2003      	movs	r0, #3
 8001ab0:	f000 f94c 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f000 f805 	bl	8001ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aba:	f7fe ffdd 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_InitTick+0x54>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_InitTick+0x58>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f967 	bl	8001db6 <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 f92f 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <HAL_InitTick+0x5c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000980 	.word	0x20000980

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000980 	.word	0x20000980

08001b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff ffee 	bl	8001b4c <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d005      	beq.n	8001b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_Delay+0x44>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8a:	bf00      	nop
 8001b8c:	f7ff ffde 	bl	8001b4c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d8f7      	bhi.n	8001b8c <HAL_Delay+0x28>
  {
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <__NVIC_SetPriorityGrouping+0x40>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <__NVIC_SetPriorityGrouping+0x40>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00
 8001bf0:	05fa0000 	.word	0x05fa0000

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	@ (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff8e 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff29 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff3e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff8e 	bl	8001ca0 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff31 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff feb6 	bl	8001b4c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e099      	b.n	8001f20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0c:	e00f      	b.n	8001e2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0e:	f7ff fe9d 	bl	8001b4c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d908      	bls.n	8001e2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e078      	b.n	8001f20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e8      	bne.n	8001e0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <HAL_DMA_Init+0x158>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	4313      	orrs	r3, r2
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
 8001eae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d117      	bne.n	8001ef2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fb15 	bl	8002504 <DMA_CheckFifoParam>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2240      	movs	r2, #64	@ 0x40
 8001ee4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e016      	b.n	8001f20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 facc 	bl	8002498 <DMA_CalcBaseAndBitshift>
 8001f00:	4603      	mov	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	223f      	movs	r2, #63	@ 0x3f
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	e010803f 	.word	0xe010803f

08001f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Start_IT+0x26>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e048      	b.n	8001fe4 <HAL_DMA_Start_IT+0xb8>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d137      	bne.n	8001fd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fa5e 	bl	800243c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	223f      	movs	r2, #63	@ 0x3f
 8001f86:	409a      	lsls	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0216 	orr.w	r2, r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001faa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e005      	b.n	8001fe2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ffa:	f7ff fda7 	bl	8001b4c <HAL_GetTick>
 8001ffe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d008      	beq.n	800201e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2280      	movs	r2, #128	@ 0x80
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e052      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0216 	bic.w	r2, r2, #22
 800202c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800203c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_DMA_Abort+0x62>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0208 	bic.w	r2, r2, #8
 800205c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206e:	e013      	b.n	8002098 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002070:	f7ff fd6c 	bl	8001b4c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b05      	cmp	r3, #5
 800207c:	d90c      	bls.n	8002098 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e015      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e4      	bne.n	8002070 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	223f      	movs	r2, #63	@ 0x3f
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d004      	beq.n	80020ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2280      	movs	r2, #128	@ 0x80
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00c      	b.n	8002104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800211c:	4b8e      	ldr	r3, [pc, #568]	@ (8002358 <HAL_DMA_IRQHandler+0x248>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a8e      	ldr	r2, [pc, #568]	@ (800235c <HAL_DMA_IRQHandler+0x24c>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213a:	2208      	movs	r2, #8
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01a      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002168:	2208      	movs	r2, #8
 800216a:	409a      	lsls	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002180:	2201      	movs	r2, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	2201      	movs	r2, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	2204      	movs	r2, #4
 80021b8:	409a      	lsls	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	2204      	movs	r2, #4
 80021d6:	409a      	lsls	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ec:	2210      	movs	r2, #16
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d043      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03c      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220a:	2210      	movs	r2, #16
 800220c:	409a      	lsls	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d018      	beq.n	8002252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d108      	bne.n	8002240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d024      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
 800223e:	e01f      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e016      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0208 	bic.w	r2, r2, #8
 800226e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002284:	2220      	movs	r2, #32
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 808f 	beq.w	80023b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8087 	beq.w	80023b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	2220      	movs	r2, #32
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d136      	bne.n	8002328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0216 	bic.w	r2, r2, #22
 80022c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_DMA_IRQHandler+0x1da>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0208 	bic.w	r2, r2, #8
 80022f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fe:	223f      	movs	r2, #63	@ 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d07e      	beq.n	800241c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
        }
        return;
 8002326:	e079      	b.n	800241c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01d      	beq.n	8002372 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10d      	bne.n	8002360 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002348:	2b00      	cmp	r3, #0
 800234a:	d031      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
 8002354:	e02c      	b.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
 8002356:	bf00      	nop
 8002358:	20000000 	.word	0x20000000
 800235c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d023      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
 8002370:	e01e      	b.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0210 	bic.w	r2, r2, #16
 800238e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d032      	beq.n	800241e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d022      	beq.n	800240a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2205      	movs	r2, #5
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3301      	adds	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d307      	bcc.n	80023f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f2      	bne.n	80023dc <HAL_DMA_IRQHandler+0x2cc>
 80023f6:	e000      	b.n	80023fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	4798      	blx	r3
 800241a:	e000      	b.n	800241e <HAL_DMA_IRQHandler+0x30e>
        return;
 800241c:	bf00      	nop
    }
  }
}
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002458:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b40      	cmp	r3, #64	@ 0x40
 8002468:	d108      	bne.n	800247c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800247a:	e007      	b.n	800248c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	60da      	str	r2, [r3, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3b10      	subs	r3, #16
 80024a8:	4a13      	ldr	r2, [pc, #76]	@ (80024f8 <DMA_CalcBaseAndBitshift+0x60>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024b2:	4a12      	ldr	r2, [pc, #72]	@ (80024fc <DMA_CalcBaseAndBitshift+0x64>)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d908      	bls.n	80024d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <DMA_CalcBaseAndBitshift+0x68>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	1d1a      	adds	r2, r3, #4
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80024d6:	e006      	b.n	80024e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <DMA_CalcBaseAndBitshift+0x68>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	aaaaaaab 	.word	0xaaaaaaab
 80024fc:	080080f8 	.word	0x080080f8
 8002500:	fffffc00 	.word	0xfffffc00

08002504 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11f      	bne.n	800255e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d856      	bhi.n	80025d2 <DMA_CheckFifoParam+0xce>
 8002524:	a201      	add	r2, pc, #4	@ (adr r2, 800252c <DMA_CheckFifoParam+0x28>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	0800253d 	.word	0x0800253d
 8002530:	0800254f 	.word	0x0800254f
 8002534:	0800253d 	.word	0x0800253d
 8002538:	080025d3 	.word	0x080025d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d046      	beq.n	80025d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254c:	e043      	b.n	80025d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002556:	d140      	bne.n	80025da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255c:	e03d      	b.n	80025da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002566:	d121      	bne.n	80025ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d837      	bhi.n	80025de <DMA_CheckFifoParam+0xda>
 800256e:	a201      	add	r2, pc, #4	@ (adr r2, 8002574 <DMA_CheckFifoParam+0x70>)
 8002570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002574:	08002585 	.word	0x08002585
 8002578:	0800258b 	.word	0x0800258b
 800257c:	08002585 	.word	0x08002585
 8002580:	0800259d 	.word	0x0800259d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      break;
 8002588:	e030      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d025      	beq.n	80025e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259a:	e022      	b.n	80025e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025a4:	d11f      	bne.n	80025e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025aa:	e01c      	b.n	80025e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d903      	bls.n	80025ba <DMA_CheckFifoParam+0xb6>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d003      	beq.n	80025c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025b8:	e018      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      break;
 80025be:	e015      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e00b      	b.n	80025ea <DMA_CheckFifoParam+0xe6>
      break;
 80025d2:	bf00      	nop
 80025d4:	e00a      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025d6:	bf00      	nop
 80025d8:	e008      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e006      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e004      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e002      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;   
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
    }
  } 
  
  return status; 
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop

080025fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	@ 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e175      	b.n	8002908 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8164 	bne.w	8002902 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x56>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80be 	beq.w	8002902 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	4b66      	ldr	r3, [pc, #408]	@ (8002920 <HAL_GPIO_Init+0x324>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	4a65      	ldr	r2, [pc, #404]	@ (8002920 <HAL_GPIO_Init+0x324>)
 800278c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002790:	6453      	str	r3, [r2, #68]	@ 0x44
 8002792:	4b63      	ldr	r3, [pc, #396]	@ (8002920 <HAL_GPIO_Init+0x324>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800279e:	4a61      	ldr	r2, [pc, #388]	@ (8002924 <HAL_GPIO_Init+0x328>)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a58      	ldr	r2, [pc, #352]	@ (8002928 <HAL_GPIO_Init+0x32c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d037      	beq.n	800283a <HAL_GPIO_Init+0x23e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a57      	ldr	r2, [pc, #348]	@ (800292c <HAL_GPIO_Init+0x330>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d031      	beq.n	8002836 <HAL_GPIO_Init+0x23a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a56      	ldr	r2, [pc, #344]	@ (8002930 <HAL_GPIO_Init+0x334>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d02b      	beq.n	8002832 <HAL_GPIO_Init+0x236>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a55      	ldr	r2, [pc, #340]	@ (8002934 <HAL_GPIO_Init+0x338>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d025      	beq.n	800282e <HAL_GPIO_Init+0x232>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a54      	ldr	r2, [pc, #336]	@ (8002938 <HAL_GPIO_Init+0x33c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01f      	beq.n	800282a <HAL_GPIO_Init+0x22e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a53      	ldr	r2, [pc, #332]	@ (800293c <HAL_GPIO_Init+0x340>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d019      	beq.n	8002826 <HAL_GPIO_Init+0x22a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a52      	ldr	r2, [pc, #328]	@ (8002940 <HAL_GPIO_Init+0x344>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_GPIO_Init+0x226>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a51      	ldr	r2, [pc, #324]	@ (8002944 <HAL_GPIO_Init+0x348>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00d      	beq.n	800281e <HAL_GPIO_Init+0x222>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a50      	ldr	r2, [pc, #320]	@ (8002948 <HAL_GPIO_Init+0x34c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d007      	beq.n	800281a <HAL_GPIO_Init+0x21e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4f      	ldr	r2, [pc, #316]	@ (800294c <HAL_GPIO_Init+0x350>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d101      	bne.n	8002816 <HAL_GPIO_Init+0x21a>
 8002812:	2309      	movs	r3, #9
 8002814:	e012      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002816:	230a      	movs	r3, #10
 8002818:	e010      	b.n	800283c <HAL_GPIO_Init+0x240>
 800281a:	2308      	movs	r3, #8
 800281c:	e00e      	b.n	800283c <HAL_GPIO_Init+0x240>
 800281e:	2307      	movs	r3, #7
 8002820:	e00c      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002822:	2306      	movs	r3, #6
 8002824:	e00a      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002826:	2305      	movs	r3, #5
 8002828:	e008      	b.n	800283c <HAL_GPIO_Init+0x240>
 800282a:	2304      	movs	r3, #4
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x240>
 800282e:	2303      	movs	r3, #3
 8002830:	e004      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002832:	2302      	movs	r3, #2
 8002834:	e002      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_GPIO_Init+0x240>
 800283a:	2300      	movs	r3, #0
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f002 0203 	and.w	r2, r2, #3
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	4093      	lsls	r3, r2
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800284c:	4935      	ldr	r1, [pc, #212]	@ (8002924 <HAL_GPIO_Init+0x328>)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285a:	4b3d      	ldr	r3, [pc, #244]	@ (8002950 <HAL_GPIO_Init+0x354>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287e:	4a34      	ldr	r2, [pc, #208]	@ (8002950 <HAL_GPIO_Init+0x354>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <HAL_GPIO_Init+0x354>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a8:	4a29      	ldr	r2, [pc, #164]	@ (8002950 <HAL_GPIO_Init+0x354>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ae:	4b28      	ldr	r3, [pc, #160]	@ (8002950 <HAL_GPIO_Init+0x354>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002950 <HAL_GPIO_Init+0x354>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <HAL_GPIO_Init+0x354>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028fc:	4a14      	ldr	r2, [pc, #80]	@ (8002950 <HAL_GPIO_Init+0x354>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3301      	adds	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2b0f      	cmp	r3, #15
 800290c:	f67f ae86 	bls.w	800261c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	40013800 	.word	0x40013800
 8002928:	40020000 	.word	0x40020000
 800292c:	40020400 	.word	0x40020400
 8002930:	40020800 	.word	0x40020800
 8002934:	40020c00 	.word	0x40020c00
 8002938:	40021000 	.word	0x40021000
 800293c:	40021400 	.word	0x40021400
 8002940:	40021800 	.word	0x40021800
 8002944:	40021c00 	.word	0x40021c00
 8002948:	40022000 	.word	0x40022000
 800294c:	40022400 	.word	0x40022400
 8002950:	40013c00 	.word	0x40013c00

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af02      	add	r7, sp, #8
 800298c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e108      	b.n	8002baa <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe ffd6 	bl	8001964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2203      	movs	r2, #3
 80029bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c6:	d102      	bne.n	80029ce <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 f89c 	bl	8006b10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7c1a      	ldrb	r2, [r3, #16]
 80029e0:	f88d 2000 	strb.w	r2, [sp]
 80029e4:	3304      	adds	r3, #4
 80029e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e8:	f004 f838 	bl	8006a5c <USB_CoreInit>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0d5      	b.n	8002baa <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 f894 	bl	8006b32 <USB_SetCurrentMode>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0c6      	b.n	8002baa <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	e04a      	b.n	8002ab8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3315      	adds	r3, #21
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	3314      	adds	r3, #20
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	b298      	uxth	r0, r3
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	332e      	adds	r3, #46	@ 0x2e
 8002a5e:	4602      	mov	r2, r0
 8002a60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3318      	adds	r3, #24
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	331c      	adds	r3, #28
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3320      	adds	r3, #32
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3324      	adds	r3, #36	@ 0x24
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	791b      	ldrb	r3, [r3, #4]
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d3af      	bcc.n	8002a22 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e044      	b.n	8002b52 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	791b      	ldrb	r3, [r3, #4]
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d3b5      	bcc.n	8002ac8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7c1a      	ldrb	r2, [r3, #16]
 8002b64:	f88d 2000 	strb.w	r2, [sp]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6c:	f004 f82e 	bl	8006bcc <USB_DevInit>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e013      	b.n	8002baa <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7b1b      	ldrb	r3, [r3, #12]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d102      	bne.n	8002b9e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f80b 	bl	8002bb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f004 f9e9 	bl	8006f7a <USB_DevDisconnect>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002be2:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	10000003 	.word	0x10000003

08002bfc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40007000 	.word	0x40007000

08002c1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4b23      	ldr	r3, [pc, #140]	@ (8002cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	4a22      	ldr	r2, [pc, #136]	@ (8002cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c32:	4b20      	ldr	r3, [pc, #128]	@ (8002cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c4a:	f7fe ff7f 	bl	8001b4c <HAL_GetTick>
 8002c4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c50:	e009      	b.n	8002c66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c52:	f7fe ff7b 	bl	8001b4c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c60:	d901      	bls.n	8002c66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e022      	b.n	8002cac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c66:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c72:	d1ee      	bne.n	8002c52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c74:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c80:	f7fe ff64 	bl	8001b4c <HAL_GetTick>
 8002c84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c86:	e009      	b.n	8002c9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c88:	f7fe ff60 	bl	8001b4c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c96:	d901      	bls.n	8002c9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e007      	b.n	8002cac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c9c:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ca8:	d1ee      	bne.n	8002c88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40007000 	.word	0x40007000

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e29b      	b.n	800320a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8087 	beq.w	8002dee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce0:	4b96      	ldr	r3, [pc, #600]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d00c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cec:	4b93      	ldr	r3, [pc, #588]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d112      	bne.n	8002d1e <HAL_RCC_OscConfig+0x62>
 8002cf8:	4b90      	ldr	r3, [pc, #576]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d04:	d10b      	bne.n	8002d1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d06:	4b8d      	ldr	r3, [pc, #564]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d06c      	beq.n	8002dec <HAL_RCC_OscConfig+0x130>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d168      	bne.n	8002dec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e275      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x7a>
 8002d28:	4b84      	ldr	r3, [pc, #528]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a83      	ldr	r2, [pc, #524]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e02e      	b.n	8002d94 <HAL_RCC_OscConfig+0xd8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x9c>
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a7e      	ldr	r2, [pc, #504]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7b      	ldr	r2, [pc, #492]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e01d      	b.n	8002d94 <HAL_RCC_OscConfig+0xd8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d62:	4b76      	ldr	r3, [pc, #472]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b73      	ldr	r3, [pc, #460]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a72      	ldr	r2, [pc, #456]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0xd8>
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a6e      	ldr	r2, [pc, #440]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b6c      	ldr	r3, [pc, #432]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6b      	ldr	r2, [pc, #428]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fed6 	bl	8001b4c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe fed2 	bl	8001b4c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e229      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b61      	ldr	r3, [pc, #388]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e014      	b.n	8002dee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fec2 	bl	8001b4c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe febe 	bl	8001b4c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	@ 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e215      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	4b57      	ldr	r3, [pc, #348]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x110>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d069      	beq.n	8002ece <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfa:	4b50      	ldr	r3, [pc, #320]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e06:	4b4d      	ldr	r3, [pc, #308]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d11c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x190>
 8002e12:	4b4a      	ldr	r3, [pc, #296]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1e:	4b47      	ldr	r3, [pc, #284]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_RCC_OscConfig+0x17a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e1e9      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e36:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	493d      	ldr	r1, [pc, #244]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	e040      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d023      	beq.n	8002e9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e54:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a38      	ldr	r2, [pc, #224]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe fe74 	bl	8001b4c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe fe70 	bl	8001b4c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1c7      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7a:	4b30      	ldr	r3, [pc, #192]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e86:	4b2d      	ldr	r3, [pc, #180]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4929      	ldr	r1, [pc, #164]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]
 8002e9a:	e018      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9c:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a26      	ldr	r2, [pc, #152]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fe50 	bl	8001b4c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fe fe4c 	bl	8001b4c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1a3      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d038      	beq.n	8002f4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d019      	beq.n	8002f16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b16      	ldr	r3, [pc, #88]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee6:	4a15      	ldr	r2, [pc, #84]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fe fe2d 	bl	8001b4c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe fe29 	bl	8001b4c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e180      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x23a>
 8002f14:	e01a      	b.n	8002f4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f16:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1a:	4a08      	ldr	r2, [pc, #32]	@ (8002f3c <HAL_RCC_OscConfig+0x280>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe fe13 	bl	8001b4c <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fe fe0f 	bl	8001b4c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d903      	bls.n	8002f40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e166      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
 8002f3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	4b92      	ldr	r3, [pc, #584]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ee      	bne.n	8002f2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a4 	beq.w	80030a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b8c      	ldr	r3, [pc, #560]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b89      	ldr	r3, [pc, #548]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	4a88      	ldr	r2, [pc, #544]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f72:	4b86      	ldr	r3, [pc, #536]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f82:	4b83      	ldr	r3, [pc, #524]	@ (8003190 <HAL_RCC_OscConfig+0x4d4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d118      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f8e:	4b80      	ldr	r3, [pc, #512]	@ (8003190 <HAL_RCC_OscConfig+0x4d4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7f      	ldr	r2, [pc, #508]	@ (8003190 <HAL_RCC_OscConfig+0x4d4>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fdd7 	bl	8001b4c <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7fe fdd3 	bl	8001b4c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b64      	cmp	r3, #100	@ 0x64
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e12a      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb4:	4b76      	ldr	r3, [pc, #472]	@ (8003190 <HAL_RCC_OscConfig+0x4d4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x31a>
 8002fc8:	4b70      	ldr	r3, [pc, #448]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a6f      	ldr	r2, [pc, #444]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	e02d      	b.n	8003032 <HAL_RCC_OscConfig+0x376>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x33c>
 8002fde:	4b6b      	ldr	r3, [pc, #428]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	4a6a      	ldr	r2, [pc, #424]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fea:	4b68      	ldr	r3, [pc, #416]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fee:	4a67      	ldr	r2, [pc, #412]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff6:	e01c      	b.n	8003032 <HAL_RCC_OscConfig+0x376>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b05      	cmp	r3, #5
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x35e>
 8003000:	4b62      	ldr	r3, [pc, #392]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	4a61      	ldr	r2, [pc, #388]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	6713      	str	r3, [r2, #112]	@ 0x70
 800300c:	4b5f      	ldr	r3, [pc, #380]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003010:	4a5e      	ldr	r2, [pc, #376]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	@ 0x70
 8003018:	e00b      	b.n	8003032 <HAL_RCC_OscConfig+0x376>
 800301a:	4b5c      	ldr	r3, [pc, #368]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	4a5b      	ldr	r2, [pc, #364]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6713      	str	r3, [r2, #112]	@ 0x70
 8003026:	4b59      	ldr	r3, [pc, #356]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302a:	4a58      	ldr	r2, [pc, #352]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d015      	beq.n	8003066 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7fe fd87 	bl	8001b4c <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	e00a      	b.n	8003058 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7fe fd83 	bl	8001b4c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0d8      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	4b4c      	ldr	r3, [pc, #304]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ee      	beq.n	8003042 <HAL_RCC_OscConfig+0x386>
 8003064:	e014      	b.n	8003090 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fe fd71 	bl	8001b4c <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe fd6d 	bl	8001b4c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e0c2      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003084:	4b41      	ldr	r3, [pc, #260]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ee      	bne.n	800306e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003096:	4b3d      	ldr	r3, [pc, #244]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a3c      	ldr	r2, [pc, #240]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 800309c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80ae 	beq.w	8003208 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ac:	4b37      	ldr	r3, [pc, #220]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d06d      	beq.n	8003194 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d14b      	bne.n	8003158 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c0:	4b32      	ldr	r3, [pc, #200]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a31      	ldr	r2, [pc, #196]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 80030c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fd3e 	bl	8001b4c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fe fd3a 	bl	8001b4c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e091      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	4b29      	ldr	r3, [pc, #164]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	019b      	lsls	r3, r3, #6
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	3b01      	subs	r3, #1
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	491b      	ldr	r1, [pc, #108]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe fd0c 	bl	8001b4c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fd08 	bl	8001b4c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e05f      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x47c>
 8003156:	e057      	b.n	8003208 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003158:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a0b      	ldr	r2, [pc, #44]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fcf2 	bl	8001b4c <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fcee 	bl	8001b4c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e045      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	4b03      	ldr	r3, [pc, #12]	@ (800318c <HAL_RCC_OscConfig+0x4d0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x4b0>
 800318a:	e03d      	b.n	8003208 <HAL_RCC_OscConfig+0x54c>
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003194:	4b1f      	ldr	r3, [pc, #124]	@ (8003214 <HAL_RCC_OscConfig+0x558>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d030      	beq.n	8003204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d129      	bne.n	8003204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d122      	bne.n	8003204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d119      	bne.n	8003204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	3b01      	subs	r3, #1
 80031de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d10f      	bne.n	8003204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800

08003218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0d0      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b6a      	ldr	r3, [pc, #424]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d910      	bls.n	8003260 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b67      	ldr	r3, [pc, #412]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 020f 	bic.w	r2, r3, #15
 8003246:	4965      	ldr	r1, [pc, #404]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b63      	ldr	r3, [pc, #396]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0b8      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003278:	4b59      	ldr	r3, [pc, #356]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a58      	ldr	r2, [pc, #352]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 800327e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003290:	4b53      	ldr	r3, [pc, #332]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003296:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800329a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b50      	ldr	r3, [pc, #320]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	494d      	ldr	r1, [pc, #308]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d040      	beq.n	800333c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d115      	bne.n	80032fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e07f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	4b41      	ldr	r3, [pc, #260]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e073      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	4b3d      	ldr	r3, [pc, #244]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e06b      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b39      	ldr	r3, [pc, #228]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4936      	ldr	r1, [pc, #216]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330c:	f7fe fc1e 	bl	8001b4c <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fc1a 	bl	8001b4c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e053      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b2d      	ldr	r3, [pc, #180]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b27      	ldr	r3, [pc, #156]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d210      	bcs.n	800336c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b24      	ldr	r3, [pc, #144]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	4922      	ldr	r1, [pc, #136]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b20      	ldr	r3, [pc, #128]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e032      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4916      	ldr	r1, [pc, #88]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003396:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	490e      	ldr	r1, [pc, #56]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033aa:	f000 f821 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	490a      	ldr	r1, [pc, #40]	@ (80033e4 <HAL_RCC_ClockConfig+0x1cc>)
 80033bc:	5ccb      	ldrb	r3, [r1, r3]
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	4a09      	ldr	r2, [pc, #36]	@ (80033e8 <HAL_RCC_ClockConfig+0x1d0>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_RCC_ClockConfig+0x1d4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fb7a 	bl	8001ac4 <HAL_InitTick>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023c00 	.word	0x40023c00
 80033e0:	40023800 	.word	0x40023800
 80033e4:	080080e0 	.word	0x080080e0
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f4:	b094      	sub	sp, #80	@ 0x50
 80033f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fc:	2300      	movs	r3, #0
 80033fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003400:	2300      	movs	r3, #0
 8003402:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003408:	4b79      	ldr	r3, [pc, #484]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b08      	cmp	r3, #8
 8003412:	d00d      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x40>
 8003414:	2b08      	cmp	r3, #8
 8003416:	f200 80e1 	bhi.w	80035dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x34>
 800341e:	2b04      	cmp	r3, #4
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x3a>
 8003422:	e0db      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b73      	ldr	r3, [pc, #460]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003426:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003428:	e0db      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800342a:	4b73      	ldr	r3, [pc, #460]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800342c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800342e:	e0d8      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003430:	4b6f      	ldr	r3, [pc, #444]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003438:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800343a:	4b6d      	ldr	r3, [pc, #436]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d063      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003446:	4b6a      	ldr	r3, [pc, #424]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	2200      	movs	r2, #0
 800344e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003450:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003458:	633b      	str	r3, [r7, #48]	@ 0x30
 800345a:	2300      	movs	r3, #0
 800345c:	637b      	str	r3, [r7, #52]	@ 0x34
 800345e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003462:	4622      	mov	r2, r4
 8003464:	462b      	mov	r3, r5
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	0159      	lsls	r1, r3, #5
 8003470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003474:	0150      	lsls	r0, r2, #5
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4621      	mov	r1, r4
 800347c:	1a51      	subs	r1, r2, r1
 800347e:	6139      	str	r1, [r7, #16]
 8003480:	4629      	mov	r1, r5
 8003482:	eb63 0301 	sbc.w	r3, r3, r1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003494:	4659      	mov	r1, fp
 8003496:	018b      	lsls	r3, r1, #6
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349e:	4651      	mov	r1, sl
 80034a0:	018a      	lsls	r2, r1, #6
 80034a2:	4651      	mov	r1, sl
 80034a4:	ebb2 0801 	subs.w	r8, r2, r1
 80034a8:	4659      	mov	r1, fp
 80034aa:	eb63 0901 	sbc.w	r9, r3, r1
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034c2:	4690      	mov	r8, r2
 80034c4:	4699      	mov	r9, r3
 80034c6:	4623      	mov	r3, r4
 80034c8:	eb18 0303 	adds.w	r3, r8, r3
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	462b      	mov	r3, r5
 80034d0:	eb49 0303 	adc.w	r3, r9, r3
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034e2:	4629      	mov	r1, r5
 80034e4:	024b      	lsls	r3, r1, #9
 80034e6:	4621      	mov	r1, r4
 80034e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034ec:	4621      	mov	r1, r4
 80034ee:	024a      	lsls	r2, r1, #9
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034f6:	2200      	movs	r2, #0
 80034f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003500:	f7fc fef6 	bl	80002f0 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800350c:	e058      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350e:	4b38      	ldr	r3, [pc, #224]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	099b      	lsrs	r3, r3, #6
 8003514:	2200      	movs	r2, #0
 8003516:	4618      	mov	r0, r3
 8003518:	4611      	mov	r1, r2
 800351a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	2300      	movs	r3, #0
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
 8003524:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003528:	4642      	mov	r2, r8
 800352a:	464b      	mov	r3, r9
 800352c:	f04f 0000 	mov.w	r0, #0
 8003530:	f04f 0100 	mov.w	r1, #0
 8003534:	0159      	lsls	r1, r3, #5
 8003536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800353a:	0150      	lsls	r0, r2, #5
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4641      	mov	r1, r8
 8003542:	ebb2 0a01 	subs.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb63 0b01 	sbc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003558:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800355c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003560:	ebb2 040a 	subs.w	r4, r2, sl
 8003564:	eb63 050b 	sbc.w	r5, r3, fp
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	00eb      	lsls	r3, r5, #3
 8003572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003576:	00e2      	lsls	r2, r4, #3
 8003578:	4614      	mov	r4, r2
 800357a:	461d      	mov	r5, r3
 800357c:	4643      	mov	r3, r8
 800357e:	18e3      	adds	r3, r4, r3
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	464b      	mov	r3, r9
 8003584:	eb45 0303 	adc.w	r3, r5, r3
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003596:	4629      	mov	r1, r5
 8003598:	028b      	lsls	r3, r1, #10
 800359a:	4621      	mov	r1, r4
 800359c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035a0:	4621      	mov	r1, r4
 80035a2:	028a      	lsls	r2, r1, #10
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035aa:	2200      	movs	r2, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	61fa      	str	r2, [r7, #28]
 80035b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b4:	f7fc fe9c 	bl	80002f0 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035da:	e002      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3750      	adds	r7, #80	@ 0x50
 80035e8:	46bd      	mov	sp, r7
 80035ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	007a1200 	.word	0x007a1200

080035fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_RCC_GetHCLKFreq+0x14>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000000 	.word	0x20000000

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003618:	f7ff fff0 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	0a9b      	lsrs	r3, r3, #10
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4903      	ldr	r1, [pc, #12]	@ (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	080080f0 	.word	0x080080f0

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003640:	f7ff ffdc 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	@ (800365c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0b5b      	lsrs	r3, r3, #13
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	@ (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	080080f0 	.word	0x080080f0

08003664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800368c:	4b69      	ldr	r3, [pc, #420]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a68      	ldr	r2, [pc, #416]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003696:	6093      	str	r3, [r2, #8]
 8003698:	4b66      	ldr	r3, [pc, #408]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a0:	4964      	ldr	r1, [pc, #400]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d017      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036be:	4b5d      	ldr	r3, [pc, #372]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	4959      	ldr	r1, [pc, #356]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036dc:	d101      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036de:	2301      	movs	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036ea:	2301      	movs	r3, #1
 80036ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d017      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003700:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	494a      	ldr	r1, [pc, #296]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003718:	d101      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800371a:	2301      	movs	r3, #1
 800371c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 808b 	beq.w	800385e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003748:	4b3a      	ldr	r3, [pc, #232]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	4a39      	ldr	r2, [pc, #228]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003752:	6413      	str	r3, [r2, #64]	@ 0x40
 8003754:	4b37      	ldr	r3, [pc, #220]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003760:	4b35      	ldr	r3, [pc, #212]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a34      	ldr	r2, [pc, #208]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fe f9ee 	bl	8001b4c <HAL_GetTick>
 8003770:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fe f9ea 	bl	8001b4c <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	@ 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e38f      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003786:	4b2c      	ldr	r3, [pc, #176]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003792:	4b28      	ldr	r3, [pc, #160]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d035      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d02e      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b0:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037be:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037d2:	4a18      	ldr	r2, [pc, #96]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037d8:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d114      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe f9b2 	bl	8001b4c <HAL_GetTick>
 80037e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ea:	e00a      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7fe f9ae 	bl	8001b4c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e351      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	4b0c      	ldr	r3, [pc, #48]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ee      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800381a:	d111      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003828:	4b04      	ldr	r3, [pc, #16]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800382a:	400b      	ands	r3, r1
 800382c:	4901      	ldr	r1, [pc, #4]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
 8003832:	e00b      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003834:	40023800 	.word	0x40023800
 8003838:	40007000 	.word	0x40007000
 800383c:	0ffffcff 	.word	0x0ffffcff
 8003840:	4bac      	ldr	r3, [pc, #688]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4aab      	ldr	r2, [pc, #684]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003846:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800384a:	6093      	str	r3, [r2, #8]
 800384c:	4ba9      	ldr	r3, [pc, #676]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	49a6      	ldr	r1, [pc, #664]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385a:	4313      	orrs	r3, r2
 800385c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d010      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800386a:	4ba2      	ldr	r3, [pc, #648]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003870:	4aa0      	ldr	r2, [pc, #640]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003876:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800387a:	4b9e      	ldr	r3, [pc, #632]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	499b      	ldr	r1, [pc, #620]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003898:	4b96      	ldr	r3, [pc, #600]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a6:	4993      	ldr	r1, [pc, #588]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038ba:	4b8e      	ldr	r3, [pc, #568]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038c8:	498a      	ldr	r1, [pc, #552]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038dc:	4b85      	ldr	r3, [pc, #532]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ea:	4982      	ldr	r1, [pc, #520]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038fe:	4b7d      	ldr	r3, [pc, #500]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003904:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390c:	4979      	ldr	r1, [pc, #484]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003920:	4b74      	ldr	r3, [pc, #464]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	4971      	ldr	r1, [pc, #452]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003942:	4b6c      	ldr	r3, [pc, #432]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003948:	f023 020c 	bic.w	r2, r3, #12
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003950:	4968      	ldr	r1, [pc, #416]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003964:	4b63      	ldr	r3, [pc, #396]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	4960      	ldr	r1, [pc, #384]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003986:	4b5b      	ldr	r3, [pc, #364]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003994:	4957      	ldr	r1, [pc, #348]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039a8:	4b52      	ldr	r3, [pc, #328]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b6:	494f      	ldr	r1, [pc, #316]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039ca:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	4946      	ldr	r1, [pc, #280]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039ec:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fa:	493e      	ldr	r1, [pc, #248]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a0e:	4b39      	ldr	r3, [pc, #228]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1c:	4935      	ldr	r1, [pc, #212]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a30:	4b30      	ldr	r3, [pc, #192]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a3e:	492d      	ldr	r1, [pc, #180]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d011      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a52:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a58:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a60:	4924      	ldr	r1, [pc, #144]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a70:	d101      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a92:	4b18      	ldr	r3, [pc, #96]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a98:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa0:	4914      	ldr	r1, [pc, #80]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac4:	490b      	ldr	r1, [pc, #44]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00f      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ad8:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ade:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae8:	4902      	ldr	r1, [pc, #8]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003af0:	e002      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00b      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b04:	4b8a      	ldr	r3, [pc, #552]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b14:	4986      	ldr	r1, [pc, #536]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b28:	4b81      	ldr	r3, [pc, #516]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b2e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b38:	497d      	ldr	r1, [pc, #500]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d006      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80d6 	beq.w	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b54:	4b76      	ldr	r3, [pc, #472]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a75      	ldr	r2, [pc, #468]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b60:	f7fd fff4 	bl	8001b4c <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b68:	f7fd fff0 	bl	8001b4c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	@ 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e195      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d021      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d11d      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b9a:	4b65      	ldr	r3, [pc, #404]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ba8:	4b61      	ldr	r3, [pc, #388]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bae:	0e1b      	lsrs	r3, r3, #24
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	019a      	lsls	r2, r3, #6
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	071b      	lsls	r3, r3, #28
 8003bce:	4958      	ldr	r1, [pc, #352]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d004      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02e      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c00:	d129      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c02:	4b4b      	ldr	r3, [pc, #300]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c10:	4b47      	ldr	r3, [pc, #284]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c16:	0f1b      	lsrs	r3, r3, #28
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	019a      	lsls	r2, r3, #6
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	041b      	lsls	r3, r3, #16
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	071b      	lsls	r3, r3, #28
 8003c36:	493e      	ldr	r1, [pc, #248]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c44:	f023 021f 	bic.w	r2, r3, #31
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	4938      	ldr	r1, [pc, #224]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01d      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c62:	4b33      	ldr	r3, [pc, #204]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c68:	0e1b      	lsrs	r3, r3, #24
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c70:	4b2f      	ldr	r3, [pc, #188]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c76:	0f1b      	lsrs	r3, r3, #28
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	019a      	lsls	r2, r3, #6
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	061b      	lsls	r3, r3, #24
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	4926      	ldr	r1, [pc, #152]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d011      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	019a      	lsls	r2, r3, #6
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	071b      	lsls	r3, r3, #28
 8003cc6:	491a      	ldr	r1, [pc, #104]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cce:	4b18      	ldr	r3, [pc, #96]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cda:	f7fd ff37 	bl	8001b4c <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ce2:	f7fd ff33 	bl	8001b4c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b64      	cmp	r3, #100	@ 0x64
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e0d8      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	f040 80ce 	bne.w	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d08:	4b09      	ldr	r3, [pc, #36]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a08      	ldr	r2, [pc, #32]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fd ff1a 	bl	8001b4c <HAL_GetTick>
 8003d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d1c:	f7fd ff16 	bl	8001b4c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	@ 0x64
 8003d28:	d904      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0bb      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d34:	4b5e      	ldr	r3, [pc, #376]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d40:	d0ec      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02e      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d12a      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d6a:	4b51      	ldr	r3, [pc, #324]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d78:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	0f1b      	lsrs	r3, r3, #28
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	019a      	lsls	r2, r3, #6
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	4944      	ldr	r1, [pc, #272]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003da6:	4b42      	ldr	r3, [pc, #264]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	3b01      	subs	r3, #1
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	493d      	ldr	r1, [pc, #244]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d022      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dd4:	d11d      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dd6:	4b36      	ldr	r3, [pc, #216]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ddc:	0e1b      	lsrs	r3, r3, #24
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003de4:	4b32      	ldr	r3, [pc, #200]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dea:	0f1b      	lsrs	r3, r3, #28
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	019a      	lsls	r2, r3, #6
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	041b      	lsls	r3, r3, #16
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	071b      	lsls	r3, r3, #28
 8003e0a:	4929      	ldr	r1, [pc, #164]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e1e:	4b24      	ldr	r3, [pc, #144]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	0e1b      	lsrs	r3, r3, #24
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e2c:	4b20      	ldr	r3, [pc, #128]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	019a      	lsls	r2, r3, #6
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	431a      	orrs	r2, r3
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	071b      	lsls	r3, r3, #28
 8003e52:	4917      	ldr	r1, [pc, #92]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e5a:	4b15      	ldr	r3, [pc, #84]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	4911      	ldr	r1, [pc, #68]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e70:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7c:	f7fd fe66 	bl	8001b4c <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e84:	f7fd fe62 	bl	8001b4c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e007      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ea2:	d1ef      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800

08003eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e049      	b.n	8003f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd fafe 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f000 fcfe 	bl	80048f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e049      	b.n	8004008 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fd fa67 	bl	800145c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f000 fca7 	bl	80048f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_TIM_PWM_Start+0x24>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e03c      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b04      	cmp	r3, #4
 8004038:	d109      	bne.n	800404e <HAL_TIM_PWM_Start+0x3e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b01      	cmp	r3, #1
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e02f      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d109      	bne.n	8004068 <HAL_TIM_PWM_Start+0x58>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e022      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d109      	bne.n	8004082 <HAL_TIM_PWM_Start+0x72>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	e015      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b10      	cmp	r3, #16
 8004086:	d109      	bne.n	800409c <HAL_TIM_PWM_Start+0x8c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e008      	b.n	80040ae <HAL_TIM_PWM_Start+0x9e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e092      	b.n	80041dc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0xb6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c4:	e023      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0xc6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040d4:	e01b      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_PWM_Start+0xd6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040e4:	e013      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_PWM_Start+0xe6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040f4:	e00b      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_PWM_Start+0xf6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004104:	e003      	b.n	800410e <HAL_TIM_PWM_Start+0xfe>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2201      	movs	r2, #1
 8004114:	6839      	ldr	r1, [r7, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fef6 	bl	8004f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a30      	ldr	r2, [pc, #192]	@ (80041e4 <HAL_TIM_PWM_Start+0x1d4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_TIM_PWM_Start+0x120>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2f      	ldr	r2, [pc, #188]	@ (80041e8 <HAL_TIM_PWM_Start+0x1d8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d101      	bne.n	8004134 <HAL_TIM_PWM_Start+0x124>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <HAL_TIM_PWM_Start+0x126>
 8004134:	2300      	movs	r3, #0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004148:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a25      	ldr	r2, [pc, #148]	@ (80041e4 <HAL_TIM_PWM_Start+0x1d4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d022      	beq.n	800419a <HAL_TIM_PWM_Start+0x18a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415c:	d01d      	beq.n	800419a <HAL_TIM_PWM_Start+0x18a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a22      	ldr	r2, [pc, #136]	@ (80041ec <HAL_TIM_PWM_Start+0x1dc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d018      	beq.n	800419a <HAL_TIM_PWM_Start+0x18a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a20      	ldr	r2, [pc, #128]	@ (80041f0 <HAL_TIM_PWM_Start+0x1e0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_TIM_PWM_Start+0x18a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <HAL_TIM_PWM_Start+0x1e4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00e      	beq.n	800419a <HAL_TIM_PWM_Start+0x18a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a19      	ldr	r2, [pc, #100]	@ (80041e8 <HAL_TIM_PWM_Start+0x1d8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_TIM_PWM_Start+0x18a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1b      	ldr	r2, [pc, #108]	@ (80041f8 <HAL_TIM_PWM_Start+0x1e8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_TIM_PWM_Start+0x18a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a19      	ldr	r2, [pc, #100]	@ (80041fc <HAL_TIM_PWM_Start+0x1ec>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d115      	bne.n	80041c6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	4b17      	ldr	r3, [pc, #92]	@ (8004200 <HAL_TIM_PWM_Start+0x1f0>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b06      	cmp	r3, #6
 80041aa:	d015      	beq.n	80041d8 <HAL_TIM_PWM_Start+0x1c8>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b2:	d011      	beq.n	80041d8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	e008      	b.n	80041d8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e000      	b.n	80041da <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40010400 	.word	0x40010400
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40001800 	.word	0x40001800
 8004200:	00010007 	.word	0x00010007

08004204 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e08f      	b.n	8004338 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fc ffcb 	bl	80011c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6899      	ldr	r1, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b3e      	ldr	r3, [pc, #248]	@ (8004340 <HAL_TIM_Encoder_Init+0x13c>)
 8004246:	400b      	ands	r3, r1
 8004248:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f000 fb4d 	bl	80048f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4b31      	ldr	r3, [pc, #196]	@ (8004344 <HAL_TIM_Encoder_Init+0x140>)
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	4313      	orrs	r3, r2
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_TIM_Encoder_Init+0x144>)
 800429a:	4013      	ands	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4b2a      	ldr	r3, [pc, #168]	@ (800434c <HAL_TIM_Encoder_Init+0x148>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	4313      	orrs	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	011a      	lsls	r2, r3, #4
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	031b      	lsls	r3, r3, #12
 80042c4:	4313      	orrs	r3, r2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	4313      	orrs	r3, r2
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	fffebff8 	.word	0xfffebff8
 8004344:	fffffcfc 	.word	0xfffffcfc
 8004348:	fffff3f3 	.word	0xfffff3f3
 800434c:	ffff0f0f 	.word	0xffff0f0f

08004350 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004360:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004368:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004370:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004378:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d110      	bne.n	80043a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d102      	bne.n	800438c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004386:	7b7b      	ldrb	r3, [r7, #13]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e069      	b.n	8004464 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a0:	e031      	b.n	8004406 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d110      	bne.n	80043ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043a8:	7bbb      	ldrb	r3, [r7, #14]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043ae:	7b3b      	ldrb	r3, [r7, #12]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d001      	beq.n	80043b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e055      	b.n	8004464 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043c8:	e01d      	b.n	8004406 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d108      	bne.n	80043e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d0:	7bbb      	ldrb	r3, [r7, #14]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d105      	bne.n	80043e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d6:	7b7b      	ldrb	r3, [r7, #13]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d102      	bne.n	80043e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043dc:	7b3b      	ldrb	r3, [r7, #12]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d001      	beq.n	80043e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e03e      	b.n	8004464 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_TIM_Encoder_Start+0xc4>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d008      	beq.n	8004424 <HAL_TIM_Encoder_Start+0xd4>
 8004412:	e00f      	b.n	8004434 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fd73 	bl	8004f08 <TIM_CCxChannelCmd>
      break;
 8004422:	e016      	b.n	8004452 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2201      	movs	r2, #1
 800442a:	2104      	movs	r1, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fd6b 	bl	8004f08 <TIM_CCxChannelCmd>
      break;
 8004432:	e00e      	b.n	8004452 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2201      	movs	r2, #1
 800443a:	2100      	movs	r1, #0
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fd63 	bl	8004f08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	2104      	movs	r1, #4
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fd5c 	bl	8004f08 <TIM_CCxChannelCmd>
      break;
 8004450:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0201 	orr.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d020      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0202 	mvn.w	r2, #2
 80044a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9fe 	bl	80048b8 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9f0 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fa01 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d020      	beq.n	800451c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01b      	beq.n	800451c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0204 	mvn.w	r2, #4
 80044ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9d8 	bl	80048b8 <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9ca 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f9db 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d020      	beq.n	8004568 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0208 	mvn.w	r2, #8
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2204      	movs	r2, #4
 800453e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f9b2 	bl	80048b8 <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9a4 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f9b5 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	d020      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01b      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0210 	mvn.w	r2, #16
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2208      	movs	r2, #8
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f98c 	bl	80048b8 <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f97e 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f98f 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0201 	mvn.w	r2, #1
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc f948 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00c      	beq.n	8004606 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80045fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fd3f 	bl	8005084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00c      	beq.n	800462a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fd37 	bl	8005098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00c      	beq.n	800464e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f949 	bl	80048e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00c      	beq.n	8004672 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f06f 0220 	mvn.w	r2, #32
 800466a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fcff 	bl	8005070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004696:	2302      	movs	r3, #2
 8004698:	e0ff      	b.n	800489a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b14      	cmp	r3, #20
 80046a6:	f200 80f0 	bhi.w	800488a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046aa:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	08004705 	.word	0x08004705
 80046b4:	0800488b 	.word	0x0800488b
 80046b8:	0800488b 	.word	0x0800488b
 80046bc:	0800488b 	.word	0x0800488b
 80046c0:	08004745 	.word	0x08004745
 80046c4:	0800488b 	.word	0x0800488b
 80046c8:	0800488b 	.word	0x0800488b
 80046cc:	0800488b 	.word	0x0800488b
 80046d0:	08004787 	.word	0x08004787
 80046d4:	0800488b 	.word	0x0800488b
 80046d8:	0800488b 	.word	0x0800488b
 80046dc:	0800488b 	.word	0x0800488b
 80046e0:	080047c7 	.word	0x080047c7
 80046e4:	0800488b 	.word	0x0800488b
 80046e8:	0800488b 	.word	0x0800488b
 80046ec:	0800488b 	.word	0x0800488b
 80046f0:	08004809 	.word	0x08004809
 80046f4:	0800488b 	.word	0x0800488b
 80046f8:	0800488b 	.word	0x0800488b
 80046fc:	0800488b 	.word	0x0800488b
 8004700:	08004849 	.word	0x08004849
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f99e 	bl	8004a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0208 	orr.w	r2, r2, #8
 800471e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0204 	bic.w	r2, r2, #4
 800472e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6999      	ldr	r1, [r3, #24]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	619a      	str	r2, [r3, #24]
      break;
 8004742:	e0a5      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f9f0 	bl	8004b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800475e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6999      	ldr	r1, [r3, #24]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	021a      	lsls	r2, r3, #8
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	619a      	str	r2, [r3, #24]
      break;
 8004784:	e084      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fa47 	bl	8004c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0208 	orr.w	r2, r2, #8
 80047a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0204 	bic.w	r2, r2, #4
 80047b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69d9      	ldr	r1, [r3, #28]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	61da      	str	r2, [r3, #28]
      break;
 80047c4:	e064      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fa9d 	bl	8004d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69d9      	ldr	r1, [r3, #28]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	021a      	lsls	r2, r3, #8
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	61da      	str	r2, [r3, #28]
      break;
 8004806:	e043      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fad4 	bl	8004dbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004846:	e023      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fb06 	bl	8004e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004872:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004888:	e002      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
      break;
 800488e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop

080048a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a46      	ldr	r2, [pc, #280]	@ (8004a20 <TIM_Base_SetConfig+0x12c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004912:	d00f      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a43      	ldr	r2, [pc, #268]	@ (8004a24 <TIM_Base_SetConfig+0x130>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a42      	ldr	r2, [pc, #264]	@ (8004a28 <TIM_Base_SetConfig+0x134>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a41      	ldr	r2, [pc, #260]	@ (8004a2c <TIM_Base_SetConfig+0x138>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a40      	ldr	r2, [pc, #256]	@ (8004a30 <TIM_Base_SetConfig+0x13c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d108      	bne.n	8004946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800493a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a35      	ldr	r2, [pc, #212]	@ (8004a20 <TIM_Base_SetConfig+0x12c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d02b      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004954:	d027      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a32      	ldr	r2, [pc, #200]	@ (8004a24 <TIM_Base_SetConfig+0x130>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d023      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a31      	ldr	r2, [pc, #196]	@ (8004a28 <TIM_Base_SetConfig+0x134>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01f      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a30      	ldr	r2, [pc, #192]	@ (8004a2c <TIM_Base_SetConfig+0x138>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01b      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a2f      	ldr	r2, [pc, #188]	@ (8004a30 <TIM_Base_SetConfig+0x13c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d017      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a2e      	ldr	r2, [pc, #184]	@ (8004a34 <TIM_Base_SetConfig+0x140>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2d      	ldr	r2, [pc, #180]	@ (8004a38 <TIM_Base_SetConfig+0x144>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2c      	ldr	r2, [pc, #176]	@ (8004a3c <TIM_Base_SetConfig+0x148>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2b      	ldr	r2, [pc, #172]	@ (8004a40 <TIM_Base_SetConfig+0x14c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2a      	ldr	r2, [pc, #168]	@ (8004a44 <TIM_Base_SetConfig+0x150>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a29      	ldr	r2, [pc, #164]	@ (8004a48 <TIM_Base_SetConfig+0x154>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d108      	bne.n	80049b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a10      	ldr	r2, [pc, #64]	@ (8004a20 <TIM_Base_SetConfig+0x12c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_Base_SetConfig+0xf8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a12      	ldr	r2, [pc, #72]	@ (8004a30 <TIM_Base_SetConfig+0x13c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d103      	bne.n	80049f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f023 0201 	bic.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	611a      	str	r2, [r3, #16]
  }
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40010000 	.word	0x40010000
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00
 8004a30:	40010400 	.word	0x40010400
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40014400 	.word	0x40014400
 8004a3c:	40014800 	.word	0x40014800
 8004a40:	40001800 	.word	0x40001800
 8004a44:	40001c00 	.word	0x40001c00
 8004a48:	40002000 	.word	0x40002000

08004a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f023 0201 	bic.w	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4b2b      	ldr	r3, [pc, #172]	@ (8004b24 <TIM_OC1_SetConfig+0xd8>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0303 	bic.w	r3, r3, #3
 8004a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 0302 	bic.w	r3, r3, #2
 8004a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a21      	ldr	r2, [pc, #132]	@ (8004b28 <TIM_OC1_SetConfig+0xdc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC1_SetConfig+0x64>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a20      	ldr	r2, [pc, #128]	@ (8004b2c <TIM_OC1_SetConfig+0xe0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10c      	bne.n	8004aca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0308 	bic.w	r3, r3, #8
 8004ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a16      	ldr	r2, [pc, #88]	@ (8004b28 <TIM_OC1_SetConfig+0xdc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_OC1_SetConfig+0x8e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <TIM_OC1_SetConfig+0xe0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d111      	bne.n	8004afe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	fffeff8f 	.word	0xfffeff8f
 8004b28:	40010000 	.word	0x40010000
 8004b2c:	40010400 	.word	0x40010400

08004b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f023 0210 	bic.w	r2, r3, #16
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c14 <TIM_OC2_SetConfig+0xe4>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	021b      	lsls	r3, r3, #8
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0320 	bic.w	r3, r3, #32
 8004b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a23      	ldr	r2, [pc, #140]	@ (8004c18 <TIM_OC2_SetConfig+0xe8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_OC2_SetConfig+0x68>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a22      	ldr	r2, [pc, #136]	@ (8004c1c <TIM_OC2_SetConfig+0xec>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10d      	bne.n	8004bb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a18      	ldr	r2, [pc, #96]	@ (8004c18 <TIM_OC2_SetConfig+0xe8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_OC2_SetConfig+0x94>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a17      	ldr	r2, [pc, #92]	@ (8004c1c <TIM_OC2_SetConfig+0xec>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d113      	bne.n	8004bec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	feff8fff 	.word	0xfeff8fff
 8004c18:	40010000 	.word	0x40010000
 8004c1c:	40010400 	.word	0x40010400

08004c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8004d00 <TIM_OC3_SetConfig+0xe0>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0303 	bic.w	r3, r3, #3
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a22      	ldr	r2, [pc, #136]	@ (8004d04 <TIM_OC3_SetConfig+0xe4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_OC3_SetConfig+0x66>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <TIM_OC3_SetConfig+0xe8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10d      	bne.n	8004ca2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a17      	ldr	r2, [pc, #92]	@ (8004d04 <TIM_OC3_SetConfig+0xe4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_OC3_SetConfig+0x92>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a16      	ldr	r2, [pc, #88]	@ (8004d08 <TIM_OC3_SetConfig+0xe8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d113      	bne.n	8004cda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	fffeff8f 	.word	0xfffeff8f
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40010400 	.word	0x40010400

08004d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4b1e      	ldr	r3, [pc, #120]	@ (8004db0 <TIM_OC4_SetConfig+0xa4>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	031b      	lsls	r3, r3, #12
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a13      	ldr	r2, [pc, #76]	@ (8004db4 <TIM_OC4_SetConfig+0xa8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_OC4_SetConfig+0x68>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a12      	ldr	r2, [pc, #72]	@ (8004db8 <TIM_OC4_SetConfig+0xac>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d109      	bne.n	8004d88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	019b      	lsls	r3, r3, #6
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	feff8fff 	.word	0xfeff8fff
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40010400 	.word	0x40010400

08004dbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <TIM_OC5_SetConfig+0x98>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004dfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	041b      	lsls	r3, r3, #16
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a12      	ldr	r2, [pc, #72]	@ (8004e58 <TIM_OC5_SetConfig+0x9c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d003      	beq.n	8004e1a <TIM_OC5_SetConfig+0x5e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a11      	ldr	r2, [pc, #68]	@ (8004e5c <TIM_OC5_SetConfig+0xa0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d109      	bne.n	8004e2e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	fffeff8f 	.word	0xfffeff8f
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40010400 	.word	0x40010400

08004e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8004efc <TIM_OC6_SetConfig+0x9c>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	051b      	lsls	r3, r3, #20
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a13      	ldr	r2, [pc, #76]	@ (8004f00 <TIM_OC6_SetConfig+0xa0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x60>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a12      	ldr	r2, [pc, #72]	@ (8004f04 <TIM_OC6_SetConfig+0xa4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d109      	bne.n	8004ed4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	029b      	lsls	r3, r3, #10
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	feff8fff 	.word	0xfeff8fff
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40010400 	.word	0x40010400

08004f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1a      	ldr	r2, [r3, #32]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e06d      	b.n	8005048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a30      	ldr	r2, [pc, #192]	@ (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004fa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	@ (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fde:	d01d      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800505c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8005064 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a15      	ldr	r2, [pc, #84]	@ (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a16      	ldr	r2, [pc, #88]	@ (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a15      	ldr	r2, [pc, #84]	@ (800506c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d10c      	bne.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005022:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	40010000 	.word	0x40010000
 8005058:	40010400 	.word	0x40010400
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40014000 	.word	0x40014000
 800506c:	40001800 	.word	0x40001800

08005070 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e040      	b.n	8005140 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fc fb02 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2224      	movs	r2, #36	@ 0x24
 80050d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fff0 	bl	80060d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fd89 	bl	8005c10 <UART_SetConfig>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e01b      	b.n	8005140 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f001 f86f 	bl	800621c <UART_CheckIdleState>
 800513e:	4603      	mov	r3, r0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	@ 0x28
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800515c:	2b20      	cmp	r3, #32
 800515e:	d177      	bne.n	8005250 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_UART_Transmit+0x24>
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e070      	b.n	8005252 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2221      	movs	r2, #33	@ 0x21
 800517c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517e:	f7fc fce5 	bl	8001b4c <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519c:	d108      	bne.n	80051b0 <HAL_UART_Transmit+0x68>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e003      	b.n	80051b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051b8:	e02f      	b.n	800521a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	2180      	movs	r1, #128	@ 0x80
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f001 f8d1 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e03b      	b.n	8005252 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	3302      	adds	r3, #2
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e007      	b.n	8005208 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	781a      	ldrb	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3301      	adds	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1c9      	bne.n	80051ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	2140      	movs	r1, #64	@ 0x40
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f001 f89b 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e005      	b.n	8005252 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	@ 0x28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800526e:	2b20      	cmp	r3, #32
 8005270:	d165      	bne.n	800533e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_UART_Transmit_DMA+0x22>
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e05e      	b.n	8005340 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	88fa      	ldrh	r2, [r7, #6]
 8005294:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2221      	movs	r2, #33	@ 0x21
 80052a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d027      	beq.n	80052fe <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b2:	4a25      	ldr	r2, [pc, #148]	@ (8005348 <HAL_UART_Transmit_DMA+0xec>)
 80052b4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ba:	4a24      	ldr	r2, [pc, #144]	@ (800534c <HAL_UART_Transmit_DMA+0xf0>)
 80052bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c2:	4a23      	ldr	r2, [pc, #140]	@ (8005350 <HAL_UART_Transmit_DMA+0xf4>)
 80052c4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ca:	2200      	movs	r2, #0
 80052cc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	4619      	mov	r1, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3328      	adds	r3, #40	@ 0x28
 80052de:	461a      	mov	r2, r3
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	f7fc fe23 	bl	8001f2c <HAL_DMA_Start_IT>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2210      	movs	r2, #16
 80052f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e020      	b.n	8005340 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2240      	movs	r2, #64	@ 0x40
 8005304:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3308      	adds	r3, #8
 800530c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	613b      	str	r3, [r7, #16]
   return(result);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800531c:	627b      	str	r3, [r7, #36]	@ 0x24
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005326:	623a      	str	r2, [r7, #32]
 8005328:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	69f9      	ldr	r1, [r7, #28]
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	61bb      	str	r3, [r7, #24]
   return(result);
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	e000      	b.n	8005340 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800533e:	2302      	movs	r3, #2
  }
}
 8005340:	4618      	mov	r0, r3
 8005342:	3728      	adds	r7, #40	@ 0x28
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	0800669d 	.word	0x0800669d
 800534c:	08006733 	.word	0x08006733
 8005350:	080068b5 	.word	0x080068b5

08005354 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08e      	sub	sp, #56	@ 0x38
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	61fb      	str	r3, [r7, #28]
   return(result);
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005370:	637b      	str	r3, [r7, #52]	@ 0x34
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800537c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e6      	bne.n	800535c <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005398:	2b80      	cmp	r3, #128	@ 0x80
 800539a:	d137      	bne.n	800540c <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053bc:	61ba      	str	r2, [r7, #24]
 80053be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d019      	beq.n	800540c <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053dc:	2200      	movs	r2, #0
 80053de:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fc fe01 	bl	8001fec <HAL_DMA_Abort>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00d      	beq.n	800540c <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fd f815 	bl	8002424 <HAL_DMA_GetError>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d105      	bne.n	800540c <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2210      	movs	r2, #16
 8005404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e007      	b.n	800541c <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3738      	adds	r7, #56	@ 0x38
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b09a      	sub	sp, #104	@ 0x68
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800543a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005440:	667b      	str	r3, [r7, #100]	@ 0x64
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800544a:	657b      	str	r3, [r7, #84]	@ 0x54
 800544c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005450:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e6      	bne.n	800542c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	663b      	str	r3, [r7, #96]	@ 0x60
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800547e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005480:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005484:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005496:	2b01      	cmp	r3, #1
 8005498:	d118      	bne.n	80054cc <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	f023 0310 	bic.w	r3, r3, #16
 80054ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d6:	2b40      	cmp	r3, #64	@ 0x40
 80054d8:	d137      	bne.n	800554a <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3308      	adds	r3, #8
 80054f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054fa:	61ba      	str	r2, [r7, #24]
 80054fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	613b      	str	r3, [r7, #16]
   return(result);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e5      	bne.n	80054da <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005512:	2b00      	cmp	r3, #0
 8005514:	d019      	beq.n	800554a <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551a:	2200      	movs	r2, #0
 800551c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005522:	4618      	mov	r0, r3
 8005524:	f7fc fd62 	bl	8001fec <HAL_DMA_Abort>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00d      	beq.n	800554a <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005532:	4618      	mov	r0, r3
 8005534:	f7fc ff76 	bl	8002424 <HAL_DMA_GetError>
 8005538:	4603      	mov	r3, r0
 800553a:	2b20      	cmp	r3, #32
 800553c:	d105      	bne.n	800554a <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2210      	movs	r2, #16
 8005542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e017      	b.n	800557a <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	220f      	movs	r2, #15
 8005558:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0208 	orr.w	r2, r2, #8
 8005568:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3768      	adds	r7, #104	@ 0x68
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b0ba      	sub	sp, #232	@ 0xe8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80055ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80055b2:	4013      	ands	r3, r2
 80055b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80055b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d115      	bne.n	80055ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00f      	beq.n	80055ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d009      	beq.n	80055ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 82ac 	beq.w	8005b3a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
      }
      return;
 80055ea:	e2a6      	b.n	8005b3a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8117 	beq.w	8005824 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005602:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005606:	4b85      	ldr	r3, [pc, #532]	@ (800581c <HAL_UART_IRQHandler+0x298>)
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 810a 	beq.w	8005824 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d011      	beq.n	8005640 <HAL_UART_IRQHandler+0xbc>
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005636:	f043 0201 	orr.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <HAL_UART_IRQHandler+0xec>
 800564c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00b      	beq.n	8005670 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2202      	movs	r2, #2
 800565e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005666:	f043 0204 	orr.w	r2, r3, #4
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d011      	beq.n	80056a0 <HAL_UART_IRQHandler+0x11c>
 800567c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2204      	movs	r2, #4
 800568e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005696:	f043 0202 	orr.w	r2, r3, #2
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d017      	beq.n	80056dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d105      	bne.n	80056c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2208      	movs	r2, #8
 80056ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d2:	f043 0208 	orr.w	r2, r3, #8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d012      	beq.n	800570e <HAL_UART_IRQHandler+0x18a>
 80056e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00c      	beq.n	800570e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8212 	beq.w	8005b3e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800571a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005748:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005756:	2b40      	cmp	r3, #64	@ 0x40
 8005758:	d005      	beq.n	8005766 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800575a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800575e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005762:	2b00      	cmp	r3, #0
 8005764:	d04f      	beq.n	8005806 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 ff34 	bl	80065d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005776:	2b40      	cmp	r3, #64	@ 0x40
 8005778:	d141      	bne.n	80057fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3308      	adds	r3, #8
 8005780:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005790:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005798:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3308      	adds	r3, #8
 80057a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1d9      	bne.n	800577a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d013      	beq.n	80057f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d2:	4a13      	ldr	r2, [pc, #76]	@ (8005820 <HAL_UART_IRQHandler+0x29c>)
 80057d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fc fc76 	bl	80020cc <HAL_DMA_Abort_IT>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d017      	beq.n	8005816 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f4:	e00f      	b.n	8005816 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9d4 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	e00b      	b.n	8005816 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f9d0 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	e007      	b.n	8005816 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f9cc 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005814:	e193      	b.n	8005b3e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005816:	bf00      	nop
    return;
 8005818:	e191      	b.n	8005b3e <HAL_UART_IRQHandler+0x5ba>
 800581a:	bf00      	nop
 800581c:	04000120 	.word	0x04000120
 8005820:	08006933 	.word	0x08006933

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005828:	2b01      	cmp	r3, #1
 800582a:	f040 814c 	bne.w	8005ac6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8145 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800583c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 813e 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2210      	movs	r2, #16
 8005850:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585c:	2b40      	cmp	r3, #64	@ 0x40
 800585e:	f040 80b6 	bne.w	80059ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800586e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8165 	beq.w	8005b42 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800587e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005882:	429a      	cmp	r2, r3
 8005884:	f080 815d 	bcs.w	8005b42 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800588e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800589c:	f000 8086 	beq.w	80059ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1da      	bne.n	80058a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3308      	adds	r3, #8
 800590a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800590e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005912:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005914:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005916:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e1      	bne.n	80058ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800593c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800594a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800594c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005950:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e3      	bne.n	8005926 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800597a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800597c:	f023 0310 	bic.w	r3, r3, #16
 8005980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800598e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005990:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005994:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800599c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e4      	bne.n	800596c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc fb20 	bl	8001fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fa ff36 	bl	8000838 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059cc:	e0b9      	b.n	8005b42 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80ab 	beq.w	8005b46 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80059f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80a6 	beq.w	8005b46 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e4      	bne.n	80059fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3308      	adds	r3, #8
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a54:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e3      	bne.n	8005a30 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f023 0310 	bic.w	r3, r3, #16
 8005a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	69b9      	ldr	r1, [r7, #24]
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	617b      	str	r3, [r7, #20]
   return(result);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e4      	bne.n	8005a7c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fa feba 	bl	8000838 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ac4:	e03f      	b.n	8005b46 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00e      	beq.n	8005af0 <HAL_UART_IRQHandler+0x56c>
 8005ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ae6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f865 	bl	8005bb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aee:	e02d      	b.n	8005b4c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00e      	beq.n	8005b1a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01c      	beq.n	8005b4a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	4798      	blx	r3
    }
    return;
 8005b18:	e017      	b.n	8005b4a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d012      	beq.n	8005b4c <HAL_UART_IRQHandler+0x5c8>
 8005b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 ff13 	bl	800695e <UART_EndTransmit_IT>
    return;
 8005b38:	e008      	b.n	8005b4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b3a:	bf00      	nop
 8005b3c:	e006      	b.n	8005b4c <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b3e:	bf00      	nop
 8005b40:	e004      	b.n	8005b4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b42:	bf00      	nop
 8005b44:	e002      	b.n	8005b4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b46:	bf00      	nop
 8005b48:	e000      	b.n	8005b4c <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b4a:	bf00      	nop
  }

}
 8005b4c:	37e8      	adds	r7, #232	@ 0xe8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop

08005b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bd8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005be0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4313      	orrs	r3, r2
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4ba6      	ldr	r3, [pc, #664]	@ (8005ed4 <UART_SetConfig+0x2c4>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	6979      	ldr	r1, [r7, #20]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a94      	ldr	r2, [pc, #592]	@ (8005ed8 <UART_SetConfig+0x2c8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d120      	bne.n	8005cce <UART_SetConfig+0xbe>
 8005c8c:	4b93      	ldr	r3, [pc, #588]	@ (8005edc <UART_SetConfig+0x2cc>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d816      	bhi.n	8005cc8 <UART_SetConfig+0xb8>
 8005c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca0 <UART_SetConfig+0x90>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005cbd 	.word	0x08005cbd
 8005ca8:	08005cb7 	.word	0x08005cb7
 8005cac:	08005cc3 	.word	0x08005cc3
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	77fb      	strb	r3, [r7, #31]
 8005cb4:	e150      	b.n	8005f58 <UART_SetConfig+0x348>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	77fb      	strb	r3, [r7, #31]
 8005cba:	e14d      	b.n	8005f58 <UART_SetConfig+0x348>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	77fb      	strb	r3, [r7, #31]
 8005cc0:	e14a      	b.n	8005f58 <UART_SetConfig+0x348>
 8005cc2:	2308      	movs	r3, #8
 8005cc4:	77fb      	strb	r3, [r7, #31]
 8005cc6:	e147      	b.n	8005f58 <UART_SetConfig+0x348>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	77fb      	strb	r3, [r7, #31]
 8005ccc:	e144      	b.n	8005f58 <UART_SetConfig+0x348>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a83      	ldr	r2, [pc, #524]	@ (8005ee0 <UART_SetConfig+0x2d0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d132      	bne.n	8005d3e <UART_SetConfig+0x12e>
 8005cd8:	4b80      	ldr	r3, [pc, #512]	@ (8005edc <UART_SetConfig+0x2cc>)
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b0c      	cmp	r3, #12
 8005ce4:	d828      	bhi.n	8005d38 <UART_SetConfig+0x128>
 8005ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cec <UART_SetConfig+0xdc>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005d39 	.word	0x08005d39
 8005cf4:	08005d39 	.word	0x08005d39
 8005cf8:	08005d39 	.word	0x08005d39
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d39 	.word	0x08005d39
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d39 	.word	0x08005d39
 8005d0c:	08005d27 	.word	0x08005d27
 8005d10:	08005d39 	.word	0x08005d39
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d39 	.word	0x08005d39
 8005d1c:	08005d33 	.word	0x08005d33
 8005d20:	2300      	movs	r3, #0
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e118      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d26:	2302      	movs	r3, #2
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e115      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e112      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d32:	2308      	movs	r3, #8
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e10f      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e10c      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a68      	ldr	r2, [pc, #416]	@ (8005ee4 <UART_SetConfig+0x2d4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d120      	bne.n	8005d8a <UART_SetConfig+0x17a>
 8005d48:	4b64      	ldr	r3, [pc, #400]	@ (8005edc <UART_SetConfig+0x2cc>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d52:	2b30      	cmp	r3, #48	@ 0x30
 8005d54:	d013      	beq.n	8005d7e <UART_SetConfig+0x16e>
 8005d56:	2b30      	cmp	r3, #48	@ 0x30
 8005d58:	d814      	bhi.n	8005d84 <UART_SetConfig+0x174>
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d009      	beq.n	8005d72 <UART_SetConfig+0x162>
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d810      	bhi.n	8005d84 <UART_SetConfig+0x174>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <UART_SetConfig+0x15c>
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d006      	beq.n	8005d78 <UART_SetConfig+0x168>
 8005d6a:	e00b      	b.n	8005d84 <UART_SetConfig+0x174>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e0f2      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d72:	2302      	movs	r3, #2
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e0ef      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e0ec      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e0e9      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d84:	2310      	movs	r3, #16
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	e0e6      	b.n	8005f58 <UART_SetConfig+0x348>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a56      	ldr	r2, [pc, #344]	@ (8005ee8 <UART_SetConfig+0x2d8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d120      	bne.n	8005dd6 <UART_SetConfig+0x1c6>
 8005d94:	4b51      	ldr	r3, [pc, #324]	@ (8005edc <UART_SetConfig+0x2cc>)
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005da0:	d013      	beq.n	8005dca <UART_SetConfig+0x1ba>
 8005da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005da4:	d814      	bhi.n	8005dd0 <UART_SetConfig+0x1c0>
 8005da6:	2b80      	cmp	r3, #128	@ 0x80
 8005da8:	d009      	beq.n	8005dbe <UART_SetConfig+0x1ae>
 8005daa:	2b80      	cmp	r3, #128	@ 0x80
 8005dac:	d810      	bhi.n	8005dd0 <UART_SetConfig+0x1c0>
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <UART_SetConfig+0x1a8>
 8005db2:	2b40      	cmp	r3, #64	@ 0x40
 8005db4:	d006      	beq.n	8005dc4 <UART_SetConfig+0x1b4>
 8005db6:	e00b      	b.n	8005dd0 <UART_SetConfig+0x1c0>
 8005db8:	2300      	movs	r3, #0
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e0cc      	b.n	8005f58 <UART_SetConfig+0x348>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e0c9      	b.n	8005f58 <UART_SetConfig+0x348>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e0c6      	b.n	8005f58 <UART_SetConfig+0x348>
 8005dca:	2308      	movs	r3, #8
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e0c3      	b.n	8005f58 <UART_SetConfig+0x348>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e0c0      	b.n	8005f58 <UART_SetConfig+0x348>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a44      	ldr	r2, [pc, #272]	@ (8005eec <UART_SetConfig+0x2dc>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d125      	bne.n	8005e2c <UART_SetConfig+0x21c>
 8005de0:	4b3e      	ldr	r3, [pc, #248]	@ (8005edc <UART_SetConfig+0x2cc>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dee:	d017      	beq.n	8005e20 <UART_SetConfig+0x210>
 8005df0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df4:	d817      	bhi.n	8005e26 <UART_SetConfig+0x216>
 8005df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dfa:	d00b      	beq.n	8005e14 <UART_SetConfig+0x204>
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e00:	d811      	bhi.n	8005e26 <UART_SetConfig+0x216>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <UART_SetConfig+0x1fe>
 8005e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e0a:	d006      	beq.n	8005e1a <UART_SetConfig+0x20a>
 8005e0c:	e00b      	b.n	8005e26 <UART_SetConfig+0x216>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e0a1      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e14:	2302      	movs	r3, #2
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e09e      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e1a:	2304      	movs	r3, #4
 8005e1c:	77fb      	strb	r3, [r7, #31]
 8005e1e:	e09b      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e20:	2308      	movs	r3, #8
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e098      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e26:	2310      	movs	r3, #16
 8005e28:	77fb      	strb	r3, [r7, #31]
 8005e2a:	e095      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2f      	ldr	r2, [pc, #188]	@ (8005ef0 <UART_SetConfig+0x2e0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d125      	bne.n	8005e82 <UART_SetConfig+0x272>
 8005e36:	4b29      	ldr	r3, [pc, #164]	@ (8005edc <UART_SetConfig+0x2cc>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e44:	d017      	beq.n	8005e76 <UART_SetConfig+0x266>
 8005e46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e4a:	d817      	bhi.n	8005e7c <UART_SetConfig+0x26c>
 8005e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e50:	d00b      	beq.n	8005e6a <UART_SetConfig+0x25a>
 8005e52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e56:	d811      	bhi.n	8005e7c <UART_SetConfig+0x26c>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <UART_SetConfig+0x254>
 8005e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e60:	d006      	beq.n	8005e70 <UART_SetConfig+0x260>
 8005e62:	e00b      	b.n	8005e7c <UART_SetConfig+0x26c>
 8005e64:	2301      	movs	r3, #1
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e076      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e073      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e70:	2304      	movs	r3, #4
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e070      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e76:	2308      	movs	r3, #8
 8005e78:	77fb      	strb	r3, [r7, #31]
 8005e7a:	e06d      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e06a      	b.n	8005f58 <UART_SetConfig+0x348>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef4 <UART_SetConfig+0x2e4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d138      	bne.n	8005efe <UART_SetConfig+0x2ee>
 8005e8c:	4b13      	ldr	r3, [pc, #76]	@ (8005edc <UART_SetConfig+0x2cc>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e9a:	d017      	beq.n	8005ecc <UART_SetConfig+0x2bc>
 8005e9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ea0:	d82a      	bhi.n	8005ef8 <UART_SetConfig+0x2e8>
 8005ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea6:	d00b      	beq.n	8005ec0 <UART_SetConfig+0x2b0>
 8005ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eac:	d824      	bhi.n	8005ef8 <UART_SetConfig+0x2e8>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <UART_SetConfig+0x2aa>
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb6:	d006      	beq.n	8005ec6 <UART_SetConfig+0x2b6>
 8005eb8:	e01e      	b.n	8005ef8 <UART_SetConfig+0x2e8>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e04b      	b.n	8005f58 <UART_SetConfig+0x348>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e048      	b.n	8005f58 <UART_SetConfig+0x348>
 8005ec6:	2304      	movs	r3, #4
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e045      	b.n	8005f58 <UART_SetConfig+0x348>
 8005ecc:	2308      	movs	r3, #8
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e042      	b.n	8005f58 <UART_SetConfig+0x348>
 8005ed2:	bf00      	nop
 8005ed4:	efff69f3 	.word	0xefff69f3
 8005ed8:	40011000 	.word	0x40011000
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	40004400 	.word	0x40004400
 8005ee4:	40004800 	.word	0x40004800
 8005ee8:	40004c00 	.word	0x40004c00
 8005eec:	40005000 	.word	0x40005000
 8005ef0:	40011400 	.word	0x40011400
 8005ef4:	40007800 	.word	0x40007800
 8005ef8:	2310      	movs	r3, #16
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e02c      	b.n	8005f58 <UART_SetConfig+0x348>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a72      	ldr	r2, [pc, #456]	@ (80060cc <UART_SetConfig+0x4bc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d125      	bne.n	8005f54 <UART_SetConfig+0x344>
 8005f08:	4b71      	ldr	r3, [pc, #452]	@ (80060d0 <UART_SetConfig+0x4c0>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f16:	d017      	beq.n	8005f48 <UART_SetConfig+0x338>
 8005f18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f1c:	d817      	bhi.n	8005f4e <UART_SetConfig+0x33e>
 8005f1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f22:	d00b      	beq.n	8005f3c <UART_SetConfig+0x32c>
 8005f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f28:	d811      	bhi.n	8005f4e <UART_SetConfig+0x33e>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <UART_SetConfig+0x326>
 8005f2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f32:	d006      	beq.n	8005f42 <UART_SetConfig+0x332>
 8005f34:	e00b      	b.n	8005f4e <UART_SetConfig+0x33e>
 8005f36:	2300      	movs	r3, #0
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e00d      	b.n	8005f58 <UART_SetConfig+0x348>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e00a      	b.n	8005f58 <UART_SetConfig+0x348>
 8005f42:	2304      	movs	r3, #4
 8005f44:	77fb      	strb	r3, [r7, #31]
 8005f46:	e007      	b.n	8005f58 <UART_SetConfig+0x348>
 8005f48:	2308      	movs	r3, #8
 8005f4a:	77fb      	strb	r3, [r7, #31]
 8005f4c:	e004      	b.n	8005f58 <UART_SetConfig+0x348>
 8005f4e:	2310      	movs	r3, #16
 8005f50:	77fb      	strb	r3, [r7, #31]
 8005f52:	e001      	b.n	8005f58 <UART_SetConfig+0x348>
 8005f54:	2310      	movs	r3, #16
 8005f56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f60:	d15b      	bne.n	800601a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f62:	7ffb      	ldrb	r3, [r7, #31]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d828      	bhi.n	8005fba <UART_SetConfig+0x3aa>
 8005f68:	a201      	add	r2, pc, #4	@ (adr r2, 8005f70 <UART_SetConfig+0x360>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	08005fbb 	.word	0x08005fbb
 8005f80:	08005fab 	.word	0x08005fab
 8005f84:	08005fbb 	.word	0x08005fbb
 8005f88:	08005fbb 	.word	0x08005fbb
 8005f8c:	08005fbb 	.word	0x08005fbb
 8005f90:	08005fb3 	.word	0x08005fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f94:	f7fd fb3e 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8005f98:	61b8      	str	r0, [r7, #24]
        break;
 8005f9a:	e013      	b.n	8005fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f9c:	f7fd fb4e 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8005fa0:	61b8      	str	r0, [r7, #24]
        break;
 8005fa2:	e00f      	b.n	8005fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80060d4 <UART_SetConfig+0x4c4>)
 8005fa6:	61bb      	str	r3, [r7, #24]
        break;
 8005fa8:	e00c      	b.n	8005fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005faa:	f7fd fa21 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8005fae:	61b8      	str	r0, [r7, #24]
        break;
 8005fb0:	e008      	b.n	8005fc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fb6:	61bb      	str	r3, [r7, #24]
        break;
 8005fb8:	e004      	b.n	8005fc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	77bb      	strb	r3, [r7, #30]
        break;
 8005fc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d074      	beq.n	80060b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	005a      	lsls	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	441a      	add	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b0f      	cmp	r3, #15
 8005fe4:	d916      	bls.n	8006014 <UART_SetConfig+0x404>
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fec:	d212      	bcs.n	8006014 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f023 030f 	bic.w	r3, r3, #15
 8005ff6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	b29a      	uxth	r2, r3
 8006004:	89fb      	ldrh	r3, [r7, #14]
 8006006:	4313      	orrs	r3, r2
 8006008:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	89fa      	ldrh	r2, [r7, #14]
 8006010:	60da      	str	r2, [r3, #12]
 8006012:	e04f      	b.n	80060b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	77bb      	strb	r3, [r7, #30]
 8006018:	e04c      	b.n	80060b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800601a:	7ffb      	ldrb	r3, [r7, #31]
 800601c:	2b08      	cmp	r3, #8
 800601e:	d828      	bhi.n	8006072 <UART_SetConfig+0x462>
 8006020:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <UART_SetConfig+0x418>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	0800604d 	.word	0x0800604d
 800602c:	08006055 	.word	0x08006055
 8006030:	0800605d 	.word	0x0800605d
 8006034:	08006073 	.word	0x08006073
 8006038:	08006063 	.word	0x08006063
 800603c:	08006073 	.word	0x08006073
 8006040:	08006073 	.word	0x08006073
 8006044:	08006073 	.word	0x08006073
 8006048:	0800606b 	.word	0x0800606b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800604c:	f7fd fae2 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8006050:	61b8      	str	r0, [r7, #24]
        break;
 8006052:	e013      	b.n	800607c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006054:	f7fd faf2 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8006058:	61b8      	str	r0, [r7, #24]
        break;
 800605a:	e00f      	b.n	800607c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800605c:	4b1d      	ldr	r3, [pc, #116]	@ (80060d4 <UART_SetConfig+0x4c4>)
 800605e:	61bb      	str	r3, [r7, #24]
        break;
 8006060:	e00c      	b.n	800607c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006062:	f7fd f9c5 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8006066:	61b8      	str	r0, [r7, #24]
        break;
 8006068:	e008      	b.n	800607c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800606e:	61bb      	str	r3, [r7, #24]
        break;
 8006070:	e004      	b.n	800607c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	77bb      	strb	r3, [r7, #30]
        break;
 800607a:	bf00      	nop
    }

    if (pclk != 0U)
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d018      	beq.n	80060b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	085a      	lsrs	r2, r3, #1
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	441a      	add	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b0f      	cmp	r3, #15
 800609a:	d909      	bls.n	80060b0 <UART_SetConfig+0x4a0>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a2:	d205      	bcs.n	80060b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60da      	str	r2, [r3, #12]
 80060ae:	e001      	b.n	80060b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80060c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40007c00 	.word	0x40007c00
 80060d0:	40023800 	.word	0x40023800
 80060d4:	00f42400 	.word	0x00f42400

080060d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01a      	beq.n	80061ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061d6:	d10a      	bne.n	80061ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b098      	sub	sp, #96	@ 0x60
 8006220:	af02      	add	r7, sp, #8
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800622c:	f7fb fc8e 	bl	8001b4c <HAL_GetTick>
 8006230:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b08      	cmp	r3, #8
 800623e:	d12e      	bne.n	800629e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006240:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006248:	2200      	movs	r2, #0
 800624a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f88c 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d021      	beq.n	800629e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800626e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006278:	647b      	str	r3, [r7, #68]	@ 0x44
 800627a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800627e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e6      	bne.n	800625a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e062      	b.n	8006364 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d149      	bne.n	8006340 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f856 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d03c      	beq.n	8006340 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	623b      	str	r3, [r7, #32]
   return(result);
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80062e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e6      	bne.n	80062c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	60fb      	str	r3, [r7, #12]
   return(result);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006318:	61fa      	str	r2, [r7, #28]
 800631a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	69b9      	ldr	r1, [r7, #24]
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	617b      	str	r3, [r7, #20]
   return(result);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e5      	bne.n	80062f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e011      	b.n	8006364 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3758      	adds	r7, #88	@ 0x58
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	4613      	mov	r3, r2
 800637a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637c:	e04f      	b.n	800641e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d04b      	beq.n	800641e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006386:	f7fb fbe1 	bl	8001b4c <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	429a      	cmp	r2, r3
 8006394:	d302      	bcc.n	800639c <UART_WaitOnFlagUntilTimeout+0x30>
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e04e      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d037      	beq.n	800641e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b80      	cmp	r3, #128	@ 0x80
 80063b2:	d034      	beq.n	800641e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b40      	cmp	r3, #64	@ 0x40
 80063b8:	d031      	beq.n	800641e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d110      	bne.n	80063ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2208      	movs	r2, #8
 80063ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f8ff 	bl	80065d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2208      	movs	r2, #8
 80063da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e029      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063f8:	d111      	bne.n	800641e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f8e5 	bl	80065d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e00f      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4013      	ands	r3, r2
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	bf0c      	ite	eq
 800642e:	2301      	moveq	r3, #1
 8006430:	2300      	movne	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	429a      	cmp	r2, r3
 800643a:	d0a0      	beq.n	800637e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b096      	sub	sp, #88	@ 0x58
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2222      	movs	r2, #34	@ 0x22
 8006470:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006478:	2b00      	cmp	r3, #0
 800647a:	d028      	beq.n	80064ce <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006480:	4a3e      	ldr	r2, [pc, #248]	@ (800657c <UART_Start_Receive_DMA+0x134>)
 8006482:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006488:	4a3d      	ldr	r2, [pc, #244]	@ (8006580 <UART_Start_Receive_DMA+0x138>)
 800648a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006490:	4a3c      	ldr	r2, [pc, #240]	@ (8006584 <UART_Start_Receive_DMA+0x13c>)
 8006492:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006498:	2200      	movs	r2, #0
 800649a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3324      	adds	r3, #36	@ 0x24
 80064a6:	4619      	mov	r1, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ac:	461a      	mov	r2, r3
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	f7fb fd3c 	bl	8001f2c <HAL_DMA_Start_IT>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2210      	movs	r2, #16
 80064be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e051      	b.n	8006572 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d018      	beq.n	8006508 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e6      	bne.n	80064d6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3308      	adds	r3, #8
 8006526:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006528:	637a      	str	r2, [r7, #52]	@ 0x34
 800652a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800652e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e5      	bne.n	8006508 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3308      	adds	r3, #8
 8006542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	613b      	str	r3, [r7, #16]
   return(result);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800655c:	623a      	str	r2, [r7, #32]
 800655e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	69f9      	ldr	r1, [r7, #28]
 8006562:	6a3a      	ldr	r2, [r7, #32]
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	61bb      	str	r3, [r7, #24]
   return(result);
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e5      	bne.n	800653c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3758      	adds	r7, #88	@ 0x58
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	0800674f 	.word	0x0800674f
 8006580:	08006877 	.word	0x08006877
 8006584:	080068b5 	.word	0x080068b5

08006588 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b089      	sub	sp, #36	@ 0x24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	60bb      	str	r3, [r7, #8]
   return(result);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	613b      	str	r3, [r7, #16]
   return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e6      	bne.n	8006590 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80065c8:	bf00      	nop
 80065ca:	3724      	adds	r7, #36	@ 0x24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b095      	sub	sp, #84	@ 0x54
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80065fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e6      	bne.n	80065dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3308      	adds	r3, #8
 8006614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	61fb      	str	r3, [r7, #28]
   return(result);
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f023 0301 	bic.w	r3, r3, #1
 8006624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3308      	adds	r3, #8
 800662c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800662e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e5      	bne.n	800660e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006646:	2b01      	cmp	r3, #1
 8006648:	d118      	bne.n	800667c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	60bb      	str	r3, [r7, #8]
   return(result);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f023 0310 	bic.w	r3, r3, #16
 800665e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6979      	ldr	r1, [r7, #20]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	613b      	str	r3, [r7, #16]
   return(result);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e6      	bne.n	800664a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006690:	bf00      	nop
 8006692:	3754      	adds	r7, #84	@ 0x54
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b090      	sub	sp, #64	@ 0x40
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b2:	d037      	beq.n	8006724 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80066b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	623b      	str	r3, [r7, #32]
   return(result);
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80066de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e5      	bne.n	80066bc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006704:	637b      	str	r3, [r7, #52]	@ 0x34
 8006706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	69b9      	ldr	r1, [r7, #24]
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	617b      	str	r3, [r7, #20]
   return(result);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e6      	bne.n	80066f0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006722:	e002      	b.n	800672a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006724:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006726:	f7ff fa15 	bl	8005b54 <HAL_UART_TxCpltCallback>
}
 800672a:	bf00      	nop
 800672c:	3740      	adds	r7, #64	@ 0x40
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff fa11 	bl	8005b68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b09c      	sub	sp, #112	@ 0x70
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006764:	d071      	beq.n	800684a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006768:	2200      	movs	r2, #0
 800676a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800676e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800677c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800677e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006782:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800678c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800678e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006792:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800679a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e6      	bne.n	800676e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3308      	adds	r3, #8
 80067a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80067b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3308      	adds	r3, #8
 80067be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80067c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e5      	bne.n	80067a0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	623b      	str	r3, [r7, #32]
   return(result);
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80067ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80067f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e5      	bne.n	80067d4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800680a:	2220      	movs	r2, #32
 800680c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006814:	2b01      	cmp	r3, #1
 8006816:	d118      	bne.n	800684a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	60fb      	str	r3, [r7, #12]
   return(result);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f023 0310 	bic.w	r3, r3, #16
 800682c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800682e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	69b9      	ldr	r1, [r7, #24]
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	617b      	str	r3, [r7, #20]
   return(result);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e6      	bne.n	8006818 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800684a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800684c:	2200      	movs	r2, #0
 800684e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006854:	2b01      	cmp	r3, #1
 8006856:	d107      	bne.n	8006868 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800685a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800685e:	4619      	mov	r1, r3
 8006860:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006862:	f7f9 ffe9 	bl	8000838 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006866:	e002      	b.n	800686e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006868:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800686a:	f7ff f987 	bl	8005b7c <HAL_UART_RxCpltCallback>
}
 800686e:	bf00      	nop
 8006870:	3770      	adds	r7, #112	@ 0x70
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006882:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800688e:	2b01      	cmp	r3, #1
 8006890:	d109      	bne.n	80068a6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	b29b      	uxth	r3, r3
 800689c:	4619      	mov	r1, r3
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7f9 ffca 	bl	8000838 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068a4:	e002      	b.n	80068ac <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f7ff f972 	bl	8005b90 <HAL_UART_RxHalfCpltCallback>
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068da:	2b80      	cmp	r3, #128	@ 0x80
 80068dc:	d109      	bne.n	80068f2 <UART_DMAError+0x3e>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b21      	cmp	r3, #33	@ 0x21
 80068e2:	d106      	bne.n	80068f2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80068ec:	6978      	ldr	r0, [r7, #20]
 80068ee:	f7ff fe4b 	bl	8006588 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fc:	2b40      	cmp	r3, #64	@ 0x40
 80068fe:	d109      	bne.n	8006914 <UART_DMAError+0x60>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b22      	cmp	r3, #34	@ 0x22
 8006904:	d106      	bne.n	8006914 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800690e:	6978      	ldr	r0, [r7, #20]
 8006910:	f7ff fe60 	bl	80065d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800691a:	f043 0210 	orr.w	r2, r3, #16
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006924:	6978      	ldr	r0, [r7, #20]
 8006926:	f7ff f93d 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff f927 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b088      	sub	sp, #32
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	60bb      	str	r3, [r7, #8]
   return(result);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6979      	ldr	r1, [r7, #20]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	613b      	str	r3, [r7, #16]
   return(result);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e6      	bne.n	8006966 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff f8d5 	bl	8005b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069aa:	bf00      	nop
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b08c      	sub	sp, #48	@ 0x30
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	4613      	mov	r3, r2
 80069be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d142      	bne.n	8006a50 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e03b      	b.n	8006a52 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	461a      	mov	r2, r3
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7ff fd2b 	bl	8006448 <UART_Start_Receive_DMA>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80069f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d124      	bne.n	8006a4a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d11d      	bne.n	8006a44 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f043 0310 	orr.w	r3, r3, #16
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a30:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6a39      	ldr	r1, [r7, #32]
 8006a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e6      	bne.n	8006a10 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8006a42:	e002      	b.n	8006a4a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006a4e:	e000      	b.n	8006a52 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a50:	2302      	movs	r3, #2
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3730      	adds	r7, #48	@ 0x30
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	f107 001c 	add.w	r0, r7, #28
 8006a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d121      	bne.n	8006aba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	4b21      	ldr	r3, [pc, #132]	@ (8006b0c <USB_CoreInit+0xb0>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d105      	bne.n	8006aae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa92 	bl	8006fd8 <USB_CoreReset>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
 8006ab8:	e010      	b.n	8006adc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa86 	bl	8006fd8 <USB_CoreReset>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006adc:	7fbb      	ldrb	r3, [r7, #30]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10b      	bne.n	8006afa <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f043 0206 	orr.w	r2, r3, #6
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f043 0220 	orr.w	r2, r3, #32
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b06:	b004      	add	sp, #16
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	ffbdffbf 	.word	0xffbdffbf

08006b10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f023 0201 	bic.w	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d115      	bne.n	8006b80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b60:	200a      	movs	r0, #10
 8006b62:	f7fa ffff 	bl	8001b64 <HAL_Delay>
      ms += 10U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	330a      	adds	r3, #10
 8006b6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fa25 	bl	8006fbc <USB_GetMode>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d01e      	beq.n	8006bb6 <USB_SetCurrentMode+0x84>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b7c:	d9f0      	bls.n	8006b60 <USB_SetCurrentMode+0x2e>
 8006b7e:	e01a      	b.n	8006bb6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d115      	bne.n	8006bb2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b92:	200a      	movs	r0, #10
 8006b94:	f7fa ffe6 	bl	8001b64 <HAL_Delay>
      ms += 10U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	330a      	adds	r3, #10
 8006b9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa0c 	bl	8006fbc <USB_GetMode>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <USB_SetCurrentMode+0x84>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bae:	d9f0      	bls.n	8006b92 <USB_SetCurrentMode+0x60>
 8006bb0:	e001      	b.n	8006bb6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e005      	b.n	8006bc2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2bc8      	cmp	r3, #200	@ 0xc8
 8006bba:	d101      	bne.n	8006bc0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bcc:	b084      	sub	sp, #16
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	e009      	b.n	8006c00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3340      	adds	r3, #64	@ 0x40
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2b0e      	cmp	r3, #14
 8006c04:	d9f2      	bls.n	8006bec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d11c      	bne.n	8006c48 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c1c:	f043 0302 	orr.w	r3, r3, #2
 8006c20:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c26:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	e005      	b.n	8006c54 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d10d      	bne.n	8006c84 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c70:	2100      	movs	r1, #0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f968 	bl	8006f48 <USB_SetDevSpeed>
 8006c78:	e008      	b.n	8006c8c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f963 	bl	8006f48 <USB_SetDevSpeed>
 8006c82:	e003      	b.n	8006c8c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c84:	2103      	movs	r1, #3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f95e 	bl	8006f48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c8c:	2110      	movs	r1, #16
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8fa 	bl	8006e88 <USB_FlushTxFifo>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f924 	bl	8006eec <USB_FlushRxFifo>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ccc:	461a      	mov	r2, r3
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	e043      	b.n	8006d60 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cee:	d118      	bne.n	8006d22 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d02:	461a      	mov	r2, r3
 8006d04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	e013      	b.n	8006d34 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d18:	461a      	mov	r2, r3
 8006d1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	e008      	b.n	8006d34 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2e:	461a      	mov	r2, r3
 8006d30:	2300      	movs	r3, #0
 8006d32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d40:	461a      	mov	r2, r3
 8006d42:	2300      	movs	r3, #0
 8006d44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d52:	461a      	mov	r2, r3
 8006d54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d64:	461a      	mov	r2, r3
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d3b5      	bcc.n	8006cd8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	e043      	b.n	8006dfa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d88:	d118      	bne.n	8006dbc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	e013      	b.n	8006dce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db2:	461a      	mov	r2, r3
 8006db4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	e008      	b.n	8006dce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dda:	461a      	mov	r2, r3
 8006ddc:	2300      	movs	r3, #0
 8006dde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dec:	461a      	mov	r2, r3
 8006dee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006df2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	3301      	adds	r3, #1
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006dfe:	461a      	mov	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d3b5      	bcc.n	8006d72 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e18:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e26:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f043 0210 	orr.w	r2, r3, #16
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	4b0f      	ldr	r3, [pc, #60]	@ (8006e80 <USB_DevInit+0x2b4>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f043 0208 	orr.w	r2, r3, #8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d105      	bne.n	8006e70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	4b06      	ldr	r3, [pc, #24]	@ (8006e84 <USB_DevInit+0x2b8>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e7c:	b004      	add	sp, #16
 8006e7e:	4770      	bx	lr
 8006e80:	803c3800 	.word	0x803c3800
 8006e84:	40000004 	.word	0x40000004

08006e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ea2:	d901      	bls.n	8006ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e01b      	b.n	8006ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	daf2      	bge.n	8006e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	019b      	lsls	r3, r3, #6
 8006eb8:	f043 0220 	orr.w	r2, r3, #32
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ecc:	d901      	bls.n	8006ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e006      	b.n	8006ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d0f0      	beq.n	8006ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f04:	d901      	bls.n	8006f0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e018      	b.n	8006f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	daf2      	bge.n	8006ef8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2210      	movs	r2, #16
 8006f1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f28:	d901      	bls.n	8006f2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e006      	b.n	8006f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b10      	cmp	r3, #16
 8006f38:	d0f0      	beq.n	8006f1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	68f9      	ldr	r1, [r7, #12]
 8006f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f94:	f023 0303 	bic.w	r3, r3, #3
 8006f98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fa8:	f043 0302 	orr.w	r3, r3, #2
 8006fac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ff0:	d901      	bls.n	8006ff6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e01b      	b.n	800702e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	daf2      	bge.n	8006fe4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f043 0201 	orr.w	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800701a:	d901      	bls.n	8007020 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e006      	b.n	800702e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b01      	cmp	r3, #1
 800702a:	d0f0      	beq.n	800700e <USB_CoreReset+0x36>

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb34 	bl	80076b4 <malloc>
 800704c:	4603      	mov	r3, r0
 800704e:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8007050:	68fb      	ldr	r3, [r7, #12]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <ATC_Free+0x26>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fb25 	bl	80076c4 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
  }
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8a9b      	ldrh	r3, [r3, #20]
 800709e:	461a      	mov	r2, r3
 80070a0:	2100      	movs	r1, #0
 80070a2:	f000 fbe5 	bl	8007870 <memset>
}
 80070a6:	bf00      	nop
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b086      	sub	sp, #24
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	4613      	mov	r3, r2
 80070ba:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	88fa      	ldrh	r2, [r7, #6]
 80070c4:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe f8c4 	bl	800525c <HAL_UART_Transmit_DMA>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d102      	bne.n	80070e0 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 80070da:	2301      	movs	r3, #1
 80070dc:	75fb      	strb	r3, [r7, #23]
 80070de:	e000      	b.n	80070e2 <ATC_TxRaw+0x34>
      break;
 80070e0:	bf00      	nop

  } while (0);

  return answer;
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe fd67 	bl	8005bcc <HAL_UART_GetState>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b21      	cmp	r3, #33	@ 0x21
 8007102:	d007      	beq.n	8007114 <ATC_TxBusy+0x28>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fd5f 	bl	8005bcc <HAL_UART_GetState>
 800710e:	4603      	mov	r3, r0
 8007110:	2b23      	cmp	r3, #35	@ 0x23
 8007112:	d101      	bne.n	8007118 <ATC_TxBusy+0x2c>
  {
    return true;
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8007118:	2300      	movs	r3, #0
  }
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 8007130:	f7fa fd0c 	bl	8001b4c <HAL_GetTick>
 8007134:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8007136:	2001      	movs	r0, #1
 8007138:	f000 fab1 	bl	800769e <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fd43 	bl	8005bcc <HAL_UART_GetState>
 8007146:	4603      	mov	r3, r0
 8007148:	2b22      	cmp	r3, #34	@ 0x22
 800714a:	d007      	beq.n	800715c <ATC_TxWait+0x3a>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4618      	mov	r0, r3
 8007152:	f7fe fd3b 	bl	8005bcc <HAL_UART_GetState>
 8007156:	4603      	mov	r3, r0
 8007158:	2b20      	cmp	r3, #32
 800715a:	d102      	bne.n	8007162 <ATC_TxWait+0x40>
    {
      answer = true;
 800715c:	2301      	movs	r3, #1
 800715e:	73fb      	strb	r3, [r7, #15]
      break;
 8007160:	e01c      	b.n	800719c <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fd30 	bl	8005bcc <HAL_UART_GetState>
 800716c:	4603      	mov	r3, r0
 800716e:	2be0      	cmp	r3, #224	@ 0xe0
 8007170:	d014      	beq.n	800719c <ATC_TxWait+0x7a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fd28 	bl	8005bcc <HAL_UART_GetState>
 800717c:	4603      	mov	r3, r0
 800717e:	2ba0      	cmp	r3, #160	@ 0xa0
 8007180:	d00c      	beq.n	800719c <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8007182:	f7fa fce3 	bl	8001b4c <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d8d1      	bhi.n	8007136 <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe f8dc 	bl	8005354 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <ATC_CheckResponse>:
}

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8b1b      	ldrh	r3, [r3, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d023      	beq.n	8007204 <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80071bc:	2300      	movs	r3, #0
 80071be:	81bb      	strh	r3, [r7, #12]
 80071c0:	e01b      	b.n	80071fa <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80071c6:	89ba      	ldrh	r2, [r7, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	320a      	adds	r2, #10
 80071cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d0:	4619      	mov	r1, r3
 80071d2:	f000 fb68 	bl	80078a6 <strstr>
 80071d6:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 80071ea:	89bb      	ldrh	r3, [r7, #12]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	3301      	adds	r3, #1
 80071f0:	73fb      	strb	r3, [r7, #15]
        break;
 80071f2:	e007      	b.n	8007204 <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80071f4:	89bb      	ldrh	r3, [r7, #12]
 80071f6:	3301      	adds	r3, #1
 80071f8:	81bb      	strh	r3, [r7, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8adb      	ldrh	r3, [r3, #22]
 80071fe:	89ba      	ldrh	r2, [r7, #12]
 8007200:	429a      	cmp	r2, r3
 8007202:	d3de      	bcc.n	80071c2 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fcea 	bl	8005bf4 <HAL_UART_GetError>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01f      	beq.n	8007266 <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f04f 32ff 	mov.w	r2, #4294967295
 8007230:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe f8f4 	bl	8005424 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	69d9      	ldr	r1, [r3, #28]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8a9b      	ldrh	r3, [r3, #20]
 8007248:	461a      	mov	r2, r3
 800724a:	f7ff fbb2 	bl	80069b2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0208 	bic.w	r2, r2, #8
 8007264:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fcae 	bl	8005bcc <HAL_UART_GetState>
 8007270:	4603      	mov	r3, r0
 8007272:	2b22      	cmp	r3, #34	@ 0x22
 8007274:	d027      	beq.n	80072c6 <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe fca6 	bl	8005bcc <HAL_UART_GetState>
 8007280:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8007282:	2b23      	cmp	r3, #35	@ 0x23
 8007284:	d01f      	beq.n	80072c6 <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f04f 32ff 	mov.w	r2, #4294967295
 8007290:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe f8c4 	bl	8005424 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	69d9      	ldr	r1, [r3, #28]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8a9b      	ldrh	r3, [r3, #20]
 80072a8:	461a      	mov	r2, r3
 80072aa:	f7ff fb82 	bl	80069b2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0208 	bic.w	r2, r2, #8
 80072c4:	601a      	str	r2, [r3, #0]
  }
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b086      	sub	sp, #24
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 80072de:	2300      	movs	r3, #0
 80072e0:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d075      	beq.n	80073d4 <ATC_Init+0x106>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d072      	beq.n	80073d4 <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 80072ee:	223c      	movs	r2, #60	@ 0x3c
 80072f0:	2100      	movs	r1, #0
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fabc 	bl	8007870 <memset>
    if (pName != NULL)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3304      	adds	r3, #4
 8007302:	2207      	movs	r2, #7
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f000 faba 	bl	8007880 <strncpy>
    }
    hAtc->hUart = hUart;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff fe90 	bl	800703a <ATC_Malloc>
 800731a:	4602      	mov	r2, r0
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d04e      	beq.n	80073c6 <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fa9d 	bl	8007870 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8007336:	88fb      	ldrh	r3, [r7, #6]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fe7e 	bl	800703a <ATC_Malloc>
 800733e:	4602      	mov	r2, r0
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d03e      	beq.n	80073ca <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	88fa      	ldrh	r2, [r7, #6]
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fa8b 	bl	8007870 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fe6c 	bl	800703a <ATC_Malloc>
 8007362:	4602      	mov	r2, r0
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02e      	beq.n	80073ce <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	88fa      	ldrh	r2, [r7, #6]
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fa79 	bl	8007870 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f04f 32ff 	mov.w	r2, #4294967295
 800738e:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	69d9      	ldr	r1, [r3, #28]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8a9b      	ldrh	r3, [r3, #20]
 800739c:	461a      	mov	r2, r3
 800739e:	f7ff fb08 	bl	80069b2 <HAL_UARTEx_ReceiveToIdle_DMA>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d114      	bne.n	80073d2 <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0208 	bic.w	r2, r2, #8
 80073be:	601a      	str	r2, [r3, #0]
    answer = true;
 80073c0:	2301      	movs	r3, #1
 80073c2:	75fb      	strb	r3, [r7, #23]
 80073c4:	e006      	b.n	80073d4 <ATC_Init+0x106>
      break;
 80073c6:	bf00      	nop
 80073c8:	e004      	b.n	80073d4 <ATC_Init+0x106>
      break;
 80073ca:	bf00      	nop
 80073cc:	e002      	b.n	80073d4 <ATC_Init+0x106>
      break;
 80073ce:	bf00      	nop
 80073d0:	e000      	b.n	80073d4 <ATC_Init+0x106>
      break;
 80073d2:	bf00      	nop

  } while (0);

  if (answer == false)
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	f083 0301 	eor.w	r3, r3, #1
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d016      	beq.n	800740e <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	331c      	adds	r3, #28
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fe34 	bl	800705a <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3324      	adds	r3, #36	@ 0x24
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fe2b 	bl	800705a <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007404:	223c      	movs	r2, #60	@ 0x3c
 8007406:	2100      	movs	r1, #0
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fa31 	bl	8007870 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8007418:	b590      	push	{r4, r7, lr}
 800741a:	b08d      	sub	sp, #52	@ 0x34
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8007426:	2300      	movs	r3, #0
 8007428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff fe5e 	bl	80070ec <ATC_TxBusy>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8007436:	f06f 0303 	mvn.w	r3, #3
 800743a:	e0c8      	b.n	80075ce <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 800743c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007440:	2b05      	cmp	r3, #5
 8007442:	d902      	bls.n	800744a <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 8007444:	f06f 0304 	mvn.w	r3, #4
 8007448:	e0c1      	b.n	80075ce <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fedf 	bl	800720e <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8007450:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007454:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8007456:	2300      	movs	r3, #0
 8007458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800745a:	e04b      	b.n	80074f4 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1d1a      	adds	r2, r3, #4
 8007460:	617a      	str	r2, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8007466:	69b8      	ldr	r0, [r7, #24]
 8007468:	f7f8 feea 	bl	8000240 <strlen>
 800746c:	4603      	mov	r3, r0
 800746e:	3301      	adds	r3, #1
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fde2 	bl	800703a <ATC_Malloc>
 8007476:	4601      	mov	r1, r0
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800747c:	320a      	adds	r2, #10
 800747e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007486:	320a      	adds	r2, #10
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d119      	bne.n	80074c4 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 8007490:	2300      	movs	r3, #0
 8007492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007496:	e00d      	b.n	80074b4 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800749c:	330a      	adds	r3, #10
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff fdd8 	bl	800705a <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 80074aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074ae:	3301      	adds	r3, #1
 80074b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80074b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ba:	429a      	cmp	r2, r3
 80074bc:	dcec      	bgt.n	8007498 <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 80074be:	f06f 0302 	mvn.w	r3, #2
 80074c2:	e084      	b.n	80075ce <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074c8:	320a      	adds	r2, #10
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	69b9      	ldr	r1, [r7, #24]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fa3b 	bl	800794c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074da:	320a      	adds	r2, #10
 80074dc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80074e0:	69b8      	ldr	r0, [r7, #24]
 80074e2:	f7f8 fead 	bl	8000240 <strlen>
 80074e6:	4603      	mov	r3, r0
 80074e8:	4423      	add	r3, r4
 80074ea:	2200      	movs	r2, #0
 80074ec:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	3301      	adds	r3, #1
 80074f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074f4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80074f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074fa:	429a      	cmp	r2, r3
 80074fc:	dbae      	blt.n	800745c <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7ff fdc2 	bl	8007088 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8007504:	68b8      	ldr	r0, [r7, #8]
 8007506:	f7f8 fe9b 	bl	8000240 <strlen>
 800750a:	4603      	mov	r3, r0
 800750c:	b29b      	uxth	r3, r3
 800750e:	461a      	mov	r2, r3
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fdcb 	bl	80070ae <ATC_TxRaw>
 8007518:	4603      	mov	r3, r0
 800751a:	f083 0301 	eor.w	r3, r3, #1
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8007524:	f04f 33ff 	mov.w	r3, #4294967295
 8007528:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800752a:	e00d      	b.n	8007548 <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7ff fdf7 	bl	8007122 <ATC_TxWait>
 8007534:	4603      	mov	r3, r0
 8007536:	f083 0301 	eor.w	r3, r3, #1
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8007540:	f06f 0301 	mvn.w	r3, #1
 8007544:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007546:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8007548:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800754c:	2b00      	cmp	r3, #0
 800754e:	d022      	beq.n	8007596 <ATC_SendReceive+0x17e>
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d11f      	bne.n	8007596 <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 8007556:	f7fa faf9 	bl	8001b4c <HAL_GetTick>
 800755a:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800755c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8007566:	e00e      	b.n	8007586 <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 8007568:	2001      	movs	r0, #1
 800756a:	f000 f898 	bl	800769e <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff fe18 	bl	80071a6 <ATC_CheckResponse>
 8007576:	4603      	mov	r3, r0
 8007578:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800757a:	7ffb      	ldrb	r3, [r7, #31]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 8007580:	7ffb      	ldrb	r3, [r7, #31]
 8007582:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007584:	e007      	b.n	8007596 <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 8007586:	f7fa fae1 	bl	8001b4c <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007592:	429a      	cmp	r2, r3
 8007594:	d8e8      	bhi.n	8007568 <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800759c:	2300      	movs	r3, #0
 800759e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80075a2:	e00d      	b.n	80075c0 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 80075a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075a8:	330a      	adds	r3, #10
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff fd52 	bl	800705a <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 80075b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075ba:	3301      	adds	r3, #1
 80075bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80075c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80075c4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d3eb      	bcc.n	80075a4 <ATC_SendReceive+0x18c>
  }
  return answer;
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3734      	adds	r7, #52	@ 0x34
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd90      	pop	{r4, r7, pc}

080075d6 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 80075e2:	887a      	ldrh	r2, [r7, #2]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8a9b      	ldrh	r3, [r3, #20]
 80075e8:	4619      	mov	r1, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8b1b      	ldrh	r3, [r3, #24]
 80075ee:	1acb      	subs	r3, r1, r3
 80075f0:	429a      	cmp	r2, r3
 80075f2:	dd05      	ble.n	8007600 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	8a9a      	ldrh	r2, [r3, #20]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8b1b      	ldrh	r3, [r3, #24]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	8b12      	ldrh	r2, [r2, #24]
 8007608:	1898      	adds	r0, r3, r2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	887a      	ldrh	r2, [r7, #2]
 8007610:	4619      	mov	r1, r3
 8007612:	f000 f9a3 	bl	800795c <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8b1a      	ldrh	r2, [r3, #24]
 800761a:	887b      	ldrh	r3, [r7, #2]
 800761c:	4413      	add	r3, r2
 800761e:	b29a      	uxth	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69d9      	ldr	r1, [r3, #28]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8a9b      	ldrh	r3, [r3, #20]
 8007630:	461a      	mov	r2, r3
 8007632:	f7ff f9be 	bl	80069b2 <HAL_UARTEx_ReceiveToIdle_DMA>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10c      	bne.n	8007656 <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0208 	bic.w	r2, r2, #8
 8007652:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8007654:	e01f      	b.n	8007696 <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f04f 32ff 	mov.w	r2, #4294967295
 8007660:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f7fd fedc 	bl	8005424 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69d9      	ldr	r1, [r3, #28]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	8a9b      	ldrh	r3, [r3, #20]
 8007678:	461a      	mov	r2, r3
 800767a:	f7ff f99a 	bl	80069b2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0208 	bic.w	r2, r2, #8
 8007694:	601a      	str	r2, [r3, #0]
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fa fa5c 	bl	8001b64 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <malloc>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	@ (80076c0 <malloc+0xc>)
 80076b6:	4601      	mov	r1, r0
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f000 b82d 	b.w	8007718 <_malloc_r>
 80076be:	bf00      	nop
 80076c0:	2000000c 	.word	0x2000000c

080076c4 <free>:
 80076c4:	4b02      	ldr	r3, [pc, #8]	@ (80076d0 <free+0xc>)
 80076c6:	4601      	mov	r1, r0
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	f000 b955 	b.w	8007978 <_free_r>
 80076ce:	bf00      	nop
 80076d0:	2000000c 	.word	0x2000000c

080076d4 <sbrk_aligned>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007714 <sbrk_aligned+0x40>)
 80076d8:	460c      	mov	r4, r1
 80076da:	6831      	ldr	r1, [r6, #0]
 80076dc:	4605      	mov	r5, r0
 80076de:	b911      	cbnz	r1, 80076e6 <sbrk_aligned+0x12>
 80076e0:	f000 f8f8 	bl	80078d4 <_sbrk_r>
 80076e4:	6030      	str	r0, [r6, #0]
 80076e6:	4621      	mov	r1, r4
 80076e8:	4628      	mov	r0, r5
 80076ea:	f000 f8f3 	bl	80078d4 <_sbrk_r>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d103      	bne.n	80076fa <sbrk_aligned+0x26>
 80076f2:	f04f 34ff 	mov.w	r4, #4294967295
 80076f6:	4620      	mov	r0, r4
 80076f8:	bd70      	pop	{r4, r5, r6, pc}
 80076fa:	1cc4      	adds	r4, r0, #3
 80076fc:	f024 0403 	bic.w	r4, r4, #3
 8007700:	42a0      	cmp	r0, r4
 8007702:	d0f8      	beq.n	80076f6 <sbrk_aligned+0x22>
 8007704:	1a21      	subs	r1, r4, r0
 8007706:	4628      	mov	r0, r5
 8007708:	f000 f8e4 	bl	80078d4 <_sbrk_r>
 800770c:	3001      	adds	r0, #1
 800770e:	d1f2      	bne.n	80076f6 <sbrk_aligned+0x22>
 8007710:	e7ef      	b.n	80076f2 <sbrk_aligned+0x1e>
 8007712:	bf00      	nop
 8007714:	20000984 	.word	0x20000984

08007718 <_malloc_r>:
 8007718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800771c:	1ccd      	adds	r5, r1, #3
 800771e:	f025 0503 	bic.w	r5, r5, #3
 8007722:	3508      	adds	r5, #8
 8007724:	2d0c      	cmp	r5, #12
 8007726:	bf38      	it	cc
 8007728:	250c      	movcc	r5, #12
 800772a:	2d00      	cmp	r5, #0
 800772c:	4606      	mov	r6, r0
 800772e:	db01      	blt.n	8007734 <_malloc_r+0x1c>
 8007730:	42a9      	cmp	r1, r5
 8007732:	d904      	bls.n	800773e <_malloc_r+0x26>
 8007734:	230c      	movs	r3, #12
 8007736:	6033      	str	r3, [r6, #0]
 8007738:	2000      	movs	r0, #0
 800773a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007814 <_malloc_r+0xfc>
 8007742:	f000 f869 	bl	8007818 <__malloc_lock>
 8007746:	f8d8 3000 	ldr.w	r3, [r8]
 800774a:	461c      	mov	r4, r3
 800774c:	bb44      	cbnz	r4, 80077a0 <_malloc_r+0x88>
 800774e:	4629      	mov	r1, r5
 8007750:	4630      	mov	r0, r6
 8007752:	f7ff ffbf 	bl	80076d4 <sbrk_aligned>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	4604      	mov	r4, r0
 800775a:	d158      	bne.n	800780e <_malloc_r+0xf6>
 800775c:	f8d8 4000 	ldr.w	r4, [r8]
 8007760:	4627      	mov	r7, r4
 8007762:	2f00      	cmp	r7, #0
 8007764:	d143      	bne.n	80077ee <_malloc_r+0xd6>
 8007766:	2c00      	cmp	r4, #0
 8007768:	d04b      	beq.n	8007802 <_malloc_r+0xea>
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	4639      	mov	r1, r7
 800776e:	4630      	mov	r0, r6
 8007770:	eb04 0903 	add.w	r9, r4, r3
 8007774:	f000 f8ae 	bl	80078d4 <_sbrk_r>
 8007778:	4581      	cmp	r9, r0
 800777a:	d142      	bne.n	8007802 <_malloc_r+0xea>
 800777c:	6821      	ldr	r1, [r4, #0]
 800777e:	1a6d      	subs	r5, r5, r1
 8007780:	4629      	mov	r1, r5
 8007782:	4630      	mov	r0, r6
 8007784:	f7ff ffa6 	bl	80076d4 <sbrk_aligned>
 8007788:	3001      	adds	r0, #1
 800778a:	d03a      	beq.n	8007802 <_malloc_r+0xea>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	442b      	add	r3, r5
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	f8d8 3000 	ldr.w	r3, [r8]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	bb62      	cbnz	r2, 80077f4 <_malloc_r+0xdc>
 800779a:	f8c8 7000 	str.w	r7, [r8]
 800779e:	e00f      	b.n	80077c0 <_malloc_r+0xa8>
 80077a0:	6822      	ldr	r2, [r4, #0]
 80077a2:	1b52      	subs	r2, r2, r5
 80077a4:	d420      	bmi.n	80077e8 <_malloc_r+0xd0>
 80077a6:	2a0b      	cmp	r2, #11
 80077a8:	d917      	bls.n	80077da <_malloc_r+0xc2>
 80077aa:	1961      	adds	r1, r4, r5
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	6025      	str	r5, [r4, #0]
 80077b0:	bf18      	it	ne
 80077b2:	6059      	strne	r1, [r3, #4]
 80077b4:	6863      	ldr	r3, [r4, #4]
 80077b6:	bf08      	it	eq
 80077b8:	f8c8 1000 	streq.w	r1, [r8]
 80077bc:	5162      	str	r2, [r4, r5]
 80077be:	604b      	str	r3, [r1, #4]
 80077c0:	4630      	mov	r0, r6
 80077c2:	f000 f82f 	bl	8007824 <__malloc_unlock>
 80077c6:	f104 000b 	add.w	r0, r4, #11
 80077ca:	1d23      	adds	r3, r4, #4
 80077cc:	f020 0007 	bic.w	r0, r0, #7
 80077d0:	1ac2      	subs	r2, r0, r3
 80077d2:	bf1c      	itt	ne
 80077d4:	1a1b      	subne	r3, r3, r0
 80077d6:	50a3      	strne	r3, [r4, r2]
 80077d8:	e7af      	b.n	800773a <_malloc_r+0x22>
 80077da:	6862      	ldr	r2, [r4, #4]
 80077dc:	42a3      	cmp	r3, r4
 80077de:	bf0c      	ite	eq
 80077e0:	f8c8 2000 	streq.w	r2, [r8]
 80077e4:	605a      	strne	r2, [r3, #4]
 80077e6:	e7eb      	b.n	80077c0 <_malloc_r+0xa8>
 80077e8:	4623      	mov	r3, r4
 80077ea:	6864      	ldr	r4, [r4, #4]
 80077ec:	e7ae      	b.n	800774c <_malloc_r+0x34>
 80077ee:	463c      	mov	r4, r7
 80077f0:	687f      	ldr	r7, [r7, #4]
 80077f2:	e7b6      	b.n	8007762 <_malloc_r+0x4a>
 80077f4:	461a      	mov	r2, r3
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	d1fb      	bne.n	80077f4 <_malloc_r+0xdc>
 80077fc:	2300      	movs	r3, #0
 80077fe:	6053      	str	r3, [r2, #4]
 8007800:	e7de      	b.n	80077c0 <_malloc_r+0xa8>
 8007802:	230c      	movs	r3, #12
 8007804:	6033      	str	r3, [r6, #0]
 8007806:	4630      	mov	r0, r6
 8007808:	f000 f80c 	bl	8007824 <__malloc_unlock>
 800780c:	e794      	b.n	8007738 <_malloc_r+0x20>
 800780e:	6005      	str	r5, [r0, #0]
 8007810:	e7d6      	b.n	80077c0 <_malloc_r+0xa8>
 8007812:	bf00      	nop
 8007814:	20000988 	.word	0x20000988

08007818 <__malloc_lock>:
 8007818:	4801      	ldr	r0, [pc, #4]	@ (8007820 <__malloc_lock+0x8>)
 800781a:	f000 b895 	b.w	8007948 <__retarget_lock_acquire_recursive>
 800781e:	bf00      	nop
 8007820:	20000ac8 	.word	0x20000ac8

08007824 <__malloc_unlock>:
 8007824:	4801      	ldr	r0, [pc, #4]	@ (800782c <__malloc_unlock+0x8>)
 8007826:	f000 b890 	b.w	800794a <__retarget_lock_release_recursive>
 800782a:	bf00      	nop
 800782c:	20000ac8 	.word	0x20000ac8

08007830 <siprintf>:
 8007830:	b40e      	push	{r1, r2, r3}
 8007832:	b500      	push	{lr}
 8007834:	b09c      	sub	sp, #112	@ 0x70
 8007836:	ab1d      	add	r3, sp, #116	@ 0x74
 8007838:	9002      	str	r0, [sp, #8]
 800783a:	9006      	str	r0, [sp, #24]
 800783c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007840:	4809      	ldr	r0, [pc, #36]	@ (8007868 <siprintf+0x38>)
 8007842:	9107      	str	r1, [sp, #28]
 8007844:	9104      	str	r1, [sp, #16]
 8007846:	4909      	ldr	r1, [pc, #36]	@ (800786c <siprintf+0x3c>)
 8007848:	f853 2b04 	ldr.w	r2, [r3], #4
 800784c:	9105      	str	r1, [sp, #20]
 800784e:	6800      	ldr	r0, [r0, #0]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	a902      	add	r1, sp, #8
 8007854:	f000 f936 	bl	8007ac4 <_svfiprintf_r>
 8007858:	9b02      	ldr	r3, [sp, #8]
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	b01c      	add	sp, #112	@ 0x70
 8007860:	f85d eb04 	ldr.w	lr, [sp], #4
 8007864:	b003      	add	sp, #12
 8007866:	4770      	bx	lr
 8007868:	2000000c 	.word	0x2000000c
 800786c:	ffff0208 	.word	0xffff0208

08007870 <memset>:
 8007870:	4402      	add	r2, r0
 8007872:	4603      	mov	r3, r0
 8007874:	4293      	cmp	r3, r2
 8007876:	d100      	bne.n	800787a <memset+0xa>
 8007878:	4770      	bx	lr
 800787a:	f803 1b01 	strb.w	r1, [r3], #1
 800787e:	e7f9      	b.n	8007874 <memset+0x4>

08007880 <strncpy>:
 8007880:	b510      	push	{r4, lr}
 8007882:	3901      	subs	r1, #1
 8007884:	4603      	mov	r3, r0
 8007886:	b132      	cbz	r2, 8007896 <strncpy+0x16>
 8007888:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800788c:	f803 4b01 	strb.w	r4, [r3], #1
 8007890:	3a01      	subs	r2, #1
 8007892:	2c00      	cmp	r4, #0
 8007894:	d1f7      	bne.n	8007886 <strncpy+0x6>
 8007896:	441a      	add	r2, r3
 8007898:	2100      	movs	r1, #0
 800789a:	4293      	cmp	r3, r2
 800789c:	d100      	bne.n	80078a0 <strncpy+0x20>
 800789e:	bd10      	pop	{r4, pc}
 80078a0:	f803 1b01 	strb.w	r1, [r3], #1
 80078a4:	e7f9      	b.n	800789a <strncpy+0x1a>

080078a6 <strstr>:
 80078a6:	780a      	ldrb	r2, [r1, #0]
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	b96a      	cbnz	r2, 80078c8 <strstr+0x22>
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d109      	bne.n	80078c6 <strstr+0x20>
 80078b2:	460c      	mov	r4, r1
 80078b4:	4605      	mov	r5, r0
 80078b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0f6      	beq.n	80078ac <strstr+0x6>
 80078be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80078c2:	429e      	cmp	r6, r3
 80078c4:	d0f7      	beq.n	80078b6 <strstr+0x10>
 80078c6:	3001      	adds	r0, #1
 80078c8:	7803      	ldrb	r3, [r0, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1ef      	bne.n	80078ae <strstr+0x8>
 80078ce:	4618      	mov	r0, r3
 80078d0:	e7ec      	b.n	80078ac <strstr+0x6>
	...

080078d4 <_sbrk_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4d06      	ldr	r5, [pc, #24]	@ (80078f0 <_sbrk_r+0x1c>)
 80078d8:	2300      	movs	r3, #0
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	f7f9 f9c8 	bl	8000c74 <_sbrk>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_sbrk_r+0x1a>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_sbrk_r+0x1a>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	20000ac4 	.word	0x20000ac4

080078f4 <__errno>:
 80078f4:	4b01      	ldr	r3, [pc, #4]	@ (80078fc <__errno+0x8>)
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	2000000c 	.word	0x2000000c

08007900 <__libc_init_array>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	4d0d      	ldr	r5, [pc, #52]	@ (8007938 <__libc_init_array+0x38>)
 8007904:	4c0d      	ldr	r4, [pc, #52]	@ (800793c <__libc_init_array+0x3c>)
 8007906:	1b64      	subs	r4, r4, r5
 8007908:	10a4      	asrs	r4, r4, #2
 800790a:	2600      	movs	r6, #0
 800790c:	42a6      	cmp	r6, r4
 800790e:	d109      	bne.n	8007924 <__libc_init_array+0x24>
 8007910:	4d0b      	ldr	r5, [pc, #44]	@ (8007940 <__libc_init_array+0x40>)
 8007912:	4c0c      	ldr	r4, [pc, #48]	@ (8007944 <__libc_init_array+0x44>)
 8007914:	f000 fbb0 	bl	8008078 <_init>
 8007918:	1b64      	subs	r4, r4, r5
 800791a:	10a4      	asrs	r4, r4, #2
 800791c:	2600      	movs	r6, #0
 800791e:	42a6      	cmp	r6, r4
 8007920:	d105      	bne.n	800792e <__libc_init_array+0x2e>
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	f855 3b04 	ldr.w	r3, [r5], #4
 8007928:	4798      	blx	r3
 800792a:	3601      	adds	r6, #1
 800792c:	e7ee      	b.n	800790c <__libc_init_array+0xc>
 800792e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007932:	4798      	blx	r3
 8007934:	3601      	adds	r6, #1
 8007936:	e7f2      	b.n	800791e <__libc_init_array+0x1e>
 8007938:	0800813c 	.word	0x0800813c
 800793c:	0800813c 	.word	0x0800813c
 8007940:	0800813c 	.word	0x0800813c
 8007944:	08008140 	.word	0x08008140

08007948 <__retarget_lock_acquire_recursive>:
 8007948:	4770      	bx	lr

0800794a <__retarget_lock_release_recursive>:
 800794a:	4770      	bx	lr

0800794c <strcpy>:
 800794c:	4603      	mov	r3, r0
 800794e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007952:	f803 2b01 	strb.w	r2, [r3], #1
 8007956:	2a00      	cmp	r2, #0
 8007958:	d1f9      	bne.n	800794e <strcpy+0x2>
 800795a:	4770      	bx	lr

0800795c <memcpy>:
 800795c:	440a      	add	r2, r1
 800795e:	4291      	cmp	r1, r2
 8007960:	f100 33ff 	add.w	r3, r0, #4294967295
 8007964:	d100      	bne.n	8007968 <memcpy+0xc>
 8007966:	4770      	bx	lr
 8007968:	b510      	push	{r4, lr}
 800796a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800796e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007972:	4291      	cmp	r1, r2
 8007974:	d1f9      	bne.n	800796a <memcpy+0xe>
 8007976:	bd10      	pop	{r4, pc}

08007978 <_free_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	2900      	cmp	r1, #0
 800797e:	d041      	beq.n	8007a04 <_free_r+0x8c>
 8007980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007984:	1f0c      	subs	r4, r1, #4
 8007986:	2b00      	cmp	r3, #0
 8007988:	bfb8      	it	lt
 800798a:	18e4      	addlt	r4, r4, r3
 800798c:	f7ff ff44 	bl	8007818 <__malloc_lock>
 8007990:	4a1d      	ldr	r2, [pc, #116]	@ (8007a08 <_free_r+0x90>)
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	b933      	cbnz	r3, 80079a4 <_free_r+0x2c>
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	6014      	str	r4, [r2, #0]
 800799a:	4628      	mov	r0, r5
 800799c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079a0:	f7ff bf40 	b.w	8007824 <__malloc_unlock>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d908      	bls.n	80079ba <_free_r+0x42>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	1821      	adds	r1, r4, r0
 80079ac:	428b      	cmp	r3, r1
 80079ae:	bf01      	itttt	eq
 80079b0:	6819      	ldreq	r1, [r3, #0]
 80079b2:	685b      	ldreq	r3, [r3, #4]
 80079b4:	1809      	addeq	r1, r1, r0
 80079b6:	6021      	streq	r1, [r4, #0]
 80079b8:	e7ed      	b.n	8007996 <_free_r+0x1e>
 80079ba:	461a      	mov	r2, r3
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b10b      	cbz	r3, 80079c4 <_free_r+0x4c>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d9fa      	bls.n	80079ba <_free_r+0x42>
 80079c4:	6811      	ldr	r1, [r2, #0]
 80079c6:	1850      	adds	r0, r2, r1
 80079c8:	42a0      	cmp	r0, r4
 80079ca:	d10b      	bne.n	80079e4 <_free_r+0x6c>
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	4401      	add	r1, r0
 80079d0:	1850      	adds	r0, r2, r1
 80079d2:	4283      	cmp	r3, r0
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	d1e0      	bne.n	800799a <_free_r+0x22>
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	6053      	str	r3, [r2, #4]
 80079de:	4408      	add	r0, r1
 80079e0:	6010      	str	r0, [r2, #0]
 80079e2:	e7da      	b.n	800799a <_free_r+0x22>
 80079e4:	d902      	bls.n	80079ec <_free_r+0x74>
 80079e6:	230c      	movs	r3, #12
 80079e8:	602b      	str	r3, [r5, #0]
 80079ea:	e7d6      	b.n	800799a <_free_r+0x22>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	1821      	adds	r1, r4, r0
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf04      	itt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	6063      	str	r3, [r4, #4]
 80079fa:	bf04      	itt	eq
 80079fc:	1809      	addeq	r1, r1, r0
 80079fe:	6021      	streq	r1, [r4, #0]
 8007a00:	6054      	str	r4, [r2, #4]
 8007a02:	e7ca      	b.n	800799a <_free_r+0x22>
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	bf00      	nop
 8007a08:	20000988 	.word	0x20000988

08007a0c <__ssputs_r>:
 8007a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	688e      	ldr	r6, [r1, #8]
 8007a12:	461f      	mov	r7, r3
 8007a14:	42be      	cmp	r6, r7
 8007a16:	680b      	ldr	r3, [r1, #0]
 8007a18:	4682      	mov	sl, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	4690      	mov	r8, r2
 8007a1e:	d82d      	bhi.n	8007a7c <__ssputs_r+0x70>
 8007a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a28:	d026      	beq.n	8007a78 <__ssputs_r+0x6c>
 8007a2a:	6965      	ldr	r5, [r4, #20]
 8007a2c:	6909      	ldr	r1, [r1, #16]
 8007a2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a32:	eba3 0901 	sub.w	r9, r3, r1
 8007a36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a3a:	1c7b      	adds	r3, r7, #1
 8007a3c:	444b      	add	r3, r9
 8007a3e:	106d      	asrs	r5, r5, #1
 8007a40:	429d      	cmp	r5, r3
 8007a42:	bf38      	it	cc
 8007a44:	461d      	movcc	r5, r3
 8007a46:	0553      	lsls	r3, r2, #21
 8007a48:	d527      	bpl.n	8007a9a <__ssputs_r+0x8e>
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f7ff fe64 	bl	8007718 <_malloc_r>
 8007a50:	4606      	mov	r6, r0
 8007a52:	b360      	cbz	r0, 8007aae <__ssputs_r+0xa2>
 8007a54:	6921      	ldr	r1, [r4, #16]
 8007a56:	464a      	mov	r2, r9
 8007a58:	f7ff ff80 	bl	800795c <memcpy>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	6126      	str	r6, [r4, #16]
 8007a6a:	6165      	str	r5, [r4, #20]
 8007a6c:	444e      	add	r6, r9
 8007a6e:	eba5 0509 	sub.w	r5, r5, r9
 8007a72:	6026      	str	r6, [r4, #0]
 8007a74:	60a5      	str	r5, [r4, #8]
 8007a76:	463e      	mov	r6, r7
 8007a78:	42be      	cmp	r6, r7
 8007a7a:	d900      	bls.n	8007a7e <__ssputs_r+0x72>
 8007a7c:	463e      	mov	r6, r7
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	4632      	mov	r2, r6
 8007a82:	4641      	mov	r1, r8
 8007a84:	f000 faa8 	bl	8007fd8 <memmove>
 8007a88:	68a3      	ldr	r3, [r4, #8]
 8007a8a:	1b9b      	subs	r3, r3, r6
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	4433      	add	r3, r6
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	2000      	movs	r0, #0
 8007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	f000 fab6 	bl	800800c <_realloc_r>
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d1e0      	bne.n	8007a68 <__ssputs_r+0x5c>
 8007aa6:	6921      	ldr	r1, [r4, #16]
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	f7ff ff65 	bl	8007978 <_free_r>
 8007aae:	230c      	movs	r3, #12
 8007ab0:	f8ca 3000 	str.w	r3, [sl]
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	e7e9      	b.n	8007a96 <__ssputs_r+0x8a>
	...

08007ac4 <_svfiprintf_r>:
 8007ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac8:	4698      	mov	r8, r3
 8007aca:	898b      	ldrh	r3, [r1, #12]
 8007acc:	061b      	lsls	r3, r3, #24
 8007ace:	b09d      	sub	sp, #116	@ 0x74
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	d510      	bpl.n	8007afa <_svfiprintf_r+0x36>
 8007ad8:	690b      	ldr	r3, [r1, #16]
 8007ada:	b973      	cbnz	r3, 8007afa <_svfiprintf_r+0x36>
 8007adc:	2140      	movs	r1, #64	@ 0x40
 8007ade:	f7ff fe1b 	bl	8007718 <_malloc_r>
 8007ae2:	6028      	str	r0, [r5, #0]
 8007ae4:	6128      	str	r0, [r5, #16]
 8007ae6:	b930      	cbnz	r0, 8007af6 <_svfiprintf_r+0x32>
 8007ae8:	230c      	movs	r3, #12
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	b01d      	add	sp, #116	@ 0x74
 8007af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af6:	2340      	movs	r3, #64	@ 0x40
 8007af8:	616b      	str	r3, [r5, #20]
 8007afa:	2300      	movs	r3, #0
 8007afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007afe:	2320      	movs	r3, #32
 8007b00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b08:	2330      	movs	r3, #48	@ 0x30
 8007b0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ca8 <_svfiprintf_r+0x1e4>
 8007b0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b12:	f04f 0901 	mov.w	r9, #1
 8007b16:	4623      	mov	r3, r4
 8007b18:	469a      	mov	sl, r3
 8007b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b1e:	b10a      	cbz	r2, 8007b24 <_svfiprintf_r+0x60>
 8007b20:	2a25      	cmp	r2, #37	@ 0x25
 8007b22:	d1f9      	bne.n	8007b18 <_svfiprintf_r+0x54>
 8007b24:	ebba 0b04 	subs.w	fp, sl, r4
 8007b28:	d00b      	beq.n	8007b42 <_svfiprintf_r+0x7e>
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff ff6b 	bl	8007a0c <__ssputs_r>
 8007b36:	3001      	adds	r0, #1
 8007b38:	f000 80a7 	beq.w	8007c8a <_svfiprintf_r+0x1c6>
 8007b3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b3e:	445a      	add	r2, fp
 8007b40:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b42:	f89a 3000 	ldrb.w	r3, [sl]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 809f 	beq.w	8007c8a <_svfiprintf_r+0x1c6>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b56:	f10a 0a01 	add.w	sl, sl, #1
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	9307      	str	r3, [sp, #28]
 8007b5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b62:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b64:	4654      	mov	r4, sl
 8007b66:	2205      	movs	r2, #5
 8007b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b6c:	484e      	ldr	r0, [pc, #312]	@ (8007ca8 <_svfiprintf_r+0x1e4>)
 8007b6e:	f7f8 fb6f 	bl	8000250 <memchr>
 8007b72:	9a04      	ldr	r2, [sp, #16]
 8007b74:	b9d8      	cbnz	r0, 8007bae <_svfiprintf_r+0xea>
 8007b76:	06d0      	lsls	r0, r2, #27
 8007b78:	bf44      	itt	mi
 8007b7a:	2320      	movmi	r3, #32
 8007b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b80:	0711      	lsls	r1, r2, #28
 8007b82:	bf44      	itt	mi
 8007b84:	232b      	movmi	r3, #43	@ 0x2b
 8007b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b90:	d015      	beq.n	8007bbe <_svfiprintf_r+0xfa>
 8007b92:	9a07      	ldr	r2, [sp, #28]
 8007b94:	4654      	mov	r4, sl
 8007b96:	2000      	movs	r0, #0
 8007b98:	f04f 0c0a 	mov.w	ip, #10
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ba2:	3b30      	subs	r3, #48	@ 0x30
 8007ba4:	2b09      	cmp	r3, #9
 8007ba6:	d94b      	bls.n	8007c40 <_svfiprintf_r+0x17c>
 8007ba8:	b1b0      	cbz	r0, 8007bd8 <_svfiprintf_r+0x114>
 8007baa:	9207      	str	r2, [sp, #28]
 8007bac:	e014      	b.n	8007bd8 <_svfiprintf_r+0x114>
 8007bae:	eba0 0308 	sub.w	r3, r0, r8
 8007bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	9304      	str	r3, [sp, #16]
 8007bba:	46a2      	mov	sl, r4
 8007bbc:	e7d2      	b.n	8007b64 <_svfiprintf_r+0xa0>
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	1d19      	adds	r1, r3, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	9103      	str	r1, [sp, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfbb      	ittet	lt
 8007bca:	425b      	neglt	r3, r3
 8007bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007bd0:	9307      	strge	r3, [sp, #28]
 8007bd2:	9307      	strlt	r3, [sp, #28]
 8007bd4:	bfb8      	it	lt
 8007bd6:	9204      	strlt	r2, [sp, #16]
 8007bd8:	7823      	ldrb	r3, [r4, #0]
 8007bda:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bdc:	d10a      	bne.n	8007bf4 <_svfiprintf_r+0x130>
 8007bde:	7863      	ldrb	r3, [r4, #1]
 8007be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007be2:	d132      	bne.n	8007c4a <_svfiprintf_r+0x186>
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	1d1a      	adds	r2, r3, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	9203      	str	r2, [sp, #12]
 8007bec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bf0:	3402      	adds	r4, #2
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007cb8 <_svfiprintf_r+0x1f4>
 8007bf8:	7821      	ldrb	r1, [r4, #0]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	f7f8 fb27 	bl	8000250 <memchr>
 8007c02:	b138      	cbz	r0, 8007c14 <_svfiprintf_r+0x150>
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	eba0 000a 	sub.w	r0, r0, sl
 8007c0a:	2240      	movs	r2, #64	@ 0x40
 8007c0c:	4082      	lsls	r2, r0
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	3401      	adds	r4, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c18:	4824      	ldr	r0, [pc, #144]	@ (8007cac <_svfiprintf_r+0x1e8>)
 8007c1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c1e:	2206      	movs	r2, #6
 8007c20:	f7f8 fb16 	bl	8000250 <memchr>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d036      	beq.n	8007c96 <_svfiprintf_r+0x1d2>
 8007c28:	4b21      	ldr	r3, [pc, #132]	@ (8007cb0 <_svfiprintf_r+0x1ec>)
 8007c2a:	bb1b      	cbnz	r3, 8007c74 <_svfiprintf_r+0x1b0>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	3307      	adds	r3, #7
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	3308      	adds	r3, #8
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c3a:	4433      	add	r3, r6
 8007c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c3e:	e76a      	b.n	8007b16 <_svfiprintf_r+0x52>
 8007c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c44:	460c      	mov	r4, r1
 8007c46:	2001      	movs	r0, #1
 8007c48:	e7a8      	b.n	8007b9c <_svfiprintf_r+0xd8>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	4619      	mov	r1, r3
 8007c52:	f04f 0c0a 	mov.w	ip, #10
 8007c56:	4620      	mov	r0, r4
 8007c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c5c:	3a30      	subs	r2, #48	@ 0x30
 8007c5e:	2a09      	cmp	r2, #9
 8007c60:	d903      	bls.n	8007c6a <_svfiprintf_r+0x1a6>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0c6      	beq.n	8007bf4 <_svfiprintf_r+0x130>
 8007c66:	9105      	str	r1, [sp, #20]
 8007c68:	e7c4      	b.n	8007bf4 <_svfiprintf_r+0x130>
 8007c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c6e:	4604      	mov	r4, r0
 8007c70:	2301      	movs	r3, #1
 8007c72:	e7f0      	b.n	8007c56 <_svfiprintf_r+0x192>
 8007c74:	ab03      	add	r3, sp, #12
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb4 <_svfiprintf_r+0x1f0>)
 8007c7c:	a904      	add	r1, sp, #16
 8007c7e:	4638      	mov	r0, r7
 8007c80:	f3af 8000 	nop.w
 8007c84:	1c42      	adds	r2, r0, #1
 8007c86:	4606      	mov	r6, r0
 8007c88:	d1d6      	bne.n	8007c38 <_svfiprintf_r+0x174>
 8007c8a:	89ab      	ldrh	r3, [r5, #12]
 8007c8c:	065b      	lsls	r3, r3, #25
 8007c8e:	f53f af2d 	bmi.w	8007aec <_svfiprintf_r+0x28>
 8007c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c94:	e72c      	b.n	8007af0 <_svfiprintf_r+0x2c>
 8007c96:	ab03      	add	r3, sp, #12
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <_svfiprintf_r+0x1f0>)
 8007c9e:	a904      	add	r1, sp, #16
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f000 f879 	bl	8007d98 <_printf_i>
 8007ca6:	e7ed      	b.n	8007c84 <_svfiprintf_r+0x1c0>
 8007ca8:	08008100 	.word	0x08008100
 8007cac:	0800810a 	.word	0x0800810a
 8007cb0:	00000000 	.word	0x00000000
 8007cb4:	08007a0d 	.word	0x08007a0d
 8007cb8:	08008106 	.word	0x08008106

08007cbc <_printf_common>:
 8007cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	4698      	mov	r8, r3
 8007cc4:	688a      	ldr	r2, [r1, #8]
 8007cc6:	690b      	ldr	r3, [r1, #16]
 8007cc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	bfb8      	it	lt
 8007cd0:	4613      	movlt	r3, r2
 8007cd2:	6033      	str	r3, [r6, #0]
 8007cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cd8:	4607      	mov	r7, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	b10a      	cbz	r2, 8007ce2 <_printf_common+0x26>
 8007cde:	3301      	adds	r3, #1
 8007ce0:	6033      	str	r3, [r6, #0]
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	0699      	lsls	r1, r3, #26
 8007ce6:	bf42      	ittt	mi
 8007ce8:	6833      	ldrmi	r3, [r6, #0]
 8007cea:	3302      	addmi	r3, #2
 8007cec:	6033      	strmi	r3, [r6, #0]
 8007cee:	6825      	ldr	r5, [r4, #0]
 8007cf0:	f015 0506 	ands.w	r5, r5, #6
 8007cf4:	d106      	bne.n	8007d04 <_printf_common+0x48>
 8007cf6:	f104 0a19 	add.w	sl, r4, #25
 8007cfa:	68e3      	ldr	r3, [r4, #12]
 8007cfc:	6832      	ldr	r2, [r6, #0]
 8007cfe:	1a9b      	subs	r3, r3, r2
 8007d00:	42ab      	cmp	r3, r5
 8007d02:	dc26      	bgt.n	8007d52 <_printf_common+0x96>
 8007d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	3b00      	subs	r3, #0
 8007d0c:	bf18      	it	ne
 8007d0e:	2301      	movne	r3, #1
 8007d10:	0692      	lsls	r2, r2, #26
 8007d12:	d42b      	bmi.n	8007d6c <_printf_common+0xb0>
 8007d14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d18:	4641      	mov	r1, r8
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	47c8      	blx	r9
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d01e      	beq.n	8007d60 <_printf_common+0xa4>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	6922      	ldr	r2, [r4, #16]
 8007d26:	f003 0306 	and.w	r3, r3, #6
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	bf02      	ittt	eq
 8007d2e:	68e5      	ldreq	r5, [r4, #12]
 8007d30:	6833      	ldreq	r3, [r6, #0]
 8007d32:	1aed      	subeq	r5, r5, r3
 8007d34:	68a3      	ldr	r3, [r4, #8]
 8007d36:	bf0c      	ite	eq
 8007d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d3c:	2500      	movne	r5, #0
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bfc4      	itt	gt
 8007d42:	1a9b      	subgt	r3, r3, r2
 8007d44:	18ed      	addgt	r5, r5, r3
 8007d46:	2600      	movs	r6, #0
 8007d48:	341a      	adds	r4, #26
 8007d4a:	42b5      	cmp	r5, r6
 8007d4c:	d11a      	bne.n	8007d84 <_printf_common+0xc8>
 8007d4e:	2000      	movs	r0, #0
 8007d50:	e008      	b.n	8007d64 <_printf_common+0xa8>
 8007d52:	2301      	movs	r3, #1
 8007d54:	4652      	mov	r2, sl
 8007d56:	4641      	mov	r1, r8
 8007d58:	4638      	mov	r0, r7
 8007d5a:	47c8      	blx	r9
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d103      	bne.n	8007d68 <_printf_common+0xac>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d68:	3501      	adds	r5, #1
 8007d6a:	e7c6      	b.n	8007cfa <_printf_common+0x3e>
 8007d6c:	18e1      	adds	r1, r4, r3
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	2030      	movs	r0, #48	@ 0x30
 8007d72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d76:	4422      	add	r2, r4
 8007d78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d80:	3302      	adds	r3, #2
 8007d82:	e7c7      	b.n	8007d14 <_printf_common+0x58>
 8007d84:	2301      	movs	r3, #1
 8007d86:	4622      	mov	r2, r4
 8007d88:	4641      	mov	r1, r8
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	47c8      	blx	r9
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d0e6      	beq.n	8007d60 <_printf_common+0xa4>
 8007d92:	3601      	adds	r6, #1
 8007d94:	e7d9      	b.n	8007d4a <_printf_common+0x8e>
	...

08007d98 <_printf_i>:
 8007d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d9c:	7e0f      	ldrb	r7, [r1, #24]
 8007d9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007da0:	2f78      	cmp	r7, #120	@ 0x78
 8007da2:	4691      	mov	r9, r2
 8007da4:	4680      	mov	r8, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	469a      	mov	sl, r3
 8007daa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dae:	d807      	bhi.n	8007dc0 <_printf_i+0x28>
 8007db0:	2f62      	cmp	r7, #98	@ 0x62
 8007db2:	d80a      	bhi.n	8007dca <_printf_i+0x32>
 8007db4:	2f00      	cmp	r7, #0
 8007db6:	f000 80d2 	beq.w	8007f5e <_printf_i+0x1c6>
 8007dba:	2f58      	cmp	r7, #88	@ 0x58
 8007dbc:	f000 80b9 	beq.w	8007f32 <_printf_i+0x19a>
 8007dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007dc8:	e03a      	b.n	8007e40 <_printf_i+0xa8>
 8007dca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dce:	2b15      	cmp	r3, #21
 8007dd0:	d8f6      	bhi.n	8007dc0 <_printf_i+0x28>
 8007dd2:	a101      	add	r1, pc, #4	@ (adr r1, 8007dd8 <_printf_i+0x40>)
 8007dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dd8:	08007e31 	.word	0x08007e31
 8007ddc:	08007e45 	.word	0x08007e45
 8007de0:	08007dc1 	.word	0x08007dc1
 8007de4:	08007dc1 	.word	0x08007dc1
 8007de8:	08007dc1 	.word	0x08007dc1
 8007dec:	08007dc1 	.word	0x08007dc1
 8007df0:	08007e45 	.word	0x08007e45
 8007df4:	08007dc1 	.word	0x08007dc1
 8007df8:	08007dc1 	.word	0x08007dc1
 8007dfc:	08007dc1 	.word	0x08007dc1
 8007e00:	08007dc1 	.word	0x08007dc1
 8007e04:	08007f45 	.word	0x08007f45
 8007e08:	08007e6f 	.word	0x08007e6f
 8007e0c:	08007eff 	.word	0x08007eff
 8007e10:	08007dc1 	.word	0x08007dc1
 8007e14:	08007dc1 	.word	0x08007dc1
 8007e18:	08007f67 	.word	0x08007f67
 8007e1c:	08007dc1 	.word	0x08007dc1
 8007e20:	08007e6f 	.word	0x08007e6f
 8007e24:	08007dc1 	.word	0x08007dc1
 8007e28:	08007dc1 	.word	0x08007dc1
 8007e2c:	08007f07 	.word	0x08007f07
 8007e30:	6833      	ldr	r3, [r6, #0]
 8007e32:	1d1a      	adds	r2, r3, #4
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6032      	str	r2, [r6, #0]
 8007e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e40:	2301      	movs	r3, #1
 8007e42:	e09d      	b.n	8007f80 <_printf_i+0x1e8>
 8007e44:	6833      	ldr	r3, [r6, #0]
 8007e46:	6820      	ldr	r0, [r4, #0]
 8007e48:	1d19      	adds	r1, r3, #4
 8007e4a:	6031      	str	r1, [r6, #0]
 8007e4c:	0606      	lsls	r6, r0, #24
 8007e4e:	d501      	bpl.n	8007e54 <_printf_i+0xbc>
 8007e50:	681d      	ldr	r5, [r3, #0]
 8007e52:	e003      	b.n	8007e5c <_printf_i+0xc4>
 8007e54:	0645      	lsls	r5, r0, #25
 8007e56:	d5fb      	bpl.n	8007e50 <_printf_i+0xb8>
 8007e58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e5c:	2d00      	cmp	r5, #0
 8007e5e:	da03      	bge.n	8007e68 <_printf_i+0xd0>
 8007e60:	232d      	movs	r3, #45	@ 0x2d
 8007e62:	426d      	negs	r5, r5
 8007e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e68:	4859      	ldr	r0, [pc, #356]	@ (8007fd0 <_printf_i+0x238>)
 8007e6a:	230a      	movs	r3, #10
 8007e6c:	e011      	b.n	8007e92 <_printf_i+0xfa>
 8007e6e:	6821      	ldr	r1, [r4, #0]
 8007e70:	6833      	ldr	r3, [r6, #0]
 8007e72:	0608      	lsls	r0, r1, #24
 8007e74:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e78:	d402      	bmi.n	8007e80 <_printf_i+0xe8>
 8007e7a:	0649      	lsls	r1, r1, #25
 8007e7c:	bf48      	it	mi
 8007e7e:	b2ad      	uxthmi	r5, r5
 8007e80:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e82:	4853      	ldr	r0, [pc, #332]	@ (8007fd0 <_printf_i+0x238>)
 8007e84:	6033      	str	r3, [r6, #0]
 8007e86:	bf14      	ite	ne
 8007e88:	230a      	movne	r3, #10
 8007e8a:	2308      	moveq	r3, #8
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e92:	6866      	ldr	r6, [r4, #4]
 8007e94:	60a6      	str	r6, [r4, #8]
 8007e96:	2e00      	cmp	r6, #0
 8007e98:	bfa2      	ittt	ge
 8007e9a:	6821      	ldrge	r1, [r4, #0]
 8007e9c:	f021 0104 	bicge.w	r1, r1, #4
 8007ea0:	6021      	strge	r1, [r4, #0]
 8007ea2:	b90d      	cbnz	r5, 8007ea8 <_printf_i+0x110>
 8007ea4:	2e00      	cmp	r6, #0
 8007ea6:	d04b      	beq.n	8007f40 <_printf_i+0x1a8>
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8007eae:	fb03 5711 	mls	r7, r3, r1, r5
 8007eb2:	5dc7      	ldrb	r7, [r0, r7]
 8007eb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007eb8:	462f      	mov	r7, r5
 8007eba:	42bb      	cmp	r3, r7
 8007ebc:	460d      	mov	r5, r1
 8007ebe:	d9f4      	bls.n	8007eaa <_printf_i+0x112>
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d10b      	bne.n	8007edc <_printf_i+0x144>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	07df      	lsls	r7, r3, #31
 8007ec8:	d508      	bpl.n	8007edc <_printf_i+0x144>
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	6861      	ldr	r1, [r4, #4]
 8007ece:	4299      	cmp	r1, r3
 8007ed0:	bfde      	ittt	le
 8007ed2:	2330      	movle	r3, #48	@ 0x30
 8007ed4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ed8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007edc:	1b92      	subs	r2, r2, r6
 8007ede:	6122      	str	r2, [r4, #16]
 8007ee0:	f8cd a000 	str.w	sl, [sp]
 8007ee4:	464b      	mov	r3, r9
 8007ee6:	aa03      	add	r2, sp, #12
 8007ee8:	4621      	mov	r1, r4
 8007eea:	4640      	mov	r0, r8
 8007eec:	f7ff fee6 	bl	8007cbc <_printf_common>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d14a      	bne.n	8007f8a <_printf_i+0x1f2>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	b004      	add	sp, #16
 8007efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	f043 0320 	orr.w	r3, r3, #32
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	4833      	ldr	r0, [pc, #204]	@ (8007fd4 <_printf_i+0x23c>)
 8007f08:	2778      	movs	r7, #120	@ 0x78
 8007f0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	6831      	ldr	r1, [r6, #0]
 8007f12:	061f      	lsls	r7, r3, #24
 8007f14:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f18:	d402      	bmi.n	8007f20 <_printf_i+0x188>
 8007f1a:	065f      	lsls	r7, r3, #25
 8007f1c:	bf48      	it	mi
 8007f1e:	b2ad      	uxthmi	r5, r5
 8007f20:	6031      	str	r1, [r6, #0]
 8007f22:	07d9      	lsls	r1, r3, #31
 8007f24:	bf44      	itt	mi
 8007f26:	f043 0320 	orrmi.w	r3, r3, #32
 8007f2a:	6023      	strmi	r3, [r4, #0]
 8007f2c:	b11d      	cbz	r5, 8007f36 <_printf_i+0x19e>
 8007f2e:	2310      	movs	r3, #16
 8007f30:	e7ac      	b.n	8007e8c <_printf_i+0xf4>
 8007f32:	4827      	ldr	r0, [pc, #156]	@ (8007fd0 <_printf_i+0x238>)
 8007f34:	e7e9      	b.n	8007f0a <_printf_i+0x172>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	f023 0320 	bic.w	r3, r3, #32
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	e7f6      	b.n	8007f2e <_printf_i+0x196>
 8007f40:	4616      	mov	r6, r2
 8007f42:	e7bd      	b.n	8007ec0 <_printf_i+0x128>
 8007f44:	6833      	ldr	r3, [r6, #0]
 8007f46:	6825      	ldr	r5, [r4, #0]
 8007f48:	6961      	ldr	r1, [r4, #20]
 8007f4a:	1d18      	adds	r0, r3, #4
 8007f4c:	6030      	str	r0, [r6, #0]
 8007f4e:	062e      	lsls	r6, r5, #24
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	d501      	bpl.n	8007f58 <_printf_i+0x1c0>
 8007f54:	6019      	str	r1, [r3, #0]
 8007f56:	e002      	b.n	8007f5e <_printf_i+0x1c6>
 8007f58:	0668      	lsls	r0, r5, #25
 8007f5a:	d5fb      	bpl.n	8007f54 <_printf_i+0x1bc>
 8007f5c:	8019      	strh	r1, [r3, #0]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	6123      	str	r3, [r4, #16]
 8007f62:	4616      	mov	r6, r2
 8007f64:	e7bc      	b.n	8007ee0 <_printf_i+0x148>
 8007f66:	6833      	ldr	r3, [r6, #0]
 8007f68:	1d1a      	adds	r2, r3, #4
 8007f6a:	6032      	str	r2, [r6, #0]
 8007f6c:	681e      	ldr	r6, [r3, #0]
 8007f6e:	6862      	ldr	r2, [r4, #4]
 8007f70:	2100      	movs	r1, #0
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7f8 f96c 	bl	8000250 <memchr>
 8007f78:	b108      	cbz	r0, 8007f7e <_printf_i+0x1e6>
 8007f7a:	1b80      	subs	r0, r0, r6
 8007f7c:	6060      	str	r0, [r4, #4]
 8007f7e:	6863      	ldr	r3, [r4, #4]
 8007f80:	6123      	str	r3, [r4, #16]
 8007f82:	2300      	movs	r3, #0
 8007f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f88:	e7aa      	b.n	8007ee0 <_printf_i+0x148>
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	4649      	mov	r1, r9
 8007f90:	4640      	mov	r0, r8
 8007f92:	47d0      	blx	sl
 8007f94:	3001      	adds	r0, #1
 8007f96:	d0ad      	beq.n	8007ef4 <_printf_i+0x15c>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	079b      	lsls	r3, r3, #30
 8007f9c:	d413      	bmi.n	8007fc6 <_printf_i+0x22e>
 8007f9e:	68e0      	ldr	r0, [r4, #12]
 8007fa0:	9b03      	ldr	r3, [sp, #12]
 8007fa2:	4298      	cmp	r0, r3
 8007fa4:	bfb8      	it	lt
 8007fa6:	4618      	movlt	r0, r3
 8007fa8:	e7a6      	b.n	8007ef8 <_printf_i+0x160>
 8007faa:	2301      	movs	r3, #1
 8007fac:	4632      	mov	r2, r6
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	47d0      	blx	sl
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d09d      	beq.n	8007ef4 <_printf_i+0x15c>
 8007fb8:	3501      	adds	r5, #1
 8007fba:	68e3      	ldr	r3, [r4, #12]
 8007fbc:	9903      	ldr	r1, [sp, #12]
 8007fbe:	1a5b      	subs	r3, r3, r1
 8007fc0:	42ab      	cmp	r3, r5
 8007fc2:	dcf2      	bgt.n	8007faa <_printf_i+0x212>
 8007fc4:	e7eb      	b.n	8007f9e <_printf_i+0x206>
 8007fc6:	2500      	movs	r5, #0
 8007fc8:	f104 0619 	add.w	r6, r4, #25
 8007fcc:	e7f5      	b.n	8007fba <_printf_i+0x222>
 8007fce:	bf00      	nop
 8007fd0:	08008111 	.word	0x08008111
 8007fd4:	08008122 	.word	0x08008122

08007fd8 <memmove>:
 8007fd8:	4288      	cmp	r0, r1
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	eb01 0402 	add.w	r4, r1, r2
 8007fe0:	d902      	bls.n	8007fe8 <memmove+0x10>
 8007fe2:	4284      	cmp	r4, r0
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	d807      	bhi.n	8007ff8 <memmove+0x20>
 8007fe8:	1e43      	subs	r3, r0, #1
 8007fea:	42a1      	cmp	r1, r4
 8007fec:	d008      	beq.n	8008000 <memmove+0x28>
 8007fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ff6:	e7f8      	b.n	8007fea <memmove+0x12>
 8007ff8:	4402      	add	r2, r0
 8007ffa:	4601      	mov	r1, r0
 8007ffc:	428a      	cmp	r2, r1
 8007ffe:	d100      	bne.n	8008002 <memmove+0x2a>
 8008000:	bd10      	pop	{r4, pc}
 8008002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800800a:	e7f7      	b.n	8007ffc <memmove+0x24>

0800800c <_realloc_r>:
 800800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008010:	4680      	mov	r8, r0
 8008012:	4615      	mov	r5, r2
 8008014:	460c      	mov	r4, r1
 8008016:	b921      	cbnz	r1, 8008022 <_realloc_r+0x16>
 8008018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800801c:	4611      	mov	r1, r2
 800801e:	f7ff bb7b 	b.w	8007718 <_malloc_r>
 8008022:	b92a      	cbnz	r2, 8008030 <_realloc_r+0x24>
 8008024:	f7ff fca8 	bl	8007978 <_free_r>
 8008028:	2400      	movs	r4, #0
 800802a:	4620      	mov	r0, r4
 800802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008030:	f000 f81a 	bl	8008068 <_malloc_usable_size_r>
 8008034:	4285      	cmp	r5, r0
 8008036:	4606      	mov	r6, r0
 8008038:	d802      	bhi.n	8008040 <_realloc_r+0x34>
 800803a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800803e:	d8f4      	bhi.n	800802a <_realloc_r+0x1e>
 8008040:	4629      	mov	r1, r5
 8008042:	4640      	mov	r0, r8
 8008044:	f7ff fb68 	bl	8007718 <_malloc_r>
 8008048:	4607      	mov	r7, r0
 800804a:	2800      	cmp	r0, #0
 800804c:	d0ec      	beq.n	8008028 <_realloc_r+0x1c>
 800804e:	42b5      	cmp	r5, r6
 8008050:	462a      	mov	r2, r5
 8008052:	4621      	mov	r1, r4
 8008054:	bf28      	it	cs
 8008056:	4632      	movcs	r2, r6
 8008058:	f7ff fc80 	bl	800795c <memcpy>
 800805c:	4621      	mov	r1, r4
 800805e:	4640      	mov	r0, r8
 8008060:	f7ff fc8a 	bl	8007978 <_free_r>
 8008064:	463c      	mov	r4, r7
 8008066:	e7e0      	b.n	800802a <_realloc_r+0x1e>

08008068 <_malloc_usable_size_r>:
 8008068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800806c:	1f18      	subs	r0, r3, #4
 800806e:	2b00      	cmp	r3, #0
 8008070:	bfbc      	itt	lt
 8008072:	580b      	ldrlt	r3, [r1, r0]
 8008074:	18c0      	addlt	r0, r0, r3
 8008076:	4770      	bx	lr

08008078 <_init>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	bf00      	nop
 800807c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800807e:	bc08      	pop	{r3}
 8008080:	469e      	mov	lr, r3
 8008082:	4770      	bx	lr

08008084 <_fini>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	bf00      	nop
 8008088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808a:	bc08      	pop	{r3}
 800808c:	469e      	mov	lr, r3
 800808e:	4770      	bx	lr
