
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7f8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800a9f8  0800a9f8  0000b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acfc  0800acfc  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800acfc  0800acfc  0000bcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad04  0800ad04  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad04  0800ad04  0000bd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad08  0800ad08  0000bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800ad0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000547c  20000060  0800ad6c  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054dc  0800ad6c  0000c4dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204ac  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b5  00000000  00000000  0002c53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  00030cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b9  00000000  00000000  00032798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b8e8  00000000  00000000  00033c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021738  00000000  00000000  0005f539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108edb  00000000  00000000  00080c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189b4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007184  00000000  00000000  00189b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00190d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a9e0 	.word	0x0800a9e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800a9e0 	.word	0x0800a9e0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <MX_DMA_Init+0x48>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a0f      	ldr	r2, [pc, #60]	@ (800059c <MX_DMA_Init+0x48>)
 8000560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <MX_DMA_Init+0x48>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2010      	movs	r0, #16
 8000578:	f002 fa13 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800057c:	2010      	movs	r0, #16
 800057e:	f002 fa2c 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	2011      	movs	r0, #17
 8000588:	f002 fa0b 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800058c:	2011      	movs	r0, #17
 800058e:	f002 fa24 	bl	80029da <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	//defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <MX_FREERTOS_Init+0x18>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4804      	ldr	r0, [pc, #16]	@ (80005bc <MX_FREERTOS_Init+0x1c>)
 80005aa:	f007 fba9 	bl	8007d00 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a03      	ldr	r2, [pc, #12]	@ (80005c0 <MX_FREERTOS_Init+0x20>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	0800abb4 	.word	0x0800abb4
 80005bc:	080013c9 	.word	0x080013c9
 80005c0:	2000007c 	.word	0x2000007c

080005c4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	@ 0x30
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b77      	ldr	r3, [pc, #476]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a76      	ldr	r2, [pc, #472]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b74      	ldr	r3, [pc, #464]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	61bb      	str	r3, [r7, #24]
 80005f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	4b71      	ldr	r3, [pc, #452]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a70      	ldr	r2, [pc, #448]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b6e      	ldr	r3, [pc, #440]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b6b      	ldr	r3, [pc, #428]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a6a      	ldr	r2, [pc, #424]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b68      	ldr	r3, [pc, #416]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b65      	ldr	r3, [pc, #404]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a64      	ldr	r2, [pc, #400]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b62      	ldr	r3, [pc, #392]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063a:	4b5f      	ldr	r3, [pc, #380]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a5e      	ldr	r2, [pc, #376]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b5c      	ldr	r3, [pc, #368]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b59      	ldr	r3, [pc, #356]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a58      	ldr	r2, [pc, #352]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b56      	ldr	r3, [pc, #344]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b53      	ldr	r3, [pc, #332]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a52      	ldr	r2, [pc, #328]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b50      	ldr	r3, [pc, #320]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000688:	484c      	ldr	r0, [pc, #304]	@ (80007bc <MX_GPIO_Init+0x1f8>)
 800068a:	f002 fee9 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2141      	movs	r1, #65	@ 0x41
 8000692:	484b      	ldr	r0, [pc, #300]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 8000694:	f002 fee4 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4849      	ldr	r0, [pc, #292]	@ (80007c4 <MX_GPIO_Init+0x200>)
 800069e:	f002 fedf 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4843      	ldr	r0, [pc, #268]	@ (80007c8 <MX_GPIO_Init+0x204>)
 80006ba:	f002 fd25 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006be:	2332      	movs	r3, #50	@ 0x32
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ce:	230b      	movs	r3, #11
 80006d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	483b      	ldr	r0, [pc, #236]	@ (80007c8 <MX_GPIO_Init+0x204>)
 80006da:	f002 fd15 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006de:	2386      	movs	r3, #134	@ 0x86
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ee:	230b      	movs	r3, #11
 80006f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4834      	ldr	r0, [pc, #208]	@ (80007cc <MX_GPIO_Init+0x208>)
 80006fa:	f002 fd05 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006fe:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4829      	ldr	r0, [pc, #164]	@ (80007bc <MX_GPIO_Init+0x1f8>)
 8000718:	f002 fcf6 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 800071c:	2341      	movs	r3, #65	@ 0x41
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4823      	ldr	r0, [pc, #140]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 8000734:	f002 fce8 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074a:	230b      	movs	r3, #11
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4819      	ldr	r0, [pc, #100]	@ (80007bc <MX_GPIO_Init+0x1f8>)
 8000756:	f002 fcd7 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4814      	ldr	r0, [pc, #80]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 800076e:	f002 fccb 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000772:	2310      	movs	r3, #16
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <MX_GPIO_Init+0x200>)
 800078a:	f002 fcbd 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800078e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 80007ac:	f002 fcac 	bl	8003108 <HAL_GPIO_Init>

}
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	@ 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020400 	.word	0x40020400
 80007c0:	40021800 	.word	0x40021800
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40020000 	.word	0x40020000

080007d0 <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6178      	str	r0, [r7, #20]
 80007d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80007dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80007e0:	ed87 1a02 	vstr	s2, [r7, #8]
 80007e4:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	615a      	str	r2, [r3, #20]
}
 800080a:	bf00      	nop
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <pid_reset>:

void pid_reset(PID *pid_data)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 8000836:	b480      	push	{r7}
 8000838:	b089      	sub	sp, #36	@ 0x24
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	441a      	add	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	ed93 7a02 	vldr	s14, [r3, #8]
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	ee07 3a90 	vmov	s15, r3
 8000862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800086a:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	ed93 7a03 	vldr	s14, [r3, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000884:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	ed93 7a04 	vldr	s14, [r3, #16]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	ee07 3a90 	vmov	s15, r3
 800089a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800089e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a2:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	ee07 3a90 	vmov	s15, r3
 80008ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80008b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008be:	db08      	blt.n	80008d2 <pid_calculate+0x9c>
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	edc7 7a07 	vstr	s15, [r7, #28]
 80008d0:	e016      	b.n	8000900 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	425b      	negs	r3, r3
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80008e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ec:	d808      	bhi.n	8000900 <pid_calculate+0xca>
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	425b      	negs	r3, r3
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fc:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8000906:	ed97 7a05 	vldr	s14, [r7, #20]
 800090a:	edd7 7a07 	vldr	s15, [r7, #28]
 800090e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000912:	edd7 7a04 	vldr	s15, [r7, #16]
 8000916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800091e:	ee17 3a90 	vmov	r3, s15
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	@ 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <Init_Motor>:

MOTOR motorA;
MOTOR motorB;

void Init_Motor(MOTOR *m, TIM_HandleTypeDef *enc, uint32_t axis, TIM_HandleTypeDef* front, TIM_HandleTypeDef* back)
{
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	603b      	str	r3, [r7, #0]
	m->encoder = enc;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	601a      	str	r2, [r3, #0]
	m->axisTimer = axis;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	60da      	str	r2, [r3, #12]
	m->motorBack = back;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	605a      	str	r2, [r3, #4]
	m->motorFront = front;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	609a      	str	r2, [r3, #8]

	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800095a:	825a      	strh	r2, [r3, #18]

	m->pulse_count = 0;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
	m->measured_speed = 0;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
	m->set_speed = 0;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
    m->actual_PWM = 0;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f849 	bl	8000a20 <motor_update_count>

	m->measured_speed = abs((m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000996:	fb02 f303 	mul.w	r3, r2, r3
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	8a52      	ldrh	r2, [r2, #18]
 800099e:	fb93 f3f2 	sdiv	r3, r3, r2
 80009a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	619a      	str	r2, [r3, #24]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69d9      	ldr	r1, [r3, #28]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	461a      	mov	r2, r3
 80009be:	f7ff ff3a 	bl	8000836 <pid_calculate>
 80009c2:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a1a      	ldr	r2, [r3, #32]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	441a      	add	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	621a      	str	r2, [r3, #32]

	if(m->actual_PWM >= 0)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a1b      	ldr	r3, [r3, #32]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db05      	blt.n	80009e4 <motor_calculate_speed+0x64>
	{
		SetMotorSpeed(m, m->actual_PWM);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a1b      	ldr	r3, [r3, #32]
 80009dc:	4619      	mov	r1, r3
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f000 f8c9 	bl	8000b76 <SetMotorSpeed>

	}

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <ResetMotor>:

void ResetMotor(MOTOR *m) {
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	m->set_speed = 0;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <motor_set_speed>:
enum DIRECTION {
	DEFAULT, FRONT, BACK
};

void motor_set_speed(MOTOR *m, short direction, int set_speed)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	460b      	mov	r3, r1
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	817b      	strh	r3, [r7, #10]
	if(set_speed != m->set_speed)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d004      	beq.n	8000a70 <motor_set_speed+0x22>
		pid_reset(&(m->pid_controller));
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3324      	adds	r3, #36	@ 0x24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fed3 	bl	8000816 <pid_reset>

	m->set_speed = set_speed;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	61da      	str	r2, [r3, #28]
	m->direction = direction;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	897a      	ldrh	r2, [r7, #10]
 8000a7a:	821a      	strh	r2, [r3, #16]
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <MotorABS>:

void MotorABS(MOTOR* m) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	ResetMotor(m);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ffad 	bl	80009ec <ResetMotor>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d105      	bne.n	8000aa6 <MotorABS+0x22>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa4:	e02c      	b.n	8000b00 <MotorABS+0x7c>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d105      	bne.n	8000aba <MotorABS+0x36>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ab8:	e022      	b.n	8000b00 <MotorABS+0x7c>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d105      	bne.n	8000ace <MotorABS+0x4a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000acc:	e018      	b.n	8000b00 <MotorABS+0x7c>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	2b0c      	cmp	r3, #12
 8000ad4:	d105      	bne.n	8000ae2 <MotorABS+0x5e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	2300      	movs	r3, #0
 8000ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae0:	e00e      	b.n	8000b00 <MotorABS+0x7c>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	2b10      	cmp	r3, #16
 8000ae8:	d105      	bne.n	8000af6 <MotorABS+0x72>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2300      	movs	r3, #0
 8000af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af4:	e004      	b.n	8000b00 <MotorABS+0x7c>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d105      	bne.n	8000b14 <MotorABS+0x90>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b12:	e02c      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d105      	bne.n	8000b28 <MotorABS+0xa4>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b26:	e022      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	d105      	bne.n	8000b3c <MotorABS+0xb8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	2300      	movs	r3, #0
 8000b38:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b3a:	e018      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b0c      	cmp	r3, #12
 8000b42:	d105      	bne.n	8000b50 <MotorABS+0xcc>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b4e:	e00e      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	2b10      	cmp	r3, #16
 8000b56:	d105      	bne.n	8000b64 <MotorABS+0xe0>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000b62:	e004      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <SetMotorSpeed>:

void SetMotorSpeed(MOTOR* m, uint16_t speed)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	807b      	strh	r3, [r7, #2]
	switch (m->direction) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	f000 810b 	beq.w	8000da4 <SetMotorSpeed+0x22e>
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	f300 8183 	bgt.w	8000e9a <SetMotorSpeed+0x324>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <SetMotorSpeed+0x2a>
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	f000 8088 	beq.w	8000cae <SetMotorSpeed+0x138>
		break;
	}


	//__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed);
}
 8000b9e:	e17c      	b.n	8000e9a <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000ba0:	887a      	ldrh	r2, [r7, #2]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d304      	bcc.n	8000bb8 <SetMotorSpeed+0x42>
			speed = m->motorFront->Instance->ARR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb6:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d105      	bne.n	8000bcc <SetMotorSpeed+0x56>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bca:	e02c      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d105      	bne.n	8000be0 <SetMotorSpeed+0x6a>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bde:	e022      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b08      	cmp	r3, #8
 8000be6:	d105      	bne.n	8000bf4 <SetMotorSpeed+0x7e>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000bf2:	e018      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	2b0c      	cmp	r3, #12
 8000bfa:	d105      	bne.n	8000c08 <SetMotorSpeed+0x92>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	e00e      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	2b10      	cmp	r3, #16
 8000c0e:	d105      	bne.n	8000c1c <SetMotorSpeed+0xa6>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1a:	e004      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	65d3      	str	r3, [r2, #92]	@ 0x5c
		if(speed >= m->motorBack->Instance->ARR)
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d304      	bcc.n	8000c3e <SetMotorSpeed+0xc8>
			speed = m->motorBack->Instance->ARR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d105      	bne.n	8000c52 <SetMotorSpeed+0xdc>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	887a      	ldrh	r2, [r7, #2]
 8000c4e:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000c50:	e123      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d105      	bne.n	8000c66 <SetMotorSpeed+0xf0>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000c64:	e119      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d105      	bne.n	8000c7a <SetMotorSpeed+0x104>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000c78:	e10f      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	2b0c      	cmp	r3, #12
 8000c80:	d105      	bne.n	8000c8e <SetMotorSpeed+0x118>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000c8c:	e105      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b10      	cmp	r3, #16
 8000c94:	d105      	bne.n	8000ca2 <SetMotorSpeed+0x12c>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000ca0:	e0fb      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000cac:	e0f5      	b.n	8000e9a <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d304      	bcc.n	8000cc6 <SetMotorSpeed+0x150>
			speed = m->motorFront->Instance->ARR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d105      	bne.n	8000cda <SetMotorSpeed+0x164>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cd8:	e02c      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d105      	bne.n	8000cee <SetMotorSpeed+0x178>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cec:	e022      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d105      	bne.n	8000d02 <SetMotorSpeed+0x18c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d00:	e018      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b0c      	cmp	r3, #12
 8000d08:	d105      	bne.n	8000d16 <SetMotorSpeed+0x1a0>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d14:	e00e      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b10      	cmp	r3, #16
 8000d1c:	d105      	bne.n	8000d2a <SetMotorSpeed+0x1b4>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d28:	e004      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d105      	bne.n	8000d48 <SetMotorSpeed+0x1d2>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2200      	movs	r2, #0
 8000d44:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000d46:	e0a8      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d105      	bne.n	8000d5c <SetMotorSpeed+0x1e6>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000d5a:	e09e      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d105      	bne.n	8000d70 <SetMotorSpeed+0x1fa>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000d6e:	e094      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	2b0c      	cmp	r3, #12
 8000d76:	d105      	bne.n	8000d84 <SetMotorSpeed+0x20e>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000d82:	e08a      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	2b10      	cmp	r3, #16
 8000d8a:	d105      	bne.n	8000d98 <SetMotorSpeed+0x222>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000d96:	e080      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000da2:	e07a      	b.n	8000e9a <SetMotorSpeed+0x324>
		if(speed >= m->motorBack->Instance->ARR)
 8000da4:	887a      	ldrh	r2, [r7, #2]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d304      	bcc.n	8000dbc <SetMotorSpeed+0x246>
			speed = m->motorBack->Instance->ARR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dba:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <SetMotorSpeed+0x25a>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dce:	e02c      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d105      	bne.n	8000de4 <SetMotorSpeed+0x26e>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000de2:	e022      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d105      	bne.n	8000df8 <SetMotorSpeed+0x282>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000df6:	e018      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2b0c      	cmp	r3, #12
 8000dfe:	d105      	bne.n	8000e0c <SetMotorSpeed+0x296>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	e00e      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b10      	cmp	r3, #16
 8000e12:	d105      	bne.n	8000e20 <SetMotorSpeed+0x2aa>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1e:	e004      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d105      	bne.n	8000e3e <SetMotorSpeed+0x2c8>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000e3c:	e02c      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d105      	bne.n	8000e52 <SetMotorSpeed+0x2dc>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000e50:	e022      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d105      	bne.n	8000e66 <SetMotorSpeed+0x2f0>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000e64:	e018      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b0c      	cmp	r3, #12
 8000e6c:	d105      	bne.n	8000e7a <SetMotorSpeed+0x304>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2300      	movs	r3, #0
 8000e76:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000e78:	e00e      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2b10      	cmp	r3, #16
 8000e80:	d105      	bne.n	8000e8e <SetMotorSpeed+0x318>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000e8c:	e004      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2300      	movs	r3, #0
 8000e96:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000e98:	bf00      	nop
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <Init_MotorSystem>:

void Init_MotorSystem()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
	Init_Motor(&motorA, &htim8, TIM_CHANNEL_1, &htim2, &htim5);
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <Init_MotorSystem+0x60>)
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <Init_MotorSystem+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4916      	ldr	r1, [pc, #88]	@ (8000f10 <Init_MotorSystem+0x68>)
 8000eb8:	4816      	ldr	r0, [pc, #88]	@ (8000f14 <Init_MotorSystem+0x6c>)
 8000eba:	f7ff fd38 	bl	800092e <Init_Motor>
	Init_Motor(&motorB, &htim3, TIM_CHANNEL_4, &htim2, &htim5);
 8000ebe:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <Init_MotorSystem+0x60>)
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <Init_MotorSystem+0x64>)
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	4914      	ldr	r1, [pc, #80]	@ (8000f18 <Init_MotorSystem+0x70>)
 8000ec8:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <Init_MotorSystem+0x74>)
 8000eca:	f7ff fd30 	bl	800092e <Init_Motor>
	//Init_Motor(&motorB, &htim4, TIM_CHANNEL_1, &htim2, &htim5);

	pid_init(&(motorA.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8000f20 <Init_MotorSystem+0x78>
 8000ed4:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000f20 <Init_MotorSystem+0x78>
 8000ed8:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000edc:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <Init_MotorSystem+0x7c>)
 8000ede:	f7ff fc77 	bl	80007d0 <pid_init>
	pid_init(&(motorB.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000f20 <Init_MotorSystem+0x78>
 8000ee8:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000f20 <Init_MotorSystem+0x78>
 8000eec:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000ef0:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <Init_MotorSystem+0x80>)
 8000ef2:	f7ff fc6d 	bl	80007d0 <pid_init>

	MotorABS(&motorA);
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <Init_MotorSystem+0x6c>)
 8000ef8:	f7ff fdc4 	bl	8000a84 <MotorABS>
	MotorABS(&motorB);
 8000efc:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <Init_MotorSystem+0x74>)
 8000efe:	f7ff fdc1 	bl	8000a84 <MotorABS>
	//SetMotorSpeed(&motorB, 0);
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000278 	.word	0x20000278
 8000f0c:	20000194 	.word	0x20000194
 8000f10:	20000310 	.word	0x20000310
 8000f14:	200000c8 	.word	0x200000c8
 8000f18:	200001e0 	.word	0x200001e0
 8000f1c:	20000104 	.word	0x20000104
 8000f20:	3d4ccccd 	.word	0x3d4ccccd
 8000f24:	200000ec 	.word	0x200000ec
 8000f28:	20000128 	.word	0x20000128

08000f2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d105      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		motor_calculate_speed(&motorA);
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f40:	f7ff fd1e 	bl	8000980 <motor_calculate_speed>
		motor_calculate_speed(&motorB);
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f46:	f7ff fd1b 	bl	8000980 <motor_calculate_speed>
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40001000 	.word	0x40001000
 8000f58:	200000c8 	.word	0x200000c8
 8000f5c:	20000104 	.word	0x20000104

08000f60 <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4812      	ldr	r0, [pc, #72]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000f72:	f003 ff8f 	bl	8004e94 <HAL_TIM_PWM_Stop>
        return;
 8000f76:	e01e      	b.n	8000fb6 <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <Set_PWM_Frequency+0x60>)
 8000f7a:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	3301      	adds	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	3b01      	subs	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim12, period);
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f9e:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	0852      	lsrs	r2, r2, #1
 8000fac:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000fae:	2104      	movs	r1, #4
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000fb2:	f003 fe75 	bl	8004ca0 <HAL_TIM_PWM_Start>
}
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000035c 	.word	0x2000035c
 8000fc0:	05b8d800 	.word	0x05b8d800

08000fc4 <ProcessCommand>:

int hornOn = 0;
int engineOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

			if (strcmp((char*)cmd, "INIT") == 0) {
 8000fcc:	49ba      	ldr	r1, [pc, #744]	@ (80012b8 <ProcessCommand+0x2f4>)
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff f936 	bl	8000240 <strcmp>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10d      	bne.n	8000ff6 <ProcessCommand+0x32>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	48b7      	ldr	r0, [pc, #732]	@ (80012bc <ProcessCommand+0x2f8>)
 8000fde:	f002 fa58 	bl	8003492 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	48b5      	ldr	r0, [pc, #724]	@ (80012bc <ProcessCommand+0x2f8>)
 8000fe6:	f002 fa54 	bl	8003492 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fee:	48b3      	ldr	r0, [pc, #716]	@ (80012bc <ProcessCommand+0x2f8>)
 8000ff0:	f002 fa4f 	bl	8003492 <HAL_GPIO_TogglePin>
	    }

	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000ff4:	e1d6      	b.n	80013a4 <ProcessCommand+0x3e0>
			else if (strcmp((char*)cmd, "CMD0") == 0) {
 8000ff6:	49b2      	ldr	r1, [pc, #712]	@ (80012c0 <ProcessCommand+0x2fc>)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f921 	bl	8000240 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d163      	bne.n	80010cc <ProcessCommand+0x108>
				if (!engineOn) {
 8001004:	4baf      	ldr	r3, [pc, #700]	@ (80012c4 <ProcessCommand+0x300>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d12a      	bne.n	8001062 <ProcessCommand+0x9e>
					HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800100c:	213c      	movs	r1, #60	@ 0x3c
 800100e:	48ae      	ldr	r0, [pc, #696]	@ (80012c8 <ProcessCommand+0x304>)
 8001010:	f004 f866 	bl	80050e0 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001014:	213c      	movs	r1, #60	@ 0x3c
 8001016:	48ad      	ldr	r0, [pc, #692]	@ (80012cc <ProcessCommand+0x308>)
 8001018:	f004 f862 	bl	80050e0 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800101c:	213c      	movs	r1, #60	@ 0x3c
 800101e:	48ac      	ldr	r0, [pc, #688]	@ (80012d0 <ProcessCommand+0x30c>)
 8001020:	f004 f85e 	bl	80050e0 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	48ab      	ldr	r0, [pc, #684]	@ (80012d4 <ProcessCommand+0x310>)
 8001028:	f004 f85a 	bl	80050e0 <HAL_TIM_Encoder_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800102c:	2100      	movs	r1, #0
 800102e:	48aa      	ldr	r0, [pc, #680]	@ (80012d8 <ProcessCommand+0x314>)
 8001030:	f003 fe36 	bl	8004ca0 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001034:	210c      	movs	r1, #12
 8001036:	48a8      	ldr	r0, [pc, #672]	@ (80012d8 <ProcessCommand+0x314>)
 8001038:	f003 fe32 	bl	8004ca0 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800103c:	2100      	movs	r1, #0
 800103e:	48a7      	ldr	r0, [pc, #668]	@ (80012dc <ProcessCommand+0x318>)
 8001040:	f003 fe2e 	bl	8004ca0 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001044:	210c      	movs	r1, #12
 8001046:	48a5      	ldr	r0, [pc, #660]	@ (80012dc <ProcessCommand+0x318>)
 8001048:	f003 fe2a 	bl	8004ca0 <HAL_TIM_PWM_Start>
					HAL_TIM_Base_Start_IT(&htim6);
 800104c:	48a4      	ldr	r0, [pc, #656]	@ (80012e0 <ProcessCommand+0x31c>)
 800104e:	f003 fd29 	bl	8004aa4 <HAL_TIM_Base_Start_IT>
					HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001052:	2104      	movs	r1, #4
 8001054:	48a3      	ldr	r0, [pc, #652]	@ (80012e4 <ProcessCommand+0x320>)
 8001056:	f003 fe23 	bl	8004ca0 <HAL_TIM_PWM_Start>
					engineOn = 1;
 800105a:	4b9a      	ldr	r3, [pc, #616]	@ (80012c4 <ProcessCommand+0x300>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e02c      	b.n	80010bc <ProcessCommand+0xf8>
				ResetMotor(&motorA);
 8001062:	48a1      	ldr	r0, [pc, #644]	@ (80012e8 <ProcessCommand+0x324>)
 8001064:	f7ff fcc2 	bl	80009ec <ResetMotor>
				HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001068:	213c      	movs	r1, #60	@ 0x3c
 800106a:	4897      	ldr	r0, [pc, #604]	@ (80012c8 <ProcessCommand+0x304>)
 800106c:	f004 f8c6 	bl	80051fc <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001070:	213c      	movs	r1, #60	@ 0x3c
 8001072:	4896      	ldr	r0, [pc, #600]	@ (80012cc <ProcessCommand+0x308>)
 8001074:	f004 f8c2 	bl	80051fc <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8001078:	213c      	movs	r1, #60	@ 0x3c
 800107a:	4895      	ldr	r0, [pc, #596]	@ (80012d0 <ProcessCommand+0x30c>)
 800107c:	f004 f8be 	bl	80051fc <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim8, TIM_CHANNEL_ALL);
 8001080:	213c      	movs	r1, #60	@ 0x3c
 8001082:	4894      	ldr	r0, [pc, #592]	@ (80012d4 <ProcessCommand+0x310>)
 8001084:	f004 f8ba 	bl	80051fc <HAL_TIM_Encoder_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001088:	2100      	movs	r1, #0
 800108a:	4893      	ldr	r0, [pc, #588]	@ (80012d8 <ProcessCommand+0x314>)
 800108c:	f003 ff02 	bl	8004e94 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001090:	210c      	movs	r1, #12
 8001092:	4891      	ldr	r0, [pc, #580]	@ (80012d8 <ProcessCommand+0x314>)
 8001094:	f003 fefe 	bl	8004e94 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001098:	2100      	movs	r1, #0
 800109a:	4890      	ldr	r0, [pc, #576]	@ (80012dc <ProcessCommand+0x318>)
 800109c:	f003 fefa 	bl	8004e94 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 80010a0:	210c      	movs	r1, #12
 80010a2:	488e      	ldr	r0, [pc, #568]	@ (80012dc <ProcessCommand+0x318>)
 80010a4:	f003 fef6 	bl	8004e94 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim6);
 80010a8:	488d      	ldr	r0, [pc, #564]	@ (80012e0 <ProcessCommand+0x31c>)
 80010aa:	f003 fd73 	bl	8004b94 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 80010ae:	2104      	movs	r1, #4
 80010b0:	488c      	ldr	r0, [pc, #560]	@ (80012e4 <ProcessCommand+0x320>)
 80010b2:	f003 feef 	bl	8004e94 <HAL_TIM_PWM_Stop>
				engineOn = 0;
 80010b6:	4b83      	ldr	r3, [pc, #524]	@ (80012c4 <ProcessCommand+0x300>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"ENGINE RUNNING\r\n", 16, HAL_MAX_DELAY);
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	2210      	movs	r2, #16
 80010c2:	498a      	ldr	r1, [pc, #552]	@ (80012ec <ProcessCommand+0x328>)
 80010c4:	488a      	ldr	r0, [pc, #552]	@ (80012f0 <ProcessCommand+0x32c>)
 80010c6:	f004 ffad 	bl	8006024 <HAL_UART_Transmit>
}
 80010ca:	e16b      	b.n	80013a4 <ProcessCommand+0x3e0>
		else if (strcmp((char*)cmd, "CMDA") == 0) {
 80010cc:	4989      	ldr	r1, [pc, #548]	@ (80012f4 <ProcessCommand+0x330>)
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f8b6 	bl	8000240 <strcmp>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10b      	bne.n	80010f2 <ProcessCommand+0x12e>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 80010da:	2101      	movs	r1, #1
 80010dc:	4886      	ldr	r0, [pc, #536]	@ (80012f8 <ProcessCommand+0x334>)
 80010de:	f002 f9d8 	bl	8003492 <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart3, (uint8_t*)"LIGHTS RUNNING\r\n", 16, HAL_MAX_DELAY);
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	2210      	movs	r2, #16
 80010e8:	4984      	ldr	r1, [pc, #528]	@ (80012fc <ProcessCommand+0x338>)
 80010ea:	4881      	ldr	r0, [pc, #516]	@ (80012f0 <ProcessCommand+0x32c>)
 80010ec:	f004 ff9a 	bl	8006024 <HAL_UART_Transmit>
}
 80010f0:	e158      	b.n	80013a4 <ProcessCommand+0x3e0>
	    else if (strcmp((char*)cmd, "CMDB") == 0) {
 80010f2:	4983      	ldr	r1, [pc, #524]	@ (8001300 <ProcessCommand+0x33c>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff f8a3 	bl	8000240 <strcmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d119      	bne.n	8001134 <ProcessCommand+0x170>
	    	if (!hornOn) {
 8001100:	4b80      	ldr	r3, [pc, #512]	@ (8001304 <ProcessCommand+0x340>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <ProcessCommand+0x154>
		    	Set_PWM_Frequency(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800110c:	f7ff ff28 	bl	8000f60 <Set_PWM_Frequency>
		    	hornOn = 1;
 8001110:	4b7c      	ldr	r3, [pc, #496]	@ (8001304 <ProcessCommand+0x340>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e005      	b.n	8001124 <ProcessCommand+0x160>
	    		Set_PWM_Frequency(0);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ff21 	bl	8000f60 <Set_PWM_Frequency>
	    		hornOn = 0;
 800111e:	4b79      	ldr	r3, [pc, #484]	@ (8001304 <ProcessCommand+0x340>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"HORN RUNNING\r\n", 14, HAL_MAX_DELAY);
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	220e      	movs	r2, #14
 800112a:	4977      	ldr	r1, [pc, #476]	@ (8001308 <ProcessCommand+0x344>)
 800112c:	4870      	ldr	r0, [pc, #448]	@ (80012f0 <ProcessCommand+0x32c>)
 800112e:	f004 ff79 	bl	8006024 <HAL_UART_Transmit>
}
 8001132:	e137      	b.n	80013a4 <ProcessCommand+0x3e0>
	    else if (strcmp((char*)cmd, "CMDC") == 0) {
 8001134:	4975      	ldr	r1, [pc, #468]	@ (800130c <ProcessCommand+0x348>)
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f882 	bl	8000240 <strcmp>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10a      	bne.n	8001158 <ProcessCommand+0x194>
	    	MotorABS(&motorA);
 8001142:	4869      	ldr	r0, [pc, #420]	@ (80012e8 <ProcessCommand+0x324>)
 8001144:	f7ff fc9e 	bl	8000a84 <MotorABS>
			HAL_UART_Transmit(&huart3, (uint8_t*)"ABS!!!\r\n", 8, HAL_MAX_DELAY);
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	2208      	movs	r2, #8
 800114e:	4970      	ldr	r1, [pc, #448]	@ (8001310 <ProcessCommand+0x34c>)
 8001150:	4867      	ldr	r0, [pc, #412]	@ (80012f0 <ProcessCommand+0x32c>)
 8001152:	f004 ff67 	bl	8006024 <HAL_UART_Transmit>
}
 8001156:	e125      	b.n	80013a4 <ProcessCommand+0x3e0>
	    else if (strncmp((char*)cmd, "CMD", 3) == 0) {
 8001158:	2203      	movs	r2, #3
 800115a:	496e      	ldr	r1, [pc, #440]	@ (8001314 <ProcessCommand+0x350>)
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f009 fbf5 	bl	800a94c <strncmp>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f040 8116 	bne.w	8001396 <ProcessCommand+0x3d2>
	        char* modeStr = (char*)cmd + 3;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3303      	adds	r3, #3
 800116e:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f009 fb5b 	bl	800a82c <atoi>
 8001176:	60b8      	str	r0, [r7, #8]
	        if (mode >= 1 && mode <= 9) {
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f340 8103 	ble.w	8001386 <ProcessCommand+0x3c2>
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b09      	cmp	r3, #9
 8001184:	f300 80ff 	bgt.w	8001386 <ProcessCommand+0x3c2>
	            switch (mode) {
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3b01      	subs	r3, #1
 800118c:	2b08      	cmp	r3, #8
 800118e:	f200 80f7 	bhi.w	8001380 <ProcessCommand+0x3bc>
 8001192:	a201      	add	r2, pc, #4	@ (adr r2, 8001198 <ProcessCommand+0x1d4>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080011bd 	.word	0x080011bd
 800119c:	080011e1 	.word	0x080011e1
 80011a0:	08001205 	.word	0x08001205
 80011a4:	08001229 	.word	0x08001229
 80011a8:	0800124d 	.word	0x0800124d
 80011ac:	08001271 	.word	0x08001271
 80011b0:	08001295 	.word	0x08001295
 80011b4:	08001339 	.word	0x08001339
 80011b8:	0800135d 	.word	0x0800135d
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	2212      	movs	r2, #18
 80011c2:	4955      	ldr	r1, [pc, #340]	@ (8001318 <ProcessCommand+0x354>)
 80011c4:	484a      	ldr	r0, [pc, #296]	@ (80012f0 <ProcessCommand+0x32c>)
 80011c6:	f004 ff2d 	bl	8006024 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, DEFAULT, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	4846      	ldr	r0, [pc, #280]	@ (80012e8 <ProcessCommand+0x324>)
 80011d0:	f7ff fc3d 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, DEFAULT, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	4850      	ldr	r0, [pc, #320]	@ (800131c <ProcessCommand+0x358>)
 80011da:	f7ff fc38 	bl	8000a4e <motor_set_speed>
	                    break;
 80011de:	e0d0      	b.n	8001382 <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	2212      	movs	r2, #18
 80011e6:	494e      	ldr	r1, [pc, #312]	@ (8001320 <ProcessCommand+0x35c>)
 80011e8:	4841      	ldr	r0, [pc, #260]	@ (80012f0 <ProcessCommand+0x32c>)
 80011ea:	f004 ff1b 	bl	8006024 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 93);
 80011ee:	225d      	movs	r2, #93	@ 0x5d
 80011f0:	2101      	movs	r1, #1
 80011f2:	483d      	ldr	r0, [pc, #244]	@ (80012e8 <ProcessCommand+0x324>)
 80011f4:	f7ff fc2b 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 80011f8:	2264      	movs	r2, #100	@ 0x64
 80011fa:	2101      	movs	r1, #1
 80011fc:	4847      	ldr	r0, [pc, #284]	@ (800131c <ProcessCommand+0x358>)
 80011fe:	f7ff fc26 	bl	8000a4e <motor_set_speed>
	                    break;
 8001202:	e0be      	b.n	8001382 <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	2212      	movs	r2, #18
 800120a:	4946      	ldr	r1, [pc, #280]	@ (8001324 <ProcessCommand+0x360>)
 800120c:	4838      	ldr	r0, [pc, #224]	@ (80012f0 <ProcessCommand+0x32c>)
 800120e:	f004 ff09 	bl	8006024 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 50);
 8001212:	2232      	movs	r2, #50	@ 0x32
 8001214:	2101      	movs	r1, #1
 8001216:	4834      	ldr	r0, [pc, #208]	@ (80012e8 <ProcessCommand+0x324>)
 8001218:	f7ff fc19 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 800121c:	2264      	movs	r2, #100	@ 0x64
 800121e:	2101      	movs	r1, #1
 8001220:	483e      	ldr	r0, [pc, #248]	@ (800131c <ProcessCommand+0x358>)
 8001222:	f7ff fc14 	bl	8000a4e <motor_set_speed>
	                    break;
 8001226:	e0ac      	b.n	8001382 <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	2212      	movs	r2, #18
 800122e:	493e      	ldr	r1, [pc, #248]	@ (8001328 <ProcessCommand+0x364>)
 8001230:	482f      	ldr	r0, [pc, #188]	@ (80012f0 <ProcessCommand+0x32c>)
 8001232:	f004 fef7 	bl	8006024 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 8001236:	2264      	movs	r2, #100	@ 0x64
 8001238:	2102      	movs	r1, #2
 800123a:	482b      	ldr	r0, [pc, #172]	@ (80012e8 <ProcessCommand+0x324>)
 800123c:	f7ff fc07 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 8001240:	2264      	movs	r2, #100	@ 0x64
 8001242:	2101      	movs	r1, #1
 8001244:	4835      	ldr	r0, [pc, #212]	@ (800131c <ProcessCommand+0x358>)
 8001246:	f7ff fc02 	bl	8000a4e <motor_set_speed>
	                    break;
 800124a:	e09a      	b.n	8001382 <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	2212      	movs	r2, #18
 8001252:	4936      	ldr	r1, [pc, #216]	@ (800132c <ProcessCommand+0x368>)
 8001254:	4826      	ldr	r0, [pc, #152]	@ (80012f0 <ProcessCommand+0x32c>)
 8001256:	f004 fee5 	bl	8006024 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 50);
 800125a:	2232      	movs	r2, #50	@ 0x32
 800125c:	2102      	movs	r1, #2
 800125e:	4822      	ldr	r0, [pc, #136]	@ (80012e8 <ProcessCommand+0x324>)
 8001260:	f7ff fbf5 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 8001264:	2264      	movs	r2, #100	@ 0x64
 8001266:	2102      	movs	r1, #2
 8001268:	482c      	ldr	r0, [pc, #176]	@ (800131c <ProcessCommand+0x358>)
 800126a:	f7ff fbf0 	bl	8000a4e <motor_set_speed>
	                    break;
 800126e:	e088      	b.n	8001382 <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	2212      	movs	r2, #18
 8001276:	492e      	ldr	r1, [pc, #184]	@ (8001330 <ProcessCommand+0x36c>)
 8001278:	481d      	ldr	r0, [pc, #116]	@ (80012f0 <ProcessCommand+0x32c>)
 800127a:	f004 fed3 	bl	8006024 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 800127e:	2264      	movs	r2, #100	@ 0x64
 8001280:	2102      	movs	r1, #2
 8001282:	4819      	ldr	r0, [pc, #100]	@ (80012e8 <ProcessCommand+0x324>)
 8001284:	f7ff fbe3 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 8001288:	2264      	movs	r2, #100	@ 0x64
 800128a:	2102      	movs	r1, #2
 800128c:	4823      	ldr	r0, [pc, #140]	@ (800131c <ProcessCommand+0x358>)
 800128e:	f7ff fbde 	bl	8000a4e <motor_set_speed>
	                    break;
 8001292:	e076      	b.n	8001382 <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	2212      	movs	r2, #18
 800129a:	4926      	ldr	r1, [pc, #152]	@ (8001334 <ProcessCommand+0x370>)
 800129c:	4814      	ldr	r0, [pc, #80]	@ (80012f0 <ProcessCommand+0x32c>)
 800129e:	f004 fec1 	bl	8006024 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 80012a2:	2264      	movs	r2, #100	@ 0x64
 80012a4:	2102      	movs	r1, #2
 80012a6:	4810      	ldr	r0, [pc, #64]	@ (80012e8 <ProcessCommand+0x324>)
 80012a8:	f7ff fbd1 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 50);
 80012ac:	2232      	movs	r2, #50	@ 0x32
 80012ae:	2102      	movs	r1, #2
 80012b0:	481a      	ldr	r0, [pc, #104]	@ (800131c <ProcessCommand+0x358>)
 80012b2:	f7ff fbcc 	bl	8000a4e <motor_set_speed>
	                    break;
 80012b6:	e064      	b.n	8001382 <ProcessCommand+0x3be>
 80012b8:	0800aa20 	.word	0x0800aa20
 80012bc:	40020400 	.word	0x40020400
 80012c0:	0800aa28 	.word	0x0800aa28
 80012c4:	20000144 	.word	0x20000144
 80012c8:	20000148 	.word	0x20000148
 80012cc:	200001e0 	.word	0x200001e0
 80012d0:	2000022c 	.word	0x2000022c
 80012d4:	20000310 	.word	0x20000310
 80012d8:	20000194 	.word	0x20000194
 80012dc:	20000278 	.word	0x20000278
 80012e0:	200002c4 	.word	0x200002c4
 80012e4:	2000035c 	.word	0x2000035c
 80012e8:	200000c8 	.word	0x200000c8
 80012ec:	0800aa30 	.word	0x0800aa30
 80012f0:	20000430 	.word	0x20000430
 80012f4:	0800aa44 	.word	0x0800aa44
 80012f8:	40021800 	.word	0x40021800
 80012fc:	0800aa4c 	.word	0x0800aa4c
 8001300:	0800aa60 	.word	0x0800aa60
 8001304:	20000140 	.word	0x20000140
 8001308:	0800aa68 	.word	0x0800aa68
 800130c:	0800aa78 	.word	0x0800aa78
 8001310:	0800aa80 	.word	0x0800aa80
 8001314:	0800aa8c 	.word	0x0800aa8c
 8001318:	0800aa90 	.word	0x0800aa90
 800131c:	20000104 	.word	0x20000104
 8001320:	0800aaa4 	.word	0x0800aaa4
 8001324:	0800aab8 	.word	0x0800aab8
 8001328:	0800aacc 	.word	0x0800aacc
 800132c:	0800aae0 	.word	0x0800aae0
 8001330:	0800aaf4 	.word	0x0800aaf4
 8001334:	0800ab08 	.word	0x0800ab08
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	2212      	movs	r2, #18
 800133e:	491b      	ldr	r1, [pc, #108]	@ (80013ac <ProcessCommand+0x3e8>)
 8001340:	481b      	ldr	r0, [pc, #108]	@ (80013b0 <ProcessCommand+0x3ec>)
 8001342:	f004 fe6f 	bl	8006024 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 8001346:	2264      	movs	r2, #100	@ 0x64
 8001348:	2101      	movs	r1, #1
 800134a:	481a      	ldr	r0, [pc, #104]	@ (80013b4 <ProcessCommand+0x3f0>)
 800134c:	f7ff fb7f 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 8001350:	2264      	movs	r2, #100	@ 0x64
 8001352:	2102      	movs	r1, #2
 8001354:	4818      	ldr	r0, [pc, #96]	@ (80013b8 <ProcessCommand+0x3f4>)
 8001356:	f7ff fb7a 	bl	8000a4e <motor_set_speed>
	                    break;
 800135a:	e012      	b.n	8001382 <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	2212      	movs	r2, #18
 8001362:	4916      	ldr	r1, [pc, #88]	@ (80013bc <ProcessCommand+0x3f8>)
 8001364:	4812      	ldr	r0, [pc, #72]	@ (80013b0 <ProcessCommand+0x3ec>)
 8001366:	f004 fe5d 	bl	8006024 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 800136a:	2264      	movs	r2, #100	@ 0x64
 800136c:	2101      	movs	r1, #1
 800136e:	4811      	ldr	r0, [pc, #68]	@ (80013b4 <ProcessCommand+0x3f0>)
 8001370:	f7ff fb6d 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 50);
 8001374:	2232      	movs	r2, #50	@ 0x32
 8001376:	2101      	movs	r1, #1
 8001378:	480f      	ldr	r0, [pc, #60]	@ (80013b8 <ProcessCommand+0x3f4>)
 800137a:	f7ff fb68 	bl	8000a4e <motor_set_speed>
	                    break;
 800137e:	e000      	b.n	8001382 <ProcessCommand+0x3be>
	                    break;
 8001380:	bf00      	nop
	            switch (mode) {
 8001382:	bf00      	nop
}
 8001384:	e00e      	b.n	80013a4 <ProcessCommand+0x3e0>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	2215      	movs	r2, #21
 800138c:	490c      	ldr	r1, [pc, #48]	@ (80013c0 <ProcessCommand+0x3fc>)
 800138e:	4808      	ldr	r0, [pc, #32]	@ (80013b0 <ProcessCommand+0x3ec>)
 8001390:	f004 fe48 	bl	8006024 <HAL_UART_Transmit>
}
 8001394:	e006      	b.n	80013a4 <ProcessCommand+0x3e0>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	2211      	movs	r2, #17
 800139c:	4909      	ldr	r1, [pc, #36]	@ (80013c4 <ProcessCommand+0x400>)
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <ProcessCommand+0x3ec>)
 80013a0:	f004 fe40 	bl	8006024 <HAL_UART_Transmit>
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	0800ab1c 	.word	0x0800ab1c
 80013b0:	20000430 	.word	0x20000430
 80013b4:	200000c8 	.word	0x200000c8
 80013b8:	20000104 	.word	0x20000104
 80013bc:	0800ab30 	.word	0x0800ab30
 80013c0:	0800ab44 	.word	0x0800ab44
 80013c4:	0800ab5c 	.word	0x0800ab5c

080013c8 <ProcessHeartBeat>:

void ProcessHeartBeat(void* argument) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    for (;;) {

    	if (!engineOn)
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <ProcessHeartBeat+0x4c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d01b      	beq.n	8001410 <ProcessHeartBeat+0x48>
    		continue;

    	int16_t data[4] = {motorA.measured_speed, motorB.measured_speed, motorA.set_speed, motorB.set_speed};
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <ProcessHeartBeat+0x50>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	813b      	strh	r3, [r7, #8]
 80013e0:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <ProcessHeartBeat+0x54>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	817b      	strh	r3, [r7, #10]
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <ProcessHeartBeat+0x50>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	81bb      	strh	r3, [r7, #12]
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <ProcessHeartBeat+0x54>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	81fb      	strh	r3, [r7, #14]
    	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), HAL_MAX_DELAY);
 80013f8:	f107 0108 	add.w	r1, r7, #8
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	2208      	movs	r2, #8
 8001402:	4807      	ldr	r0, [pc, #28]	@ (8001420 <ProcessHeartBeat+0x58>)
 8001404:	f004 fe0e 	bl	8006024 <HAL_UART_Transmit>

        osDelay(100);
 8001408:	2064      	movs	r0, #100	@ 0x64
 800140a:	f006 fd1f 	bl	8007e4c <osDelay>
 800140e:	e7df      	b.n	80013d0 <ProcessHeartBeat+0x8>
    		continue;
 8001410:	bf00      	nop
    for (;;) {
 8001412:	e7dd      	b.n	80013d0 <ProcessHeartBeat+0x8>
 8001414:	20000144 	.word	0x20000144
 8001418:	200000c8 	.word	0x200000c8
 800141c:	20000104 	.word	0x20000104
 8001420:	200003a8 	.word	0x200003a8

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142a:	f001 f95e 	bl	80026ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142e:	f000 f83f 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001432:	f7ff f8c7 	bl	80005c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001436:	f7ff f88d 	bl	8000554 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800143a:	f000 ff3d 	bl	80022b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800143e:	f001 f883 	bl	8002548 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8001442:	f000 ff09 	bl	8002258 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001446:	f000 f9f5 	bl	8001834 <MX_TIM1_Init>
  MX_TIM3_Init();
 800144a:	f000 fab1 	bl	80019b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800144e:	f000 fb05 	bl	8001a5c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001452:	f000 fbf7 	bl	8001c44 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001456:	f000 fa47 	bl	80018e8 <MX_TIM2_Init>
  MX_TIM6_Init();
 800145a:	f000 fbbb 	bl	8001bd4 <MX_TIM6_Init>
  MX_TIM5_Init();
 800145e:	f000 fb53 	bl	8001b08 <MX_TIM5_Init>
  MX_TIM12_Init();
 8001462:	f000 fc49 	bl	8001cf8 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <main+0x7c>)
 8001468:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7fe fef2 	bl	8000254 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	480a      	ldr	r0, [pc, #40]	@ (80014a4 <main+0x80>)
 800147c:	f004 fdd2 	bl	8006024 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001480:	2201      	movs	r2, #1
 8001482:	4909      	ldr	r1, [pc, #36]	@ (80014a8 <main+0x84>)
 8001484:	4809      	ldr	r0, [pc, #36]	@ (80014ac <main+0x88>)
 8001486:	f004 fe56 	bl	8006136 <HAL_UART_Receive_IT>

  Init_MotorSystem();
 800148a:	f7ff fd0d 	bl	8000ea8 <Init_MotorSystem>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800148e:	f006 fbcd 	bl	8007c2c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001492:	f7ff f885 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001496:	f006 fbfd 	bl	8007c94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149a:	bf00      	nop
 800149c:	e7fd      	b.n	800149a <main+0x76>
 800149e:	bf00      	nop
 80014a0:	0800ab70 	.word	0x0800ab70
 80014a4:	20000430 	.word	0x20000430
 80014a8:	20000080 	.word	0x20000080
 80014ac:	200003a8 	.word	0x200003a8

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	2234      	movs	r2, #52	@ 0x34
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f009 fa3c 	bl	800a93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014d4:	f002 f932 	bl	800373c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d8:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <SystemClock_Config+0xdc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a2b      	ldr	r2, [pc, #172]	@ (800158c <SystemClock_Config+0xdc>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e4:	4b29      	ldr	r3, [pc, #164]	@ (800158c <SystemClock_Config+0xdc>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <SystemClock_Config+0xe0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014f8:	4a25      	ldr	r2, [pc, #148]	@ (8001590 <SystemClock_Config+0xe0>)
 80014fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b23      	ldr	r3, [pc, #140]	@ (8001590 <SystemClock_Config+0xe0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001510:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001514:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800151e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001520:	2304      	movs	r3, #4
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001524:	2360      	movs	r3, #96	@ 0x60
 8001526:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001528:	2302      	movs	r3, #2
 800152a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800152c:	2304      	movs	r3, #4
 800152e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001530:	2302      	movs	r3, #2
 8001532:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f95f 	bl	80037fc <HAL_RCC_OscConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001544:	f000 f860 	bl	8001608 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001548:	f002 f908 	bl	800375c <HAL_PWREx_EnableOverDrive>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001552:	f000 f859 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2302      	movs	r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	2103      	movs	r1, #3
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fbf0 	bl	8003d58 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800157e:	f000 f843 	bl	8001608 <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3750      	adds	r7, #80	@ 0x50
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <HAL_UART_RxCpltCallback+0x5c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d120      	bne.n	80015e8 <HAL_UART_RxCpltCallback+0x54>
		HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	2201      	movs	r2, #1
 80015ac:	4911      	ldr	r1, [pc, #68]	@ (80015f4 <HAL_UART_RxCpltCallback+0x60>)
 80015ae:	4812      	ldr	r0, [pc, #72]	@ (80015f8 <HAL_UART_RxCpltCallback+0x64>)
 80015b0:	f004 fd38 	bl	8006024 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	490f      	ldr	r1, [pc, #60]	@ (80015f4 <HAL_UART_RxCpltCallback+0x60>)
 80015b8:	4810      	ldr	r0, [pc, #64]	@ (80015fc <HAL_UART_RxCpltCallback+0x68>)
 80015ba:	f004 fdbc 	bl	8006136 <HAL_UART_Receive_IT>
		rxBuff[rxIdx++] = rxData[0];
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_UART_RxCpltCallback+0x6c>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	b2d1      	uxtb	r1, r2
 80015c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001600 <HAL_UART_RxCpltCallback+0x6c>)
 80015c8:	7011      	strb	r1, [r2, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_UART_RxCpltCallback+0x60>)
 80015ce:	7819      	ldrb	r1, [r3, #0]
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <HAL_UART_RxCpltCallback+0x70>)
 80015d2:	5499      	strb	r1, [r3, r2]

		if (rxIdx == 4) {
 80015d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <HAL_UART_RxCpltCallback+0x6c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d105      	bne.n	80015e8 <HAL_UART_RxCpltCallback+0x54>
			//HAL_UART_Transmit(&huart3, rxBuff, rxIdx, HAL_MAX_DELAY);
			ProcessCommand(rxBuff);
 80015dc:	4809      	ldr	r0, [pc, #36]	@ (8001604 <HAL_UART_RxCpltCallback+0x70>)
 80015de:	f7ff fcf1 	bl	8000fc4 <ProcessCommand>
			rxIdx = 0;
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <HAL_UART_RxCpltCallback+0x6c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40004400 	.word	0x40004400
 80015f4:	20000080 	.word	0x20000080
 80015f8:	20000430 	.word	0x20000430
 80015fc:	200003a8 	.word	0x200003a8
 8001600:	200000c4 	.word	0x200000c4
 8001604:	20000084 	.word	0x20000084

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	@ 0x40
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <HAL_MspInit+0x4c>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163c:	6453      	str	r3, [r2, #68]	@ 0x44
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	210f      	movs	r1, #15
 800164e:	f06f 0001 	mvn.w	r0, #1
 8001652:	f001 f9a6 	bl	80029a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <NMI_Handler+0x4>

0800166c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <MemManage_Handler+0x4>

0800167c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <UsageFault_Handler+0x4>

0800168c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169e:	f001 f861 	bl	8002764 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016a2:	f008 f84d 	bl	8009740 <xTaskGetSchedulerState>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d001      	beq.n	80016b0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016ac:	f008 fe3c 	bl	800a328 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <DMA1_Stream5_IRQHandler+0x10>)
 80016ba:	f001 fae9 	bl	8002c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200004b8 	.word	0x200004b8

080016c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <DMA1_Stream6_IRQHandler+0x10>)
 80016ce:	f001 fadf 	bl	8002c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000518 	.word	0x20000518

080016dc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80016e2:	f003 fe32 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000148 	.word	0x20000148

080016f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016f6:	f003 fe28 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000148 	.word	0x20000148

08001704 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800170a:	f003 fe1e 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000148 	.word	0x20000148

08001718 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <TIM1_CC_IRQHandler+0x10>)
 800171e:	f003 fe14 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000148 	.word	0x20000148

0800172c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <TIM2_IRQHandler+0x10>)
 8001732:	f003 fe0a 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000194 	.word	0x20000194

08001740 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <TIM3_IRQHandler+0x10>)
 8001746:	f003 fe00 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001e0 	.word	0x200001e0

08001754 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <TIM4_IRQHandler+0x10>)
 800175a:	f003 fdf6 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000022c 	.word	0x2000022c

08001768 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <USART2_IRQHandler+0x10>)
 800176e:	f004 fd27 	bl	80061c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200003a8 	.word	0x200003a8

0800177c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <USART3_IRQHandler+0x10>)
 8001782:	f004 fd1d 	bl	80061c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000430 	.word	0x20000430

08001790 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8001796:	f003 fdd8 	bl	800534a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800179a:	4803      	ldr	r0, [pc, #12]	@ (80017a8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800179c:	f003 fdd5 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000310 	.word	0x20000310
 80017a8:	2000035c 	.word	0x2000035c

080017ac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80017b2:	f003 fdca 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000310 	.word	0x20000310

080017c0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80017c6:	f003 fdc0 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000310 	.word	0x20000310

080017d4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <TIM8_CC_IRQHandler+0x10>)
 80017da:	f003 fdb6 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000310 	.word	0x20000310

080017e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <TIM5_IRQHandler+0x10>)
 80017ee:	f003 fdac 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000278 	.word	0x20000278

080017fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM6_DAC_IRQHandler+0x10>)
 8001802:	f003 fda2 	bl	800534a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002c4 	.word	0x200002c4

08001810 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	@ 0x30
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	2224      	movs	r2, #36	@ 0x24
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f009 f87a 	bl	800a93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001852:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <MX_TIM1_Init+0xac>)
 8001854:	4a23      	ldr	r2, [pc, #140]	@ (80018e4 <MX_TIM1_Init+0xb0>)
 8001856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001858:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <MX_TIM1_Init+0xac>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <MX_TIM1_Init+0xac>)
 8001860:	2210      	movs	r2, #16
 8001862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001864:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <MX_TIM1_Init+0xac>)
 8001866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800186a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <MX_TIM1_Init+0xac>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001872:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <MX_TIM1_Init+0xac>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <MX_TIM1_Init+0xac>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800187e:	2303      	movs	r3, #3
 8001880:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001886:	2301      	movs	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800188e:	230f      	movs	r3, #15
 8001890:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001896:	2301      	movs	r3, #1
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800189e:	230f      	movs	r3, #15
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <MX_TIM1_Init+0xac>)
 80018aa:	f003 fb73 	bl	8004f94 <HAL_TIM_Encoder_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80018b4:	f7ff fea8 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c4:	463b      	mov	r3, r7
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_TIM1_Init+0xac>)
 80018ca:	f004 fab1 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80018d4:	f7ff fe98 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3730      	adds	r7, #48	@ 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000148 	.word	0x20000148
 80018e4:	40010000 	.word	0x40010000

080018e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	615a      	str	r2, [r3, #20]
 800190a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190c:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <MX_TIM2_Init+0xc4>)
 800190e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001914:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <MX_TIM2_Init+0xc4>)
 8001916:	222f      	movs	r2, #47	@ 0x2f
 8001918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <MX_TIM2_Init+0xc4>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <MX_TIM2_Init+0xc4>)
 8001922:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <MX_TIM2_Init+0xc4>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_TIM2_Init+0xc4>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001934:	481d      	ldr	r0, [pc, #116]	@ (80019ac <MX_TIM2_Init+0xc4>)
 8001936:	f003 f95c 	bl	8004bf2 <HAL_TIM_PWM_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001940:	f7ff fe62 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	4816      	ldr	r0, [pc, #88]	@ (80019ac <MX_TIM2_Init+0xc4>)
 8001954:	f004 fa6c 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800195e:	f7ff fe53 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001962:	2360      	movs	r3, #96	@ 0x60
 8001964:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	4619      	mov	r1, r3
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <MX_TIM2_Init+0xc4>)
 800197a:	f003 fded 	bl	8005558 <HAL_TIM_PWM_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001984:	f7ff fe40 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001988:	463b      	mov	r3, r7
 800198a:	220c      	movs	r2, #12
 800198c:	4619      	mov	r1, r3
 800198e:	4807      	ldr	r0, [pc, #28]	@ (80019ac <MX_TIM2_Init+0xc4>)
 8001990:	f003 fde2 	bl	8005558 <HAL_TIM_PWM_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800199a:	f7ff fe35 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800199e:	4803      	ldr	r0, [pc, #12]	@ (80019ac <MX_TIM2_Init+0xc4>)
 80019a0:	f000 fbbc 	bl	800211c <HAL_TIM_MspPostInit>

}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	@ 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000194 	.word	0x20000194

080019b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	@ 0x30
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2224      	movs	r2, #36	@ 0x24
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f008 ffbc 	bl	800a93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ce:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <MX_TIM3_Init+0xa4>)
 80019d0:	4a21      	ldr	r2, [pc, #132]	@ (8001a58 <MX_TIM3_Init+0xa8>)
 80019d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <MX_TIM3_Init+0xa4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80019da:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <MX_TIM3_Init+0xa4>)
 80019dc:	2210      	movs	r2, #16
 80019de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <MX_TIM3_Init+0xa4>)
 80019e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <MX_TIM3_Init+0xa4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <MX_TIM3_Init+0xa4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019f4:	2303      	movs	r3, #3
 80019f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019fc:	2301      	movs	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a04:	230f      	movs	r3, #15
 8001a06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001a14:	230f      	movs	r3, #15
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <MX_TIM3_Init+0xa4>)
 8001a20:	f003 fab8 	bl	8004f94 <HAL_TIM_Encoder_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a2a:	f7ff fded 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a36:	463b      	mov	r3, r7
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4806      	ldr	r0, [pc, #24]	@ (8001a54 <MX_TIM3_Init+0xa4>)
 8001a3c:	f004 f9f8 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a46:	f7ff fddf 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	3730      	adds	r7, #48	@ 0x30
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200001e0 	.word	0x200001e0
 8001a58:	40000400 	.word	0x40000400

08001a5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08c      	sub	sp, #48	@ 0x30
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	2224      	movs	r2, #36	@ 0x24
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f008 ff66 	bl	800a93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a7a:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <MX_TIM4_Init+0xa4>)
 8001a7c:	4a21      	ldr	r2, [pc, #132]	@ (8001b04 <MX_TIM4_Init+0xa8>)
 8001a7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <MX_TIM4_Init+0xa4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_TIM4_Init+0xa4>)
 8001a88:	2210      	movs	r2, #16
 8001a8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM4_Init+0xa4>)
 8001a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM4_Init+0xa4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_TIM4_Init+0xa4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_TIM4_Init+0xa4>)
 8001acc:	f003 fa62 	bl	8004f94 <HAL_TIM_Encoder_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ad6:	f7ff fd97 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_TIM4_Init+0xa4>)
 8001ae8:	f004 f9a2 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001af2:	f7ff fd89 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3730      	adds	r7, #48	@ 0x30
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000022c 	.word	0x2000022c
 8001b04:	40000800 	.word	0x40000800

08001b08 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	@ 0x28
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b2c:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001b2e:	4a28      	ldr	r2, [pc, #160]	@ (8001bd0 <MX_TIM5_Init+0xc8>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001b34:	222f      	movs	r2, #47	@ 0x2f
 8001b36:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001b40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b44:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b52:	481e      	ldr	r0, [pc, #120]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001b54:	f003 f84d 	bl	8004bf2 <HAL_TIM_PWM_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001b5e:	f7ff fd53 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4816      	ldr	r0, [pc, #88]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001b72:	f004 f95d 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001b7c:	f7ff fd44 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b80:	2360      	movs	r3, #96	@ 0x60
 8001b82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b90:	463b      	mov	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001b98:	f003 fcde 	bl	8005558 <HAL_TIM_PWM_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001ba2:	f7ff fd31 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	220c      	movs	r2, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001bae:	f003 fcd3 	bl	8005558 <HAL_TIM_PWM_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001bb8:	f7ff fd26 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001bbc:	4803      	ldr	r0, [pc, #12]	@ (8001bcc <MX_TIM5_Init+0xc4>)
 8001bbe:	f000 faad 	bl	800211c <HAL_TIM_MspPostInit>

}
 8001bc2:	bf00      	nop
 8001bc4:	3728      	adds	r7, #40	@ 0x28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000278 	.word	0x20000278
 8001bd0:	40000c00 	.word	0x40000c00

08001bd4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001be4:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <MX_TIM6_Init+0x68>)
 8001be6:	4a16      	ldr	r2, [pc, #88]	@ (8001c40 <MX_TIM6_Init+0x6c>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001bea:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_TIM6_Init+0x68>)
 8001bec:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001bf0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <MX_TIM6_Init+0x68>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <MX_TIM6_Init+0x68>)
 8001bfa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bfe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c00:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_TIM6_Init+0x68>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c06:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <MX_TIM6_Init+0x68>)
 8001c08:	f002 fef4 	bl	80049f4 <HAL_TIM_Base_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001c12:	f7ff fcf9 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4806      	ldr	r0, [pc, #24]	@ (8001c3c <MX_TIM6_Init+0x68>)
 8001c24:	f004 f904 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001c2e:	f7ff fceb 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200002c4 	.word	0x200002c4
 8001c40:	40001000 	.word	0x40001000

08001c44 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	@ 0x30
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	2224      	movs	r2, #36	@ 0x24
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f008 fe72 	bl	800a93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c62:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <MX_TIM8_Init+0xac>)
 8001c64:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <MX_TIM8_Init+0xb0>)
 8001c66:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <MX_TIM8_Init+0xac>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001c6e:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <MX_TIM8_Init+0xac>)
 8001c70:	2210      	movs	r2, #16
 8001c72:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c74:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <MX_TIM8_Init+0xac>)
 8001c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c7a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <MX_TIM8_Init+0xac>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <MX_TIM8_Init+0xac>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <MX_TIM8_Init+0xac>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001cae:	230f      	movs	r3, #15
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480d      	ldr	r0, [pc, #52]	@ (8001cf0 <MX_TIM8_Init+0xac>)
 8001cba:	f003 f96b 	bl	8004f94 <HAL_TIM_Encoder_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001cc4:	f7ff fca0 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_TIM8_Init+0xac>)
 8001cda:	f004 f8a9 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001ce4:	f7ff fc90 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	3730      	adds	r7, #48	@ 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000310 	.word	0x20000310
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	615a      	str	r2, [r3, #20]
 8001d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <MX_TIM12_Init+0x84>)
 8001d12:	4a1b      	ldr	r2, [pc, #108]	@ (8001d80 <MX_TIM12_Init+0x88>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <MX_TIM12_Init+0x84>)
 8001d18:	225f      	movs	r2, #95	@ 0x5f
 8001d1a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <MX_TIM12_Init+0x84>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001d22:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <MX_TIM12_Init+0x84>)
 8001d24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d28:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <MX_TIM12_Init+0x84>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <MX_TIM12_Init+0x84>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001d36:	4811      	ldr	r0, [pc, #68]	@ (8001d7c <MX_TIM12_Init+0x84>)
 8001d38:	f002 ff5b 	bl	8004bf2 <HAL_TIM_PWM_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001d42:	f7ff fc61 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d46:	2360      	movs	r3, #96	@ 0x60
 8001d48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2204      	movs	r2, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4807      	ldr	r0, [pc, #28]	@ (8001d7c <MX_TIM12_Init+0x84>)
 8001d5e:	f003 fbfb 	bl	8005558 <HAL_TIM_PWM_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001d68:	f7ff fc4e 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001d6c:	4803      	ldr	r0, [pc, #12]	@ (8001d7c <MX_TIM12_Init+0x84>)
 8001d6e:	f000 f9d5 	bl	800211c <HAL_TIM_MspPostInit>

}
 8001d72:	bf00      	nop
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000035c 	.word	0x2000035c
 8001d80:	40001800 	.word	0x40001800

08001d84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b090      	sub	sp, #64	@ 0x40
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a93      	ldr	r2, [pc, #588]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d149      	bne.n	8001e3a <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001da6:	4b93      	ldr	r3, [pc, #588]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a92      	ldr	r2, [pc, #584]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b90      	ldr	r3, [pc, #576]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a8c      	ldr	r2, [pc, #560]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001dc4:	f043 0310 	orr.w	r3, r3, #16
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b8a      	ldr	r3, [pc, #552]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 8001dd6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4881      	ldr	r0, [pc, #516]	@ (8001ff8 <HAL_TIM_Encoder_MspInit+0x274>)
 8001df4:	f001 f988 	bl	8003108 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2105      	movs	r1, #5
 8001dfc:	2018      	movs	r0, #24
 8001dfe:	f000 fdd0 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e02:	2018      	movs	r0, #24
 8001e04:	f000 fde9 	bl	80029da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2105      	movs	r1, #5
 8001e0c:	2019      	movs	r0, #25
 8001e0e:	f000 fdc8 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e12:	2019      	movs	r0, #25
 8001e14:	f000 fde1 	bl	80029da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2105      	movs	r1, #5
 8001e1c:	201a      	movs	r0, #26
 8001e1e:	f000 fdc0 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e22:	201a      	movs	r0, #26
 8001e24:	f000 fdd9 	bl	80029da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2105      	movs	r1, #5
 8001e2c:	201b      	movs	r0, #27
 8001e2e:	f000 fdb8 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e32:	201b      	movs	r0, #27
 8001e34:	f000 fdd1 	bl	80029da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001e38:	e0d5      	b.n	8001fe6 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x278>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d14c      	bne.n	8001ede <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e44:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e50:	4b68      	ldr	r3, [pc, #416]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5c:	4b65      	ldr	r3, [pc, #404]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	4a64      	ldr	r2, [pc, #400]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e68:	4b62      	ldr	r3, [pc, #392]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	4b5f      	ldr	r3, [pc, #380]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e78:	4a5e      	ldr	r2, [pc, #376]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e80:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8001e8c:	2340      	movs	r3, #64	@ 0x40
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4856      	ldr	r0, [pc, #344]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x27c>)
 8001ea8:	f001 f92e 	bl	8003108 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001eac:	2320      	movs	r3, #32
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	484f      	ldr	r0, [pc, #316]	@ (8002004 <HAL_TIM_Encoder_MspInit+0x280>)
 8001ec8:	f001 f91e 	bl	8003108 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2105      	movs	r1, #5
 8001ed0:	201d      	movs	r0, #29
 8001ed2:	f000 fd66 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ed6:	201d      	movs	r0, #29
 8001ed8:	f000 fd7f 	bl	80029da <HAL_NVIC_EnableIRQ>
}
 8001edc:	e083      	b.n	8001fe6 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a49      	ldr	r2, [pc, #292]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x284>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d131      	bne.n	8001f4c <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee8:	4b42      	ldr	r3, [pc, #264]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	4a41      	ldr	r2, [pc, #260]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f00:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f04:	4a3b      	ldr	r2, [pc, #236]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0c:	4b39      	ldr	r3, [pc, #228]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8001f18:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f32:	4619      	mov	r1, r3
 8001f34:	4835      	ldr	r0, [pc, #212]	@ (800200c <HAL_TIM_Encoder_MspInit+0x288>)
 8001f36:	f001 f8e7 	bl	8003108 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	201e      	movs	r0, #30
 8001f40:	f000 fd2f 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f44:	201e      	movs	r0, #30
 8001f46:	f000 fd48 	bl	80029da <HAL_NVIC_EnableIRQ>
}
 8001f4a:	e04c      	b.n	8001fe6 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2f      	ldr	r2, [pc, #188]	@ (8002010 <HAL_TIM_Encoder_MspInit+0x28c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d147      	bne.n	8001fe6 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f56:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	4a26      	ldr	r2, [pc, #152]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f62:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	4b21      	ldr	r3, [pc, #132]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a20      	ldr	r2, [pc, #128]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8001f86:	23c0      	movs	r3, #192	@ 0xc0
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f96:	2303      	movs	r3, #3
 8001f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	481c      	ldr	r0, [pc, #112]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x290>)
 8001fa2:	f001 f8b1 	bl	8003108 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2105      	movs	r1, #5
 8001faa:	202b      	movs	r0, #43	@ 0x2b
 8001fac:	f000 fcf9 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001fb0:	202b      	movs	r0, #43	@ 0x2b
 8001fb2:	f000 fd12 	bl	80029da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2105      	movs	r1, #5
 8001fba:	202c      	movs	r0, #44	@ 0x2c
 8001fbc:	f000 fcf1 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001fc0:	202c      	movs	r0, #44	@ 0x2c
 8001fc2:	f000 fd0a 	bl	80029da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2105      	movs	r1, #5
 8001fca:	202d      	movs	r0, #45	@ 0x2d
 8001fcc:	f000 fce9 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001fd0:	202d      	movs	r0, #45	@ 0x2d
 8001fd2:	f000 fd02 	bl	80029da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	202e      	movs	r0, #46	@ 0x2e
 8001fdc:	f000 fce1 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001fe0:	202e      	movs	r0, #46	@ 0x2e
 8001fe2:	f000 fcfa 	bl	80029da <HAL_NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3740      	adds	r7, #64	@ 0x40
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40020000 	.word	0x40020000
 8002004:	40020400 	.word	0x40020400
 8002008:	40000800 	.word	0x40000800
 800200c:	40020c00 	.word	0x40020c00
 8002010:	40010400 	.word	0x40010400
 8002014:	40020800 	.word	0x40020800

08002018 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002028:	d114      	bne.n	8002054 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202a:	4b26      	ldr	r3, [pc, #152]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xac>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	4a25      	ldr	r2, [pc, #148]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xac>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6413      	str	r3, [r2, #64]	@ 0x40
 8002036:	4b23      	ldr	r3, [pc, #140]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xac>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2105      	movs	r1, #5
 8002046:	201c      	movs	r0, #28
 8002048:	f000 fcab 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800204c:	201c      	movs	r0, #28
 800204e:	f000 fcc4 	bl	80029da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002052:	e032      	b.n	80020ba <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1b      	ldr	r2, [pc, #108]	@ (80020c8 <HAL_TIM_PWM_MspInit+0xb0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d114      	bne.n	8002088 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800205e:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xac>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	4a18      	ldr	r2, [pc, #96]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xac>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	6413      	str	r3, [r2, #64]	@ 0x40
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xac>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2105      	movs	r1, #5
 800207a:	2032      	movs	r0, #50	@ 0x32
 800207c:	f000 fc91 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002080:	2032      	movs	r0, #50	@ 0x32
 8002082:	f000 fcaa 	bl	80029da <HAL_NVIC_EnableIRQ>
}
 8002086:	e018      	b.n	80020ba <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0f      	ldr	r2, [pc, #60]	@ (80020cc <HAL_TIM_PWM_MspInit+0xb4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d113      	bne.n	80020ba <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002092:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xac>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	4a0b      	ldr	r2, [pc, #44]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xac>)
 8002098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800209c:	6413      	str	r3, [r2, #64]	@ 0x40
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <HAL_TIM_PWM_MspInit+0xac>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2105      	movs	r1, #5
 80020ae:	202b      	movs	r0, #43	@ 0x2b
 80020b0:	f000 fc77 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80020b4:	202b      	movs	r0, #43	@ 0x2b
 80020b6:	f000 fc90 	bl	80029da <HAL_NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40000c00 	.word	0x40000c00
 80020cc:	40001800 	.word	0x40001800

080020d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002114 <HAL_TIM_Base_MspInit+0x44>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d113      	bne.n	800210a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <HAL_TIM_Base_MspInit+0x48>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002118 <HAL_TIM_Base_MspInit+0x48>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_TIM_Base_MspInit+0x48>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2105      	movs	r1, #5
 80020fe:	2036      	movs	r0, #54	@ 0x36
 8002100:	f000 fc4f 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002104:	2036      	movs	r0, #54	@ 0x36
 8002106:	f000 fc68 	bl	80029da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40001000 	.word	0x40001000
 8002118:	40023800 	.word	0x40023800

0800211c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08c      	sub	sp, #48	@ 0x30
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213c:	d139      	bne.n	80021b2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a40      	ldr	r2, [pc, #256]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b3e      	ldr	r3, [pc, #248]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	4b3b      	ldr	r3, [pc, #236]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 800216e:	2320      	movs	r3, #32
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800217e:	2301      	movs	r3, #1
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	4619      	mov	r1, r3
 8002188:	482f      	ldr	r0, [pc, #188]	@ (8002248 <HAL_TIM_MspPostInit+0x12c>)
 800218a:	f000 ffbd 	bl	8003108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 800218e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a0:	2301      	movs	r3, #1
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	4828      	ldr	r0, [pc, #160]	@ (800224c <HAL_TIM_MspPostInit+0x130>)
 80021ac:	f000 ffac 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80021b0:	e043      	b.n	800223a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a26      	ldr	r2, [pc, #152]	@ (8002250 <HAL_TIM_MspPostInit+0x134>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d11c      	bne.n	80021f6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	4a20      	ldr	r2, [pc, #128]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 80021d4:	2309      	movs	r3, #9
 80021d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021e4:	2302      	movs	r3, #2
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4816      	ldr	r0, [pc, #88]	@ (8002248 <HAL_TIM_MspPostInit+0x12c>)
 80021f0:	f000 ff8a 	bl	8003108 <HAL_GPIO_Init>
}
 80021f4:	e021      	b.n	800223a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a16      	ldr	r2, [pc, #88]	@ (8002254 <HAL_TIM_MspPostInit+0x138>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d11c      	bne.n	800223a <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002200:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	4a0f      	ldr	r2, [pc, #60]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	6313      	str	r3, [r2, #48]	@ 0x30
 800220c:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <HAL_TIM_MspPostInit+0x128>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800222a:	2309      	movs	r3, #9
 800222c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	4805      	ldr	r0, [pc, #20]	@ (800224c <HAL_TIM_MspPostInit+0x130>)
 8002236:	f000 ff67 	bl	8003108 <HAL_GPIO_Init>
}
 800223a:	bf00      	nop
 800223c:	3730      	adds	r7, #48	@ 0x30
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40020000 	.word	0x40020000
 800224c:	40020400 	.word	0x40020400
 8002250:	40000c00 	.word	0x40000c00
 8002254:	40001800 	.word	0x40001800

08002258 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 800225e:	4a15      	ldr	r2, [pc, #84]	@ (80022b4 <MX_USART2_UART_Init+0x5c>)
 8002260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002262:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 8002264:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800226a:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 800227e:	220c      	movs	r2, #12
 8002280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800228e:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 8002290:	2200      	movs	r2, #0
 8002292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 8002296:	2200      	movs	r2, #0
 8002298:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_USART2_UART_Init+0x58>)
 800229c:	f003 fe74 	bl	8005f88 <HAL_UART_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022a6:	f7ff f9af 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200003a8 	.word	0x200003a8
 80022b4:	40004400 	.word	0x40004400

080022b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022bc:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022be:	4a15      	ldr	r2, [pc, #84]	@ (8002314 <MX_USART3_UART_Init+0x5c>)
 80022c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022c2:	4b13      	ldr	r3, [pc, #76]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	@ (8002310 <MX_USART3_UART_Init+0x58>)
 80022fc:	f003 fe44 	bl	8005f88 <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002306:	f7ff f97f 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000430 	.word	0x20000430
 8002314:	40004800 	.word	0x40004800

08002318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0b0      	sub	sp, #192	@ 0xc0
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	2290      	movs	r2, #144	@ 0x90
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f008 faff 	bl	800a93c <memset>
  if(uartHandle->Instance==USART2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a79      	ldr	r2, [pc, #484]	@ (8002528 <HAL_UART_MspInit+0x210>)
 8002344:	4293      	cmp	r3, r2
 8002346:	f040 80a0 	bne.w	800248a <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800234e:	2300      	movs	r3, #0
 8002350:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4618      	mov	r0, r3
 8002358:	f001 ff24 	bl	80041a4 <HAL_RCCEx_PeriphCLKConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002362:	f7ff f951 	bl	8001608 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002366:	4b71      	ldr	r3, [pc, #452]	@ (800252c <HAL_UART_MspInit+0x214>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	4a70      	ldr	r2, [pc, #448]	@ (800252c <HAL_UART_MspInit+0x214>)
 800236c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002370:	6413      	str	r3, [r2, #64]	@ 0x40
 8002372:	4b6e      	ldr	r3, [pc, #440]	@ (800252c <HAL_UART_MspInit+0x214>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800237e:	4b6b      	ldr	r3, [pc, #428]	@ (800252c <HAL_UART_MspInit+0x214>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a6a      	ldr	r2, [pc, #424]	@ (800252c <HAL_UART_MspInit+0x214>)
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b68      	ldr	r3, [pc, #416]	@ (800252c <HAL_UART_MspInit+0x214>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002396:	2360      	movs	r3, #96	@ 0x60
 8002398:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ae:	2307      	movs	r3, #7
 80023b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80023b8:	4619      	mov	r1, r3
 80023ba:	485d      	ldr	r0, [pc, #372]	@ (8002530 <HAL_UART_MspInit+0x218>)
 80023bc:	f000 fea4 	bl	8003108 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002538 <HAL_UART_MspInit+0x220>)
 80023c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80023c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ce:	4b59      	ldr	r3, [pc, #356]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d4:	4b57      	ldr	r3, [pc, #348]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023da:	4b56      	ldr	r3, [pc, #344]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e2:	4b54      	ldr	r3, [pc, #336]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e8:	4b52      	ldr	r3, [pc, #328]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80023ee:	4b51      	ldr	r3, [pc, #324]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002400:	484c      	ldr	r0, [pc, #304]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 8002402:	f000 fb05 	bl	8002a10 <HAL_DMA_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800240c:	f7ff f8fc 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a48      	ldr	r2, [pc, #288]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 8002414:	675a      	str	r2, [r3, #116]	@ 0x74
 8002416:	4a47      	ldr	r2, [pc, #284]	@ (8002534 <HAL_UART_MspInit+0x21c>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800241c:	4b47      	ldr	r3, [pc, #284]	@ (800253c <HAL_UART_MspInit+0x224>)
 800241e:	4a48      	ldr	r2, [pc, #288]	@ (8002540 <HAL_UART_MspInit+0x228>)
 8002420:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002422:	4b46      	ldr	r3, [pc, #280]	@ (800253c <HAL_UART_MspInit+0x224>)
 8002424:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002428:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800242a:	4b44      	ldr	r3, [pc, #272]	@ (800253c <HAL_UART_MspInit+0x224>)
 800242c:	2240      	movs	r2, #64	@ 0x40
 800242e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002430:	4b42      	ldr	r3, [pc, #264]	@ (800253c <HAL_UART_MspInit+0x224>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_UART_MspInit+0x224>)
 8002438:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800243c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243e:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <HAL_UART_MspInit+0x224>)
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002444:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <HAL_UART_MspInit+0x224>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800244a:	4b3c      	ldr	r3, [pc, #240]	@ (800253c <HAL_UART_MspInit+0x224>)
 800244c:	2200      	movs	r2, #0
 800244e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002450:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <HAL_UART_MspInit+0x224>)
 8002452:	2200      	movs	r2, #0
 8002454:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002456:	4b39      	ldr	r3, [pc, #228]	@ (800253c <HAL_UART_MspInit+0x224>)
 8002458:	2200      	movs	r2, #0
 800245a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800245c:	4837      	ldr	r0, [pc, #220]	@ (800253c <HAL_UART_MspInit+0x224>)
 800245e:	f000 fad7 	bl	8002a10 <HAL_DMA_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8002468:	f7ff f8ce 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a33      	ldr	r2, [pc, #204]	@ (800253c <HAL_UART_MspInit+0x224>)
 8002470:	671a      	str	r2, [r3, #112]	@ 0x70
 8002472:	4a32      	ldr	r2, [pc, #200]	@ (800253c <HAL_UART_MspInit+0x224>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	2105      	movs	r1, #5
 800247c:	2026      	movs	r0, #38	@ 0x26
 800247e:	f000 fa90 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002482:	2026      	movs	r0, #38	@ 0x26
 8002484:	f000 faa9 	bl	80029da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002488:	e049      	b.n	800251e <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2d      	ldr	r2, [pc, #180]	@ (8002544 <HAL_UART_MspInit+0x22c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d144      	bne.n	800251e <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002494:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002498:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800249a:	2300      	movs	r3, #0
 800249c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249e:	f107 031c 	add.w	r3, r7, #28
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 fe7e 	bl	80041a4 <HAL_RCCEx_PeriphCLKConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80024ae:	f7ff f8ab 	bl	8001608 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024b2:	4b1e      	ldr	r3, [pc, #120]	@ (800252c <HAL_UART_MspInit+0x214>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	4a1d      	ldr	r2, [pc, #116]	@ (800252c <HAL_UART_MspInit+0x214>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024be:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <HAL_UART_MspInit+0x214>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ca:	4b18      	ldr	r3, [pc, #96]	@ (800252c <HAL_UART_MspInit+0x214>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a17      	ldr	r2, [pc, #92]	@ (800252c <HAL_UART_MspInit+0x214>)
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <HAL_UART_MspInit+0x214>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024fc:	2307      	movs	r3, #7
 80024fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002502:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002506:	4619      	mov	r1, r3
 8002508:	4809      	ldr	r0, [pc, #36]	@ (8002530 <HAL_UART_MspInit+0x218>)
 800250a:	f000 fdfd 	bl	8003108 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2105      	movs	r1, #5
 8002512:	2027      	movs	r0, #39	@ 0x27
 8002514:	f000 fa45 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002518:	2027      	movs	r0, #39	@ 0x27
 800251a:	f000 fa5e 	bl	80029da <HAL_NVIC_EnableIRQ>
}
 800251e:	bf00      	nop
 8002520:	37c0      	adds	r7, #192	@ 0xc0
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40004400 	.word	0x40004400
 800252c:	40023800 	.word	0x40023800
 8002530:	40020c00 	.word	0x40020c00
 8002534:	200004b8 	.word	0x200004b8
 8002538:	40026088 	.word	0x40026088
 800253c:	20000518 	.word	0x20000518
 8002540:	400260a0 	.word	0x400260a0
 8002544:	40004800 	.word	0x40004800

08002548 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800254c:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800254e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002552:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002554:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002556:	2206      	movs	r2, #6
 8002558:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800255c:	2202      	movs	r2, #2
 800255e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002560:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002568:	2202      	movs	r2, #2
 800256a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800256e:	2201      	movs	r2, #1
 8002570:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002572:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002578:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800257a:	2200      	movs	r2, #0
 800257c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800257e:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002580:	2201      	movs	r2, #1
 8002582:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002586:	2200      	movs	r2, #0
 8002588:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800258a:	4805      	ldr	r0, [pc, #20]	@ (80025a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800258c:	f000 ff9b 	bl	80034c6 <HAL_PCD_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002596:	f7ff f837 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000578 	.word	0x20000578

080025a4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b0ae      	sub	sp, #184	@ 0xb8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2290      	movs	r2, #144	@ 0x90
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f008 f9b9 	bl	800a93c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d2:	d159      	bne.n	8002688 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80025d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4618      	mov	r0, r3
 80025e6:	f001 fddd 	bl	80041a4 <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80025f0:	f7ff f80a 	bl	8001608 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <HAL_PCD_MspInit+0xec>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	4a25      	ldr	r2, [pc, #148]	@ (8002690 <HAL_PCD_MspInit+0xec>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_PCD_MspInit+0xec>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800260c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002610:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002626:	230a      	movs	r3, #10
 8002628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002630:	4619      	mov	r1, r3
 8002632:	4818      	ldr	r0, [pc, #96]	@ (8002694 <HAL_PCD_MspInit+0xf0>)
 8002634:	f000 fd68 	bl	8003108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002638:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800263c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002650:	4619      	mov	r1, r3
 8002652:	4810      	ldr	r0, [pc, #64]	@ (8002694 <HAL_PCD_MspInit+0xf0>)
 8002654:	f000 fd58 	bl	8003108 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002658:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_PCD_MspInit+0xec>)
 800265a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265c:	4a0c      	ldr	r2, [pc, #48]	@ (8002690 <HAL_PCD_MspInit+0xec>)
 800265e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002662:	6353      	str	r3, [r2, #52]	@ 0x34
 8002664:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <HAL_PCD_MspInit+0xec>)
 8002666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <HAL_PCD_MspInit+0xec>)
 8002672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002674:	4a06      	ldr	r2, [pc, #24]	@ (8002690 <HAL_PCD_MspInit+0xec>)
 8002676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267a:	6453      	str	r3, [r2, #68]	@ 0x44
 800267c:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <HAL_PCD_MspInit+0xec>)
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002688:	bf00      	nop
 800268a:	37b8      	adds	r7, #184	@ 0xb8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	40020000 	.word	0x40020000

08002698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800269c:	f7ff f8b8 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a0:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026a2:	490d      	ldr	r1, [pc, #52]	@ (80026d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a8:	e002      	b.n	80026b0 <LoopCopyDataInit>

080026aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ae:	3304      	adds	r3, #4

080026b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b4:	d3f9      	bcc.n	80026aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026b8:	4c0a      	ldr	r4, [pc, #40]	@ (80026e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026bc:	e001      	b.n	80026c2 <LoopFillZerobss>

080026be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c0:	3204      	adds	r2, #4

080026c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c4:	d3fb      	bcc.n	80026be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026c6:	f008 f959 	bl	800a97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ca:	f7fe feab 	bl	8001424 <main>
  bx  lr    
 80026ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80026dc:	0800ad0c 	.word	0x0800ad0c
  ldr r2, =_sbss
 80026e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80026e4:	200054dc 	.word	0x200054dc

080026e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <ADC_IRQHandler>

080026ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ee:	2003      	movs	r0, #3
 80026f0:	f000 f94c 	bl	800298c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f4:	200f      	movs	r0, #15
 80026f6:	f000 f805 	bl	8002704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026fa:	f7fe ff8b 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_InitTick+0x54>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b12      	ldr	r3, [pc, #72]	@ (800275c <HAL_InitTick+0x58>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800271a:	fbb3 f3f1 	udiv	r3, r3, r1
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f967 	bl	80029f6 <HAL_SYSTICK_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00e      	b.n	8002750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d80a      	bhi.n	800274e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002738:	2200      	movs	r2, #0
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	f000 f92f 	bl	80029a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002744:	4a06      	ldr	r2, [pc, #24]	@ (8002760 <HAL_InitTick+0x5c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000000 	.word	0x20000000
 800275c:	20000008 	.word	0x20000008
 8002760:	20000004 	.word	0x20000004

08002764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <HAL_IncTick+0x20>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_IncTick+0x24>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	@ (8002788 <HAL_IncTick+0x24>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000008 	.word	0x20000008
 8002788:	20000a58 	.word	0x20000a58

0800278c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return uwTick;
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <HAL_GetTick+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000a58 	.word	0x20000a58

080027a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff ffee 	bl	800278c <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d005      	beq.n	80027ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <HAL_Delay+0x44>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ca:	bf00      	nop
 80027cc:	f7ff ffde 	bl	800278c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d8f7      	bhi.n	80027cc <HAL_Delay+0x28>
  {
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000008 	.word	0x20000008

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <__NVIC_SetPriorityGrouping+0x40>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	4313      	orrs	r3, r2
 8002818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281a:	4a04      	ldr	r2, [pc, #16]	@ (800282c <__NVIC_SetPriorityGrouping+0x40>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60d3      	str	r3, [r2, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00
 8002830:	05fa0000 	.word	0x05fa0000

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	@ (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4907      	ldr	r1, [pc, #28]	@ (8002888 <__NVIC_EnableIRQ+0x38>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	@ (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	@ (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	@ 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	@ 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002958:	d301      	bcc.n	800295e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295a:	2301      	movs	r3, #1
 800295c:	e00f      	b.n	800297e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295e:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <SysTick_Config+0x40>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002966:	210f      	movs	r1, #15
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f7ff ff8e 	bl	800288c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002970:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <SysTick_Config+0x40>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002976:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <SysTick_Config+0x40>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000e010 	.word	0xe000e010

0800298c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff29 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b4:	f7ff ff3e 	bl	8002834 <__NVIC_GetPriorityGrouping>
 80029b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f7ff ff8e 	bl	80028e0 <NVIC_EncodePriority>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff5d 	bl	800288c <__NVIC_SetPriority>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff31 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffa2 	bl	8002948 <SysTick_Config>
 8002a04:	4603      	mov	r3, r0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff feb6 	bl	800278c <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e099      	b.n	8002b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4c:	e00f      	b.n	8002a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4e:	f7ff fe9d 	bl	800278c <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d908      	bls.n	8002a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e078      	b.n	8002b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e8      	bne.n	8002a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4b38      	ldr	r3, [pc, #224]	@ (8002b68 <HAL_DMA_Init+0x158>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d107      	bne.n	8002ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f023 0307 	bic.w	r3, r3, #7
 8002aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d117      	bne.n	8002b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fa7b 	bl	8003010 <DMA_CheckFifoParam>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2240      	movs	r2, #64	@ 0x40
 8002b24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e016      	b.n	8002b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa32 	bl	8002fa4 <DMA_CalcBaseAndBitshift>
 8002b40:	4603      	mov	r3, r0
 8002b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	223f      	movs	r2, #63	@ 0x3f
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	e010803f 	.word	0xe010803f

08002b6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b7a:	f7ff fe07 	bl	800278c <HAL_GetTick>
 8002b7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d008      	beq.n	8002b9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2280      	movs	r2, #128	@ 0x80
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e052      	b.n	8002c44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0216 	bic.w	r2, r2, #22
 8002bac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_DMA_Abort+0x62>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0208 	bic.w	r2, r2, #8
 8002bdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bee:	e013      	b.n	8002c18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf0:	f7ff fdcc 	bl	800278c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d90c      	bls.n	8002c18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2203      	movs	r2, #3
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e015      	b.n	8002c44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e4      	bne.n	8002bf0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	223f      	movs	r2, #63	@ 0x3f
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d004      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2280      	movs	r2, #128	@ 0x80
 8002c64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00c      	b.n	8002c84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c9c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ed8 <HAL_DMA_IRQHandler+0x248>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a8e      	ldr	r2, [pc, #568]	@ (8002edc <HAL_DMA_IRQHandler+0x24c>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0a9b      	lsrs	r3, r3, #10
 8002ca8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cba:	2208      	movs	r2, #8
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01a      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0204 	bic.w	r2, r2, #4
 8002ce2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	2208      	movs	r2, #8
 8002cea:	409a      	lsls	r2, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d00:	2201      	movs	r2, #1
 8002d02:	409a      	lsls	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d012      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1e:	2201      	movs	r2, #1
 8002d20:	409a      	lsls	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2a:	f043 0202 	orr.w	r2, r3, #2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	2204      	movs	r2, #4
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d012      	beq.n	8002d68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	2204      	movs	r2, #4
 8002d56:	409a      	lsls	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d043      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d03c      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d018      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d024      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
 8002dbe:	e01f      	b.n	8002e00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01b      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
 8002dd0:	e016      	b.n	8002e00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0208 	bic.w	r2, r2, #8
 8002dee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	2220      	movs	r2, #32
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 808f 	beq.w	8002f30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8087 	beq.w	8002f30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	2220      	movs	r2, #32
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d136      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0216 	bic.w	r2, r2, #22
 8002e48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <HAL_DMA_IRQHandler+0x1da>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0208 	bic.w	r2, r2, #8
 8002e78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7e:	223f      	movs	r2, #63	@ 0x3f
 8002e80:	409a      	lsls	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d07e      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
        }
        return;
 8002ea6:	e079      	b.n	8002f9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d031      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
 8002ed4:	e02c      	b.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d023      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
 8002ef0:	e01e      	b.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10f      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0210 	bic.w	r2, r2, #16
 8002f0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d032      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d022      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2205      	movs	r2, #5
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d307      	bcc.n	8002f78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f2      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x2cc>
 8002f76:	e000      	b.n	8002f7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
 8002f9a:	e000      	b.n	8002f9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f9c:	bf00      	nop
    }
  }
}
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	3b10      	subs	r3, #16
 8002fb4:	4a13      	ldr	r2, [pc, #76]	@ (8003004 <DMA_CalcBaseAndBitshift+0x60>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fbe:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <DMA_CalcBaseAndBitshift+0x64>)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d908      	bls.n	8002fe4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <DMA_CalcBaseAndBitshift+0x68>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	1d1a      	adds	r2, r3, #4
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fe2:	e006      	b.n	8002ff2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b08      	ldr	r3, [pc, #32]	@ (800300c <DMA_CalcBaseAndBitshift+0x68>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	aaaaaaab 	.word	0xaaaaaaab
 8003008:	0800abf0 	.word	0x0800abf0
 800300c:	fffffc00 	.word	0xfffffc00

08003010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d11f      	bne.n	800306a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d856      	bhi.n	80030de <DMA_CheckFifoParam+0xce>
 8003030:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <DMA_CheckFifoParam+0x28>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	08003049 	.word	0x08003049
 800303c:	0800305b 	.word	0x0800305b
 8003040:	08003049 	.word	0x08003049
 8003044:	080030df 	.word	0x080030df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d046      	beq.n	80030e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003058:	e043      	b.n	80030e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003062:	d140      	bne.n	80030e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003068:	e03d      	b.n	80030e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003072:	d121      	bne.n	80030b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d837      	bhi.n	80030ea <DMA_CheckFifoParam+0xda>
 800307a:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <DMA_CheckFifoParam+0x70>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	08003091 	.word	0x08003091
 8003084:	08003097 	.word	0x08003097
 8003088:	08003091 	.word	0x08003091
 800308c:	080030a9 	.word	0x080030a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      break;
 8003094:	e030      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d025      	beq.n	80030ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a6:	e022      	b.n	80030ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030b0:	d11f      	bne.n	80030f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030b6:	e01c      	b.n	80030f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d903      	bls.n	80030c6 <DMA_CheckFifoParam+0xb6>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d003      	beq.n	80030cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030c4:	e018      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
      break;
 80030ca:	e015      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e00b      	b.n	80030f6 <DMA_CheckFifoParam+0xe6>
      break;
 80030de:	bf00      	nop
 80030e0:	e00a      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030e2:	bf00      	nop
 80030e4:	e008      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030e6:	bf00      	nop
 80030e8:	e006      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
 80030ec:	e004      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
    }
  } 
  
  return status; 
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop

08003108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e175      	b.n	8003414 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	429a      	cmp	r2, r3
 8003142:	f040 8164 	bne.w	800340e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d005      	beq.n	800315e <HAL_GPIO_Init+0x56>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d130      	bne.n	80031c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	2203      	movs	r2, #3
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003194:	2201      	movs	r2, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 0201 	and.w	r2, r3, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d017      	beq.n	80031fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d123      	bne.n	8003250 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	08da      	lsrs	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3208      	adds	r2, #8
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0203 	and.w	r2, r3, #3
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80be 	beq.w	800340e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	4b66      	ldr	r3, [pc, #408]	@ (800342c <HAL_GPIO_Init+0x324>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	4a65      	ldr	r2, [pc, #404]	@ (800342c <HAL_GPIO_Init+0x324>)
 8003298:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800329c:	6453      	str	r3, [r2, #68]	@ 0x44
 800329e:	4b63      	ldr	r3, [pc, #396]	@ (800342c <HAL_GPIO_Init+0x324>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032aa:	4a61      	ldr	r2, [pc, #388]	@ (8003430 <HAL_GPIO_Init+0x328>)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a58      	ldr	r2, [pc, #352]	@ (8003434 <HAL_GPIO_Init+0x32c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d037      	beq.n	8003346 <HAL_GPIO_Init+0x23e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a57      	ldr	r2, [pc, #348]	@ (8003438 <HAL_GPIO_Init+0x330>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d031      	beq.n	8003342 <HAL_GPIO_Init+0x23a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a56      	ldr	r2, [pc, #344]	@ (800343c <HAL_GPIO_Init+0x334>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02b      	beq.n	800333e <HAL_GPIO_Init+0x236>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a55      	ldr	r2, [pc, #340]	@ (8003440 <HAL_GPIO_Init+0x338>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d025      	beq.n	800333a <HAL_GPIO_Init+0x232>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a54      	ldr	r2, [pc, #336]	@ (8003444 <HAL_GPIO_Init+0x33c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01f      	beq.n	8003336 <HAL_GPIO_Init+0x22e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a53      	ldr	r2, [pc, #332]	@ (8003448 <HAL_GPIO_Init+0x340>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d019      	beq.n	8003332 <HAL_GPIO_Init+0x22a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a52      	ldr	r2, [pc, #328]	@ (800344c <HAL_GPIO_Init+0x344>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_GPIO_Init+0x226>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a51      	ldr	r2, [pc, #324]	@ (8003450 <HAL_GPIO_Init+0x348>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00d      	beq.n	800332a <HAL_GPIO_Init+0x222>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a50      	ldr	r2, [pc, #320]	@ (8003454 <HAL_GPIO_Init+0x34c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <HAL_GPIO_Init+0x21e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a4f      	ldr	r2, [pc, #316]	@ (8003458 <HAL_GPIO_Init+0x350>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <HAL_GPIO_Init+0x21a>
 800331e:	2309      	movs	r3, #9
 8003320:	e012      	b.n	8003348 <HAL_GPIO_Init+0x240>
 8003322:	230a      	movs	r3, #10
 8003324:	e010      	b.n	8003348 <HAL_GPIO_Init+0x240>
 8003326:	2308      	movs	r3, #8
 8003328:	e00e      	b.n	8003348 <HAL_GPIO_Init+0x240>
 800332a:	2307      	movs	r3, #7
 800332c:	e00c      	b.n	8003348 <HAL_GPIO_Init+0x240>
 800332e:	2306      	movs	r3, #6
 8003330:	e00a      	b.n	8003348 <HAL_GPIO_Init+0x240>
 8003332:	2305      	movs	r3, #5
 8003334:	e008      	b.n	8003348 <HAL_GPIO_Init+0x240>
 8003336:	2304      	movs	r3, #4
 8003338:	e006      	b.n	8003348 <HAL_GPIO_Init+0x240>
 800333a:	2303      	movs	r3, #3
 800333c:	e004      	b.n	8003348 <HAL_GPIO_Init+0x240>
 800333e:	2302      	movs	r3, #2
 8003340:	e002      	b.n	8003348 <HAL_GPIO_Init+0x240>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_GPIO_Init+0x240>
 8003346:	2300      	movs	r3, #0
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	f002 0203 	and.w	r2, r2, #3
 800334e:	0092      	lsls	r2, r2, #2
 8003350:	4093      	lsls	r3, r2
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003358:	4935      	ldr	r1, [pc, #212]	@ (8003430 <HAL_GPIO_Init+0x328>)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	3302      	adds	r3, #2
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003366:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <HAL_GPIO_Init+0x354>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338a:	4a34      	ldr	r2, [pc, #208]	@ (800345c <HAL_GPIO_Init+0x354>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003390:	4b32      	ldr	r3, [pc, #200]	@ (800345c <HAL_GPIO_Init+0x354>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b4:	4a29      	ldr	r2, [pc, #164]	@ (800345c <HAL_GPIO_Init+0x354>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ba:	4b28      	ldr	r3, [pc, #160]	@ (800345c <HAL_GPIO_Init+0x354>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033de:	4a1f      	ldr	r2, [pc, #124]	@ (800345c <HAL_GPIO_Init+0x354>)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e4:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <HAL_GPIO_Init+0x354>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003408:	4a14      	ldr	r2, [pc, #80]	@ (800345c <HAL_GPIO_Init+0x354>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3301      	adds	r3, #1
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	f67f ae86 	bls.w	8003128 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	3724      	adds	r7, #36	@ 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800
 8003430:	40013800 	.word	0x40013800
 8003434:	40020000 	.word	0x40020000
 8003438:	40020400 	.word	0x40020400
 800343c:	40020800 	.word	0x40020800
 8003440:	40020c00 	.word	0x40020c00
 8003444:	40021000 	.word	0x40021000
 8003448:	40021400 	.word	0x40021400
 800344c:	40021800 	.word	0x40021800
 8003450:	40021c00 	.word	0x40021c00
 8003454:	40022000 	.word	0x40022000
 8003458:	40022400 	.word	0x40022400
 800345c:	40013c00 	.word	0x40013c00

08003460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
 800346c:	4613      	mov	r3, r2
 800346e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800347c:	e003      	b.n	8003486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	041a      	lsls	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	619a      	str	r2, [r3, #24]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034a4:	887a      	ldrh	r2, [r7, #2]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4013      	ands	r3, r2
 80034aa:	041a      	lsls	r2, r3, #16
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	43d9      	mvns	r1, r3
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	400b      	ands	r3, r1
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	619a      	str	r2, [r3, #24]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af02      	add	r7, sp, #8
 80034cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e108      	b.n	80036ea <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff f856 	bl	80025a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2203      	movs	r2, #3
 80034fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003506:	d102      	bne.n	800350e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 f8ee 	bl	80076f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7c1a      	ldrb	r2, [r3, #16]
 8003520:	f88d 2000 	strb.w	r2, [sp]
 8003524:	3304      	adds	r3, #4
 8003526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003528:	f004 f88a 	bl	8007640 <USB_CoreInit>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0d5      	b.n	80036ea <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f004 f8e6 	bl	8007716 <USB_SetCurrentMode>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0c6      	b.n	80036ea <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e04a      	b.n	80035f8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3315      	adds	r3, #21
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	3314      	adds	r3, #20
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	b298      	uxth	r0, r3
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	332e      	adds	r3, #46	@ 0x2e
 800359e:	4602      	mov	r2, r0
 80035a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3318      	adds	r3, #24
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	331c      	adds	r3, #28
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	3320      	adds	r3, #32
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3324      	adds	r3, #36	@ 0x24
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	3301      	adds	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	791b      	ldrb	r3, [r3, #4]
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d3af      	bcc.n	8003562 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	e044      	b.n	8003692 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	3301      	adds	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	791b      	ldrb	r3, [r3, #4]
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	429a      	cmp	r2, r3
 800369a:	d3b5      	bcc.n	8003608 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7c1a      	ldrb	r2, [r3, #16]
 80036a4:	f88d 2000 	strb.w	r2, [sp]
 80036a8:	3304      	adds	r3, #4
 80036aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ac:	f004 f880 	bl	80077b0 <USB_DevInit>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e013      	b.n	80036ea <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7b1b      	ldrb	r3, [r3, #12]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d102      	bne.n	80036de <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f80b 	bl	80036f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f004 fa3b 	bl	8007b5e <USB_DevDisconnect>

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003722:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <HAL_PCDEx_ActivateLPM+0x44>)
 8003724:	4313      	orrs	r3, r2
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	10000003 	.word	0x10000003

0800373c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a04      	ldr	r2, [pc, #16]	@ (8003758 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40007000 	.word	0x40007000

0800375c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b23      	ldr	r3, [pc, #140]	@ (80037f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	4a22      	ldr	r2, [pc, #136]	@ (80037f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	@ 0x40
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800377e:	4b1e      	ldr	r3, [pc, #120]	@ (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1d      	ldr	r2, [pc, #116]	@ (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800378a:	f7fe ffff 	bl	800278c <HAL_GetTick>
 800378e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003790:	e009      	b.n	80037a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003792:	f7fe fffb 	bl	800278c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037a0:	d901      	bls.n	80037a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e022      	b.n	80037ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037a6:	4b14      	ldr	r3, [pc, #80]	@ (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b2:	d1ee      	bne.n	8003792 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037b4:	4b10      	ldr	r3, [pc, #64]	@ (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0f      	ldr	r2, [pc, #60]	@ (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c0:	f7fe ffe4 	bl	800278c <HAL_GetTick>
 80037c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037c6:	e009      	b.n	80037dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037c8:	f7fe ffe0 	bl	800278c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037d6:	d901      	bls.n	80037dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e007      	b.n	80037ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037e8:	d1ee      	bne.n	80037c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40007000 	.word	0x40007000

080037fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e29b      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8087 	beq.w	800392e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003820:	4b96      	ldr	r3, [pc, #600]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b04      	cmp	r3, #4
 800382a:	d00c      	beq.n	8003846 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382c:	4b93      	ldr	r3, [pc, #588]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b08      	cmp	r3, #8
 8003836:	d112      	bne.n	800385e <HAL_RCC_OscConfig+0x62>
 8003838:	4b90      	ldr	r3, [pc, #576]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003844:	d10b      	bne.n	800385e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003846:	4b8d      	ldr	r3, [pc, #564]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d06c      	beq.n	800392c <HAL_RCC_OscConfig+0x130>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d168      	bne.n	800392c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e275      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x7a>
 8003868:	4b84      	ldr	r3, [pc, #528]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a83      	ldr	r2, [pc, #524]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	e02e      	b.n	80038d4 <HAL_RCC_OscConfig+0xd8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x9c>
 800387e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a7e      	ldr	r2, [pc, #504]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a7b      	ldr	r2, [pc, #492]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003890:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e01d      	b.n	80038d4 <HAL_RCC_OscConfig+0xd8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0xc0>
 80038a2:	4b76      	ldr	r3, [pc, #472]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a75      	ldr	r2, [pc, #468]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b73      	ldr	r3, [pc, #460]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a72      	ldr	r2, [pc, #456]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e00b      	b.n	80038d4 <HAL_RCC_OscConfig+0xd8>
 80038bc:	4b6f      	ldr	r3, [pc, #444]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6e      	ldr	r2, [pc, #440]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b6c      	ldr	r3, [pc, #432]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a6b      	ldr	r2, [pc, #428]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fe ff56 	bl	800278c <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fe ff52 	bl	800278c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	@ 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e229      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b61      	ldr	r3, [pc, #388]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0xe8>
 8003902:	e014      	b.n	800392e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fe ff42 	bl	800278c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390c:	f7fe ff3e 	bl	800278c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	@ 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e215      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	4b57      	ldr	r3, [pc, #348]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x110>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d069      	beq.n	8003a0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800393a:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003946:	4b4d      	ldr	r3, [pc, #308]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b08      	cmp	r3, #8
 8003950:	d11c      	bne.n	800398c <HAL_RCC_OscConfig+0x190>
 8003952:	4b4a      	ldr	r3, [pc, #296]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	4b47      	ldr	r3, [pc, #284]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_RCC_OscConfig+0x17a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e1e9      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003976:	4b41      	ldr	r3, [pc, #260]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	493d      	ldr	r1, [pc, #244]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398a:	e040      	b.n	8003a0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d023      	beq.n	80039dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003994:	4b39      	ldr	r3, [pc, #228]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a38      	ldr	r2, [pc, #224]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fe fef4 	bl	800278c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a8:	f7fe fef0 	bl	800278c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1c7      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	4b30      	ldr	r3, [pc, #192]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4929      	ldr	r1, [pc, #164]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
 80039da:	e018      	b.n	8003a0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039dc:	4b27      	ldr	r3, [pc, #156]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a26      	ldr	r2, [pc, #152]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe fed0 	bl	800278c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f0:	f7fe fecc 	bl	800278c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1a3      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d038      	beq.n	8003a8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d019      	beq.n	8003a56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a22:	4b16      	ldr	r3, [pc, #88]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a26:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fe fead 	bl	800278c <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a36:	f7fe fea9 	bl	800278c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e180      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a48:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x23a>
 8003a54:	e01a      	b.n	8003a8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a56:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5a:	4a08      	ldr	r2, [pc, #32]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a62:	f7fe fe93 	bl	800278c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6a:	f7fe fe8f 	bl	800278c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d903      	bls.n	8003a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e166      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
 8003a7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b92      	ldr	r3, [pc, #584]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ee      	bne.n	8003a6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a4 	beq.w	8003be2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9a:	4b8c      	ldr	r3, [pc, #560]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	4b89      	ldr	r3, [pc, #548]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	4a88      	ldr	r2, [pc, #544]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ab2:	4b86      	ldr	r3, [pc, #536]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac2:	4b83      	ldr	r3, [pc, #524]	@ (8003cd0 <HAL_RCC_OscConfig+0x4d4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d118      	bne.n	8003b00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ace:	4b80      	ldr	r3, [pc, #512]	@ (8003cd0 <HAL_RCC_OscConfig+0x4d4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7f      	ldr	r2, [pc, #508]	@ (8003cd0 <HAL_RCC_OscConfig+0x4d4>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ada:	f7fe fe57 	bl	800278c <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae2:	f7fe fe53 	bl	800278c <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b64      	cmp	r3, #100	@ 0x64
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e12a      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af4:	4b76      	ldr	r3, [pc, #472]	@ (8003cd0 <HAL_RCC_OscConfig+0x4d4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d106      	bne.n	8003b16 <HAL_RCC_OscConfig+0x31a>
 8003b08:	4b70      	ldr	r3, [pc, #448]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	4a6f      	ldr	r2, [pc, #444]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b14:	e02d      	b.n	8003b72 <HAL_RCC_OscConfig+0x376>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0x33c>
 8003b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	4a6a      	ldr	r2, [pc, #424]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2a:	4b68      	ldr	r3, [pc, #416]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	4a67      	ldr	r2, [pc, #412]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b30:	f023 0304 	bic.w	r3, r3, #4
 8003b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b36:	e01c      	b.n	8003b72 <HAL_RCC_OscConfig+0x376>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d10c      	bne.n	8003b5a <HAL_RCC_OscConfig+0x35e>
 8003b40:	4b62      	ldr	r3, [pc, #392]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	4a61      	ldr	r2, [pc, #388]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b46:	f043 0304 	orr.w	r3, r3, #4
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4c:	4b5f      	ldr	r3, [pc, #380]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a5e      	ldr	r2, [pc, #376]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b58:	e00b      	b.n	8003b72 <HAL_RCC_OscConfig+0x376>
 8003b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b66:	4b59      	ldr	r3, [pc, #356]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	4a58      	ldr	r2, [pc, #352]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d015      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fe07 	bl	800278c <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fe fe03 	bl	800278c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e0d8      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	4b4c      	ldr	r3, [pc, #304]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ee      	beq.n	8003b82 <HAL_RCC_OscConfig+0x386>
 8003ba4:	e014      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fdf1 	bl	800278c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fe fded 	bl	800278c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0c2      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ee      	bne.n	8003bae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	4a3c      	ldr	r2, [pc, #240]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80ae 	beq.w	8003d48 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bec:	4b37      	ldr	r3, [pc, #220]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d06d      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d14b      	bne.n	8003c98 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c00:	4b32      	ldr	r3, [pc, #200]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a31      	ldr	r2, [pc, #196]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fdbe 	bl	800278c <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fe fdba 	bl	800278c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e091      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	4b29      	ldr	r3, [pc, #164]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69da      	ldr	r2, [r3, #28]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	019b      	lsls	r3, r3, #6
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	061b      	lsls	r3, r3, #24
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	071b      	lsls	r3, r3, #28
 8003c5e:	491b      	ldr	r1, [pc, #108]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c64:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fd8c 	bl	800278c <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fe fd88 	bl	800278c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e05f      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x47c>
 8003c96:	e057      	b.n	8003d48 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003c9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fd72 	bl	800278c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fd6e 	bl	800278c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e045      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x4b0>
 8003cca:	e03d      	b.n	8003d48 <HAL_RCC_OscConfig+0x54c>
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d54 <HAL_RCC_OscConfig+0x558>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d030      	beq.n	8003d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d129      	bne.n	8003d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d122      	bne.n	8003d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d119      	bne.n	8003d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d10f      	bne.n	8003d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0d0      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d70:	4b6a      	ldr	r3, [pc, #424]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d910      	bls.n	8003da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b67      	ldr	r3, [pc, #412]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 020f 	bic.w	r2, r3, #15
 8003d86:	4965      	ldr	r1, [pc, #404]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b63      	ldr	r3, [pc, #396]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0b8      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db8:	4b59      	ldr	r3, [pc, #356]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a58      	ldr	r2, [pc, #352]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd0:	4b53      	ldr	r3, [pc, #332]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	4a52      	ldr	r2, [pc, #328]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ddc:	4b50      	ldr	r3, [pc, #320]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	494d      	ldr	r1, [pc, #308]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d040      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	4b47      	ldr	r3, [pc, #284]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d115      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e07f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d107      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1a:	4b41      	ldr	r3, [pc, #260]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e073      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e06b      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e3a:	4b39      	ldr	r3, [pc, #228]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 0203 	bic.w	r2, r3, #3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4936      	ldr	r1, [pc, #216]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4c:	f7fe fc9e 	bl	800278c <HAL_GetTick>
 8003e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e54:	f7fe fc9a 	bl	800278c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e053      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 020c 	and.w	r2, r3, #12
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d1eb      	bne.n	8003e54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b27      	ldr	r3, [pc, #156]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d210      	bcs.n	8003eac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b24      	ldr	r3, [pc, #144]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 020f 	bic.w	r2, r3, #15
 8003e92:	4922      	ldr	r1, [pc, #136]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e032      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb8:	4b19      	ldr	r3, [pc, #100]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4916      	ldr	r1, [pc, #88]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ed6:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	490e      	ldr	r1, [pc, #56]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eea:	f000 f821 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	490a      	ldr	r1, [pc, #40]	@ (8003f24 <HAL_RCC_ClockConfig+0x1cc>)
 8003efc:	5ccb      	ldrb	r3, [r1, r3]
 8003efe:	fa22 f303 	lsr.w	r3, r2, r3
 8003f02:	4a09      	ldr	r2, [pc, #36]	@ (8003f28 <HAL_RCC_ClockConfig+0x1d0>)
 8003f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f06:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <HAL_RCC_ClockConfig+0x1d4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fbfa 	bl	8002704 <HAL_InitTick>

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023c00 	.word	0x40023c00
 8003f20:	40023800 	.word	0x40023800
 8003f24:	0800abd8 	.word	0x0800abd8
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	20000004 	.word	0x20000004

08003f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f34:	b094      	sub	sp, #80	@ 0x50
 8003f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f40:	2300      	movs	r3, #0
 8003f42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f48:	4b79      	ldr	r3, [pc, #484]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d00d      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x40>
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	f200 80e1 	bhi.w	800411c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x34>
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d003      	beq.n	8003f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f62:	e0db      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f64:	4b73      	ldr	r3, [pc, #460]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f68:	e0db      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f6a:	4b73      	ldr	r3, [pc, #460]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f6e:	e0d8      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f70:	4b6f      	ldr	r3, [pc, #444]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d063      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f86:	4b6a      	ldr	r3, [pc, #424]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	099b      	lsrs	r3, r3, #6
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	0159      	lsls	r1, r3, #5
 8003fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb4:	0150      	lsls	r0, r2, #5
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4621      	mov	r1, r4
 8003fbc:	1a51      	subs	r1, r2, r1
 8003fbe:	6139      	str	r1, [r7, #16]
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	018b      	lsls	r3, r1, #6
 8003fd8:	4651      	mov	r1, sl
 8003fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fde:	4651      	mov	r1, sl
 8003fe0:	018a      	lsls	r2, r1, #6
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8003fe8:	4659      	mov	r1, fp
 8003fea:	eb63 0901 	sbc.w	r9, r3, r1
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004002:	4690      	mov	r8, r2
 8004004:	4699      	mov	r9, r3
 8004006:	4623      	mov	r3, r4
 8004008:	eb18 0303 	adds.w	r3, r8, r3
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	462b      	mov	r3, r5
 8004010:	eb49 0303 	adc.w	r3, r9, r3
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004022:	4629      	mov	r1, r5
 8004024:	024b      	lsls	r3, r1, #9
 8004026:	4621      	mov	r1, r4
 8004028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800402c:	4621      	mov	r1, r4
 800402e:	024a      	lsls	r2, r1, #9
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004036:	2200      	movs	r2, #0
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800403c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004040:	f7fc f910 	bl	8000264 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4613      	mov	r3, r2
 800404a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800404c:	e058      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404e:	4b38      	ldr	r3, [pc, #224]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	2200      	movs	r2, #0
 8004056:	4618      	mov	r0, r3
 8004058:	4611      	mov	r1, r2
 800405a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
 8004064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004068:	4642      	mov	r2, r8
 800406a:	464b      	mov	r3, r9
 800406c:	f04f 0000 	mov.w	r0, #0
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	0159      	lsls	r1, r3, #5
 8004076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407a:	0150      	lsls	r0, r2, #5
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4641      	mov	r1, r8
 8004082:	ebb2 0a01 	subs.w	sl, r2, r1
 8004086:	4649      	mov	r1, r9
 8004088:	eb63 0b01 	sbc.w	fp, r3, r1
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800409c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040a0:	ebb2 040a 	subs.w	r4, r2, sl
 80040a4:	eb63 050b 	sbc.w	r5, r3, fp
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	00eb      	lsls	r3, r5, #3
 80040b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b6:	00e2      	lsls	r2, r4, #3
 80040b8:	4614      	mov	r4, r2
 80040ba:	461d      	mov	r5, r3
 80040bc:	4643      	mov	r3, r8
 80040be:	18e3      	adds	r3, r4, r3
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	464b      	mov	r3, r9
 80040c4:	eb45 0303 	adc.w	r3, r5, r3
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d6:	4629      	mov	r1, r5
 80040d8:	028b      	lsls	r3, r1, #10
 80040da:	4621      	mov	r1, r4
 80040dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e0:	4621      	mov	r1, r4
 80040e2:	028a      	lsls	r2, r1, #10
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ea:	2200      	movs	r2, #0
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	61fa      	str	r2, [r7, #28]
 80040f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f4:	f7fc f8b6 	bl	8000264 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4613      	mov	r3, r2
 80040fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	3301      	adds	r3, #1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800411a:	e002      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x204>)
 800411e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004124:	4618      	mov	r0, r3
 8004126:	3750      	adds	r7, #80	@ 0x50
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	00f42400 	.word	0x00f42400
 8004138:	007a1200 	.word	0x007a1200

0800413c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004140:	4b03      	ldr	r3, [pc, #12]	@ (8004150 <HAL_RCC_GetHCLKFreq+0x14>)
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000000 	.word	0x20000000

08004154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004158:	f7ff fff0 	bl	800413c <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	0a9b      	lsrs	r3, r3, #10
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4903      	ldr	r1, [pc, #12]	@ (8004178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	0800abe8 	.word	0x0800abe8

0800417c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004180:	f7ff ffdc 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b05      	ldr	r3, [pc, #20]	@ (800419c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0b5b      	lsrs	r3, r3, #13
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4903      	ldr	r1, [pc, #12]	@ (80041a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	0800abe8 	.word	0x0800abe8

080041a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d012      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041cc:	4b69      	ldr	r3, [pc, #420]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a68      	ldr	r2, [pc, #416]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80041d6:	6093      	str	r3, [r2, #8]
 80041d8:	4b66      	ldr	r3, [pc, #408]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e0:	4964      	ldr	r1, [pc, #400]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041ee:	2301      	movs	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d017      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004204:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420c:	4959      	ldr	r1, [pc, #356]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800421c:	d101      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800421e:	2301      	movs	r3, #1
 8004220:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800422a:	2301      	movs	r3, #1
 800422c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d017      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800423a:	4b4e      	ldr	r3, [pc, #312]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004240:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004248:	494a      	ldr	r1, [pc, #296]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004258:	d101      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800425a:	2301      	movs	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 808b 	beq.w	800439e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	4b3a      	ldr	r3, [pc, #232]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	4a39      	ldr	r2, [pc, #228]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004292:	6413      	str	r3, [r2, #64]	@ 0x40
 8004294:	4b37      	ldr	r3, [pc, #220]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042a0:	4b35      	ldr	r3, [pc, #212]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a34      	ldr	r2, [pc, #208]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fe fa6e 	bl	800278c <HAL_GetTick>
 80042b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b4:	f7fe fa6a 	bl	800278c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	@ 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e38f      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042d2:	4b28      	ldr	r3, [pc, #160]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d035      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d02e      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f0:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004304:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004306:	4b1b      	ldr	r3, [pc, #108]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	4a1a      	ldr	r2, [pc, #104]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004310:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004312:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004318:	4b16      	ldr	r3, [pc, #88]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b01      	cmp	r3, #1
 8004322:	d114      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fe fa32 	bl	800278c <HAL_GetTick>
 8004328:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432a:	e00a      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fe fa2e 	bl	800278c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e351      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0ee      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800435a:	d111      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004368:	4b04      	ldr	r3, [pc, #16]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800436a:	400b      	ands	r3, r1
 800436c:	4901      	ldr	r1, [pc, #4]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
 8004372:	e00b      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004374:	40023800 	.word	0x40023800
 8004378:	40007000 	.word	0x40007000
 800437c:	0ffffcff 	.word	0x0ffffcff
 8004380:	4bac      	ldr	r3, [pc, #688]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4aab      	ldr	r2, [pc, #684]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800438a:	6093      	str	r3, [r2, #8]
 800438c:	4ba9      	ldr	r3, [pc, #676]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004398:	49a6      	ldr	r1, [pc, #664]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439a:	4313      	orrs	r3, r2
 800439c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d010      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043aa:	4ba2      	ldr	r3, [pc, #648]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b0:	4aa0      	ldr	r2, [pc, #640]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80043ba:	4b9e      	ldr	r3, [pc, #632]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	499b      	ldr	r1, [pc, #620]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d8:	4b96      	ldr	r3, [pc, #600]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e6:	4993      	ldr	r1, [pc, #588]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004400:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004408:	498a      	ldr	r1, [pc, #552]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800441c:	4b85      	ldr	r3, [pc, #532]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442a:	4982      	ldr	r1, [pc, #520]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800443e:	4b7d      	ldr	r3, [pc, #500]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004444:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	4979      	ldr	r1, [pc, #484]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004460:	4b74      	ldr	r3, [pc, #464]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004466:	f023 0203 	bic.w	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446e:	4971      	ldr	r1, [pc, #452]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004482:	4b6c      	ldr	r3, [pc, #432]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004488:	f023 020c 	bic.w	r2, r3, #12
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004490:	4968      	ldr	r1, [pc, #416]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044a4:	4b63      	ldr	r3, [pc, #396]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b2:	4960      	ldr	r1, [pc, #384]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d4:	4957      	ldr	r1, [pc, #348]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044e8:	4b52      	ldr	r3, [pc, #328]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f6:	494f      	ldr	r1, [pc, #316]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800450a:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004510:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004518:	4946      	ldr	r1, [pc, #280]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800452c:	4b41      	ldr	r3, [pc, #260]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004532:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	493e      	ldr	r1, [pc, #248]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800454e:	4b39      	ldr	r3, [pc, #228]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004554:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455c:	4935      	ldr	r1, [pc, #212]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004570:	4b30      	ldr	r3, [pc, #192]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004576:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800457e:	492d      	ldr	r1, [pc, #180]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d011      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004592:	4b28      	ldr	r3, [pc, #160]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004598:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a0:	4924      	ldr	r1, [pc, #144]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045b0:	d101      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045c2:	2301      	movs	r3, #1
 80045c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045d2:	4b18      	ldr	r3, [pc, #96]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e0:	4914      	ldr	r1, [pc, #80]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00b      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004604:	490b      	ldr	r1, [pc, #44]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00f      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004618:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004628:	4902      	ldr	r1, [pc, #8]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00b      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004644:	4b8a      	ldr	r3, [pc, #552]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800464a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	4986      	ldr	r1, [pc, #536]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004668:	4b81      	ldr	r3, [pc, #516]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800466e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004678:	497d      	ldr	r1, [pc, #500]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d006      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80d6 	beq.w	8004840 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004694:	4b76      	ldr	r3, [pc, #472]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a75      	ldr	r2, [pc, #468]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800469e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a0:	f7fe f874 	bl	800278c <HAL_GetTick>
 80046a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046a8:	f7fe f870 	bl	800278c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	@ 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e195      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d021      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d11d      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046da:	4b65      	ldr	r3, [pc, #404]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046e8:	4b61      	ldr	r3, [pc, #388]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046ee:	0e1b      	lsrs	r3, r3, #24
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	019a      	lsls	r2, r3, #6
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	041b      	lsls	r3, r3, #16
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	061b      	lsls	r3, r3, #24
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	071b      	lsls	r3, r3, #28
 800470e:	4958      	ldr	r1, [pc, #352]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02e      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004740:	d129      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004742:	4b4b      	ldr	r3, [pc, #300]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004750:	4b47      	ldr	r3, [pc, #284]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004756:	0f1b      	lsrs	r3, r3, #28
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	019a      	lsls	r2, r3, #6
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	061b      	lsls	r3, r3, #24
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	071b      	lsls	r3, r3, #28
 8004776:	493e      	ldr	r1, [pc, #248]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800477e:	4b3c      	ldr	r3, [pc, #240]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004784:	f023 021f 	bic.w	r2, r3, #31
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	3b01      	subs	r3, #1
 800478e:	4938      	ldr	r1, [pc, #224]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01d      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047a2:	4b33      	ldr	r3, [pc, #204]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a8:	0e1b      	lsrs	r3, r3, #24
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b6:	0f1b      	lsrs	r3, r3, #28
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	019a      	lsls	r2, r3, #6
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	431a      	orrs	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	071b      	lsls	r3, r3, #28
 80047d6:	4926      	ldr	r1, [pc, #152]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d011      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	019a      	lsls	r2, r3, #6
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	061b      	lsls	r3, r3, #24
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	491a      	ldr	r1, [pc, #104]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800480e:	4b18      	ldr	r3, [pc, #96]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a17      	ldr	r2, [pc, #92]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004814:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481a:	f7fd ffb7 	bl	800278c <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004822:	f7fd ffb3 	bl	800278c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b64      	cmp	r3, #100	@ 0x64
 800482e:	d901      	bls.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e0d8      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004834:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b01      	cmp	r3, #1
 8004844:	f040 80ce 	bne.w	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004848:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a08      	ldr	r2, [pc, #32]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004854:	f7fd ff9a 	bl	800278c <HAL_GetTick>
 8004858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800485a:	e00b      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800485c:	f7fd ff96 	bl	800278c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	@ 0x64
 8004868:	d904      	bls.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e0bb      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004874:	4b5e      	ldr	r3, [pc, #376]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800487c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004880:	d0ec      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02e      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d12a      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048aa:	4b51      	ldr	r3, [pc, #324]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048b8:	4b4d      	ldr	r3, [pc, #308]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048be:	0f1b      	lsrs	r3, r3, #28
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	019a      	lsls	r2, r3, #6
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	071b      	lsls	r3, r3, #28
 80048de:	4944      	ldr	r1, [pc, #272]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048e6:	4b42      	ldr	r3, [pc, #264]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	493d      	ldr	r1, [pc, #244]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d022      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004914:	d11d      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004916:	4b36      	ldr	r3, [pc, #216]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491c:	0e1b      	lsrs	r3, r3, #24
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004924:	4b32      	ldr	r3, [pc, #200]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492a:	0f1b      	lsrs	r3, r3, #28
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	019a      	lsls	r2, r3, #6
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	431a      	orrs	r2, r3
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	061b      	lsls	r3, r3, #24
 8004944:	431a      	orrs	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	071b      	lsls	r3, r3, #28
 800494a:	4929      	ldr	r1, [pc, #164]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d028      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800495e:	4b24      	ldr	r3, [pc, #144]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800496c:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	0c1b      	lsrs	r3, r3, #16
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	019a      	lsls	r2, r3, #6
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	041b      	lsls	r3, r3, #16
 8004984:	431a      	orrs	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	4917      	ldr	r1, [pc, #92]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	4911      	ldr	r1, [pc, #68]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049b0:	4b0f      	ldr	r3, [pc, #60]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0e      	ldr	r2, [pc, #56]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049bc:	f7fd fee6 	bl	800278c <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049c4:	f7fd fee2 	bl	800278c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b64      	cmp	r3, #100	@ 0x64
 80049d0:	d901      	bls.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e007      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e2:	d1ef      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800

080049f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e049      	b.n	8004a9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fd fb58 	bl	80020d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f000 fecc 	bl	80057d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d001      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e054      	b.n	8004b66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a26      	ldr	r2, [pc, #152]	@ (8004b74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae6:	d01d      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a22      	ldr	r2, [pc, #136]	@ (8004b78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a21      	ldr	r2, [pc, #132]	@ (8004b7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1f      	ldr	r2, [pc, #124]	@ (8004b80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b84 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1c      	ldr	r2, [pc, #112]	@ (8004b88 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b8c <HAL_TIM_Base_Start_IT+0xe8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d115      	bne.n	8004b50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	4b19      	ldr	r3, [pc, #100]	@ (8004b90 <HAL_TIM_Base_Start_IT+0xec>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b06      	cmp	r3, #6
 8004b34:	d015      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0xbe>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b3c:	d011      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	e008      	b.n	8004b62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e000      	b.n	8004b64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40010400 	.word	0x40010400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40001800 	.word	0x40001800
 8004b90:	00010007 	.word	0x00010007

08004b94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10f      	bne.n	8004bdc <HAL_TIM_Base_Stop_IT+0x48>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a1a      	ldr	r2, [r3, #32]
 8004bc2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_Base_Stop_IT+0x48>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e049      	b.n	8004c98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fd f9fd 	bl	8002018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f000 fdcd 	bl	80057d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_TIM_PWM_Start+0x24>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	bf14      	ite	ne
 8004cbc:	2301      	movne	r3, #1
 8004cbe:	2300      	moveq	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	e03c      	b.n	8004d3e <HAL_TIM_PWM_Start+0x9e>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d109      	bne.n	8004cde <HAL_TIM_PWM_Start+0x3e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	bf14      	ite	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	2300      	moveq	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	e02f      	b.n	8004d3e <HAL_TIM_PWM_Start+0x9e>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d109      	bne.n	8004cf8 <HAL_TIM_PWM_Start+0x58>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	e022      	b.n	8004d3e <HAL_TIM_PWM_Start+0x9e>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b0c      	cmp	r3, #12
 8004cfc:	d109      	bne.n	8004d12 <HAL_TIM_PWM_Start+0x72>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	bf14      	ite	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2300      	moveq	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	e015      	b.n	8004d3e <HAL_TIM_PWM_Start+0x9e>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d109      	bne.n	8004d2c <HAL_TIM_PWM_Start+0x8c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e008      	b.n	8004d3e <HAL_TIM_PWM_Start+0x9e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e092      	b.n	8004e6c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_PWM_Start+0xb6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d54:	e023      	b.n	8004d9e <HAL_TIM_PWM_Start+0xfe>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d104      	bne.n	8004d66 <HAL_TIM_PWM_Start+0xc6>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d64:	e01b      	b.n	8004d9e <HAL_TIM_PWM_Start+0xfe>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIM_PWM_Start+0xd6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d74:	e013      	b.n	8004d9e <HAL_TIM_PWM_Start+0xfe>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_PWM_Start+0xe6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d84:	e00b      	b.n	8004d9e <HAL_TIM_PWM_Start+0xfe>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b10      	cmp	r3, #16
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_PWM_Start+0xf6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d94:	e003      	b.n	8004d9e <HAL_TIM_PWM_Start+0xfe>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2201      	movs	r2, #1
 8004da4:	6839      	ldr	r1, [r7, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 f81c 	bl	8005de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a30      	ldr	r2, [pc, #192]	@ (8004e74 <HAL_TIM_PWM_Start+0x1d4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <HAL_TIM_PWM_Start+0x120>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a2f      	ldr	r2, [pc, #188]	@ (8004e78 <HAL_TIM_PWM_Start+0x1d8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d101      	bne.n	8004dc4 <HAL_TIM_PWM_Start+0x124>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_TIM_PWM_Start+0x126>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a25      	ldr	r2, [pc, #148]	@ (8004e74 <HAL_TIM_PWM_Start+0x1d4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x18a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dec:	d01d      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x18a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a22      	ldr	r2, [pc, #136]	@ (8004e7c <HAL_TIM_PWM_Start+0x1dc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x18a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a20      	ldr	r2, [pc, #128]	@ (8004e80 <HAL_TIM_PWM_Start+0x1e0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x18a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1f      	ldr	r2, [pc, #124]	@ (8004e84 <HAL_TIM_PWM_Start+0x1e4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x18a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a19      	ldr	r2, [pc, #100]	@ (8004e78 <HAL_TIM_PWM_Start+0x1d8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x18a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e88 <HAL_TIM_PWM_Start+0x1e8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x18a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a19      	ldr	r2, [pc, #100]	@ (8004e8c <HAL_TIM_PWM_Start+0x1ec>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d115      	bne.n	8004e56 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	4b17      	ldr	r3, [pc, #92]	@ (8004e90 <HAL_TIM_PWM_Start+0x1f0>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b06      	cmp	r3, #6
 8004e3a:	d015      	beq.n	8004e68 <HAL_TIM_PWM_Start+0x1c8>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e42:	d011      	beq.n	8004e68 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e54:	e008      	b.n	8004e68 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e000      	b.n	8004e6a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40010400 	.word	0x40010400
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40001800 	.word	0x40001800
 8004e90:	00010007 	.word	0x00010007

08004e94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 ff9c 	bl	8005de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a36      	ldr	r2, [pc, #216]	@ (8004f8c <HAL_TIM_PWM_Stop+0xf8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_TIM_PWM_Stop+0x2c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a35      	ldr	r2, [pc, #212]	@ (8004f90 <HAL_TIM_PWM_Stop+0xfc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIM_PWM_Stop+0x30>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_TIM_PWM_Stop+0x32>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d017      	beq.n	8004efa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <HAL_TIM_PWM_Stop+0x66>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_PWM_Stop+0x66>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a1a      	ldr	r2, [r3, #32]
 8004f00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10f      	bne.n	8004f2a <HAL_TIM_PWM_Stop+0x96>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <HAL_TIM_PWM_Stop+0x96>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Stop+0xa6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f38:	e023      	b.n	8004f82 <HAL_TIM_PWM_Stop+0xee>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_PWM_Stop+0xb6>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f48:	e01b      	b.n	8004f82 <HAL_TIM_PWM_Stop+0xee>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d104      	bne.n	8004f5a <HAL_TIM_PWM_Stop+0xc6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f58:	e013      	b.n	8004f82 <HAL_TIM_PWM_Stop+0xee>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b0c      	cmp	r3, #12
 8004f5e:	d104      	bne.n	8004f6a <HAL_TIM_PWM_Stop+0xd6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f68:	e00b      	b.n	8004f82 <HAL_TIM_PWM_Stop+0xee>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_PWM_Stop+0xe6>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f78:	e003      	b.n	8004f82 <HAL_TIM_PWM_Stop+0xee>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40010400 	.word	0x40010400

08004f94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e08f      	b.n	80050c8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fc fee1 	bl	8001d84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80050d0 <HAL_TIM_Encoder_Init+0x13c>)
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f000 fbf3 	bl	80057d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4b31      	ldr	r3, [pc, #196]	@ (80050d4 <HAL_TIM_Encoder_Init+0x140>)
 8005010:	4013      	ands	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	4313      	orrs	r3, r2
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4b2b      	ldr	r3, [pc, #172]	@ (80050d8 <HAL_TIM_Encoder_Init+0x144>)
 800502a:	4013      	ands	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4b2a      	ldr	r3, [pc, #168]	@ (80050dc <HAL_TIM_Encoder_Init+0x148>)
 8005032:	4013      	ands	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	4313      	orrs	r3, r2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	011a      	lsls	r2, r3, #4
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	031b      	lsls	r3, r3, #12
 8005054:	4313      	orrs	r3, r2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	4313      	orrs	r3, r2
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	fffebff8 	.word	0xfffebff8
 80050d4:	fffffcfc 	.word	0xfffffcfc
 80050d8:	fffff3f3 	.word	0xfffff3f3
 80050dc:	ffff0f0f 	.word	0xffff0f0f

080050e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005100:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005108:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d110      	bne.n	8005132 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d102      	bne.n	800511c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005116:	7b7b      	ldrb	r3, [r7, #13]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d001      	beq.n	8005120 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e069      	b.n	80051f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005130:	e031      	b.n	8005196 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d110      	bne.n	800515a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d102      	bne.n	8005144 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800513e:	7b3b      	ldrb	r3, [r7, #12]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e055      	b.n	80051f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005158:	e01d      	b.n	8005196 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d108      	bne.n	8005172 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005160:	7bbb      	ldrb	r3, [r7, #14]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d105      	bne.n	8005172 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005166:	7b7b      	ldrb	r3, [r7, #13]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d102      	bne.n	8005172 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800516c:	7b3b      	ldrb	r3, [r7, #12]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d001      	beq.n	8005176 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e03e      	b.n	80051f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_TIM_Encoder_Start+0xc4>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d008      	beq.n	80051b4 <HAL_TIM_Encoder_Start+0xd4>
 80051a2:	e00f      	b.n	80051c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2201      	movs	r2, #1
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fe19 	bl	8005de4 <TIM_CCxChannelCmd>
      break;
 80051b2:	e016      	b.n	80051e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2201      	movs	r2, #1
 80051ba:	2104      	movs	r1, #4
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fe11 	bl	8005de4 <TIM_CCxChannelCmd>
      break;
 80051c2:	e00e      	b.n	80051e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2201      	movs	r2, #1
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fe09 	bl	8005de4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2201      	movs	r2, #1
 80051d8:	2104      	movs	r1, #4
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fe02 	bl	8005de4 <TIM_CCxChannelCmd>
      break;
 80051e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_TIM_Encoder_Stop+0x18>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b04      	cmp	r3, #4
 8005210:	d008      	beq.n	8005224 <HAL_TIM_Encoder_Stop+0x28>
 8005212:	e00f      	b.n	8005234 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fde1 	bl	8005de4 <TIM_CCxChannelCmd>
      break;
 8005222:	e016      	b.n	8005252 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2200      	movs	r2, #0
 800522a:	2104      	movs	r1, #4
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fdd9 	bl	8005de4 <TIM_CCxChannelCmd>
      break;
 8005232:	e00e      	b.n	8005252 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2200      	movs	r2, #0
 800523a:	2100      	movs	r1, #0
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fdd1 	bl	8005de4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	2104      	movs	r1, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fdca 	bl	8005de4 <TIM_CCxChannelCmd>
      break;
 8005250:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a1a      	ldr	r2, [r3, #32]
 8005258:	f241 1311 	movw	r3, #4369	@ 0x1111
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10f      	bne.n	8005282 <HAL_TIM_Encoder_Stop+0x86>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	f240 4344 	movw	r3, #1092	@ 0x444
 800526c:	4013      	ands	r3, r2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d107      	bne.n	8005282 <HAL_TIM_Encoder_Stop+0x86>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_TIM_Encoder_Stop+0x92>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b04      	cmp	r3, #4
 800528c:	d148      	bne.n	8005320 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d104      	bne.n	800529e <HAL_TIM_Encoder_Stop+0xa2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800529c:	e023      	b.n	80052e6 <HAL_TIM_Encoder_Stop+0xea>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_Encoder_Stop+0xb2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052ac:	e01b      	b.n	80052e6 <HAL_TIM_Encoder_Stop+0xea>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d104      	bne.n	80052be <HAL_TIM_Encoder_Stop+0xc2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052bc:	e013      	b.n	80052e6 <HAL_TIM_Encoder_Stop+0xea>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_Encoder_Stop+0xd2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052cc:	e00b      	b.n	80052e6 <HAL_TIM_Encoder_Stop+0xea>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d104      	bne.n	80052de <HAL_TIM_Encoder_Stop+0xe2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052dc:	e003      	b.n	80052e6 <HAL_TIM_Encoder_Stop+0xea>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <HAL_TIM_Encoder_Stop+0xfa>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052f4:	e024      	b.n	8005340 <HAL_TIM_Encoder_Stop+0x144>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_Encoder_Stop+0x10a>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005304:	e01c      	b.n	8005340 <HAL_TIM_Encoder_Stop+0x144>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d104      	bne.n	8005316 <HAL_TIM_Encoder_Stop+0x11a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005314:	e014      	b.n	8005340 <HAL_TIM_Encoder_Stop+0x144>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800531e:	e00f      	b.n	8005340 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d020      	beq.n	80053ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d01b      	beq.n	80053ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f06f 0202 	mvn.w	r2, #2
 800537e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f9fd 	bl	8005794 <HAL_TIM_IC_CaptureCallback>
 800539a:	e005      	b.n	80053a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f9ef 	bl	8005780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa00 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d020      	beq.n	80053fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01b      	beq.n	80053fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f06f 0204 	mvn.w	r2, #4
 80053ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f9d7 	bl	8005794 <HAL_TIM_IC_CaptureCallback>
 80053e6:	e005      	b.n	80053f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f9c9 	bl	8005780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9da 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d020      	beq.n	8005446 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01b      	beq.n	8005446 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f06f 0208 	mvn.w	r2, #8
 8005416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2204      	movs	r2, #4
 800541c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f9b1 	bl	8005794 <HAL_TIM_IC_CaptureCallback>
 8005432:	e005      	b.n	8005440 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9a3 	bl	8005780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f9b4 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d020      	beq.n	8005492 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01b      	beq.n	8005492 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f06f 0210 	mvn.w	r2, #16
 8005462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2208      	movs	r2, #8
 8005468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f98b 	bl	8005794 <HAL_TIM_IC_CaptureCallback>
 800547e:	e005      	b.n	800548c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f97d 	bl	8005780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f98e 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0201 	mvn.w	r2, #1
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7fb fd3b 	bl	8000f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00c      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fd3e 	bl	8005f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fd36 	bl	8005f74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f948 	bl	80057bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0220 	mvn.w	r2, #32
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fcfe 	bl	8005f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005572:	2302      	movs	r3, #2
 8005574:	e0ff      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b14      	cmp	r3, #20
 8005582:	f200 80f0 	bhi.w	8005766 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005586:	a201      	add	r2, pc, #4	@ (adr r2, 800558c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	080055e1 	.word	0x080055e1
 8005590:	08005767 	.word	0x08005767
 8005594:	08005767 	.word	0x08005767
 8005598:	08005767 	.word	0x08005767
 800559c:	08005621 	.word	0x08005621
 80055a0:	08005767 	.word	0x08005767
 80055a4:	08005767 	.word	0x08005767
 80055a8:	08005767 	.word	0x08005767
 80055ac:	08005663 	.word	0x08005663
 80055b0:	08005767 	.word	0x08005767
 80055b4:	08005767 	.word	0x08005767
 80055b8:	08005767 	.word	0x08005767
 80055bc:	080056a3 	.word	0x080056a3
 80055c0:	08005767 	.word	0x08005767
 80055c4:	08005767 	.word	0x08005767
 80055c8:	08005767 	.word	0x08005767
 80055cc:	080056e5 	.word	0x080056e5
 80055d0:	08005767 	.word	0x08005767
 80055d4:	08005767 	.word	0x08005767
 80055d8:	08005767 	.word	0x08005767
 80055dc:	08005725 	.word	0x08005725
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f99e 	bl	8005928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0208 	orr.w	r2, r2, #8
 80055fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0204 	bic.w	r2, r2, #4
 800560a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6999      	ldr	r1, [r3, #24]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	619a      	str	r2, [r3, #24]
      break;
 800561e:	e0a5      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f9f0 	bl	8005a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800563a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800564a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6999      	ldr	r1, [r3, #24]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	619a      	str	r2, [r3, #24]
      break;
 8005660:	e084      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fa47 	bl	8005afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0208 	orr.w	r2, r2, #8
 800567c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0204 	bic.w	r2, r2, #4
 800568c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69d9      	ldr	r1, [r3, #28]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
      break;
 80056a0:	e064      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fa9d 	bl	8005be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69d9      	ldr	r1, [r3, #28]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	021a      	lsls	r2, r3, #8
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	61da      	str	r2, [r3, #28]
      break;
 80056e2:	e043      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fad4 	bl	8005c98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0208 	orr.w	r2, r2, #8
 80056fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0204 	bic.w	r2, r2, #4
 800570e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005722:	e023      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fb06 	bl	8005d3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800574e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	021a      	lsls	r2, r3, #8
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005764:	e002      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	75fb      	strb	r3, [r7, #23]
      break;
 800576a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop

08005780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a46      	ldr	r2, [pc, #280]	@ (80058fc <TIM_Base_SetConfig+0x12c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ee:	d00f      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a43      	ldr	r2, [pc, #268]	@ (8005900 <TIM_Base_SetConfig+0x130>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00b      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a42      	ldr	r2, [pc, #264]	@ (8005904 <TIM_Base_SetConfig+0x134>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a41      	ldr	r2, [pc, #260]	@ (8005908 <TIM_Base_SetConfig+0x138>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_Base_SetConfig+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a40      	ldr	r2, [pc, #256]	@ (800590c <TIM_Base_SetConfig+0x13c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d108      	bne.n	8005822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a35      	ldr	r2, [pc, #212]	@ (80058fc <TIM_Base_SetConfig+0x12c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d02b      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005830:	d027      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a32      	ldr	r2, [pc, #200]	@ (8005900 <TIM_Base_SetConfig+0x130>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d023      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a31      	ldr	r2, [pc, #196]	@ (8005904 <TIM_Base_SetConfig+0x134>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01f      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a30      	ldr	r2, [pc, #192]	@ (8005908 <TIM_Base_SetConfig+0x138>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01b      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2f      	ldr	r2, [pc, #188]	@ (800590c <TIM_Base_SetConfig+0x13c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d017      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2e      	ldr	r2, [pc, #184]	@ (8005910 <TIM_Base_SetConfig+0x140>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2d      	ldr	r2, [pc, #180]	@ (8005914 <TIM_Base_SetConfig+0x144>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00f      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2c      	ldr	r2, [pc, #176]	@ (8005918 <TIM_Base_SetConfig+0x148>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00b      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2b      	ldr	r2, [pc, #172]	@ (800591c <TIM_Base_SetConfig+0x14c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2a      	ldr	r2, [pc, #168]	@ (8005920 <TIM_Base_SetConfig+0x150>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a29      	ldr	r2, [pc, #164]	@ (8005924 <TIM_Base_SetConfig+0x154>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d108      	bne.n	8005894 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a10      	ldr	r2, [pc, #64]	@ (80058fc <TIM_Base_SetConfig+0x12c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_Base_SetConfig+0xf8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a12      	ldr	r2, [pc, #72]	@ (800590c <TIM_Base_SetConfig+0x13c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d103      	bne.n	80058d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	611a      	str	r2, [r3, #16]
  }
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40010000 	.word	0x40010000
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40010400 	.word	0x40010400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800
 800591c:	40001800 	.word	0x40001800
 8005920:	40001c00 	.word	0x40001c00
 8005924:	40002000 	.word	0x40002000

08005928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f023 0201 	bic.w	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4b2b      	ldr	r3, [pc, #172]	@ (8005a00 <TIM_OC1_SetConfig+0xd8>)
 8005954:	4013      	ands	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 0302 	bic.w	r3, r3, #2
 8005970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a21      	ldr	r2, [pc, #132]	@ (8005a04 <TIM_OC1_SetConfig+0xdc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC1_SetConfig+0x64>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a20      	ldr	r2, [pc, #128]	@ (8005a08 <TIM_OC1_SetConfig+0xe0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10c      	bne.n	80059a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0308 	bic.w	r3, r3, #8
 8005992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 0304 	bic.w	r3, r3, #4
 80059a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a16      	ldr	r2, [pc, #88]	@ (8005a04 <TIM_OC1_SetConfig+0xdc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC1_SetConfig+0x8e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a15      	ldr	r2, [pc, #84]	@ (8005a08 <TIM_OC1_SetConfig+0xe0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d111      	bne.n	80059da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	fffeff8f 	.word	0xfffeff8f
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40010400 	.word	0x40010400

08005a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f023 0210 	bic.w	r2, r3, #16
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4b2e      	ldr	r3, [pc, #184]	@ (8005af0 <TIM_OC2_SetConfig+0xe4>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 0320 	bic.w	r3, r3, #32
 8005a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a23      	ldr	r2, [pc, #140]	@ (8005af4 <TIM_OC2_SetConfig+0xe8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_OC2_SetConfig+0x68>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a22      	ldr	r2, [pc, #136]	@ (8005af8 <TIM_OC2_SetConfig+0xec>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d10d      	bne.n	8005a90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a18      	ldr	r2, [pc, #96]	@ (8005af4 <TIM_OC2_SetConfig+0xe8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC2_SetConfig+0x94>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a17      	ldr	r2, [pc, #92]	@ (8005af8 <TIM_OC2_SetConfig+0xec>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d113      	bne.n	8005ac8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	feff8fff 	.word	0xfeff8fff
 8005af4:	40010000 	.word	0x40010000
 8005af8:	40010400 	.word	0x40010400

08005afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4b2d      	ldr	r3, [pc, #180]	@ (8005bdc <TIM_OC3_SetConfig+0xe0>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a22      	ldr	r2, [pc, #136]	@ (8005be0 <TIM_OC3_SetConfig+0xe4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d003      	beq.n	8005b62 <TIM_OC3_SetConfig+0x66>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a21      	ldr	r2, [pc, #132]	@ (8005be4 <TIM_OC3_SetConfig+0xe8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d10d      	bne.n	8005b7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a17      	ldr	r2, [pc, #92]	@ (8005be0 <TIM_OC3_SetConfig+0xe4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_OC3_SetConfig+0x92>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a16      	ldr	r2, [pc, #88]	@ (8005be4 <TIM_OC3_SetConfig+0xe8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d113      	bne.n	8005bb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	621a      	str	r2, [r3, #32]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	fffeff8f 	.word	0xfffeff8f
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40010400 	.word	0x40010400

08005be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4b1e      	ldr	r3, [pc, #120]	@ (8005c8c <TIM_OC4_SetConfig+0xa4>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	031b      	lsls	r3, r3, #12
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a13      	ldr	r2, [pc, #76]	@ (8005c90 <TIM_OC4_SetConfig+0xa8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_OC4_SetConfig+0x68>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a12      	ldr	r2, [pc, #72]	@ (8005c94 <TIM_OC4_SetConfig+0xac>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d109      	bne.n	8005c64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	019b      	lsls	r3, r3, #6
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	feff8fff 	.word	0xfeff8fff
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40010400 	.word	0x40010400

08005c98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d30 <TIM_OC5_SetConfig+0x98>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a12      	ldr	r2, [pc, #72]	@ (8005d34 <TIM_OC5_SetConfig+0x9c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x5e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a11      	ldr	r2, [pc, #68]	@ (8005d38 <TIM_OC5_SetConfig+0xa0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d109      	bne.n	8005d0a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	fffeff8f 	.word	0xfffeff8f
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40010400 	.word	0x40010400

08005d3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd8 <TIM_OC6_SetConfig+0x9c>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	051b      	lsls	r3, r3, #20
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a13      	ldr	r2, [pc, #76]	@ (8005ddc <TIM_OC6_SetConfig+0xa0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC6_SetConfig+0x60>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a12      	ldr	r2, [pc, #72]	@ (8005de0 <TIM_OC6_SetConfig+0xa4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d109      	bne.n	8005db0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005da2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	feff8fff 	.word	0xfeff8fff
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2201      	movs	r2, #1
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1a      	ldr	r2, [r3, #32]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	401a      	ands	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e06d      	b.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a30      	ldr	r2, [pc, #192]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d004      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2f      	ldr	r2, [pc, #188]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d108      	bne.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a20      	ldr	r2, [pc, #128]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d022      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eba:	d01d      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1c      	ldr	r2, [pc, #112]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a16      	ldr	r2, [pc, #88]	@ (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	@ (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10c      	bne.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40010400 	.word	0x40010400
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40001800 	.word	0x40001800

08005f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e040      	b.n	800601c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fc f9b4 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2224      	movs	r2, #36	@ 0x24
 8005fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fe6c 	bl	8006cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fc05 	bl	80067e4 <UART_SetConfig>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e01b      	b.n	800601c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 feeb 	bl	8006df0 <UART_CheckIdleState>
 800601a:	4603      	mov	r3, r0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	@ 0x28
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006038:	2b20      	cmp	r3, #32
 800603a:	d177      	bne.n	800612c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_UART_Transmit+0x24>
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e070      	b.n	800612e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2221      	movs	r2, #33	@ 0x21
 8006058:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800605a:	f7fc fb97 	bl	800278c <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006078:	d108      	bne.n	800608c <HAL_UART_Transmit+0x68>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	e003      	b.n	8006094 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006090:	2300      	movs	r3, #0
 8006092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006094:	e02f      	b.n	80060f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	2180      	movs	r1, #128	@ 0x80
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 ff4d 	bl	8006f40 <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e03b      	b.n	800612e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10b      	bne.n	80060d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	3302      	adds	r3, #2
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	e007      	b.n	80060e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	781a      	ldrb	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3301      	adds	r3, #1
 80060e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1c9      	bne.n	8006096 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2200      	movs	r2, #0
 800610a:	2140      	movs	r1, #64	@ 0x40
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 ff17 	bl	8006f40 <UART_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e005      	b.n	800612e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08a      	sub	sp, #40	@ 0x28
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	4613      	mov	r3, r2
 8006142:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800614a:	2b20      	cmp	r3, #32
 800614c:	d132      	bne.n	80061b4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_UART_Receive_IT+0x24>
 8006154:	88fb      	ldrh	r3, [r7, #6]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e02b      	b.n	80061b6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d018      	beq.n	80061a4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	613b      	str	r3, [r7, #16]
   return(result);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	623b      	str	r3, [r7, #32]
 8006192:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	69f9      	ldr	r1, [r7, #28]
 8006196:	6a3a      	ldr	r2, [r7, #32]
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	61bb      	str	r3, [r7, #24]
   return(result);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e6      	bne.n	8006172 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	461a      	mov	r2, r3
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 ff36 	bl	800701c <UART_Start_Receive_IT>
 80061b0:	4603      	mov	r3, r0
 80061b2:	e000      	b.n	80061b6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3728      	adds	r7, #40	@ 0x28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b0ba      	sub	sp, #232	@ 0xe8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061ee:	4013      	ands	r3, r2
 80061f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d115      	bne.n	8006228 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00f      	beq.n	8006228 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d009      	beq.n	8006228 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 82ac 	beq.w	8006776 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
      }
      return;
 8006226:	e2a6      	b.n	8006776 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8117 	beq.w	8006460 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800623e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006242:	4b85      	ldr	r3, [pc, #532]	@ (8006458 <HAL_UART_IRQHandler+0x298>)
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 810a 	beq.w	8006460 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d011      	beq.n	800627c <HAL_UART_IRQHandler+0xbc>
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800625c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00b      	beq.n	800627c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2201      	movs	r2, #1
 800626a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006272:	f043 0201 	orr.w	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800627c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d011      	beq.n	80062ac <HAL_UART_IRQHandler+0xec>
 8006288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2202      	movs	r2, #2
 800629a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062a2:	f043 0204 	orr.w	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d011      	beq.n	80062dc <HAL_UART_IRQHandler+0x11c>
 80062b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2204      	movs	r2, #4
 80062ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062d2:	f043 0202 	orr.w	r2, r3, #2
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d017      	beq.n	8006318 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2208      	movs	r2, #8
 8006306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800630e:	f043 0208 	orr.w	r2, r3, #8
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006320:	2b00      	cmp	r3, #0
 8006322:	d012      	beq.n	800634a <HAL_UART_IRQHandler+0x18a>
 8006324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006328:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00c      	beq.n	800634a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006340:	f043 0220 	orr.w	r2, r3, #32
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8212 	beq.w	800677a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00d      	beq.n	800637e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d007      	beq.n	800637e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006392:	2b40      	cmp	r3, #64	@ 0x40
 8006394:	d005      	beq.n	80063a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800639a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d04f      	beq.n	8006442 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 ff00 	bl	80071a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d141      	bne.n	800643a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1d9      	bne.n	80063b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006406:	2b00      	cmp	r3, #0
 8006408:	d013      	beq.n	8006432 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640e:	4a13      	ldr	r2, [pc, #76]	@ (800645c <HAL_UART_IRQHandler+0x29c>)
 8006410:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006416:	4618      	mov	r0, r3
 8006418:	f7fc fc18 	bl	8002c4c <HAL_DMA_Abort_IT>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d017      	beq.n	8006452 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	e00f      	b.n	8006452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9b6 	bl	80067a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006438:	e00b      	b.n	8006452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f9b2 	bl	80067a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	e007      	b.n	8006452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9ae 	bl	80067a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006450:	e193      	b.n	800677a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006452:	bf00      	nop
    return;
 8006454:	e191      	b.n	800677a <HAL_UART_IRQHandler+0x5ba>
 8006456:	bf00      	nop
 8006458:	04000120 	.word	0x04000120
 800645c:	08007271 	.word	0x08007271

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006464:	2b01      	cmp	r3, #1
 8006466:	f040 814c 	bne.w	8006702 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800646a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 8145 	beq.w	8006702 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 813e 	beq.w	8006702 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2210      	movs	r2, #16
 800648c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	f040 80b6 	bne.w	800660a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8165 	beq.w	800677e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80064ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064be:	429a      	cmp	r2, r3
 80064c0:	f080 815d 	bcs.w	800677e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d8:	f000 8086 	beq.w	80065e8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800650a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800651e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1da      	bne.n	80064dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3308      	adds	r3, #8
 8006546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800654a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800654e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800655c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e1      	bne.n	8006526 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3308      	adds	r3, #8
 8006582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800658c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e3      	bne.n	8006562 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b8:	f023 0310 	bic.w	r3, r3, #16
 80065bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e4      	bne.n	80065a8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fc fac2 	bl	8002b6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	b29b      	uxth	r3, r3
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f8d8 	bl	80067b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006608:	e0b9      	b.n	800677e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006616:	b29b      	uxth	r3, r3
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 80ab 	beq.w	8006782 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800662c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80a6 	beq.w	8006782 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800664a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006658:	647b      	str	r3, [r7, #68]	@ 0x44
 800665a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800665e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e4      	bne.n	8006636 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	623b      	str	r3, [r7, #32]
   return(result);
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	f023 0301 	bic.w	r3, r3, #1
 8006682:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006690:	633a      	str	r2, [r7, #48]	@ 0x30
 8006692:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e3      	bne.n	800666c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f023 0310 	bic.w	r3, r3, #16
 80066cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	69b9      	ldr	r1, [r7, #24]
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	617b      	str	r3, [r7, #20]
   return(result);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e4      	bne.n	80066b8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f85c 	bl	80067b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006700:	e03f      	b.n	8006782 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00e      	beq.n	800672c <HAL_UART_IRQHandler+0x56c>
 800670e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d008      	beq.n	800672c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006722:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f853 	bl	80067d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800672a:	e02d      	b.n	8006788 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800672c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00e      	beq.n	8006756 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006740:	2b00      	cmp	r3, #0
 8006742:	d008      	beq.n	8006756 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01c      	beq.n	8006786 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
    }
    return;
 8006754:	e017      	b.n	8006786 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d012      	beq.n	8006788 <HAL_UART_IRQHandler+0x5c8>
 8006762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00c      	beq.n	8006788 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fd94 	bl	800729c <UART_EndTransmit_IT>
    return;
 8006774:	e008      	b.n	8006788 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006776:	bf00      	nop
 8006778:	e006      	b.n	8006788 <HAL_UART_IRQHandler+0x5c8>
    return;
 800677a:	bf00      	nop
 800677c:	e004      	b.n	8006788 <HAL_UART_IRQHandler+0x5c8>
      return;
 800677e:	bf00      	nop
 8006780:	e002      	b.n	8006788 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006782:	bf00      	nop
 8006784:	e000      	b.n	8006788 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006786:	bf00      	nop
  }

}
 8006788:	37e8      	adds	r7, #232	@ 0xe8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop

08006790 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	431a      	orrs	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4ba6      	ldr	r3, [pc, #664]	@ (8006aa8 <UART_SetConfig+0x2c4>)
 8006810:	4013      	ands	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	6979      	ldr	r1, [r7, #20]
 8006818:	430b      	orrs	r3, r1
 800681a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	430a      	orrs	r2, r1
 8006854:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a94      	ldr	r2, [pc, #592]	@ (8006aac <UART_SetConfig+0x2c8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d120      	bne.n	80068a2 <UART_SetConfig+0xbe>
 8006860:	4b93      	ldr	r3, [pc, #588]	@ (8006ab0 <UART_SetConfig+0x2cc>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	2b03      	cmp	r3, #3
 800686c:	d816      	bhi.n	800689c <UART_SetConfig+0xb8>
 800686e:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <UART_SetConfig+0x90>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	08006885 	.word	0x08006885
 8006878:	08006891 	.word	0x08006891
 800687c:	0800688b 	.word	0x0800688b
 8006880:	08006897 	.word	0x08006897
 8006884:	2301      	movs	r3, #1
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e150      	b.n	8006b2c <UART_SetConfig+0x348>
 800688a:	2302      	movs	r3, #2
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e14d      	b.n	8006b2c <UART_SetConfig+0x348>
 8006890:	2304      	movs	r3, #4
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e14a      	b.n	8006b2c <UART_SetConfig+0x348>
 8006896:	2308      	movs	r3, #8
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e147      	b.n	8006b2c <UART_SetConfig+0x348>
 800689c:	2310      	movs	r3, #16
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e144      	b.n	8006b2c <UART_SetConfig+0x348>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a83      	ldr	r2, [pc, #524]	@ (8006ab4 <UART_SetConfig+0x2d0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d132      	bne.n	8006912 <UART_SetConfig+0x12e>
 80068ac:	4b80      	ldr	r3, [pc, #512]	@ (8006ab0 <UART_SetConfig+0x2cc>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	2b0c      	cmp	r3, #12
 80068b8:	d828      	bhi.n	800690c <UART_SetConfig+0x128>
 80068ba:	a201      	add	r2, pc, #4	@ (adr r2, 80068c0 <UART_SetConfig+0xdc>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	080068f5 	.word	0x080068f5
 80068c4:	0800690d 	.word	0x0800690d
 80068c8:	0800690d 	.word	0x0800690d
 80068cc:	0800690d 	.word	0x0800690d
 80068d0:	08006901 	.word	0x08006901
 80068d4:	0800690d 	.word	0x0800690d
 80068d8:	0800690d 	.word	0x0800690d
 80068dc:	0800690d 	.word	0x0800690d
 80068e0:	080068fb 	.word	0x080068fb
 80068e4:	0800690d 	.word	0x0800690d
 80068e8:	0800690d 	.word	0x0800690d
 80068ec:	0800690d 	.word	0x0800690d
 80068f0:	08006907 	.word	0x08006907
 80068f4:	2300      	movs	r3, #0
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e118      	b.n	8006b2c <UART_SetConfig+0x348>
 80068fa:	2302      	movs	r3, #2
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e115      	b.n	8006b2c <UART_SetConfig+0x348>
 8006900:	2304      	movs	r3, #4
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e112      	b.n	8006b2c <UART_SetConfig+0x348>
 8006906:	2308      	movs	r3, #8
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e10f      	b.n	8006b2c <UART_SetConfig+0x348>
 800690c:	2310      	movs	r3, #16
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	e10c      	b.n	8006b2c <UART_SetConfig+0x348>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a68      	ldr	r2, [pc, #416]	@ (8006ab8 <UART_SetConfig+0x2d4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d120      	bne.n	800695e <UART_SetConfig+0x17a>
 800691c:	4b64      	ldr	r3, [pc, #400]	@ (8006ab0 <UART_SetConfig+0x2cc>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006922:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006926:	2b30      	cmp	r3, #48	@ 0x30
 8006928:	d013      	beq.n	8006952 <UART_SetConfig+0x16e>
 800692a:	2b30      	cmp	r3, #48	@ 0x30
 800692c:	d814      	bhi.n	8006958 <UART_SetConfig+0x174>
 800692e:	2b20      	cmp	r3, #32
 8006930:	d009      	beq.n	8006946 <UART_SetConfig+0x162>
 8006932:	2b20      	cmp	r3, #32
 8006934:	d810      	bhi.n	8006958 <UART_SetConfig+0x174>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <UART_SetConfig+0x15c>
 800693a:	2b10      	cmp	r3, #16
 800693c:	d006      	beq.n	800694c <UART_SetConfig+0x168>
 800693e:	e00b      	b.n	8006958 <UART_SetConfig+0x174>
 8006940:	2300      	movs	r3, #0
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e0f2      	b.n	8006b2c <UART_SetConfig+0x348>
 8006946:	2302      	movs	r3, #2
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e0ef      	b.n	8006b2c <UART_SetConfig+0x348>
 800694c:	2304      	movs	r3, #4
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	e0ec      	b.n	8006b2c <UART_SetConfig+0x348>
 8006952:	2308      	movs	r3, #8
 8006954:	77fb      	strb	r3, [r7, #31]
 8006956:	e0e9      	b.n	8006b2c <UART_SetConfig+0x348>
 8006958:	2310      	movs	r3, #16
 800695a:	77fb      	strb	r3, [r7, #31]
 800695c:	e0e6      	b.n	8006b2c <UART_SetConfig+0x348>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a56      	ldr	r2, [pc, #344]	@ (8006abc <UART_SetConfig+0x2d8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d120      	bne.n	80069aa <UART_SetConfig+0x1c6>
 8006968:	4b51      	ldr	r3, [pc, #324]	@ (8006ab0 <UART_SetConfig+0x2cc>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006972:	2bc0      	cmp	r3, #192	@ 0xc0
 8006974:	d013      	beq.n	800699e <UART_SetConfig+0x1ba>
 8006976:	2bc0      	cmp	r3, #192	@ 0xc0
 8006978:	d814      	bhi.n	80069a4 <UART_SetConfig+0x1c0>
 800697a:	2b80      	cmp	r3, #128	@ 0x80
 800697c:	d009      	beq.n	8006992 <UART_SetConfig+0x1ae>
 800697e:	2b80      	cmp	r3, #128	@ 0x80
 8006980:	d810      	bhi.n	80069a4 <UART_SetConfig+0x1c0>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <UART_SetConfig+0x1a8>
 8006986:	2b40      	cmp	r3, #64	@ 0x40
 8006988:	d006      	beq.n	8006998 <UART_SetConfig+0x1b4>
 800698a:	e00b      	b.n	80069a4 <UART_SetConfig+0x1c0>
 800698c:	2300      	movs	r3, #0
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	e0cc      	b.n	8006b2c <UART_SetConfig+0x348>
 8006992:	2302      	movs	r3, #2
 8006994:	77fb      	strb	r3, [r7, #31]
 8006996:	e0c9      	b.n	8006b2c <UART_SetConfig+0x348>
 8006998:	2304      	movs	r3, #4
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e0c6      	b.n	8006b2c <UART_SetConfig+0x348>
 800699e:	2308      	movs	r3, #8
 80069a0:	77fb      	strb	r3, [r7, #31]
 80069a2:	e0c3      	b.n	8006b2c <UART_SetConfig+0x348>
 80069a4:	2310      	movs	r3, #16
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	e0c0      	b.n	8006b2c <UART_SetConfig+0x348>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a44      	ldr	r2, [pc, #272]	@ (8006ac0 <UART_SetConfig+0x2dc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d125      	bne.n	8006a00 <UART_SetConfig+0x21c>
 80069b4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ab0 <UART_SetConfig+0x2cc>)
 80069b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c2:	d017      	beq.n	80069f4 <UART_SetConfig+0x210>
 80069c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c8:	d817      	bhi.n	80069fa <UART_SetConfig+0x216>
 80069ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ce:	d00b      	beq.n	80069e8 <UART_SetConfig+0x204>
 80069d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d4:	d811      	bhi.n	80069fa <UART_SetConfig+0x216>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <UART_SetConfig+0x1fe>
 80069da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069de:	d006      	beq.n	80069ee <UART_SetConfig+0x20a>
 80069e0:	e00b      	b.n	80069fa <UART_SetConfig+0x216>
 80069e2:	2300      	movs	r3, #0
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e0a1      	b.n	8006b2c <UART_SetConfig+0x348>
 80069e8:	2302      	movs	r3, #2
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e09e      	b.n	8006b2c <UART_SetConfig+0x348>
 80069ee:	2304      	movs	r3, #4
 80069f0:	77fb      	strb	r3, [r7, #31]
 80069f2:	e09b      	b.n	8006b2c <UART_SetConfig+0x348>
 80069f4:	2308      	movs	r3, #8
 80069f6:	77fb      	strb	r3, [r7, #31]
 80069f8:	e098      	b.n	8006b2c <UART_SetConfig+0x348>
 80069fa:	2310      	movs	r3, #16
 80069fc:	77fb      	strb	r3, [r7, #31]
 80069fe:	e095      	b.n	8006b2c <UART_SetConfig+0x348>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a2f      	ldr	r2, [pc, #188]	@ (8006ac4 <UART_SetConfig+0x2e0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d125      	bne.n	8006a56 <UART_SetConfig+0x272>
 8006a0a:	4b29      	ldr	r3, [pc, #164]	@ (8006ab0 <UART_SetConfig+0x2cc>)
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a18:	d017      	beq.n	8006a4a <UART_SetConfig+0x266>
 8006a1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a1e:	d817      	bhi.n	8006a50 <UART_SetConfig+0x26c>
 8006a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a24:	d00b      	beq.n	8006a3e <UART_SetConfig+0x25a>
 8006a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a2a:	d811      	bhi.n	8006a50 <UART_SetConfig+0x26c>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <UART_SetConfig+0x254>
 8006a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a34:	d006      	beq.n	8006a44 <UART_SetConfig+0x260>
 8006a36:	e00b      	b.n	8006a50 <UART_SetConfig+0x26c>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e076      	b.n	8006b2c <UART_SetConfig+0x348>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e073      	b.n	8006b2c <UART_SetConfig+0x348>
 8006a44:	2304      	movs	r3, #4
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e070      	b.n	8006b2c <UART_SetConfig+0x348>
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e06d      	b.n	8006b2c <UART_SetConfig+0x348>
 8006a50:	2310      	movs	r3, #16
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e06a      	b.n	8006b2c <UART_SetConfig+0x348>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac8 <UART_SetConfig+0x2e4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d138      	bne.n	8006ad2 <UART_SetConfig+0x2ee>
 8006a60:	4b13      	ldr	r3, [pc, #76]	@ (8006ab0 <UART_SetConfig+0x2cc>)
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a66:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a6e:	d017      	beq.n	8006aa0 <UART_SetConfig+0x2bc>
 8006a70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a74:	d82a      	bhi.n	8006acc <UART_SetConfig+0x2e8>
 8006a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a7a:	d00b      	beq.n	8006a94 <UART_SetConfig+0x2b0>
 8006a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a80:	d824      	bhi.n	8006acc <UART_SetConfig+0x2e8>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <UART_SetConfig+0x2aa>
 8006a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8a:	d006      	beq.n	8006a9a <UART_SetConfig+0x2b6>
 8006a8c:	e01e      	b.n	8006acc <UART_SetConfig+0x2e8>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e04b      	b.n	8006b2c <UART_SetConfig+0x348>
 8006a94:	2302      	movs	r3, #2
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e048      	b.n	8006b2c <UART_SetConfig+0x348>
 8006a9a:	2304      	movs	r3, #4
 8006a9c:	77fb      	strb	r3, [r7, #31]
 8006a9e:	e045      	b.n	8006b2c <UART_SetConfig+0x348>
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	e042      	b.n	8006b2c <UART_SetConfig+0x348>
 8006aa6:	bf00      	nop
 8006aa8:	efff69f3 	.word	0xefff69f3
 8006aac:	40011000 	.word	0x40011000
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	40004400 	.word	0x40004400
 8006ab8:	40004800 	.word	0x40004800
 8006abc:	40004c00 	.word	0x40004c00
 8006ac0:	40005000 	.word	0x40005000
 8006ac4:	40011400 	.word	0x40011400
 8006ac8:	40007800 	.word	0x40007800
 8006acc:	2310      	movs	r3, #16
 8006ace:	77fb      	strb	r3, [r7, #31]
 8006ad0:	e02c      	b.n	8006b2c <UART_SetConfig+0x348>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a72      	ldr	r2, [pc, #456]	@ (8006ca0 <UART_SetConfig+0x4bc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d125      	bne.n	8006b28 <UART_SetConfig+0x344>
 8006adc:	4b71      	ldr	r3, [pc, #452]	@ (8006ca4 <UART_SetConfig+0x4c0>)
 8006ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006ae6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006aea:	d017      	beq.n	8006b1c <UART_SetConfig+0x338>
 8006aec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006af0:	d817      	bhi.n	8006b22 <UART_SetConfig+0x33e>
 8006af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006af6:	d00b      	beq.n	8006b10 <UART_SetConfig+0x32c>
 8006af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006afc:	d811      	bhi.n	8006b22 <UART_SetConfig+0x33e>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <UART_SetConfig+0x326>
 8006b02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b06:	d006      	beq.n	8006b16 <UART_SetConfig+0x332>
 8006b08:	e00b      	b.n	8006b22 <UART_SetConfig+0x33e>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e00d      	b.n	8006b2c <UART_SetConfig+0x348>
 8006b10:	2302      	movs	r3, #2
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e00a      	b.n	8006b2c <UART_SetConfig+0x348>
 8006b16:	2304      	movs	r3, #4
 8006b18:	77fb      	strb	r3, [r7, #31]
 8006b1a:	e007      	b.n	8006b2c <UART_SetConfig+0x348>
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e004      	b.n	8006b2c <UART_SetConfig+0x348>
 8006b22:	2310      	movs	r3, #16
 8006b24:	77fb      	strb	r3, [r7, #31]
 8006b26:	e001      	b.n	8006b2c <UART_SetConfig+0x348>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b34:	d15b      	bne.n	8006bee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b36:	7ffb      	ldrb	r3, [r7, #31]
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d828      	bhi.n	8006b8e <UART_SetConfig+0x3aa>
 8006b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b44 <UART_SetConfig+0x360>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b69 	.word	0x08006b69
 8006b48:	08006b71 	.word	0x08006b71
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	08006b8f 	.word	0x08006b8f
 8006b54:	08006b7f 	.word	0x08006b7f
 8006b58:	08006b8f 	.word	0x08006b8f
 8006b5c:	08006b8f 	.word	0x08006b8f
 8006b60:	08006b8f 	.word	0x08006b8f
 8006b64:	08006b87 	.word	0x08006b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b68:	f7fd faf4 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 8006b6c:	61b8      	str	r0, [r7, #24]
        break;
 8006b6e:	e013      	b.n	8006b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b70:	f7fd fb04 	bl	800417c <HAL_RCC_GetPCLK2Freq>
 8006b74:	61b8      	str	r0, [r7, #24]
        break;
 8006b76:	e00f      	b.n	8006b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b78:	4b4b      	ldr	r3, [pc, #300]	@ (8006ca8 <UART_SetConfig+0x4c4>)
 8006b7a:	61bb      	str	r3, [r7, #24]
        break;
 8006b7c:	e00c      	b.n	8006b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b7e:	f7fd f9d7 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 8006b82:	61b8      	str	r0, [r7, #24]
        break;
 8006b84:	e008      	b.n	8006b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b8a:	61bb      	str	r3, [r7, #24]
        break;
 8006b8c:	e004      	b.n	8006b98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	77bb      	strb	r3, [r7, #30]
        break;
 8006b96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d074      	beq.n	8006c88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	005a      	lsls	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	441a      	add	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	2b0f      	cmp	r3, #15
 8006bb8:	d916      	bls.n	8006be8 <UART_SetConfig+0x404>
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc0:	d212      	bcs.n	8006be8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f023 030f 	bic.w	r3, r3, #15
 8006bca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	89fb      	ldrh	r3, [r7, #14]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	89fa      	ldrh	r2, [r7, #14]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	e04f      	b.n	8006c88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	77bb      	strb	r3, [r7, #30]
 8006bec:	e04c      	b.n	8006c88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bee:	7ffb      	ldrb	r3, [r7, #31]
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d828      	bhi.n	8006c46 <UART_SetConfig+0x462>
 8006bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bfc <UART_SetConfig+0x418>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c29 	.word	0x08006c29
 8006c04:	08006c31 	.word	0x08006c31
 8006c08:	08006c47 	.word	0x08006c47
 8006c0c:	08006c37 	.word	0x08006c37
 8006c10:	08006c47 	.word	0x08006c47
 8006c14:	08006c47 	.word	0x08006c47
 8006c18:	08006c47 	.word	0x08006c47
 8006c1c:	08006c3f 	.word	0x08006c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c20:	f7fd fa98 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 8006c24:	61b8      	str	r0, [r7, #24]
        break;
 8006c26:	e013      	b.n	8006c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c28:	f7fd faa8 	bl	800417c <HAL_RCC_GetPCLK2Freq>
 8006c2c:	61b8      	str	r0, [r7, #24]
        break;
 8006c2e:	e00f      	b.n	8006c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c30:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca8 <UART_SetConfig+0x4c4>)
 8006c32:	61bb      	str	r3, [r7, #24]
        break;
 8006c34:	e00c      	b.n	8006c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c36:	f7fd f97b 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 8006c3a:	61b8      	str	r0, [r7, #24]
        break;
 8006c3c:	e008      	b.n	8006c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c42:	61bb      	str	r3, [r7, #24]
        break;
 8006c44:	e004      	b.n	8006c50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c4e:	bf00      	nop
    }

    if (pclk != 0U)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d018      	beq.n	8006c88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	085a      	lsrs	r2, r3, #1
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	441a      	add	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b0f      	cmp	r3, #15
 8006c6e:	d909      	bls.n	8006c84 <UART_SetConfig+0x4a0>
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c76:	d205      	bcs.n	8006c84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60da      	str	r2, [r3, #12]
 8006c82:	e001      	b.n	8006c88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c94:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40007c00 	.word	0x40007c00
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	00f42400 	.word	0x00f42400

08006cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01a      	beq.n	8006dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006daa:	d10a      	bne.n	8006dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	605a      	str	r2, [r3, #4]
  }
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b098      	sub	sp, #96	@ 0x60
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e00:	f7fb fcc4 	bl	800278c <HAL_GetTick>
 8006e04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d12e      	bne.n	8006e72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f88c 	bl	8006f40 <UART_WaitOnFlagUntilTimeout>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d021      	beq.n	8006e72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e6      	bne.n	8006e2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e062      	b.n	8006f38 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d149      	bne.n	8006f14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f856 	bl	8006f40 <UART_WaitOnFlagUntilTimeout>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d03c      	beq.n	8006f14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e6      	bne.n	8006e9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eec:	61fa      	str	r2, [r7, #28]
 8006eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	69b9      	ldr	r1, [r7, #24]
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e011      	b.n	8006f38 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3758      	adds	r7, #88	@ 0x58
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f50:	e04f      	b.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d04b      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5a:	f7fb fc17 	bl	800278c <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e04e      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d037      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b80      	cmp	r3, #128	@ 0x80
 8006f86:	d034      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b40      	cmp	r3, #64	@ 0x40
 8006f8c:	d031      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d110      	bne.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f8ff 	bl	80071a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2208      	movs	r2, #8
 8006fae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e029      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fcc:	d111      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f8e5 	bl	80071a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e00f      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	bf0c      	ite	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	2300      	movne	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	429a      	cmp	r2, r3
 800700e:	d0a0      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800701c:	b480      	push	{r7}
 800701e:	b097      	sub	sp, #92	@ 0x5c
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	88fa      	ldrh	r2, [r7, #6]
 8007034:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	88fa      	ldrh	r2, [r7, #6]
 800703c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704e:	d10e      	bne.n	800706e <UART_Start_Receive_IT+0x52>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d105      	bne.n	8007064 <UART_Start_Receive_IT+0x48>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800705e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007062:	e02d      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	22ff      	movs	r2, #255	@ 0xff
 8007068:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800706c:	e028      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10d      	bne.n	8007092 <UART_Start_Receive_IT+0x76>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <UART_Start_Receive_IT+0x6c>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	22ff      	movs	r2, #255	@ 0xff
 8007082:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007086:	e01b      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	227f      	movs	r2, #127	@ 0x7f
 800708c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007090:	e016      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800709a:	d10d      	bne.n	80070b8 <UART_Start_Receive_IT+0x9c>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <UART_Start_Receive_IT+0x92>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	227f      	movs	r2, #127	@ 0x7f
 80070a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070ac:	e008      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	223f      	movs	r2, #63	@ 0x3f
 80070b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070b6:	e003      	b.n	80070c0 <UART_Start_Receive_IT+0xa4>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2222      	movs	r2, #34	@ 0x22
 80070cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3308      	adds	r3, #8
 80070ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80070f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80070fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800710c:	d107      	bne.n	800711e <UART_Start_Receive_IT+0x102>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4a21      	ldr	r2, [pc, #132]	@ (80071a0 <UART_Start_Receive_IT+0x184>)
 800711a:	669a      	str	r2, [r3, #104]	@ 0x68
 800711c:	e002      	b.n	8007124 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a20      	ldr	r2, [pc, #128]	@ (80071a4 <UART_Start_Receive_IT+0x188>)
 8007122:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d019      	beq.n	8007160 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800714a:	637b      	str	r3, [r7, #52]	@ 0x34
 800714c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e6      	bne.n	800712c <UART_Start_Receive_IT+0x110>
 800715e:	e018      	b.n	8007192 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	613b      	str	r3, [r7, #16]
   return(result);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f043 0320 	orr.w	r3, r3, #32
 8007174:	653b      	str	r3, [r7, #80]	@ 0x50
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800717e:	623b      	str	r3, [r7, #32]
 8007180:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	69f9      	ldr	r1, [r7, #28]
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	61bb      	str	r3, [r7, #24]
   return(result);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e6      	bne.n	8007160 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	375c      	adds	r7, #92	@ 0x5c
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	08007499 	.word	0x08007499
 80071a4:	080072f1 	.word	0x080072f1

080071a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b095      	sub	sp, #84	@ 0x54
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80071d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e6      	bne.n	80071b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	f023 0301 	bic.w	r3, r3, #1
 80071f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e5      	bne.n	80071e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800721a:	2b01      	cmp	r3, #1
 800721c:	d118      	bne.n	8007250 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	60bb      	str	r3, [r7, #8]
   return(result);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f023 0310 	bic.w	r3, r3, #16
 8007232:	647b      	str	r3, [r7, #68]	@ 0x44
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6979      	ldr	r1, [r7, #20]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	613b      	str	r3, [r7, #16]
   return(result);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e6      	bne.n	800721e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007264:	bf00      	nop
 8007266:	3754      	adds	r7, #84	@ 0x54
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff fa88 	bl	80067a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007294:	bf00      	nop
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	61bb      	str	r3, [r7, #24]
 80072c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6979      	ldr	r1, [r7, #20]
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	613b      	str	r3, [r7, #16]
   return(result);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e6      	bne.n	80072a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fa54 	bl	8006790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072e8:	bf00      	nop
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b09c      	sub	sp, #112	@ 0x70
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007308:	2b22      	cmp	r3, #34	@ 0x22
 800730a:	f040 80b9 	bne.w	8007480 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007314:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007318:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800731c:	b2d9      	uxtb	r1, r3
 800731e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007322:	b2da      	uxtb	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007328:	400a      	ands	r2, r1
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	f040 809c 	bne.w	8007490 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800736c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007376:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007378:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800737c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e6      	bne.n	8007358 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3308      	adds	r3, #8
 8007390:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800739a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739c:	f023 0301 	bic.w	r3, r3, #1
 80073a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3308      	adds	r3, #8
 80073a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80073aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80073ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e5      	bne.n	800738a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d018      	beq.n	8007412 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	623b      	str	r3, [r7, #32]
   return(result);
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007400:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e6      	bne.n	80073e0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007416:	2b01      	cmp	r3, #1
 8007418:	d12e      	bne.n	8007478 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	60fb      	str	r3, [r7, #12]
   return(result);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f023 0310 	bic.w	r3, r3, #16
 8007434:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	69b9      	ldr	r1, [r7, #24]
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	617b      	str	r3, [r7, #20]
   return(result);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e6      	bne.n	8007420 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	2b10      	cmp	r3, #16
 800745e:	d103      	bne.n	8007468 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2210      	movs	r2, #16
 8007466:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff f9a1 	bl	80067b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007476:	e00b      	b.n	8007490 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7fa f88b 	bl	8001594 <HAL_UART_RxCpltCallback>
}
 800747e:	e007      	b.n	8007490 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0208 	orr.w	r2, r2, #8
 800748e:	619a      	str	r2, [r3, #24]
}
 8007490:	bf00      	nop
 8007492:	3770      	adds	r7, #112	@ 0x70
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b09c      	sub	sp, #112	@ 0x70
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074b0:	2b22      	cmp	r3, #34	@ 0x22
 80074b2:	f040 80b9 	bne.w	8007628 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80074c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80074ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80074ce:	4013      	ands	r3, r2
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074da:	1c9a      	adds	r2, r3, #2
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 809c 	bne.w	8007638 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800750e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007514:	667b      	str	r3, [r7, #100]	@ 0x64
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800751e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007520:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007524:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800752c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e6      	bne.n	8007500 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3308      	adds	r3, #8
 8007538:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	663b      	str	r3, [r7, #96]	@ 0x60
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007552:	643a      	str	r2, [r7, #64]	@ 0x40
 8007554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007558:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e5      	bne.n	8007532 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d018      	beq.n	80075ba <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	61fb      	str	r3, [r7, #28]
   return(result);
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800759c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075a8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e6      	bne.n	8007588 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d12e      	bne.n	8007620 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f023 0310 	bic.w	r3, r3, #16
 80075dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6979      	ldr	r1, [r7, #20]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	613b      	str	r3, [r7, #16]
   return(result);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e6      	bne.n	80075c8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b10      	cmp	r3, #16
 8007606:	d103      	bne.n	8007610 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2210      	movs	r2, #16
 800760e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff f8cd 	bl	80067b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800761e:	e00b      	b.n	8007638 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7f9 ffb7 	bl	8001594 <HAL_UART_RxCpltCallback>
}
 8007626:	e007      	b.n	8007638 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0208 	orr.w	r2, r2, #8
 8007636:	619a      	str	r2, [r3, #24]
}
 8007638:	bf00      	nop
 800763a:	3770      	adds	r7, #112	@ 0x70
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007640:	b084      	sub	sp, #16
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	f107 001c 	add.w	r0, r7, #28
 800764e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007652:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007656:	2b01      	cmp	r3, #1
 8007658:	d121      	bne.n	800769e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	4b21      	ldr	r3, [pc, #132]	@ (80076f0 <USB_CoreInit+0xb0>)
 800766c:	4013      	ands	r3, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800767e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007682:	2b01      	cmp	r3, #1
 8007684:	d105      	bne.n	8007692 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa92 	bl	8007bbc <USB_CoreReset>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	e010      	b.n	80076c0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa86 	bl	8007bbc <USB_CoreReset>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80076c0:	7fbb      	ldrb	r3, [r7, #30]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10b      	bne.n	80076de <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f043 0206 	orr.w	r2, r3, #6
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f043 0220 	orr.w	r2, r3, #32
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076ea:	b004      	add	sp, #16
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	ffbdffbf 	.word	0xffbdffbf

080076f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f023 0201 	bic.w	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d115      	bne.n	8007764 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007744:	200a      	movs	r0, #10
 8007746:	f7fb f82d 	bl	80027a4 <HAL_Delay>
      ms += 10U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	330a      	adds	r3, #10
 800774e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fa25 	bl	8007ba0 <USB_GetMode>
 8007756:	4603      	mov	r3, r0
 8007758:	2b01      	cmp	r3, #1
 800775a:	d01e      	beq.n	800779a <USB_SetCurrentMode+0x84>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007760:	d9f0      	bls.n	8007744 <USB_SetCurrentMode+0x2e>
 8007762:	e01a      	b.n	800779a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d115      	bne.n	8007796 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007776:	200a      	movs	r0, #10
 8007778:	f7fb f814 	bl	80027a4 <HAL_Delay>
      ms += 10U;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	330a      	adds	r3, #10
 8007780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa0c 	bl	8007ba0 <USB_GetMode>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <USB_SetCurrentMode+0x84>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2bc7      	cmp	r3, #199	@ 0xc7
 8007792:	d9f0      	bls.n	8007776 <USB_SetCurrentMode+0x60>
 8007794:	e001      	b.n	800779a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e005      	b.n	80077a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2bc8      	cmp	r3, #200	@ 0xc8
 800779e:	d101      	bne.n	80077a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e000      	b.n	80077a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077b0:	b084      	sub	sp, #16
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	e009      	b.n	80077e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	3340      	adds	r3, #64	@ 0x40
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	2200      	movs	r2, #0
 80077dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	3301      	adds	r3, #1
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b0e      	cmp	r3, #14
 80077e8:	d9f2      	bls.n	80077d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d11c      	bne.n	800782c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007800:	f043 0302 	orr.w	r3, r3, #2
 8007804:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	e005      	b.n	8007838 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007830:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800783e:	461a      	mov	r2, r3
 8007840:	2300      	movs	r3, #0
 8007842:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007844:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007848:	2b01      	cmp	r3, #1
 800784a:	d10d      	bne.n	8007868 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800784c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007854:	2100      	movs	r1, #0
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f968 	bl	8007b2c <USB_SetDevSpeed>
 800785c:	e008      	b.n	8007870 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800785e:	2101      	movs	r1, #1
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f963 	bl	8007b2c <USB_SetDevSpeed>
 8007866:	e003      	b.n	8007870 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007868:	2103      	movs	r1, #3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f95e 	bl	8007b2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007870:	2110      	movs	r1, #16
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f8fa 	bl	8007a6c <USB_FlushTxFifo>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f924 	bl	8007ad0 <USB_FlushRxFifo>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007898:	461a      	mov	r2, r3
 800789a:	2300      	movs	r3, #0
 800789c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a4:	461a      	mov	r2, r3
 80078a6:	2300      	movs	r3, #0
 80078a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b0:	461a      	mov	r2, r3
 80078b2:	2300      	movs	r3, #0
 80078b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	e043      	b.n	8007944 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078d2:	d118      	bne.n	8007906 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e6:	461a      	mov	r2, r3
 80078e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e013      	b.n	8007918 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fc:	461a      	mov	r2, r3
 80078fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	e008      	b.n	8007918 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007912:	461a      	mov	r2, r3
 8007914:	2300      	movs	r3, #0
 8007916:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007924:	461a      	mov	r2, r3
 8007926:	2300      	movs	r3, #0
 8007928:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007936:	461a      	mov	r2, r3
 8007938:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800793c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	3301      	adds	r3, #1
 8007942:	613b      	str	r3, [r7, #16]
 8007944:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007948:	461a      	mov	r2, r3
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	4293      	cmp	r3, r2
 800794e:	d3b5      	bcc.n	80078bc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007950:	2300      	movs	r3, #0
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	e043      	b.n	80079de <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800796c:	d118      	bne.n	80079a0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007980:	461a      	mov	r2, r3
 8007982:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	e013      	b.n	80079b2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007996:	461a      	mov	r2, r3
 8007998:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	e008      	b.n	80079b2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ac:	461a      	mov	r2, r3
 80079ae:	2300      	movs	r3, #0
 80079b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079be:	461a      	mov	r2, r3
 80079c0:	2300      	movs	r3, #0
 80079c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d0:	461a      	mov	r2, r3
 80079d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	3301      	adds	r3, #1
 80079dc:	613b      	str	r3, [r7, #16]
 80079de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079e2:	461a      	mov	r2, r3
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d3b5      	bcc.n	8007956 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d105      	bne.n	8007a20 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	f043 0210 	orr.w	r2, r3, #16
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	4b0f      	ldr	r3, [pc, #60]	@ (8007a64 <USB_DevInit+0x2b4>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f043 0208 	orr.w	r2, r3, #8
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d105      	bne.n	8007a54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699a      	ldr	r2, [r3, #24]
 8007a4c:	4b06      	ldr	r3, [pc, #24]	@ (8007a68 <USB_DevInit+0x2b8>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a60:	b004      	add	sp, #16
 8007a62:	4770      	bx	lr
 8007a64:	803c3800 	.word	0x803c3800
 8007a68:	40000004 	.word	0x40000004

08007a6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a86:	d901      	bls.n	8007a8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e01b      	b.n	8007ac4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	daf2      	bge.n	8007a7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	019b      	lsls	r3, r3, #6
 8007a9c:	f043 0220 	orr.w	r2, r3, #32
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ab0:	d901      	bls.n	8007ab6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e006      	b.n	8007ac4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b20      	cmp	r3, #32
 8007ac0:	d0f0      	beq.n	8007aa4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ae8:	d901      	bls.n	8007aee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e018      	b.n	8007b20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	daf2      	bge.n	8007adc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2210      	movs	r2, #16
 8007afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b0c:	d901      	bls.n	8007b12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e006      	b.n	8007b20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0310 	and.w	r3, r3, #16
 8007b1a:	2b10      	cmp	r3, #16
 8007b1c:	d0f0      	beq.n	8007b00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b78:	f023 0303 	bic.w	r3, r3, #3
 8007b7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b8c:	f043 0302 	orr.w	r3, r3, #2
 8007b90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	f003 0301 	and.w	r3, r3, #1
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bd4:	d901      	bls.n	8007bda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e01b      	b.n	8007c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	daf2      	bge.n	8007bc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f043 0201 	orr.w	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bfe:	d901      	bls.n	8007c04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e006      	b.n	8007c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d0f0      	beq.n	8007bf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c1e:	b480      	push	{r7}
 8007c20:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007c22:	bf00      	nop
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c32:	f3ef 8305 	mrs	r3, IPSR
 8007c36:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10f      	bne.n	8007c5e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c42:	607b      	str	r3, [r7, #4]
  return(result);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d105      	bne.n	8007c56 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8007c4e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <osKernelInitialize+0x3a>
 8007c56:	4b0e      	ldr	r3, [pc, #56]	@ (8007c90 <osKernelInitialize+0x64>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d103      	bne.n	8007c66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007c5e:	f06f 0305 	mvn.w	r3, #5
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e00c      	b.n	8007c80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c66:	4b0a      	ldr	r3, [pc, #40]	@ (8007c90 <osKernelInitialize+0x64>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d105      	bne.n	8007c7a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c6e:	4b08      	ldr	r3, [pc, #32]	@ (8007c90 <osKernelInitialize+0x64>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	e002      	b.n	8007c80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c80:	68fb      	ldr	r3, [r7, #12]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000a5c 	.word	0x20000a5c

08007c94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c9a:	f3ef 8305 	mrs	r3, IPSR
 8007c9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10f      	bne.n	8007cc6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8007caa:	607b      	str	r3, [r7, #4]
  return(result);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d105      	bne.n	8007cbe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8007cb6:	603b      	str	r3, [r7, #0]
  return(result);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d007      	beq.n	8007cce <osKernelStart+0x3a>
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007cfc <osKernelStart+0x68>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d103      	bne.n	8007cce <osKernelStart+0x3a>
    stat = osErrorISR;
 8007cc6:	f06f 0305 	mvn.w	r3, #5
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	e010      	b.n	8007cf0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cce:	4b0b      	ldr	r3, [pc, #44]	@ (8007cfc <osKernelStart+0x68>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d109      	bne.n	8007cea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007cd6:	f7ff ffa2 	bl	8007c1e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007cda:	4b08      	ldr	r3, [pc, #32]	@ (8007cfc <osKernelStart+0x68>)
 8007cdc:	2202      	movs	r2, #2
 8007cde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ce0:	f001 f8ca 	bl	8008e78 <vTaskStartScheduler>
      stat = osOK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e002      	b.n	8007cf0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007cea:	f04f 33ff 	mov.w	r3, #4294967295
 8007cee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000a5c 	.word	0x20000a5c

08007d00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b090      	sub	sp, #64	@ 0x40
 8007d04:	af04      	add	r7, sp, #16
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d10:	f3ef 8305 	mrs	r3, IPSR
 8007d14:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d16:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 808f 	bne.w	8007e3c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d22:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d105      	bne.n	8007d36 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d2e:	617b      	str	r3, [r7, #20]
  return(result);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <osThreadNew+0x3e>
 8007d36:	4b44      	ldr	r3, [pc, #272]	@ (8007e48 <osThreadNew+0x148>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d07e      	beq.n	8007e3c <osThreadNew+0x13c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d07b      	beq.n	8007e3c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007d44:	2380      	movs	r3, #128	@ 0x80
 8007d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007d48:	2318      	movs	r3, #24
 8007d4a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007d50:	f04f 33ff 	mov.w	r3, #4294967295
 8007d54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d045      	beq.n	8007de8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <osThreadNew+0x6a>
        name = attr->name;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d008      	beq.n	8007d90 <osThreadNew+0x90>
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	2b38      	cmp	r3, #56	@ 0x38
 8007d82:	d805      	bhi.n	8007d90 <osThreadNew+0x90>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <osThreadNew+0x94>
        return (NULL);
 8007d90:	2300      	movs	r3, #0
 8007d92:	e054      	b.n	8007e3e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	089b      	lsrs	r3, r3, #2
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00e      	beq.n	8007dca <osThreadNew+0xca>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b5b      	cmp	r3, #91	@ 0x5b
 8007db2:	d90a      	bls.n	8007dca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d006      	beq.n	8007dca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <osThreadNew+0xca>
        mem = 1;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	623b      	str	r3, [r7, #32]
 8007dc8:	e010      	b.n	8007dec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10c      	bne.n	8007dec <osThreadNew+0xec>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d108      	bne.n	8007dec <osThreadNew+0xec>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <osThreadNew+0xec>
          mem = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	623b      	str	r3, [r7, #32]
 8007de6:	e001      	b.n	8007dec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d110      	bne.n	8007e14 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dfa:	9202      	str	r2, [sp, #8]
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 fe4f 	bl	8008aac <xTaskCreateStatic>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	613b      	str	r3, [r7, #16]
 8007e12:	e013      	b.n	8007e3c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d110      	bne.n	8007e3c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f107 0310 	add.w	r3, r7, #16
 8007e22:	9301      	str	r3, [sp, #4]
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 fea3 	bl	8008b78 <xTaskCreate>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d001      	beq.n	8007e3c <osThreadNew+0x13c>
          hTask = NULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e3c:	693b      	ldr	r3, [r7, #16]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3730      	adds	r7, #48	@ 0x30
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000a5c 	.word	0x20000a5c

08007e4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e54:	f3ef 8305 	mrs	r3, IPSR
 8007e58:	613b      	str	r3, [r7, #16]
  return(result);
 8007e5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10f      	bne.n	8007e80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e60:	f3ef 8310 	mrs	r3, PRIMASK
 8007e64:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d105      	bne.n	8007e78 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8007e70:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <osDelay+0x3c>
 8007e78:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea4 <osDelay+0x58>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d103      	bne.n	8007e88 <osDelay+0x3c>
    stat = osErrorISR;
 8007e80:	f06f 0305 	mvn.w	r3, #5
 8007e84:	617b      	str	r3, [r7, #20]
 8007e86:	e007      	b.n	8007e98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 ffb8 	bl	8008e08 <vTaskDelay>
    }
  }

  return (stat);
 8007e98:	697b      	ldr	r3, [r7, #20]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000a5c 	.word	0x20000a5c

08007ea8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4a07      	ldr	r2, [pc, #28]	@ (8007ed4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007eb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4a06      	ldr	r2, [pc, #24]	@ (8007ed8 <vApplicationGetIdleTaskMemory+0x30>)
 8007ebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2280      	movs	r2, #128	@ 0x80
 8007ec4:	601a      	str	r2, [r3, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000a60 	.word	0x20000a60
 8007ed8:	20000abc 	.word	0x20000abc

08007edc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4a07      	ldr	r2, [pc, #28]	@ (8007f08 <vApplicationGetTimerTaskMemory+0x2c>)
 8007eec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	4a06      	ldr	r2, [pc, #24]	@ (8007f0c <vApplicationGetTimerTaskMemory+0x30>)
 8007ef2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007efa:	601a      	str	r2, [r3, #0]
}
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	20000cbc 	.word	0x20000cbc
 8007f0c:	20000d18 	.word	0x20000d18

08007f10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f103 0208 	add.w	r2, r3, #8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f103 0208 	add.w	r2, r3, #8
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f103 0208 	add.w	r2, r3, #8
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d103      	bne.n	8007fd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e00c      	b.n	8007fec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e002      	b.n	8007fe0 <vListInsert+0x2e>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d2f6      	bcs.n	8007fda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	601a      	str	r2, [r3, #0]
}
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6892      	ldr	r2, [r2, #8]
 800803a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6852      	ldr	r2, [r2, #4]
 8008044:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d103      	bne.n	8008058 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	1e5a      	subs	r2, r3, #1
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10d      	bne.n	80080a8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008090:	b672      	cpsid	i
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	b662      	cpsie	i
 80080a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80080a8:	f002 f8a8 	bl	800a1fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080b8:	fb01 f303 	mul.w	r3, r1, r3
 80080bc:	441a      	add	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d8:	3b01      	subs	r3, #1
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	441a      	add	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	22ff      	movs	r2, #255	@ 0xff
 80080ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	22ff      	movs	r2, #255	@ 0xff
 80080f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d114      	bne.n	8008128 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01a      	beq.n	800813c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3310      	adds	r3, #16
 800810a:	4618      	mov	r0, r3
 800810c:	f001 f950 	bl	80093b0 <xTaskRemoveFromEventList>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d012      	beq.n	800813c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008116:	4b0d      	ldr	r3, [pc, #52]	@ (800814c <xQueueGenericReset+0xd4>)
 8008118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	e009      	b.n	800813c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3310      	adds	r3, #16
 800812c:	4618      	mov	r0, r3
 800812e:	f7ff feef 	bl	8007f10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3324      	adds	r3, #36	@ 0x24
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff feea 	bl	8007f10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800813c:	f002 f894 	bl	800a268 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008140:	2301      	movs	r3, #1
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	e000ed04 	.word	0xe000ed04

08008150 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008150:	b580      	push	{r7, lr}
 8008152:	b08e      	sub	sp, #56	@ 0x38
 8008154:	af02      	add	r7, sp, #8
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10d      	bne.n	8008180 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008168:	b672      	cpsid	i
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	b662      	cpsie	i
 8008178:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800817a:	bf00      	nop
 800817c:	bf00      	nop
 800817e:	e7fd      	b.n	800817c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10d      	bne.n	80081a2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818a:	b672      	cpsid	i
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	b662      	cpsie	i
 800819a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <xQueueGenericCreateStatic+0x5e>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <xQueueGenericCreateStatic+0x62>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e000      	b.n	80081b4 <xQueueGenericCreateStatic+0x64>
 80081b2:	2300      	movs	r3, #0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10d      	bne.n	80081d4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081bc:	b672      	cpsid	i
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	b662      	cpsie	i
 80081cc:	623b      	str	r3, [r7, #32]
}
 80081ce:	bf00      	nop
 80081d0:	bf00      	nop
 80081d2:	e7fd      	b.n	80081d0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <xQueueGenericCreateStatic+0x90>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <xQueueGenericCreateStatic+0x94>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e000      	b.n	80081e6 <xQueueGenericCreateStatic+0x96>
 80081e4:	2300      	movs	r3, #0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10d      	bne.n	8008206 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	b672      	cpsid	i
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	b662      	cpsie	i
 80081fe:	61fb      	str	r3, [r7, #28]
}
 8008200:	bf00      	nop
 8008202:	bf00      	nop
 8008204:	e7fd      	b.n	8008202 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008206:	2350      	movs	r3, #80	@ 0x50
 8008208:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b50      	cmp	r3, #80	@ 0x50
 800820e:	d00d      	beq.n	800822c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	b672      	cpsid	i
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	b662      	cpsie	i
 8008224:	61bb      	str	r3, [r7, #24]
}
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	e7fd      	b.n	8008228 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800822c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00d      	beq.n	8008254 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008240:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	4613      	mov	r3, r2
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	68b9      	ldr	r1, [r7, #8]
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f805 	bl	800825e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008256:	4618      	mov	r0, r3
 8008258:	3730      	adds	r7, #48	@ 0x30
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d103      	bne.n	800827a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	e002      	b.n	8008280 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800828c:	2101      	movs	r1, #1
 800828e:	69b8      	ldr	r0, [r7, #24]
 8008290:	f7ff fef2 	bl	8008078 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08e      	sub	sp, #56	@ 0x38
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082b2:	2300      	movs	r3, #0
 80082b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10d      	bne.n	80082dc <xQueueGenericSend+0x38>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	b672      	cpsid	i
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	b662      	cpsie	i
 80082d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	e7fd      	b.n	80082d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <xQueueGenericSend+0x46>
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <xQueueGenericSend+0x4a>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <xQueueGenericSend+0x4c>
 80082ee:	2300      	movs	r3, #0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10d      	bne.n	8008310 <xQueueGenericSend+0x6c>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f8:	b672      	cpsid	i
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	b662      	cpsie	i
 8008308:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800830a:	bf00      	nop
 800830c:	bf00      	nop
 800830e:	e7fd      	b.n	800830c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d103      	bne.n	800831e <xQueueGenericSend+0x7a>
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831a:	2b01      	cmp	r3, #1
 800831c:	d101      	bne.n	8008322 <xQueueGenericSend+0x7e>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <xQueueGenericSend+0x80>
 8008322:	2300      	movs	r3, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10d      	bne.n	8008344 <xQueueGenericSend+0xa0>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832c:	b672      	cpsid	i
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	b662      	cpsie	i
 800833c:	623b      	str	r3, [r7, #32]
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008344:	f001 f9fc 	bl	8009740 <xTaskGetSchedulerState>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <xQueueGenericSend+0xb0>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <xQueueGenericSend+0xb4>
 8008354:	2301      	movs	r3, #1
 8008356:	e000      	b.n	800835a <xQueueGenericSend+0xb6>
 8008358:	2300      	movs	r3, #0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10d      	bne.n	800837a <xQueueGenericSend+0xd6>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	b672      	cpsid	i
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	b662      	cpsie	i
 8008372:	61fb      	str	r3, [r7, #28]
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	e7fd      	b.n	8008376 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800837a:	f001 ff3f 	bl	800a1fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008386:	429a      	cmp	r2, r3
 8008388:	d302      	bcc.n	8008390 <xQueueGenericSend+0xec>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d129      	bne.n	80083e4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	68b9      	ldr	r1, [r7, #8]
 8008394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008396:	f000 fa1b 	bl	80087d0 <prvCopyDataToQueue>
 800839a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800839c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d010      	beq.n	80083c6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	3324      	adds	r3, #36	@ 0x24
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 f801 	bl	80093b0 <xTaskRemoveFromEventList>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d013      	beq.n	80083dc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083b4:	4b3f      	ldr	r3, [pc, #252]	@ (80084b4 <xQueueGenericSend+0x210>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	e00a      	b.n	80083dc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083cc:	4b39      	ldr	r3, [pc, #228]	@ (80084b4 <xQueueGenericSend+0x210>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083dc:	f001 ff44 	bl	800a268 <vPortExitCritical>
				return pdPASS;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e063      	b.n	80084ac <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d103      	bne.n	80083f2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083ea:	f001 ff3d 	bl	800a268 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e05c      	b.n	80084ac <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d106      	bne.n	8008406 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 f83d 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008402:	2301      	movs	r3, #1
 8008404:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008406:	f001 ff2f 	bl	800a268 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800840a:	f000 fda1 	bl	8008f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800840e:	f001 fef5 	bl	800a1fc <vPortEnterCritical>
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008418:	b25b      	sxtb	r3, r3
 800841a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841e:	d103      	bne.n	8008428 <xQueueGenericSend+0x184>
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800842e:	b25b      	sxtb	r3, r3
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d103      	bne.n	800843e <xQueueGenericSend+0x19a>
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800843e:	f001 ff13 	bl	800a268 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008442:	1d3a      	adds	r2, r7, #4
 8008444:	f107 0314 	add.w	r3, r7, #20
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f001 f82c 	bl	80094a8 <xTaskCheckForTimeOut>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d124      	bne.n	80084a0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008456:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008458:	f000 fab2 	bl	80089c0 <prvIsQueueFull>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d018      	beq.n	8008494 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	3310      	adds	r3, #16
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f000 ff4a 	bl	8009304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008472:	f000 fa3d 	bl	80088f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008476:	f000 fd79 	bl	8008f6c <xTaskResumeAll>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	f47f af7c 	bne.w	800837a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008482:	4b0c      	ldr	r3, [pc, #48]	@ (80084b4 <xQueueGenericSend+0x210>)
 8008484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	e772      	b.n	800837a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008496:	f000 fa2b 	bl	80088f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800849a:	f000 fd67 	bl	8008f6c <xTaskResumeAll>
 800849e:	e76c      	b.n	800837a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084a2:	f000 fa25 	bl	80088f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084a6:	f000 fd61 	bl	8008f6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3738      	adds	r7, #56	@ 0x38
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	e000ed04 	.word	0xe000ed04

080084b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	@ 0x38
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10d      	bne.n	80084ec <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	b672      	cpsid	i
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	b662      	cpsie	i
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084e6:	bf00      	nop
 80084e8:	bf00      	nop
 80084ea:	e7fd      	b.n	80084e8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d103      	bne.n	80084fa <xQueueGenericSendFromISR+0x42>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <xQueueGenericSendFromISR+0x46>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e000      	b.n	8008500 <xQueueGenericSendFromISR+0x48>
 80084fe:	2300      	movs	r3, #0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10d      	bne.n	8008520 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008508:	b672      	cpsid	i
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	b662      	cpsie	i
 8008518:	623b      	str	r3, [r7, #32]
}
 800851a:	bf00      	nop
 800851c:	bf00      	nop
 800851e:	e7fd      	b.n	800851c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d103      	bne.n	800852e <xQueueGenericSendFromISR+0x76>
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852a:	2b01      	cmp	r3, #1
 800852c:	d101      	bne.n	8008532 <xQueueGenericSendFromISR+0x7a>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <xQueueGenericSendFromISR+0x7c>
 8008532:	2300      	movs	r3, #0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10d      	bne.n	8008554 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853c:	b672      	cpsid	i
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	b662      	cpsie	i
 800854c:	61fb      	str	r3, [r7, #28]
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008554:	f001 ff3a 	bl	800a3cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008558:	f3ef 8211 	mrs	r2, BASEPRI
 800855c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008560:	b672      	cpsid	i
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	b662      	cpsie	i
 8008570:	61ba      	str	r2, [r7, #24]
 8008572:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008574:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008576:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008580:	429a      	cmp	r2, r3
 8008582:	d302      	bcc.n	800858a <xQueueGenericSendFromISR+0xd2>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d12c      	bne.n	80085e4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	68b9      	ldr	r1, [r7, #8]
 8008598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800859a:	f000 f919 	bl	80087d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800859e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80085a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a6:	d112      	bne.n	80085ce <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d016      	beq.n	80085de <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	3324      	adds	r3, #36	@ 0x24
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fefb 	bl	80093b0 <xTaskRemoveFromEventList>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00b      	beq.n	80085de <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	e007      	b.n	80085de <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085d2:	3301      	adds	r3, #1
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	b25a      	sxtb	r2, r3
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80085de:	2301      	movs	r3, #1
 80085e0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80085e2:	e001      	b.n	80085e8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3738      	adds	r7, #56	@ 0x38
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08c      	sub	sp, #48	@ 0x30
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800860c:	2300      	movs	r3, #0
 800860e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10d      	bne.n	8008636 <xQueueReceive+0x36>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861e:	b672      	cpsid	i
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	b662      	cpsie	i
 800862e:	623b      	str	r3, [r7, #32]
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	e7fd      	b.n	8008632 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d103      	bne.n	8008644 <xQueueReceive+0x44>
 800863c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <xQueueReceive+0x48>
 8008644:	2301      	movs	r3, #1
 8008646:	e000      	b.n	800864a <xQueueReceive+0x4a>
 8008648:	2300      	movs	r3, #0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10d      	bne.n	800866a <xQueueReceive+0x6a>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	b672      	cpsid	i
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	b662      	cpsie	i
 8008662:	61fb      	str	r3, [r7, #28]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800866a:	f001 f869 	bl	8009740 <xTaskGetSchedulerState>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <xQueueReceive+0x7a>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <xQueueReceive+0x7e>
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <xQueueReceive+0x80>
 800867e:	2300      	movs	r3, #0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10d      	bne.n	80086a0 <xQueueReceive+0xa0>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008688:	b672      	cpsid	i
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	b662      	cpsie	i
 8008698:	61bb      	str	r3, [r7, #24]
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	e7fd      	b.n	800869c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086a0:	f001 fdac 	bl	800a1fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01f      	beq.n	80086f0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086b4:	f000 f8f6 	bl	80088a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ba:	1e5a      	subs	r2, r3, #1
 80086bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00f      	beq.n	80086e8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ca:	3310      	adds	r3, #16
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fe6f 	bl	80093b0 <xTaskRemoveFromEventList>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086d8:	4b3c      	ldr	r3, [pc, #240]	@ (80087cc <xQueueReceive+0x1cc>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086e8:	f001 fdbe 	bl	800a268 <vPortExitCritical>
				return pdPASS;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e069      	b.n	80087c4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086f6:	f001 fdb7 	bl	800a268 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e062      	b.n	80087c4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008704:	f107 0310 	add.w	r3, r7, #16
 8008708:	4618      	mov	r0, r3
 800870a:	f000 feb7 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800870e:	2301      	movs	r3, #1
 8008710:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008712:	f001 fda9 	bl	800a268 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008716:	f000 fc1b 	bl	8008f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800871a:	f001 fd6f 	bl	800a1fc <vPortEnterCritical>
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008724:	b25b      	sxtb	r3, r3
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d103      	bne.n	8008734 <xQueueReceive+0x134>
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800873a:	b25b      	sxtb	r3, r3
 800873c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008740:	d103      	bne.n	800874a <xQueueReceive+0x14a>
 8008742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800874a:	f001 fd8d 	bl	800a268 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800874e:	1d3a      	adds	r2, r7, #4
 8008750:	f107 0310 	add.w	r3, r7, #16
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f000 fea6 	bl	80094a8 <xTaskCheckForTimeOut>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d123      	bne.n	80087aa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008764:	f000 f916 	bl	8008994 <prvIsQueueEmpty>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d017      	beq.n	800879e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	3324      	adds	r3, #36	@ 0x24
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fdc4 	bl	8009304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800877c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800877e:	f000 f8b7 	bl	80088f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008782:	f000 fbf3 	bl	8008f6c <xTaskResumeAll>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d189      	bne.n	80086a0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800878c:	4b0f      	ldr	r3, [pc, #60]	@ (80087cc <xQueueReceive+0x1cc>)
 800878e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	e780      	b.n	80086a0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800879e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087a0:	f000 f8a6 	bl	80088f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087a4:	f000 fbe2 	bl	8008f6c <xTaskResumeAll>
 80087a8:	e77a      	b.n	80086a0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087ac:	f000 f8a0 	bl	80088f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087b0:	f000 fbdc 	bl	8008f6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b6:	f000 f8ed 	bl	8008994 <prvIsQueueEmpty>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f43f af6f 	beq.w	80086a0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3730      	adds	r7, #48	@ 0x30
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10d      	bne.n	800880a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d14d      	bne.n	8008892 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 ffbe 	bl	800977c <xTaskPriorityDisinherit>
 8008800:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	609a      	str	r2, [r3, #8]
 8008808:	e043      	b.n	8008892 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d119      	bne.n	8008844 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6858      	ldr	r0, [r3, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008818:	461a      	mov	r2, r3
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	f002 f8d2 	bl	800a9c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008828:	441a      	add	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	429a      	cmp	r2, r3
 8008838:	d32b      	bcc.n	8008892 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	e026      	b.n	8008892 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68d8      	ldr	r0, [r3, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800884c:	461a      	mov	r2, r3
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	f002 f8b8 	bl	800a9c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800885c:	425b      	negs	r3, r3
 800885e:	441a      	add	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d207      	bcs.n	8008880 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008878:	425b      	negs	r3, r3
 800887a:	441a      	add	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d105      	bne.n	8008892 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	3b01      	subs	r3, #1
 8008890:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800889a:	697b      	ldr	r3, [r7, #20]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d018      	beq.n	80088e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088be:	441a      	add	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d303      	bcc.n	80088d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68d9      	ldr	r1, [r3, #12]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e0:	461a      	mov	r2, r3
 80088e2:	6838      	ldr	r0, [r7, #0]
 80088e4:	f002 f86e 	bl	800a9c4 <memcpy>
	}
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088f8:	f001 fc80 	bl	800a1fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008902:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008904:	e011      	b.n	800892a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890a:	2b00      	cmp	r3, #0
 800890c:	d012      	beq.n	8008934 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3324      	adds	r3, #36	@ 0x24
 8008912:	4618      	mov	r0, r3
 8008914:	f000 fd4c 	bl	80093b0 <xTaskRemoveFromEventList>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800891e:	f000 fe2b 	bl	8009578 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	3b01      	subs	r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800892a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800892e:	2b00      	cmp	r3, #0
 8008930:	dce9      	bgt.n	8008906 <prvUnlockQueue+0x16>
 8008932:	e000      	b.n	8008936 <prvUnlockQueue+0x46>
					break;
 8008934:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	22ff      	movs	r2, #255	@ 0xff
 800893a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800893e:	f001 fc93 	bl	800a268 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008942:	f001 fc5b 	bl	800a1fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800894c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800894e:	e011      	b.n	8008974 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d012      	beq.n	800897e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3310      	adds	r3, #16
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fd27 	bl	80093b0 <xTaskRemoveFromEventList>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008968:	f000 fe06 	bl	8009578 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	3b01      	subs	r3, #1
 8008970:	b2db      	uxtb	r3, r3
 8008972:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008978:	2b00      	cmp	r3, #0
 800897a:	dce9      	bgt.n	8008950 <prvUnlockQueue+0x60>
 800897c:	e000      	b.n	8008980 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800897e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	22ff      	movs	r2, #255	@ 0xff
 8008984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008988:	f001 fc6e 	bl	800a268 <vPortExitCritical>
}
 800898c:	bf00      	nop
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800899c:	f001 fc2e 	bl	800a1fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d102      	bne.n	80089ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e001      	b.n	80089b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089b2:	f001 fc59 	bl	800a268 <vPortExitCritical>

	return xReturn;
 80089b6:	68fb      	ldr	r3, [r7, #12]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089c8:	f001 fc18 	bl	800a1fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d102      	bne.n	80089de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089d8:	2301      	movs	r3, #1
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	e001      	b.n	80089e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089e2:	f001 fc41 	bl	800a268 <vPortExitCritical>

	return xReturn;
 80089e6:	68fb      	ldr	r3, [r7, #12]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	e014      	b.n	8008a2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a00:	4a0f      	ldr	r2, [pc, #60]	@ (8008a40 <vQueueAddToRegistry+0x50>)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a0c:	490c      	ldr	r1, [pc, #48]	@ (8008a40 <vQueueAddToRegistry+0x50>)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a16:	4a0a      	ldr	r2, [pc, #40]	@ (8008a40 <vQueueAddToRegistry+0x50>)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a22:	e006      	b.n	8008a32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b07      	cmp	r3, #7
 8008a2e:	d9e7      	bls.n	8008a00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20001118 	.word	0x20001118

08008a44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a54:	f001 fbd2 	bl	800a1fc <vPortEnterCritical>
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a5e:	b25b      	sxtb	r3, r3
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d103      	bne.n	8008a6e <vQueueWaitForMessageRestricted+0x2a>
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a74:	b25b      	sxtb	r3, r3
 8008a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7a:	d103      	bne.n	8008a84 <vQueueWaitForMessageRestricted+0x40>
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a84:	f001 fbf0 	bl	800a268 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	3324      	adds	r3, #36	@ 0x24
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fc5b 	bl	8009354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a9e:	6978      	ldr	r0, [r7, #20]
 8008aa0:	f7ff ff26 	bl	80088f0 <prvUnlockQueue>
	}
 8008aa4:	bf00      	nop
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08e      	sub	sp, #56	@ 0x38
 8008ab0:	af04      	add	r7, sp, #16
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10d      	bne.n	8008adc <xTaskCreateStatic+0x30>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac4:	b672      	cpsid	i
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	b662      	cpsie	i
 8008ad4:	623b      	str	r3, [r7, #32]
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10d      	bne.n	8008afe <xTaskCreateStatic+0x52>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	b672      	cpsid	i
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	b662      	cpsie	i
 8008af6:	61fb      	str	r3, [r7, #28]
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	e7fd      	b.n	8008afa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008afe:	235c      	movs	r3, #92	@ 0x5c
 8008b00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b06:	d00d      	beq.n	8008b24 <xTaskCreateStatic+0x78>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0c:	b672      	cpsid	i
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	b662      	cpsie	i
 8008b1c:	61bb      	str	r3, [r7, #24]
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	e7fd      	b.n	8008b20 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01e      	beq.n	8008b6a <xTaskCreateStatic+0xbe>
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d01b      	beq.n	8008b6a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b44:	2300      	movs	r3, #0
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	9302      	str	r3, [sp, #8]
 8008b4c:	f107 0314 	add.w	r3, r7, #20
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 f850 	bl	8008c02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b64:	f000 f8e0 	bl	8008d28 <prvAddNewTaskToReadyList>
 8008b68:	e001      	b.n	8008b6e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b6e:	697b      	ldr	r3, [r7, #20]
	}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3728      	adds	r7, #40	@ 0x28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08c      	sub	sp, #48	@ 0x30
 8008b7c:	af04      	add	r7, sp, #16
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fc63 	bl	800a458 <pvPortMalloc>
 8008b92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00e      	beq.n	8008bb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b9a:	205c      	movs	r0, #92	@ 0x5c
 8008b9c:	f001 fc5c 	bl	800a458 <pvPortMalloc>
 8008ba0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	631a      	str	r2, [r3, #48]	@ 0x30
 8008bae:	e005      	b.n	8008bbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bb0:	6978      	ldr	r0, [r7, #20]
 8008bb2:	f001 fd1f 	bl	800a5f4 <vPortFree>
 8008bb6:	e001      	b.n	8008bbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d017      	beq.n	8008bf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bca:	88fa      	ldrh	r2, [r7, #6]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9303      	str	r3, [sp, #12]
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f80e 	bl	8008c02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008be6:	69f8      	ldr	r0, [r7, #28]
 8008be8:	f000 f89e 	bl	8008d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bec:	2301      	movs	r3, #1
 8008bee:	61bb      	str	r3, [r7, #24]
 8008bf0:	e002      	b.n	8008bf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
	}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3720      	adds	r7, #32
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b088      	sub	sp, #32
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	607a      	str	r2, [r7, #4]
 8008c0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	461a      	mov	r2, r3
 8008c1a:	21a5      	movs	r1, #165	@ 0xa5
 8008c1c:	f001 fe8e 	bl	800a93c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008c2a:	440b      	add	r3, r1
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f023 0307 	bic.w	r3, r3, #7
 8008c38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00d      	beq.n	8008c60 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c48:	b672      	cpsid	i
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	b662      	cpsie	i
 8008c58:	617b      	str	r3, [r7, #20]
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	e7fd      	b.n	8008c5c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01f      	beq.n	8008ca6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c66:	2300      	movs	r3, #0
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	e012      	b.n	8008c92 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	4413      	add	r3, r2
 8008c72:	7819      	ldrb	r1, [r3, #0]
 8008c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	4413      	add	r3, r2
 8008c7a:	3334      	adds	r3, #52	@ 0x34
 8008c7c:	460a      	mov	r2, r1
 8008c7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d006      	beq.n	8008c9a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	61fb      	str	r3, [r7, #28]
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	2b0f      	cmp	r3, #15
 8008c96:	d9e9      	bls.n	8008c6c <prvInitialiseNewTask+0x6a>
 8008c98:	e000      	b.n	8008c9c <prvInitialiseNewTask+0x9a>
			{
				break;
 8008c9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ca4:	e003      	b.n	8008cae <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	2b37      	cmp	r3, #55	@ 0x37
 8008cb2:	d901      	bls.n	8008cb8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cb4:	2337      	movs	r3, #55	@ 0x37
 8008cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ccc:	3304      	adds	r3, #4
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff f93e 	bl	8007f50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd6:	3318      	adds	r3, #24
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff f939 	bl	8007f50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ce2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cf2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	68f9      	ldr	r1, [r7, #12]
 8008d06:	69b8      	ldr	r0, [r7, #24]
 8008d08:	f001 f968 	bl	8009fdc <pxPortInitialiseStack>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d1e:	bf00      	nop
 8008d20:	3720      	adds	r7, #32
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d30:	f001 fa64 	bl	800a1fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d34:	4b2d      	ldr	r3, [pc, #180]	@ (8008dec <prvAddNewTaskToReadyList+0xc4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8008dec <prvAddNewTaskToReadyList+0xc4>)
 8008d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8008df0 <prvAddNewTaskToReadyList+0xc8>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d109      	bne.n	8008d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d46:	4a2a      	ldr	r2, [pc, #168]	@ (8008df0 <prvAddNewTaskToReadyList+0xc8>)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d4c:	4b27      	ldr	r3, [pc, #156]	@ (8008dec <prvAddNewTaskToReadyList+0xc4>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d110      	bne.n	8008d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d54:	f000 fc34 	bl	80095c0 <prvInitialiseTaskLists>
 8008d58:	e00d      	b.n	8008d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d5a:	4b26      	ldr	r3, [pc, #152]	@ (8008df4 <prvAddNewTaskToReadyList+0xcc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d109      	bne.n	8008d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d62:	4b23      	ldr	r3, [pc, #140]	@ (8008df0 <prvAddNewTaskToReadyList+0xc8>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d802      	bhi.n	8008d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d70:	4a1f      	ldr	r2, [pc, #124]	@ (8008df0 <prvAddNewTaskToReadyList+0xc8>)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d76:	4b20      	ldr	r3, [pc, #128]	@ (8008df8 <prvAddNewTaskToReadyList+0xd0>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8008df8 <prvAddNewTaskToReadyList+0xd0>)
 8008d7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d80:	4b1d      	ldr	r3, [pc, #116]	@ (8008df8 <prvAddNewTaskToReadyList+0xd0>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8008dfc <prvAddNewTaskToReadyList+0xd4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d903      	bls.n	8008d9c <prvAddNewTaskToReadyList+0x74>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d98:	4a18      	ldr	r2, [pc, #96]	@ (8008dfc <prvAddNewTaskToReadyList+0xd4>)
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4a15      	ldr	r2, [pc, #84]	@ (8008e00 <prvAddNewTaskToReadyList+0xd8>)
 8008daa:	441a      	add	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7ff f8d9 	bl	8007f6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008db8:	f001 fa56 	bl	800a268 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008df4 <prvAddNewTaskToReadyList+0xcc>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00e      	beq.n	8008de2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008df0 <prvAddNewTaskToReadyList+0xc8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d207      	bcs.n	8008de2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e04 <prvAddNewTaskToReadyList+0xdc>)
 8008dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	2000162c 	.word	0x2000162c
 8008df0:	20001158 	.word	0x20001158
 8008df4:	20001638 	.word	0x20001638
 8008df8:	20001648 	.word	0x20001648
 8008dfc:	20001634 	.word	0x20001634
 8008e00:	2000115c 	.word	0x2000115c
 8008e04:	e000ed04 	.word	0xe000ed04

08008e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d01a      	beq.n	8008e50 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e1a:	4b15      	ldr	r3, [pc, #84]	@ (8008e70 <vTaskDelay+0x68>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00d      	beq.n	8008e3e <vTaskDelay+0x36>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e26:	b672      	cpsid	i
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	b662      	cpsie	i
 8008e36:	60bb      	str	r3, [r7, #8]
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	e7fd      	b.n	8008e3a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008e3e:	f000 f887 	bl	8008f50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e42:	2100      	movs	r1, #0
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fd0d 	bl	8009864 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e4a:	f000 f88f 	bl	8008f6c <xTaskResumeAll>
 8008e4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d107      	bne.n	8008e66 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008e56:	4b07      	ldr	r3, [pc, #28]	@ (8008e74 <vTaskDelay+0x6c>)
 8008e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e66:	bf00      	nop
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20001654 	.word	0x20001654
 8008e74:	e000ed04 	.word	0xe000ed04

08008e78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	@ 0x28
 8008e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e86:	463a      	mov	r2, r7
 8008e88:	1d39      	adds	r1, r7, #4
 8008e8a:	f107 0308 	add.w	r3, r7, #8
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff f80a 	bl	8007ea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	9202      	str	r2, [sp, #8]
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	460a      	mov	r2, r1
 8008ea6:	4924      	ldr	r1, [pc, #144]	@ (8008f38 <vTaskStartScheduler+0xc0>)
 8008ea8:	4824      	ldr	r0, [pc, #144]	@ (8008f3c <vTaskStartScheduler+0xc4>)
 8008eaa:	f7ff fdff 	bl	8008aac <xTaskCreateStatic>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	4a23      	ldr	r2, [pc, #140]	@ (8008f40 <vTaskStartScheduler+0xc8>)
 8008eb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008eb4:	4b22      	ldr	r3, [pc, #136]	@ (8008f40 <vTaskStartScheduler+0xc8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	e001      	b.n	8008ec6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d102      	bne.n	8008ed2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ecc:	f000 fd1e 	bl	800990c <xTimerCreateTimerTask>
 8008ed0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d118      	bne.n	8008f0a <vTaskStartScheduler+0x92>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008edc:	b672      	cpsid	i
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	b662      	cpsie	i
 8008eec:	613b      	str	r3, [r7, #16]
}
 8008eee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ef0:	4b14      	ldr	r3, [pc, #80]	@ (8008f44 <vTaskStartScheduler+0xcc>)
 8008ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ef8:	4b13      	ldr	r3, [pc, #76]	@ (8008f48 <vTaskStartScheduler+0xd0>)
 8008efa:	2201      	movs	r2, #1
 8008efc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008efe:	4b13      	ldr	r3, [pc, #76]	@ (8008f4c <vTaskStartScheduler+0xd4>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f04:	f001 f8fc 	bl	800a100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f08:	e011      	b.n	8008f2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d10d      	bne.n	8008f2e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f16:	b672      	cpsid	i
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	b662      	cpsie	i
 8008f26:	60fb      	str	r3, [r7, #12]
}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	e7fd      	b.n	8008f2a <vTaskStartScheduler+0xb2>
}
 8008f2e:	bf00      	nop
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	0800ab9c 	.word	0x0800ab9c
 8008f3c:	08009591 	.word	0x08009591
 8008f40:	20001650 	.word	0x20001650
 8008f44:	2000164c 	.word	0x2000164c
 8008f48:	20001638 	.word	0x20001638
 8008f4c:	20001630 	.word	0x20001630

08008f50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f54:	4b04      	ldr	r3, [pc, #16]	@ (8008f68 <vTaskSuspendAll+0x18>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	4a03      	ldr	r2, [pc, #12]	@ (8008f68 <vTaskSuspendAll+0x18>)
 8008f5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008f5e:	bf00      	nop
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	20001654 	.word	0x20001654

08008f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f7a:	4b43      	ldr	r3, [pc, #268]	@ (8009088 <xTaskResumeAll+0x11c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10d      	bne.n	8008f9e <xTaskResumeAll+0x32>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f86:	b672      	cpsid	i
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	b662      	cpsie	i
 8008f96:	603b      	str	r3, [r7, #0]
}
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
 8008f9c:	e7fd      	b.n	8008f9a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f9e:	f001 f92d 	bl	800a1fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fa2:	4b39      	ldr	r3, [pc, #228]	@ (8009088 <xTaskResumeAll+0x11c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	4a37      	ldr	r2, [pc, #220]	@ (8009088 <xTaskResumeAll+0x11c>)
 8008faa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fac:	4b36      	ldr	r3, [pc, #216]	@ (8009088 <xTaskResumeAll+0x11c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d162      	bne.n	800907a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fb4:	4b35      	ldr	r3, [pc, #212]	@ (800908c <xTaskResumeAll+0x120>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d05e      	beq.n	800907a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fbc:	e02f      	b.n	800901e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fbe:	4b34      	ldr	r3, [pc, #208]	@ (8009090 <xTaskResumeAll+0x124>)
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3318      	adds	r3, #24
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff f82a 	bl	8008024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff f825 	bl	8008024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fde:	4b2d      	ldr	r3, [pc, #180]	@ (8009094 <xTaskResumeAll+0x128>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d903      	bls.n	8008fee <xTaskResumeAll+0x82>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fea:	4a2a      	ldr	r2, [pc, #168]	@ (8009094 <xTaskResumeAll+0x128>)
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4a27      	ldr	r2, [pc, #156]	@ (8009098 <xTaskResumeAll+0x12c>)
 8008ffc:	441a      	add	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3304      	adds	r3, #4
 8009002:	4619      	mov	r1, r3
 8009004:	4610      	mov	r0, r2
 8009006:	f7fe ffb0 	bl	8007f6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800900e:	4b23      	ldr	r3, [pc, #140]	@ (800909c <xTaskResumeAll+0x130>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009014:	429a      	cmp	r2, r3
 8009016:	d302      	bcc.n	800901e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009018:	4b21      	ldr	r3, [pc, #132]	@ (80090a0 <xTaskResumeAll+0x134>)
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800901e:	4b1c      	ldr	r3, [pc, #112]	@ (8009090 <xTaskResumeAll+0x124>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1cb      	bne.n	8008fbe <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800902c:	f000 fb68 	bl	8009700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009030:	4b1c      	ldr	r3, [pc, #112]	@ (80090a4 <xTaskResumeAll+0x138>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d010      	beq.n	800905e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800903c:	f000 f846 	bl	80090cc <xTaskIncrementTick>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009046:	4b16      	ldr	r3, [pc, #88]	@ (80090a0 <xTaskResumeAll+0x134>)
 8009048:	2201      	movs	r2, #1
 800904a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3b01      	subs	r3, #1
 8009050:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1f1      	bne.n	800903c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009058:	4b12      	ldr	r3, [pc, #72]	@ (80090a4 <xTaskResumeAll+0x138>)
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800905e:	4b10      	ldr	r3, [pc, #64]	@ (80090a0 <xTaskResumeAll+0x134>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009066:	2301      	movs	r3, #1
 8009068:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800906a:	4b0f      	ldr	r3, [pc, #60]	@ (80090a8 <xTaskResumeAll+0x13c>)
 800906c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800907a:	f001 f8f5 	bl	800a268 <vPortExitCritical>

	return xAlreadyYielded;
 800907e:	68bb      	ldr	r3, [r7, #8]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	20001654 	.word	0x20001654
 800908c:	2000162c 	.word	0x2000162c
 8009090:	200015ec 	.word	0x200015ec
 8009094:	20001634 	.word	0x20001634
 8009098:	2000115c 	.word	0x2000115c
 800909c:	20001158 	.word	0x20001158
 80090a0:	20001640 	.word	0x20001640
 80090a4:	2000163c 	.word	0x2000163c
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090b2:	4b05      	ldr	r3, [pc, #20]	@ (80090c8 <xTaskGetTickCount+0x1c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090b8:	687b      	ldr	r3, [r7, #4]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	20001630 	.word	0x20001630

080090cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090d2:	2300      	movs	r3, #0
 80090d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090d6:	4b50      	ldr	r3, [pc, #320]	@ (8009218 <xTaskIncrementTick+0x14c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f040 808c 	bne.w	80091f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090e0:	4b4e      	ldr	r3, [pc, #312]	@ (800921c <xTaskIncrementTick+0x150>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3301      	adds	r3, #1
 80090e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090e8:	4a4c      	ldr	r2, [pc, #304]	@ (800921c <xTaskIncrementTick+0x150>)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d123      	bne.n	800913c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80090f4:	4b4a      	ldr	r3, [pc, #296]	@ (8009220 <xTaskIncrementTick+0x154>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00d      	beq.n	800911a <xTaskIncrementTick+0x4e>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009102:	b672      	cpsid	i
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	b662      	cpsie	i
 8009112:	603b      	str	r3, [r7, #0]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <xTaskIncrementTick+0x4a>
 800911a:	4b41      	ldr	r3, [pc, #260]	@ (8009220 <xTaskIncrementTick+0x154>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	4b40      	ldr	r3, [pc, #256]	@ (8009224 <xTaskIncrementTick+0x158>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a3e      	ldr	r2, [pc, #248]	@ (8009220 <xTaskIncrementTick+0x154>)
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	4a3e      	ldr	r2, [pc, #248]	@ (8009224 <xTaskIncrementTick+0x158>)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	4b3e      	ldr	r3, [pc, #248]	@ (8009228 <xTaskIncrementTick+0x15c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	4a3c      	ldr	r2, [pc, #240]	@ (8009228 <xTaskIncrementTick+0x15c>)
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	f000 fae2 	bl	8009700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800913c:	4b3b      	ldr	r3, [pc, #236]	@ (800922c <xTaskIncrementTick+0x160>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	429a      	cmp	r2, r3
 8009144:	d349      	bcc.n	80091da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009146:	4b36      	ldr	r3, [pc, #216]	@ (8009220 <xTaskIncrementTick+0x154>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d104      	bne.n	800915a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009150:	4b36      	ldr	r3, [pc, #216]	@ (800922c <xTaskIncrementTick+0x160>)
 8009152:	f04f 32ff 	mov.w	r2, #4294967295
 8009156:	601a      	str	r2, [r3, #0]
					break;
 8009158:	e03f      	b.n	80091da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800915a:	4b31      	ldr	r3, [pc, #196]	@ (8009220 <xTaskIncrementTick+0x154>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	429a      	cmp	r2, r3
 8009170:	d203      	bcs.n	800917a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009172:	4a2e      	ldr	r2, [pc, #184]	@ (800922c <xTaskIncrementTick+0x160>)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009178:	e02f      	b.n	80091da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	3304      	adds	r3, #4
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe ff50 	bl	8008024 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	3318      	adds	r3, #24
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe ff47 	bl	8008024 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919a:	4b25      	ldr	r3, [pc, #148]	@ (8009230 <xTaskIncrementTick+0x164>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d903      	bls.n	80091aa <xTaskIncrementTick+0xde>
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a6:	4a22      	ldr	r2, [pc, #136]	@ (8009230 <xTaskIncrementTick+0x164>)
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009234 <xTaskIncrementTick+0x168>)
 80091b8:	441a      	add	r2, r3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	3304      	adds	r3, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f7fe fed2 	bl	8007f6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009238 <xTaskIncrementTick+0x16c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d3b8      	bcc.n	8009146 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80091d4:	2301      	movs	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091d8:	e7b5      	b.n	8009146 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091da:	4b17      	ldr	r3, [pc, #92]	@ (8009238 <xTaskIncrementTick+0x16c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e0:	4914      	ldr	r1, [pc, #80]	@ (8009234 <xTaskIncrementTick+0x168>)
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	440b      	add	r3, r1
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d907      	bls.n	8009202 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80091f2:	2301      	movs	r3, #1
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	e004      	b.n	8009202 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80091f8:	4b10      	ldr	r3, [pc, #64]	@ (800923c <xTaskIncrementTick+0x170>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	4a0f      	ldr	r2, [pc, #60]	@ (800923c <xTaskIncrementTick+0x170>)
 8009200:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009202:	4b0f      	ldr	r3, [pc, #60]	@ (8009240 <xTaskIncrementTick+0x174>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800920a:	2301      	movs	r3, #1
 800920c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800920e:	697b      	ldr	r3, [r7, #20]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20001654 	.word	0x20001654
 800921c:	20001630 	.word	0x20001630
 8009220:	200015e4 	.word	0x200015e4
 8009224:	200015e8 	.word	0x200015e8
 8009228:	20001644 	.word	0x20001644
 800922c:	2000164c 	.word	0x2000164c
 8009230:	20001634 	.word	0x20001634
 8009234:	2000115c 	.word	0x2000115c
 8009238:	20001158 	.word	0x20001158
 800923c:	2000163c 	.word	0x2000163c
 8009240:	20001640 	.word	0x20001640

08009244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800924a:	4b29      	ldr	r3, [pc, #164]	@ (80092f0 <vTaskSwitchContext+0xac>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009252:	4b28      	ldr	r3, [pc, #160]	@ (80092f4 <vTaskSwitchContext+0xb0>)
 8009254:	2201      	movs	r2, #1
 8009256:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009258:	e044      	b.n	80092e4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800925a:	4b26      	ldr	r3, [pc, #152]	@ (80092f4 <vTaskSwitchContext+0xb0>)
 800925c:	2200      	movs	r2, #0
 800925e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009260:	4b25      	ldr	r3, [pc, #148]	@ (80092f8 <vTaskSwitchContext+0xb4>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	e013      	b.n	8009290 <vTaskSwitchContext+0x4c>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10d      	bne.n	800928a <vTaskSwitchContext+0x46>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009272:	b672      	cpsid	i
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	b662      	cpsie	i
 8009282:	607b      	str	r3, [r7, #4]
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	e7fd      	b.n	8009286 <vTaskSwitchContext+0x42>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3b01      	subs	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	491a      	ldr	r1, [pc, #104]	@ (80092fc <vTaskSwitchContext+0xb8>)
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	4613      	mov	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	440b      	add	r3, r1
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0e1      	beq.n	8009268 <vTaskSwitchContext+0x24>
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4613      	mov	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4a13      	ldr	r2, [pc, #76]	@ (80092fc <vTaskSwitchContext+0xb8>)
 80092b0:	4413      	add	r3, r2
 80092b2:	60bb      	str	r3, [r7, #8]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	605a      	str	r2, [r3, #4]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	3308      	adds	r3, #8
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d104      	bne.n	80092d4 <vTaskSwitchContext+0x90>
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	605a      	str	r2, [r3, #4]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	4a09      	ldr	r2, [pc, #36]	@ (8009300 <vTaskSwitchContext+0xbc>)
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	4a06      	ldr	r2, [pc, #24]	@ (80092f8 <vTaskSwitchContext+0xb4>)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6013      	str	r3, [r2, #0]
}
 80092e4:	bf00      	nop
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	20001654 	.word	0x20001654
 80092f4:	20001640 	.word	0x20001640
 80092f8:	20001634 	.word	0x20001634
 80092fc:	2000115c 	.word	0x2000115c
 8009300:	20001158 	.word	0x20001158

08009304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10d      	bne.n	8009330 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	b672      	cpsid	i
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	b662      	cpsie	i
 8009328:	60fb      	str	r3, [r7, #12]
}
 800932a:	bf00      	nop
 800932c:	bf00      	nop
 800932e:	e7fd      	b.n	800932c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009330:	4b07      	ldr	r3, [pc, #28]	@ (8009350 <vTaskPlaceOnEventList+0x4c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3318      	adds	r3, #24
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7fe fe3a 	bl	8007fb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800933e:	2101      	movs	r1, #1
 8009340:	6838      	ldr	r0, [r7, #0]
 8009342:	f000 fa8f 	bl	8009864 <prvAddCurrentTaskToDelayedList>
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20001158 	.word	0x20001158

08009354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10d      	bne.n	8009382 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936a:	b672      	cpsid	i
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	b662      	cpsie	i
 800937a:	617b      	str	r3, [r7, #20]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009382:	4b0a      	ldr	r3, [pc, #40]	@ (80093ac <vTaskPlaceOnEventListRestricted+0x58>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3318      	adds	r3, #24
 8009388:	4619      	mov	r1, r3
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7fe fded 	bl	8007f6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009396:	f04f 33ff 	mov.w	r3, #4294967295
 800939a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	68b8      	ldr	r0, [r7, #8]
 80093a0:	f000 fa60 	bl	8009864 <prvAddCurrentTaskToDelayedList>
	}
 80093a4:	bf00      	nop
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	20001158 	.word	0x20001158

080093b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10d      	bne.n	80093e2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80093c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ca:	b672      	cpsid	i
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	b662      	cpsie	i
 80093da:	60fb      	str	r3, [r7, #12]
}
 80093dc:	bf00      	nop
 80093de:	bf00      	nop
 80093e0:	e7fd      	b.n	80093de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3318      	adds	r3, #24
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fe1c 	bl	8008024 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009464 <xTaskRemoveFromEventList+0xb4>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d11d      	bne.n	8009430 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fe13 	bl	8008024 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009402:	4b19      	ldr	r3, [pc, #100]	@ (8009468 <xTaskRemoveFromEventList+0xb8>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d903      	bls.n	8009412 <xTaskRemoveFromEventList+0x62>
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940e:	4a16      	ldr	r2, [pc, #88]	@ (8009468 <xTaskRemoveFromEventList+0xb8>)
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4a13      	ldr	r2, [pc, #76]	@ (800946c <xTaskRemoveFromEventList+0xbc>)
 8009420:	441a      	add	r2, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	3304      	adds	r3, #4
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fe fd9e 	bl	8007f6a <vListInsertEnd>
 800942e:	e005      	b.n	800943c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	3318      	adds	r3, #24
 8009434:	4619      	mov	r1, r3
 8009436:	480e      	ldr	r0, [pc, #56]	@ (8009470 <xTaskRemoveFromEventList+0xc0>)
 8009438:	f7fe fd97 	bl	8007f6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009440:	4b0c      	ldr	r3, [pc, #48]	@ (8009474 <xTaskRemoveFromEventList+0xc4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009446:	429a      	cmp	r2, r3
 8009448:	d905      	bls.n	8009456 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800944a:	2301      	movs	r3, #1
 800944c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800944e:	4b0a      	ldr	r3, [pc, #40]	@ (8009478 <xTaskRemoveFromEventList+0xc8>)
 8009450:	2201      	movs	r2, #1
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	e001      	b.n	800945a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800945a:	697b      	ldr	r3, [r7, #20]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20001654 	.word	0x20001654
 8009468:	20001634 	.word	0x20001634
 800946c:	2000115c 	.word	0x2000115c
 8009470:	200015ec 	.word	0x200015ec
 8009474:	20001158 	.word	0x20001158
 8009478:	20001640 	.word	0x20001640

0800947c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009484:	4b06      	ldr	r3, [pc, #24]	@ (80094a0 <vTaskInternalSetTimeOutState+0x24>)
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800948c:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <vTaskInternalSetTimeOutState+0x28>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	605a      	str	r2, [r3, #4]
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20001644 	.word	0x20001644
 80094a4:	20001630 	.word	0x20001630

080094a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10d      	bne.n	80094d4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	b672      	cpsid	i
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	b662      	cpsie	i
 80094cc:	613b      	str	r3, [r7, #16]
}
 80094ce:	bf00      	nop
 80094d0:	bf00      	nop
 80094d2:	e7fd      	b.n	80094d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10d      	bne.n	80094f6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094de:	b672      	cpsid	i
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	b662      	cpsie	i
 80094ee:	60fb      	str	r3, [r7, #12]
}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	e7fd      	b.n	80094f2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80094f6:	f000 fe81 	bl	800a1fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009570 <xTaskCheckForTimeOut+0xc8>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009512:	d102      	bne.n	800951a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009514:	2300      	movs	r3, #0
 8009516:	61fb      	str	r3, [r7, #28]
 8009518:	e023      	b.n	8009562 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	4b15      	ldr	r3, [pc, #84]	@ (8009574 <xTaskCheckForTimeOut+0xcc>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	429a      	cmp	r2, r3
 8009524:	d007      	beq.n	8009536 <xTaskCheckForTimeOut+0x8e>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	69ba      	ldr	r2, [r7, #24]
 800952c:	429a      	cmp	r2, r3
 800952e:	d302      	bcc.n	8009536 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009530:	2301      	movs	r3, #1
 8009532:	61fb      	str	r3, [r7, #28]
 8009534:	e015      	b.n	8009562 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	429a      	cmp	r2, r3
 800953e:	d20b      	bcs.n	8009558 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	1ad2      	subs	r2, r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff ff95 	bl	800947c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009552:	2300      	movs	r3, #0
 8009554:	61fb      	str	r3, [r7, #28]
 8009556:	e004      	b.n	8009562 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800955e:	2301      	movs	r3, #1
 8009560:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009562:	f000 fe81 	bl	800a268 <vPortExitCritical>

	return xReturn;
 8009566:	69fb      	ldr	r3, [r7, #28]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3720      	adds	r7, #32
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20001630 	.word	0x20001630
 8009574:	20001644 	.word	0x20001644

08009578 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800957c:	4b03      	ldr	r3, [pc, #12]	@ (800958c <vTaskMissedYield+0x14>)
 800957e:	2201      	movs	r2, #1
 8009580:	601a      	str	r2, [r3, #0]
}
 8009582:	bf00      	nop
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	20001640 	.word	0x20001640

08009590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009598:	f000 f852 	bl	8009640 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800959c:	4b06      	ldr	r3, [pc, #24]	@ (80095b8 <prvIdleTask+0x28>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d9f9      	bls.n	8009598 <prvIdleTask+0x8>
			{
				taskYIELD();
 80095a4:	4b05      	ldr	r3, [pc, #20]	@ (80095bc <prvIdleTask+0x2c>)
 80095a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095b4:	e7f0      	b.n	8009598 <prvIdleTask+0x8>
 80095b6:	bf00      	nop
 80095b8:	2000115c 	.word	0x2000115c
 80095bc:	e000ed04 	.word	0xe000ed04

080095c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095c6:	2300      	movs	r3, #0
 80095c8:	607b      	str	r3, [r7, #4]
 80095ca:	e00c      	b.n	80095e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4a12      	ldr	r2, [pc, #72]	@ (8009620 <prvInitialiseTaskLists+0x60>)
 80095d8:	4413      	add	r3, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fc98 	bl	8007f10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3301      	adds	r3, #1
 80095e4:	607b      	str	r3, [r7, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b37      	cmp	r3, #55	@ 0x37
 80095ea:	d9ef      	bls.n	80095cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095ec:	480d      	ldr	r0, [pc, #52]	@ (8009624 <prvInitialiseTaskLists+0x64>)
 80095ee:	f7fe fc8f 	bl	8007f10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095f2:	480d      	ldr	r0, [pc, #52]	@ (8009628 <prvInitialiseTaskLists+0x68>)
 80095f4:	f7fe fc8c 	bl	8007f10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095f8:	480c      	ldr	r0, [pc, #48]	@ (800962c <prvInitialiseTaskLists+0x6c>)
 80095fa:	f7fe fc89 	bl	8007f10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095fe:	480c      	ldr	r0, [pc, #48]	@ (8009630 <prvInitialiseTaskLists+0x70>)
 8009600:	f7fe fc86 	bl	8007f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009604:	480b      	ldr	r0, [pc, #44]	@ (8009634 <prvInitialiseTaskLists+0x74>)
 8009606:	f7fe fc83 	bl	8007f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800960a:	4b0b      	ldr	r3, [pc, #44]	@ (8009638 <prvInitialiseTaskLists+0x78>)
 800960c:	4a05      	ldr	r2, [pc, #20]	@ (8009624 <prvInitialiseTaskLists+0x64>)
 800960e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009610:	4b0a      	ldr	r3, [pc, #40]	@ (800963c <prvInitialiseTaskLists+0x7c>)
 8009612:	4a05      	ldr	r2, [pc, #20]	@ (8009628 <prvInitialiseTaskLists+0x68>)
 8009614:	601a      	str	r2, [r3, #0]
}
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	2000115c 	.word	0x2000115c
 8009624:	200015bc 	.word	0x200015bc
 8009628:	200015d0 	.word	0x200015d0
 800962c:	200015ec 	.word	0x200015ec
 8009630:	20001600 	.word	0x20001600
 8009634:	20001618 	.word	0x20001618
 8009638:	200015e4 	.word	0x200015e4
 800963c:	200015e8 	.word	0x200015e8

08009640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009646:	e019      	b.n	800967c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009648:	f000 fdd8 	bl	800a1fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800964c:	4b10      	ldr	r3, [pc, #64]	@ (8009690 <prvCheckTasksWaitingTermination+0x50>)
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fce3 	bl	8008024 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800965e:	4b0d      	ldr	r3, [pc, #52]	@ (8009694 <prvCheckTasksWaitingTermination+0x54>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3b01      	subs	r3, #1
 8009664:	4a0b      	ldr	r2, [pc, #44]	@ (8009694 <prvCheckTasksWaitingTermination+0x54>)
 8009666:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009668:	4b0b      	ldr	r3, [pc, #44]	@ (8009698 <prvCheckTasksWaitingTermination+0x58>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3b01      	subs	r3, #1
 800966e:	4a0a      	ldr	r2, [pc, #40]	@ (8009698 <prvCheckTasksWaitingTermination+0x58>)
 8009670:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009672:	f000 fdf9 	bl	800a268 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f810 	bl	800969c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800967c:	4b06      	ldr	r3, [pc, #24]	@ (8009698 <prvCheckTasksWaitingTermination+0x58>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e1      	bne.n	8009648 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20001600 	.word	0x20001600
 8009694:	2000162c 	.word	0x2000162c
 8009698:	20001614 	.word	0x20001614

0800969c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d108      	bne.n	80096c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 ff9e 	bl	800a5f4 <vPortFree>
				vPortFree( pxTCB );
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 ff9b 	bl	800a5f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096be:	e01b      	b.n	80096f8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d103      	bne.n	80096d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 ff92 	bl	800a5f4 <vPortFree>
	}
 80096d0:	e012      	b.n	80096f8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d00d      	beq.n	80096f8 <prvDeleteTCB+0x5c>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e0:	b672      	cpsid	i
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	b662      	cpsie	i
 80096f0:	60fb      	str	r3, [r7, #12]
}
 80096f2:	bf00      	nop
 80096f4:	bf00      	nop
 80096f6:	e7fd      	b.n	80096f4 <prvDeleteTCB+0x58>
	}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009706:	4b0c      	ldr	r3, [pc, #48]	@ (8009738 <prvResetNextTaskUnblockTime+0x38>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d104      	bne.n	800971a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009710:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <prvResetNextTaskUnblockTime+0x3c>)
 8009712:	f04f 32ff 	mov.w	r2, #4294967295
 8009716:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009718:	e008      	b.n	800972c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971a:	4b07      	ldr	r3, [pc, #28]	@ (8009738 <prvResetNextTaskUnblockTime+0x38>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	4a04      	ldr	r2, [pc, #16]	@ (800973c <prvResetNextTaskUnblockTime+0x3c>)
 800972a:	6013      	str	r3, [r2, #0]
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	200015e4 	.word	0x200015e4
 800973c:	2000164c 	.word	0x2000164c

08009740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009746:	4b0b      	ldr	r3, [pc, #44]	@ (8009774 <xTaskGetSchedulerState+0x34>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d102      	bne.n	8009754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800974e:	2301      	movs	r3, #1
 8009750:	607b      	str	r3, [r7, #4]
 8009752:	e008      	b.n	8009766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009754:	4b08      	ldr	r3, [pc, #32]	@ (8009778 <xTaskGetSchedulerState+0x38>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800975c:	2302      	movs	r3, #2
 800975e:	607b      	str	r3, [r7, #4]
 8009760:	e001      	b.n	8009766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009762:	2300      	movs	r3, #0
 8009764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009766:	687b      	ldr	r3, [r7, #4]
	}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	20001638 	.word	0x20001638
 8009778:	20001654 	.word	0x20001654

0800977c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d05c      	beq.n	800984c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009792:	4b31      	ldr	r3, [pc, #196]	@ (8009858 <xTaskPriorityDisinherit+0xdc>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	429a      	cmp	r2, r3
 800979a:	d00d      	beq.n	80097b8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a0:	b672      	cpsid	i
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	b662      	cpsie	i
 80097b0:	60fb      	str	r3, [r7, #12]
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10d      	bne.n	80097dc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c4:	b672      	cpsid	i
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	b662      	cpsie	i
 80097d4:	60bb      	str	r3, [r7, #8]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e0:	1e5a      	subs	r2, r3, #1
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d02c      	beq.n	800984c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d128      	bne.n	800984c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fc10 	bl	8008024 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009810:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981c:	4b0f      	ldr	r3, [pc, #60]	@ (800985c <xTaskPriorityDisinherit+0xe0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d903      	bls.n	800982c <xTaskPriorityDisinherit+0xb0>
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009828:	4a0c      	ldr	r2, [pc, #48]	@ (800985c <xTaskPriorityDisinherit+0xe0>)
 800982a:	6013      	str	r3, [r2, #0]
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4a09      	ldr	r2, [pc, #36]	@ (8009860 <xTaskPriorityDisinherit+0xe4>)
 800983a:	441a      	add	r2, r3
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	3304      	adds	r3, #4
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	f7fe fb91 	bl	8007f6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009848:	2301      	movs	r3, #1
 800984a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800984c:	697b      	ldr	r3, [r7, #20]
	}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20001158 	.word	0x20001158
 800985c:	20001634 	.word	0x20001634
 8009860:	2000115c 	.word	0x2000115c

08009864 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800986e:	4b21      	ldr	r3, [pc, #132]	@ (80098f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009874:	4b20      	ldr	r3, [pc, #128]	@ (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3304      	adds	r3, #4
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fbd2 	bl	8008024 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009886:	d10a      	bne.n	800989e <prvAddCurrentTaskToDelayedList+0x3a>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d007      	beq.n	800989e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800988e:	4b1a      	ldr	r3, [pc, #104]	@ (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3304      	adds	r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	4819      	ldr	r0, [pc, #100]	@ (80098fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009898:	f7fe fb67 	bl	8007f6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800989c:	e026      	b.n	80098ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4413      	add	r3, r2
 80098a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098a6:	4b14      	ldr	r3, [pc, #80]	@ (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d209      	bcs.n	80098ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098b6:	4b12      	ldr	r3, [pc, #72]	@ (8009900 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b0f      	ldr	r3, [pc, #60]	@ (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3304      	adds	r3, #4
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f7fe fb75 	bl	8007fb2 <vListInsert>
}
 80098c8:	e010      	b.n	80098ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009904 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b0a      	ldr	r3, [pc, #40]	@ (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7fe fb6b 	bl	8007fb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009908 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d202      	bcs.n	80098ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098e6:	4a08      	ldr	r2, [pc, #32]	@ (8009908 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	6013      	str	r3, [r2, #0]
}
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20001630 	.word	0x20001630
 80098f8:	20001158 	.word	0x20001158
 80098fc:	20001618 	.word	0x20001618
 8009900:	200015e8 	.word	0x200015e8
 8009904:	200015e4 	.word	0x200015e4
 8009908:	2000164c 	.word	0x2000164c

0800990c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	@ 0x28
 8009910:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009916:	f000 fb21 	bl	8009f5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800991a:	4b1e      	ldr	r3, [pc, #120]	@ (8009994 <xTimerCreateTimerTask+0x88>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d021      	beq.n	8009966 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009926:	2300      	movs	r3, #0
 8009928:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800992a:	1d3a      	adds	r2, r7, #4
 800992c:	f107 0108 	add.w	r1, r7, #8
 8009930:	f107 030c 	add.w	r3, r7, #12
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fad1 	bl	8007edc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	9202      	str	r2, [sp, #8]
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	2302      	movs	r3, #2
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	460a      	mov	r2, r1
 800994c:	4912      	ldr	r1, [pc, #72]	@ (8009998 <xTimerCreateTimerTask+0x8c>)
 800994e:	4813      	ldr	r0, [pc, #76]	@ (800999c <xTimerCreateTimerTask+0x90>)
 8009950:	f7ff f8ac 	bl	8008aac <xTaskCreateStatic>
 8009954:	4603      	mov	r3, r0
 8009956:	4a12      	ldr	r2, [pc, #72]	@ (80099a0 <xTimerCreateTimerTask+0x94>)
 8009958:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800995a:	4b11      	ldr	r3, [pc, #68]	@ (80099a0 <xTimerCreateTimerTask+0x94>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009962:	2301      	movs	r3, #1
 8009964:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10d      	bne.n	8009988 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009970:	b672      	cpsid	i
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	b662      	cpsie	i
 8009980:	613b      	str	r3, [r7, #16]
}
 8009982:	bf00      	nop
 8009984:	bf00      	nop
 8009986:	e7fd      	b.n	8009984 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009988:	697b      	ldr	r3, [r7, #20]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20001688 	.word	0x20001688
 8009998:	0800aba4 	.word	0x0800aba4
 800999c:	08009ae5 	.word	0x08009ae5
 80099a0:	2000168c 	.word	0x2000168c

080099a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08a      	sub	sp, #40	@ 0x28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10d      	bne.n	80099d8 <xTimerGenericCommand+0x34>
	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c0:	b672      	cpsid	i
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	b662      	cpsie	i
 80099d0:	623b      	str	r3, [r7, #32]
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	e7fd      	b.n	80099d4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099d8:	4b19      	ldr	r3, [pc, #100]	@ (8009a40 <xTimerGenericCommand+0x9c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d02a      	beq.n	8009a36 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b05      	cmp	r3, #5
 80099f0:	dc18      	bgt.n	8009a24 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099f2:	f7ff fea5 	bl	8009740 <xTaskGetSchedulerState>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d109      	bne.n	8009a10 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099fc:	4b10      	ldr	r3, [pc, #64]	@ (8009a40 <xTimerGenericCommand+0x9c>)
 80099fe:	6818      	ldr	r0, [r3, #0]
 8009a00:	f107 0110 	add.w	r1, r7, #16
 8009a04:	2300      	movs	r3, #0
 8009a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a08:	f7fe fc4c 	bl	80082a4 <xQueueGenericSend>
 8009a0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009a0e:	e012      	b.n	8009a36 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a10:	4b0b      	ldr	r3, [pc, #44]	@ (8009a40 <xTimerGenericCommand+0x9c>)
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	f107 0110 	add.w	r1, r7, #16
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f7fe fc42 	bl	80082a4 <xQueueGenericSend>
 8009a20:	6278      	str	r0, [r7, #36]	@ 0x24
 8009a22:	e008      	b.n	8009a36 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <xTimerGenericCommand+0x9c>)
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	f107 0110 	add.w	r1, r7, #16
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	f7fe fd42 	bl	80084b8 <xQueueGenericSendFromISR>
 8009a34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3728      	adds	r7, #40	@ 0x28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20001688 	.word	0x20001688

08009a44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a4e:	4b24      	ldr	r3, [pc, #144]	@ (8009ae0 <prvProcessExpiredTimer+0x9c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fe fae1 	bl	8008024 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d025      	beq.n	8009abc <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	699a      	ldr	r2, [r3, #24]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	18d1      	adds	r1, r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	6978      	ldr	r0, [r7, #20]
 8009a7e:	f000 f8d7 	bl	8009c30 <prvInsertTimerInActiveList>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d022      	beq.n	8009ace <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a88:	2300      	movs	r3, #0
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	2100      	movs	r1, #0
 8009a92:	6978      	ldr	r0, [r7, #20]
 8009a94:	f7ff ff86 	bl	80099a4 <xTimerGenericCommand>
 8009a98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d116      	bne.n	8009ace <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa4:	b672      	cpsid	i
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	b662      	cpsie	i
 8009ab4:	60fb      	str	r3, [r7, #12]
}
 8009ab6:	bf00      	nop
 8009ab8:	bf00      	nop
 8009aba:	e7fd      	b.n	8009ab8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ac2:	f023 0301 	bic.w	r3, r3, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	6978      	ldr	r0, [r7, #20]
 8009ad4:	4798      	blx	r3
}
 8009ad6:	bf00      	nop
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	20001680 	.word	0x20001680

08009ae4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009aec:	f107 0308 	add.w	r3, r7, #8
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f859 	bl	8009ba8 <prvGetNextExpireTime>
 8009af6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4619      	mov	r1, r3
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 f805 	bl	8009b0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b02:	f000 f8d7 	bl	8009cb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b06:	bf00      	nop
 8009b08:	e7f0      	b.n	8009aec <prvTimerTask+0x8>
	...

08009b0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b16:	f7ff fa1b 	bl	8008f50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b1a:	f107 0308 	add.w	r3, r7, #8
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f866 	bl	8009bf0 <prvSampleTimeNow>
 8009b24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d130      	bne.n	8009b8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10a      	bne.n	8009b48 <prvProcessTimerOrBlockTask+0x3c>
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d806      	bhi.n	8009b48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b3a:	f7ff fa17 	bl	8008f6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b3e:	68f9      	ldr	r1, [r7, #12]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff ff7f 	bl	8009a44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b46:	e024      	b.n	8009b92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d008      	beq.n	8009b60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b4e:	4b13      	ldr	r3, [pc, #76]	@ (8009b9c <prvProcessTimerOrBlockTask+0x90>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d101      	bne.n	8009b5c <prvProcessTimerOrBlockTask+0x50>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e000      	b.n	8009b5e <prvProcessTimerOrBlockTask+0x52>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b60:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba0 <prvProcessTimerOrBlockTask+0x94>)
 8009b62:	6818      	ldr	r0, [r3, #0]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	f7fe ff69 	bl	8008a44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b72:	f7ff f9fb 	bl	8008f6c <xTaskResumeAll>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b7c:	4b09      	ldr	r3, [pc, #36]	@ (8009ba4 <prvProcessTimerOrBlockTask+0x98>)
 8009b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	f3bf 8f6f 	isb	sy
}
 8009b8c:	e001      	b.n	8009b92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b8e:	f7ff f9ed 	bl	8008f6c <xTaskResumeAll>
}
 8009b92:	bf00      	nop
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20001684 	.word	0x20001684
 8009ba0:	20001688 	.word	0x20001688
 8009ba4:	e000ed04 	.word	0xe000ed04

08009ba8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8009bec <prvGetNextExpireTime+0x44>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <prvGetNextExpireTime+0x16>
 8009bba:	2201      	movs	r2, #1
 8009bbc:	e000      	b.n	8009bc0 <prvGetNextExpireTime+0x18>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d105      	bne.n	8009bd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bcc:	4b07      	ldr	r3, [pc, #28]	@ (8009bec <prvGetNextExpireTime+0x44>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60fb      	str	r3, [r7, #12]
 8009bd6:	e001      	b.n	8009bdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	20001680 	.word	0x20001680

08009bf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009bf8:	f7ff fa58 	bl	80090ac <xTaskGetTickCount>
 8009bfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8009c2c <prvSampleTimeNow+0x3c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d205      	bcs.n	8009c14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c08:	f000 f940 	bl	8009e8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	e002      	b.n	8009c1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c1a:	4a04      	ldr	r2, [pc, #16]	@ (8009c2c <prvSampleTimeNow+0x3c>)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c20:	68fb      	ldr	r3, [r7, #12]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	20001690 	.word	0x20001690

08009c30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d812      	bhi.n	8009c7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	1ad2      	subs	r2, r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d302      	bcc.n	8009c6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c64:	2301      	movs	r3, #1
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	e01b      	b.n	8009ca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c6a:	4b10      	ldr	r3, [pc, #64]	@ (8009cac <prvInsertTimerInActiveList+0x7c>)
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3304      	adds	r3, #4
 8009c72:	4619      	mov	r1, r3
 8009c74:	4610      	mov	r0, r2
 8009c76:	f7fe f99c 	bl	8007fb2 <vListInsert>
 8009c7a:	e012      	b.n	8009ca2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d206      	bcs.n	8009c92 <prvInsertTimerInActiveList+0x62>
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d302      	bcc.n	8009c92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	e007      	b.n	8009ca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c92:	4b07      	ldr	r3, [pc, #28]	@ (8009cb0 <prvInsertTimerInActiveList+0x80>)
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	f7fe f988 	bl	8007fb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ca2:	697b      	ldr	r3, [r7, #20]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20001684 	.word	0x20001684
 8009cb0:	20001680 	.word	0x20001680

08009cb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08e      	sub	sp, #56	@ 0x38
 8009cb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cba:	e0d4      	b.n	8009e66 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da1b      	bge.n	8009cfa <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cc2:	1d3b      	adds	r3, r7, #4
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10d      	bne.n	8009cea <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd2:	b672      	cpsid	i
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	b662      	cpsie	i
 8009ce2:	61fb      	str	r3, [r7, #28]
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop
 8009ce8:	e7fd      	b.n	8009ce6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf0:	6850      	ldr	r0, [r2, #4]
 8009cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf4:	6892      	ldr	r2, [r2, #8]
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f2c0 80b2 	blt.w	8009e66 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d004      	beq.n	8009d18 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d10:	3304      	adds	r3, #4
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe f986 	bl	8008024 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d18:	463b      	mov	r3, r7
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff ff68 	bl	8009bf0 <prvSampleTimeNow>
 8009d20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b09      	cmp	r3, #9
 8009d26:	f200 809b 	bhi.w	8009e60 <prvProcessReceivedCommands+0x1ac>
 8009d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <prvProcessReceivedCommands+0x7c>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d59 	.word	0x08009d59
 8009d34:	08009d59 	.word	0x08009d59
 8009d38:	08009d59 	.word	0x08009d59
 8009d3c:	08009dd3 	.word	0x08009dd3
 8009d40:	08009de7 	.word	0x08009de7
 8009d44:	08009e37 	.word	0x08009e37
 8009d48:	08009d59 	.word	0x08009d59
 8009d4c:	08009d59 	.word	0x08009d59
 8009d50:	08009dd3 	.word	0x08009dd3
 8009d54:	08009de7 	.word	0x08009de7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d5e:	f043 0301 	orr.w	r3, r3, #1
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	18d1      	adds	r1, r2, r3
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d78:	f7ff ff5a 	bl	8009c30 <prvInsertTimerInActiveList>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d070      	beq.n	8009e64 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d065      	beq.n	8009e64 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	441a      	add	r2, r3
 8009da0:	2300      	movs	r3, #0
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2300      	movs	r3, #0
 8009da6:	2100      	movs	r1, #0
 8009da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009daa:	f7ff fdfb 	bl	80099a4 <xTimerGenericCommand>
 8009dae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d156      	bne.n	8009e64 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dba:	b672      	cpsid	i
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	b662      	cpsie	i
 8009dca:	61bb      	str	r3, [r7, #24]
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	e7fd      	b.n	8009dce <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dd8:	f023 0301 	bic.w	r3, r3, #1
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009de4:	e03f      	b.n	8009e66 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dec:	f043 0301 	orr.w	r3, r3, #1
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10d      	bne.n	8009e22 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0a:	b672      	cpsid	i
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	b662      	cpsie	i
 8009e1a:	617b      	str	r3, [r7, #20]
}
 8009e1c:	bf00      	nop
 8009e1e:	bf00      	nop
 8009e20:	e7fd      	b.n	8009e1e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e24:	699a      	ldr	r2, [r3, #24]
 8009e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e28:	18d1      	adds	r1, r2, r3
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e30:	f7ff fefe 	bl	8009c30 <prvInsertTimerInActiveList>
					break;
 8009e34:	e017      	b.n	8009e66 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d103      	bne.n	8009e4c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009e44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e46:	f000 fbd5 	bl	800a5f4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e4a:	e00c      	b.n	8009e66 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e52:	f023 0301 	bic.w	r3, r3, #1
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e5e:	e002      	b.n	8009e66 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009e60:	bf00      	nop
 8009e62:	e000      	b.n	8009e66 <prvProcessReceivedCommands+0x1b2>
					break;
 8009e64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e66:	4b08      	ldr	r3, [pc, #32]	@ (8009e88 <prvProcessReceivedCommands+0x1d4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	1d39      	adds	r1, r7, #4
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe fbc6 	bl	8008600 <xQueueReceive>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f47f af20 	bne.w	8009cbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	3730      	adds	r7, #48	@ 0x30
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20001688 	.word	0x20001688

08009e8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e92:	e04b      	b.n	8009f2c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e94:	4b2f      	ldr	r3, [pc, #188]	@ (8009f54 <prvSwitchTimerLists+0xc8>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8009f54 <prvSwitchTimerLists+0xc8>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe f8b9 	bl	8008024 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d031      	beq.n	8009f2c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	4413      	add	r3, r2
 8009ed0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d90e      	bls.n	8009ef8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8009f54 <prvSwitchTimerLists+0xc8>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3304      	adds	r3, #4
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	f7fe f85e 	bl	8007fb2 <vListInsert>
 8009ef6:	e019      	b.n	8009f2c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ef8:	2300      	movs	r3, #0
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	2300      	movs	r3, #0
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	2100      	movs	r1, #0
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff fd4e 	bl	80099a4 <xTimerGenericCommand>
 8009f08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10d      	bne.n	8009f2c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	b672      	cpsid	i
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	b662      	cpsie	i
 8009f24:	603b      	str	r3, [r7, #0]
}
 8009f26:	bf00      	nop
 8009f28:	bf00      	nop
 8009f2a:	e7fd      	b.n	8009f28 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f2c:	4b09      	ldr	r3, [pc, #36]	@ (8009f54 <prvSwitchTimerLists+0xc8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1ae      	bne.n	8009e94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f36:	4b07      	ldr	r3, [pc, #28]	@ (8009f54 <prvSwitchTimerLists+0xc8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f3c:	4b06      	ldr	r3, [pc, #24]	@ (8009f58 <prvSwitchTimerLists+0xcc>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a04      	ldr	r2, [pc, #16]	@ (8009f54 <prvSwitchTimerLists+0xc8>)
 8009f42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f44:	4a04      	ldr	r2, [pc, #16]	@ (8009f58 <prvSwitchTimerLists+0xcc>)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	6013      	str	r3, [r2, #0]
}
 8009f4a:	bf00      	nop
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20001680 	.word	0x20001680
 8009f58:	20001684 	.word	0x20001684

08009f5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f62:	f000 f94b 	bl	800a1fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f66:	4b15      	ldr	r3, [pc, #84]	@ (8009fbc <prvCheckForValidListAndQueue+0x60>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d120      	bne.n	8009fb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f6e:	4814      	ldr	r0, [pc, #80]	@ (8009fc0 <prvCheckForValidListAndQueue+0x64>)
 8009f70:	f7fd ffce 	bl	8007f10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f74:	4813      	ldr	r0, [pc, #76]	@ (8009fc4 <prvCheckForValidListAndQueue+0x68>)
 8009f76:	f7fd ffcb 	bl	8007f10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f7a:	4b13      	ldr	r3, [pc, #76]	@ (8009fc8 <prvCheckForValidListAndQueue+0x6c>)
 8009f7c:	4a10      	ldr	r2, [pc, #64]	@ (8009fc0 <prvCheckForValidListAndQueue+0x64>)
 8009f7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f80:	4b12      	ldr	r3, [pc, #72]	@ (8009fcc <prvCheckForValidListAndQueue+0x70>)
 8009f82:	4a10      	ldr	r2, [pc, #64]	@ (8009fc4 <prvCheckForValidListAndQueue+0x68>)
 8009f84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f86:	2300      	movs	r3, #0
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	4b11      	ldr	r3, [pc, #68]	@ (8009fd0 <prvCheckForValidListAndQueue+0x74>)
 8009f8c:	4a11      	ldr	r2, [pc, #68]	@ (8009fd4 <prvCheckForValidListAndQueue+0x78>)
 8009f8e:	2110      	movs	r1, #16
 8009f90:	200a      	movs	r0, #10
 8009f92:	f7fe f8dd 	bl	8008150 <xQueueGenericCreateStatic>
 8009f96:	4603      	mov	r3, r0
 8009f98:	4a08      	ldr	r2, [pc, #32]	@ (8009fbc <prvCheckForValidListAndQueue+0x60>)
 8009f9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f9c:	4b07      	ldr	r3, [pc, #28]	@ (8009fbc <prvCheckForValidListAndQueue+0x60>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d005      	beq.n	8009fb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fa4:	4b05      	ldr	r3, [pc, #20]	@ (8009fbc <prvCheckForValidListAndQueue+0x60>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	490b      	ldr	r1, [pc, #44]	@ (8009fd8 <prvCheckForValidListAndQueue+0x7c>)
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fd20 	bl	80089f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fb0:	f000 f95a 	bl	800a268 <vPortExitCritical>
}
 8009fb4:	bf00      	nop
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20001688 	.word	0x20001688
 8009fc0:	20001658 	.word	0x20001658
 8009fc4:	2000166c 	.word	0x2000166c
 8009fc8:	20001680 	.word	0x20001680
 8009fcc:	20001684 	.word	0x20001684
 8009fd0:	20001734 	.word	0x20001734
 8009fd4:	20001694 	.word	0x20001694
 8009fd8:	0800abac 	.word	0x0800abac

08009fdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3b04      	subs	r3, #4
 8009fec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3b04      	subs	r3, #4
 8009ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f023 0201 	bic.w	r2, r3, #1
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3b04      	subs	r3, #4
 800a00a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a00c:	4a0c      	ldr	r2, [pc, #48]	@ (800a040 <pxPortInitialiseStack+0x64>)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3b14      	subs	r3, #20
 800a016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3b04      	subs	r3, #4
 800a022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f06f 0202 	mvn.w	r2, #2
 800a02a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3b20      	subs	r3, #32
 800a030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a032:	68fb      	ldr	r3, [r7, #12]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	0800a045 	.word	0x0800a045

0800a044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a04e:	4b15      	ldr	r3, [pc, #84]	@ (800a0a4 <prvTaskExitError+0x60>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a056:	d00d      	beq.n	800a074 <prvTaskExitError+0x30>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05c:	b672      	cpsid	i
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	b662      	cpsie	i
 800a06c:	60fb      	str	r3, [r7, #12]
}
 800a06e:	bf00      	nop
 800a070:	bf00      	nop
 800a072:	e7fd      	b.n	800a070 <prvTaskExitError+0x2c>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a078:	b672      	cpsid	i
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	b662      	cpsie	i
 800a088:	60bb      	str	r3, [r7, #8]
}
 800a08a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a08c:	bf00      	nop
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0fc      	beq.n	800a08e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	2000000c 	.word	0x2000000c
	...

0800a0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0b0:	4b07      	ldr	r3, [pc, #28]	@ (800a0d0 <pxCurrentTCBConst2>)
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	6808      	ldr	r0, [r1, #0]
 800a0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	f380 8809 	msr	PSP, r0
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f04f 0000 	mov.w	r0, #0
 800a0c6:	f380 8811 	msr	BASEPRI, r0
 800a0ca:	4770      	bx	lr
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst2>:
 800a0d0:	20001158 	.word	0x20001158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0d8:	4808      	ldr	r0, [pc, #32]	@ (800a0fc <prvPortStartFirstTask+0x24>)
 800a0da:	6800      	ldr	r0, [r0, #0]
 800a0dc:	6800      	ldr	r0, [r0, #0]
 800a0de:	f380 8808 	msr	MSP, r0
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8814 	msr	CONTROL, r0
 800a0ea:	b662      	cpsie	i
 800a0ec:	b661      	cpsie	f
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	df00      	svc	0
 800a0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0fa:	bf00      	nop
 800a0fc:	e000ed08 	.word	0xe000ed08

0800a100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a106:	4b37      	ldr	r3, [pc, #220]	@ (800a1e4 <xPortStartScheduler+0xe4>)
 800a108:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	22ff      	movs	r2, #255	@ 0xff
 800a116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	4b2f      	ldr	r3, [pc, #188]	@ (800a1e8 <xPortStartScheduler+0xe8>)
 800a12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a12e:	4b2f      	ldr	r3, [pc, #188]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a130:	2207      	movs	r2, #7
 800a132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a134:	e009      	b.n	800a14a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a136:	4b2d      	ldr	r3, [pc, #180]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	4a2b      	ldr	r2, [pc, #172]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	b2db      	uxtb	r3, r3
 800a148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a152:	2b80      	cmp	r3, #128	@ 0x80
 800a154:	d0ef      	beq.n	800a136 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a156:	4b25      	ldr	r3, [pc, #148]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f1c3 0307 	rsb	r3, r3, #7
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d00d      	beq.n	800a17e <xPortStartScheduler+0x7e>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a166:	b672      	cpsid	i
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	b662      	cpsie	i
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a17e:	4b1b      	ldr	r3, [pc, #108]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	4a19      	ldr	r2, [pc, #100]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a188:	4b18      	ldr	r3, [pc, #96]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a190:	4a16      	ldr	r2, [pc, #88]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	b2da      	uxtb	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a19c:	4b14      	ldr	r3, [pc, #80]	@ (800a1f0 <xPortStartScheduler+0xf0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a13      	ldr	r2, [pc, #76]	@ (800a1f0 <xPortStartScheduler+0xf0>)
 800a1a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a1a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1a8:	4b11      	ldr	r3, [pc, #68]	@ (800a1f0 <xPortStartScheduler+0xf0>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a10      	ldr	r2, [pc, #64]	@ (800a1f0 <xPortStartScheduler+0xf0>)
 800a1ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a1b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1b4:	f000 f8dc 	bl	800a370 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f4 <xPortStartScheduler+0xf4>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1be:	f000 f8fb 	bl	800a3b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f8 <xPortStartScheduler+0xf8>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a1f8 <xPortStartScheduler+0xf8>)
 800a1c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a1cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1ce:	f7ff ff83 	bl	800a0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1d2:	f7ff f837 	bl	8009244 <vTaskSwitchContext>
	prvTaskExitError();
 800a1d6:	f7ff ff35 	bl	800a044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000e400 	.word	0xe000e400
 800a1e8:	20001784 	.word	0x20001784
 800a1ec:	20001788 	.word	0x20001788
 800a1f0:	e000ed20 	.word	0xe000ed20
 800a1f4:	2000000c 	.word	0x2000000c
 800a1f8:	e000ef34 	.word	0xe000ef34

0800a1fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a206:	b672      	cpsid	i
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	b662      	cpsie	i
 800a216:	607b      	str	r3, [r7, #4]
}
 800a218:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a21a:	4b11      	ldr	r3, [pc, #68]	@ (800a260 <vPortEnterCritical+0x64>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3301      	adds	r3, #1
 800a220:	4a0f      	ldr	r2, [pc, #60]	@ (800a260 <vPortEnterCritical+0x64>)
 800a222:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a224:	4b0e      	ldr	r3, [pc, #56]	@ (800a260 <vPortEnterCritical+0x64>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d112      	bne.n	800a252 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a22c:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <vPortEnterCritical+0x68>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00d      	beq.n	800a252 <vPortEnterCritical+0x56>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	b672      	cpsid	i
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	b662      	cpsie	i
 800a24a:	603b      	str	r3, [r7, #0]
}
 800a24c:	bf00      	nop
 800a24e:	bf00      	nop
 800a250:	e7fd      	b.n	800a24e <vPortEnterCritical+0x52>
	}
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	2000000c 	.word	0x2000000c
 800a264:	e000ed04 	.word	0xe000ed04

0800a268 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a26e:	4b13      	ldr	r3, [pc, #76]	@ (800a2bc <vPortExitCritical+0x54>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10d      	bne.n	800a292 <vPortExitCritical+0x2a>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	b672      	cpsid	i
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	b662      	cpsie	i
 800a28a:	607b      	str	r3, [r7, #4]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a292:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <vPortExitCritical+0x54>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3b01      	subs	r3, #1
 800a298:	4a08      	ldr	r2, [pc, #32]	@ (800a2bc <vPortExitCritical+0x54>)
 800a29a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a29c:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <vPortExitCritical+0x54>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <vPortExitCritical+0x48>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f383 8811 	msr	BASEPRI, r3
}
 800a2ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	2000000c 	.word	0x2000000c

0800a2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2c0:	f3ef 8009 	mrs	r0, PSP
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4b15      	ldr	r3, [pc, #84]	@ (800a320 <pxCurrentTCBConst>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	f01e 0f10 	tst.w	lr, #16
 800a2d0:	bf08      	it	eq
 800a2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2da:	6010      	str	r0, [r2, #0]
 800a2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a2e4:	b672      	cpsid	i
 800a2e6:	f380 8811 	msr	BASEPRI, r0
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	b662      	cpsie	i
 800a2f4:	f7fe ffa6 	bl	8009244 <vTaskSwitchContext>
 800a2f8:	f04f 0000 	mov.w	r0, #0
 800a2fc:	f380 8811 	msr	BASEPRI, r0
 800a300:	bc09      	pop	{r0, r3}
 800a302:	6819      	ldr	r1, [r3, #0]
 800a304:	6808      	ldr	r0, [r1, #0]
 800a306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30a:	f01e 0f10 	tst.w	lr, #16
 800a30e:	bf08      	it	eq
 800a310:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a314:	f380 8809 	msr	PSP, r0
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop

0800a320 <pxCurrentTCBConst>:
 800a320:	20001158 	.word	0x20001158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	b672      	cpsid	i
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	b662      	cpsie	i
 800a342:	607b      	str	r3, [r7, #4]
}
 800a344:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a346:	f7fe fec1 	bl	80090cc <xTaskIncrementTick>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a350:	4b06      	ldr	r3, [pc, #24]	@ (800a36c <xPortSysTickHandler+0x44>)
 800a352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	2300      	movs	r3, #0
 800a35a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	f383 8811 	msr	BASEPRI, r3
}
 800a362:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a374:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <vPortSetupTimerInterrupt+0x34>)
 800a376:	2200      	movs	r2, #0
 800a378:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a37a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a8 <vPortSetupTimerInterrupt+0x38>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a380:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ac <vPortSetupTimerInterrupt+0x3c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a0a      	ldr	r2, [pc, #40]	@ (800a3b0 <vPortSetupTimerInterrupt+0x40>)
 800a386:	fba2 2303 	umull	r2, r3, r2, r3
 800a38a:	099b      	lsrs	r3, r3, #6
 800a38c:	4a09      	ldr	r2, [pc, #36]	@ (800a3b4 <vPortSetupTimerInterrupt+0x44>)
 800a38e:	3b01      	subs	r3, #1
 800a390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a392:	4b04      	ldr	r3, [pc, #16]	@ (800a3a4 <vPortSetupTimerInterrupt+0x34>)
 800a394:	2207      	movs	r2, #7
 800a396:	601a      	str	r2, [r3, #0]
}
 800a398:	bf00      	nop
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	e000e010 	.word	0xe000e010
 800a3a8:	e000e018 	.word	0xe000e018
 800a3ac:	20000000 	.word	0x20000000
 800a3b0:	10624dd3 	.word	0x10624dd3
 800a3b4:	e000e014 	.word	0xe000e014

0800a3b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a3c8 <vPortEnableVFP+0x10>
 800a3bc:	6801      	ldr	r1, [r0, #0]
 800a3be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a3c2:	6001      	str	r1, [r0, #0]
 800a3c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3c6:	bf00      	nop
 800a3c8:	e000ed88 	.word	0xe000ed88

0800a3cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3d2:	f3ef 8305 	mrs	r3, IPSR
 800a3d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2b0f      	cmp	r3, #15
 800a3dc:	d917      	bls.n	800a40e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3de:	4a1a      	ldr	r2, [pc, #104]	@ (800a448 <vPortValidateInterruptPriority+0x7c>)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3e8:	4b18      	ldr	r3, [pc, #96]	@ (800a44c <vPortValidateInterruptPriority+0x80>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	7afa      	ldrb	r2, [r7, #11]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d20d      	bcs.n	800a40e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f6:	b672      	cpsid	i
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	b662      	cpsie	i
 800a406:	607b      	str	r3, [r7, #4]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a40e:	4b10      	ldr	r3, [pc, #64]	@ (800a450 <vPortValidateInterruptPriority+0x84>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a416:	4b0f      	ldr	r3, [pc, #60]	@ (800a454 <vPortValidateInterruptPriority+0x88>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d90d      	bls.n	800a43a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	b672      	cpsid	i
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	b662      	cpsie	i
 800a432:	603b      	str	r3, [r7, #0]
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	e7fd      	b.n	800a436 <vPortValidateInterruptPriority+0x6a>
	}
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	e000e3f0 	.word	0xe000e3f0
 800a44c:	20001784 	.word	0x20001784
 800a450:	e000ed0c 	.word	0xe000ed0c
 800a454:	20001788 	.word	0x20001788

0800a458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08a      	sub	sp, #40	@ 0x28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a460:	2300      	movs	r3, #0
 800a462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a464:	f7fe fd74 	bl	8008f50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a468:	4b5d      	ldr	r3, [pc, #372]	@ (800a5e0 <pvPortMalloc+0x188>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a470:	f000 f920 	bl	800a6b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a474:	4b5b      	ldr	r3, [pc, #364]	@ (800a5e4 <pvPortMalloc+0x18c>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4013      	ands	r3, r2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f040 8094 	bne.w	800a5aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d020      	beq.n	800a4ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a488:	2208      	movs	r2, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4413      	add	r3, r2
 800a48e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f003 0307 	and.w	r3, r3, #7
 800a496:	2b00      	cmp	r3, #0
 800a498:	d017      	beq.n	800a4ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f023 0307 	bic.w	r3, r3, #7
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00d      	beq.n	800a4ca <pvPortMalloc+0x72>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b2:	b672      	cpsid	i
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	b662      	cpsie	i
 800a4c2:	617b      	str	r3, [r7, #20]
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop
 800a4c8:	e7fd      	b.n	800a4c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d06c      	beq.n	800a5aa <pvPortMalloc+0x152>
 800a4d0:	4b45      	ldr	r3, [pc, #276]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d867      	bhi.n	800a5aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4da:	4b44      	ldr	r3, [pc, #272]	@ (800a5ec <pvPortMalloc+0x194>)
 800a4dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4de:	4b43      	ldr	r3, [pc, #268]	@ (800a5ec <pvPortMalloc+0x194>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4e4:	e004      	b.n	800a4f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d903      	bls.n	800a502 <pvPortMalloc+0xaa>
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1f1      	bne.n	800a4e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a502:	4b37      	ldr	r3, [pc, #220]	@ (800a5e0 <pvPortMalloc+0x188>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a508:	429a      	cmp	r2, r3
 800a50a:	d04e      	beq.n	800a5aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2208      	movs	r2, #8
 800a512:	4413      	add	r3, r2
 800a514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	1ad2      	subs	r2, r2, r3
 800a526:	2308      	movs	r3, #8
 800a528:	005b      	lsls	r3, r3, #1
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d922      	bls.n	800a574 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a52e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4413      	add	r3, r2
 800a534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	f003 0307 	and.w	r3, r3, #7
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00d      	beq.n	800a55c <pvPortMalloc+0x104>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a544:	b672      	cpsid	i
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	b662      	cpsie	i
 800a554:	613b      	str	r3, [r7, #16]
}
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	e7fd      	b.n	800a558 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	1ad2      	subs	r2, r2, r3
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a56e:	69b8      	ldr	r0, [r7, #24]
 800a570:	f000 f902 	bl	800a778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a574:	4b1c      	ldr	r3, [pc, #112]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	4a1a      	ldr	r2, [pc, #104]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a580:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a582:	4b19      	ldr	r3, [pc, #100]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	4b1a      	ldr	r3, [pc, #104]	@ (800a5f0 <pvPortMalloc+0x198>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d203      	bcs.n	800a596 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a58e:	4b16      	ldr	r3, [pc, #88]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a17      	ldr	r2, [pc, #92]	@ (800a5f0 <pvPortMalloc+0x198>)
 800a594:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	4b12      	ldr	r3, [pc, #72]	@ (800a5e4 <pvPortMalloc+0x18c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5aa:	f7fe fcdf 	bl	8008f6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00d      	beq.n	800a5d4 <pvPortMalloc+0x17c>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5bc:	b672      	cpsid	i
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	b662      	cpsie	i
 800a5cc:	60fb      	str	r3, [r7, #12]
}
 800a5ce:	bf00      	nop
 800a5d0:	bf00      	nop
 800a5d2:	e7fd      	b.n	800a5d0 <pvPortMalloc+0x178>
	return pvReturn;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3728      	adds	r7, #40	@ 0x28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	20005394 	.word	0x20005394
 800a5e4:	200053a0 	.word	0x200053a0
 800a5e8:	20005398 	.word	0x20005398
 800a5ec:	2000538c 	.word	0x2000538c
 800a5f0:	2000539c 	.word	0x2000539c

0800a5f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d04e      	beq.n	800a6a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a606:	2308      	movs	r3, #8
 800a608:	425b      	negs	r3, r3
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4413      	add	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	4b24      	ldr	r3, [pc, #144]	@ (800a6ac <vPortFree+0xb8>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4013      	ands	r3, r2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10d      	bne.n	800a63e <vPortFree+0x4a>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a626:	b672      	cpsid	i
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	b662      	cpsie	i
 800a636:	60fb      	str	r3, [r7, #12]
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00d      	beq.n	800a662 <vPortFree+0x6e>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64a:	b672      	cpsid	i
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	b662      	cpsie	i
 800a65a:	60bb      	str	r3, [r7, #8]
}
 800a65c:	bf00      	nop
 800a65e:	bf00      	nop
 800a660:	e7fd      	b.n	800a65e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	4b11      	ldr	r3, [pc, #68]	@ (800a6ac <vPortFree+0xb8>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4013      	ands	r3, r2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d019      	beq.n	800a6a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d115      	bne.n	800a6a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	4b0b      	ldr	r3, [pc, #44]	@ (800a6ac <vPortFree+0xb8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	43db      	mvns	r3, r3
 800a682:	401a      	ands	r2, r3
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a688:	f7fe fc62 	bl	8008f50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	4b07      	ldr	r3, [pc, #28]	@ (800a6b0 <vPortFree+0xbc>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4413      	add	r3, r2
 800a696:	4a06      	ldr	r2, [pc, #24]	@ (800a6b0 <vPortFree+0xbc>)
 800a698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a69a:	6938      	ldr	r0, [r7, #16]
 800a69c:	f000 f86c 	bl	800a778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a6a0:	f7fe fc64 	bl	8008f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6a4:	bf00      	nop
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	200053a0 	.word	0x200053a0
 800a6b0:	20005398 	.word	0x20005398

0800a6b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a6be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6c0:	4b27      	ldr	r3, [pc, #156]	@ (800a760 <prvHeapInit+0xac>)
 800a6c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00c      	beq.n	800a6e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3307      	adds	r3, #7
 800a6d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 0307 	bic.w	r3, r3, #7
 800a6da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	4a1f      	ldr	r2, [pc, #124]	@ (800a760 <prvHeapInit+0xac>)
 800a6e4:	4413      	add	r3, r2
 800a6e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a764 <prvHeapInit+0xb0>)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a764 <prvHeapInit+0xb0>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a700:	2208      	movs	r2, #8
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	1a9b      	subs	r3, r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 0307 	bic.w	r3, r3, #7
 800a70e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4a15      	ldr	r2, [pc, #84]	@ (800a768 <prvHeapInit+0xb4>)
 800a714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a716:	4b14      	ldr	r3, [pc, #80]	@ (800a768 <prvHeapInit+0xb4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2200      	movs	r2, #0
 800a71c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a71e:	4b12      	ldr	r3, [pc, #72]	@ (800a768 <prvHeapInit+0xb4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a734:	4b0c      	ldr	r3, [pc, #48]	@ (800a768 <prvHeapInit+0xb4>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	4a0a      	ldr	r2, [pc, #40]	@ (800a76c <prvHeapInit+0xb8>)
 800a742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	4a09      	ldr	r2, [pc, #36]	@ (800a770 <prvHeapInit+0xbc>)
 800a74a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a74c:	4b09      	ldr	r3, [pc, #36]	@ (800a774 <prvHeapInit+0xc0>)
 800a74e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a752:	601a      	str	r2, [r3, #0]
}
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	2000178c 	.word	0x2000178c
 800a764:	2000538c 	.word	0x2000538c
 800a768:	20005394 	.word	0x20005394
 800a76c:	2000539c 	.word	0x2000539c
 800a770:	20005398 	.word	0x20005398
 800a774:	200053a0 	.word	0x200053a0

0800a778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a780:	4b28      	ldr	r3, [pc, #160]	@ (800a824 <prvInsertBlockIntoFreeList+0xac>)
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e002      	b.n	800a78c <prvInsertBlockIntoFreeList+0x14>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	429a      	cmp	r2, r3
 800a794:	d8f7      	bhi.n	800a786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d108      	bne.n	800a7ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	441a      	add	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	441a      	add	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d118      	bne.n	800a800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b15      	ldr	r3, [pc, #84]	@ (800a828 <prvInsertBlockIntoFreeList+0xb0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d00d      	beq.n	800a7f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	441a      	add	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	e008      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a828 <prvInsertBlockIntoFreeList+0xb0>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	e003      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d002      	beq.n	800a816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a816:	bf00      	nop
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	2000538c 	.word	0x2000538c
 800a828:	20005394 	.word	0x20005394

0800a82c <atoi>:
 800a82c:	220a      	movs	r2, #10
 800a82e:	2100      	movs	r1, #0
 800a830:	f000 b87a 	b.w	800a928 <strtol>

0800a834 <_strtol_l.constprop.0>:
 800a834:	2b24      	cmp	r3, #36	@ 0x24
 800a836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a83a:	4686      	mov	lr, r0
 800a83c:	4690      	mov	r8, r2
 800a83e:	d801      	bhi.n	800a844 <_strtol_l.constprop.0+0x10>
 800a840:	2b01      	cmp	r3, #1
 800a842:	d106      	bne.n	800a852 <_strtol_l.constprop.0+0x1e>
 800a844:	f000 f894 	bl	800a970 <__errno>
 800a848:	2316      	movs	r3, #22
 800a84a:	6003      	str	r3, [r0, #0]
 800a84c:	2000      	movs	r0, #0
 800a84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a852:	4834      	ldr	r0, [pc, #208]	@ (800a924 <_strtol_l.constprop.0+0xf0>)
 800a854:	460d      	mov	r5, r1
 800a856:	462a      	mov	r2, r5
 800a858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a85c:	5d06      	ldrb	r6, [r0, r4]
 800a85e:	f016 0608 	ands.w	r6, r6, #8
 800a862:	d1f8      	bne.n	800a856 <_strtol_l.constprop.0+0x22>
 800a864:	2c2d      	cmp	r4, #45	@ 0x2d
 800a866:	d12d      	bne.n	800a8c4 <_strtol_l.constprop.0+0x90>
 800a868:	782c      	ldrb	r4, [r5, #0]
 800a86a:	2601      	movs	r6, #1
 800a86c:	1c95      	adds	r5, r2, #2
 800a86e:	f033 0210 	bics.w	r2, r3, #16
 800a872:	d109      	bne.n	800a888 <_strtol_l.constprop.0+0x54>
 800a874:	2c30      	cmp	r4, #48	@ 0x30
 800a876:	d12a      	bne.n	800a8ce <_strtol_l.constprop.0+0x9a>
 800a878:	782a      	ldrb	r2, [r5, #0]
 800a87a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a87e:	2a58      	cmp	r2, #88	@ 0x58
 800a880:	d125      	bne.n	800a8ce <_strtol_l.constprop.0+0x9a>
 800a882:	786c      	ldrb	r4, [r5, #1]
 800a884:	2310      	movs	r3, #16
 800a886:	3502      	adds	r5, #2
 800a888:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a88c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a890:	2200      	movs	r2, #0
 800a892:	fbbc f9f3 	udiv	r9, ip, r3
 800a896:	4610      	mov	r0, r2
 800a898:	fb03 ca19 	mls	sl, r3, r9, ip
 800a89c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a8a0:	2f09      	cmp	r7, #9
 800a8a2:	d81b      	bhi.n	800a8dc <_strtol_l.constprop.0+0xa8>
 800a8a4:	463c      	mov	r4, r7
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	dd27      	ble.n	800a8fa <_strtol_l.constprop.0+0xc6>
 800a8aa:	1c57      	adds	r7, r2, #1
 800a8ac:	d007      	beq.n	800a8be <_strtol_l.constprop.0+0x8a>
 800a8ae:	4581      	cmp	r9, r0
 800a8b0:	d320      	bcc.n	800a8f4 <_strtol_l.constprop.0+0xc0>
 800a8b2:	d101      	bne.n	800a8b8 <_strtol_l.constprop.0+0x84>
 800a8b4:	45a2      	cmp	sl, r4
 800a8b6:	db1d      	blt.n	800a8f4 <_strtol_l.constprop.0+0xc0>
 800a8b8:	fb00 4003 	mla	r0, r0, r3, r4
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8c2:	e7eb      	b.n	800a89c <_strtol_l.constprop.0+0x68>
 800a8c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8c6:	bf04      	itt	eq
 800a8c8:	782c      	ldrbeq	r4, [r5, #0]
 800a8ca:	1c95      	addeq	r5, r2, #2
 800a8cc:	e7cf      	b.n	800a86e <_strtol_l.constprop.0+0x3a>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1da      	bne.n	800a888 <_strtol_l.constprop.0+0x54>
 800a8d2:	2c30      	cmp	r4, #48	@ 0x30
 800a8d4:	bf0c      	ite	eq
 800a8d6:	2308      	moveq	r3, #8
 800a8d8:	230a      	movne	r3, #10
 800a8da:	e7d5      	b.n	800a888 <_strtol_l.constprop.0+0x54>
 800a8dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a8e0:	2f19      	cmp	r7, #25
 800a8e2:	d801      	bhi.n	800a8e8 <_strtol_l.constprop.0+0xb4>
 800a8e4:	3c37      	subs	r4, #55	@ 0x37
 800a8e6:	e7de      	b.n	800a8a6 <_strtol_l.constprop.0+0x72>
 800a8e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a8ec:	2f19      	cmp	r7, #25
 800a8ee:	d804      	bhi.n	800a8fa <_strtol_l.constprop.0+0xc6>
 800a8f0:	3c57      	subs	r4, #87	@ 0x57
 800a8f2:	e7d8      	b.n	800a8a6 <_strtol_l.constprop.0+0x72>
 800a8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f8:	e7e1      	b.n	800a8be <_strtol_l.constprop.0+0x8a>
 800a8fa:	1c53      	adds	r3, r2, #1
 800a8fc:	d108      	bne.n	800a910 <_strtol_l.constprop.0+0xdc>
 800a8fe:	2322      	movs	r3, #34	@ 0x22
 800a900:	f8ce 3000 	str.w	r3, [lr]
 800a904:	4660      	mov	r0, ip
 800a906:	f1b8 0f00 	cmp.w	r8, #0
 800a90a:	d0a0      	beq.n	800a84e <_strtol_l.constprop.0+0x1a>
 800a90c:	1e69      	subs	r1, r5, #1
 800a90e:	e006      	b.n	800a91e <_strtol_l.constprop.0+0xea>
 800a910:	b106      	cbz	r6, 800a914 <_strtol_l.constprop.0+0xe0>
 800a912:	4240      	negs	r0, r0
 800a914:	f1b8 0f00 	cmp.w	r8, #0
 800a918:	d099      	beq.n	800a84e <_strtol_l.constprop.0+0x1a>
 800a91a:	2a00      	cmp	r2, #0
 800a91c:	d1f6      	bne.n	800a90c <_strtol_l.constprop.0+0xd8>
 800a91e:	f8c8 1000 	str.w	r1, [r8]
 800a922:	e794      	b.n	800a84e <_strtol_l.constprop.0+0x1a>
 800a924:	0800abf9 	.word	0x0800abf9

0800a928 <strtol>:
 800a928:	4613      	mov	r3, r2
 800a92a:	460a      	mov	r2, r1
 800a92c:	4601      	mov	r1, r0
 800a92e:	4802      	ldr	r0, [pc, #8]	@ (800a938 <strtol+0x10>)
 800a930:	6800      	ldr	r0, [r0, #0]
 800a932:	f7ff bf7f 	b.w	800a834 <_strtol_l.constprop.0>
 800a936:	bf00      	nop
 800a938:	20000010 	.word	0x20000010

0800a93c <memset>:
 800a93c:	4402      	add	r2, r0
 800a93e:	4603      	mov	r3, r0
 800a940:	4293      	cmp	r3, r2
 800a942:	d100      	bne.n	800a946 <memset+0xa>
 800a944:	4770      	bx	lr
 800a946:	f803 1b01 	strb.w	r1, [r3], #1
 800a94a:	e7f9      	b.n	800a940 <memset+0x4>

0800a94c <strncmp>:
 800a94c:	b510      	push	{r4, lr}
 800a94e:	b16a      	cbz	r2, 800a96c <strncmp+0x20>
 800a950:	3901      	subs	r1, #1
 800a952:	1884      	adds	r4, r0, r2
 800a954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a958:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d103      	bne.n	800a968 <strncmp+0x1c>
 800a960:	42a0      	cmp	r0, r4
 800a962:	d001      	beq.n	800a968 <strncmp+0x1c>
 800a964:	2a00      	cmp	r2, #0
 800a966:	d1f5      	bne.n	800a954 <strncmp+0x8>
 800a968:	1ad0      	subs	r0, r2, r3
 800a96a:	bd10      	pop	{r4, pc}
 800a96c:	4610      	mov	r0, r2
 800a96e:	e7fc      	b.n	800a96a <strncmp+0x1e>

0800a970 <__errno>:
 800a970:	4b01      	ldr	r3, [pc, #4]	@ (800a978 <__errno+0x8>)
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	20000010 	.word	0x20000010

0800a97c <__libc_init_array>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	4d0d      	ldr	r5, [pc, #52]	@ (800a9b4 <__libc_init_array+0x38>)
 800a980:	4c0d      	ldr	r4, [pc, #52]	@ (800a9b8 <__libc_init_array+0x3c>)
 800a982:	1b64      	subs	r4, r4, r5
 800a984:	10a4      	asrs	r4, r4, #2
 800a986:	2600      	movs	r6, #0
 800a988:	42a6      	cmp	r6, r4
 800a98a:	d109      	bne.n	800a9a0 <__libc_init_array+0x24>
 800a98c:	4d0b      	ldr	r5, [pc, #44]	@ (800a9bc <__libc_init_array+0x40>)
 800a98e:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c0 <__libc_init_array+0x44>)
 800a990:	f000 f826 	bl	800a9e0 <_init>
 800a994:	1b64      	subs	r4, r4, r5
 800a996:	10a4      	asrs	r4, r4, #2
 800a998:	2600      	movs	r6, #0
 800a99a:	42a6      	cmp	r6, r4
 800a99c:	d105      	bne.n	800a9aa <__libc_init_array+0x2e>
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a4:	4798      	blx	r3
 800a9a6:	3601      	adds	r6, #1
 800a9a8:	e7ee      	b.n	800a988 <__libc_init_array+0xc>
 800a9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ae:	4798      	blx	r3
 800a9b0:	3601      	adds	r6, #1
 800a9b2:	e7f2      	b.n	800a99a <__libc_init_array+0x1e>
 800a9b4:	0800ad04 	.word	0x0800ad04
 800a9b8:	0800ad04 	.word	0x0800ad04
 800a9bc:	0800ad04 	.word	0x0800ad04
 800a9c0:	0800ad08 	.word	0x0800ad08

0800a9c4 <memcpy>:
 800a9c4:	440a      	add	r2, r1
 800a9c6:	4291      	cmp	r1, r2
 800a9c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9cc:	d100      	bne.n	800a9d0 <memcpy+0xc>
 800a9ce:	4770      	bx	lr
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9da:	4291      	cmp	r1, r2
 800a9dc:	d1f9      	bne.n	800a9d2 <memcpy+0xe>
 800a9de:	bd10      	pop	{r4, pc}

0800a9e0 <_init>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	bf00      	nop
 800a9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e6:	bc08      	pop	{r3}
 800a9e8:	469e      	mov	lr, r3
 800a9ea:	4770      	bx	lr

0800a9ec <_fini>:
 800a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ee:	bf00      	nop
 800a9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f2:	bc08      	pop	{r3}
 800a9f4:	469e      	mov	lr, r3
 800a9f6:	4770      	bx	lr
