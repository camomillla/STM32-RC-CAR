
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae08  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800b008  0800b008  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b340  0800b340  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b340  0800b340  0000c340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b348  0800b348  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b348  0800b348  0000c348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b34c  0800b34c  0000c34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800b350  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054dc  20000060  0800b3b0  0000d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000553c  0800b3b0  0000d53c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020664  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b8  00000000  00000000  0002d6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  00031eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c7  00000000  00000000  00033968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b904  00000000  00000000  00034e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021861  00000000  00000000  00060733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108fc7  00000000  00000000  00081f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018af5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071cc  00000000  00000000  0018afa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0019216c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aff0 	.word	0x0800aff0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800aff0 	.word	0x0800aff0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <MX_DMA_Init+0x48>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a0f      	ldr	r2, [pc, #60]	@ (800059c <MX_DMA_Init+0x48>)
 8000560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <MX_DMA_Init+0x48>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2010      	movs	r0, #16
 8000578:	f002 fb2d 	bl	8002bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800057c:	2010      	movs	r0, #16
 800057e:	f002 fb46 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	2011      	movs	r0, #17
 8000588:	f002 fb25 	bl	8002bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800058c:	2011      	movs	r0, #17
 800058e:	f002 fb3e 	bl	8002c0e <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	//defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 80005a4:	4a08      	ldr	r2, [pc, #32]	@ (80005c8 <MX_FREERTOS_Init+0x28>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4808      	ldr	r0, [pc, #32]	@ (80005cc <MX_FREERTOS_Init+0x2c>)
 80005aa:	f007 feaf 	bl	800830c <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <MX_FREERTOS_Init+0x30>)
 80005b2:	6013      	str	r3, [r2, #0]
	distanceSensorHandle = osThreadNew(DistanceSensor, NULL, &distanceSensor_attributes);
 80005b4:	4a07      	ldr	r2, [pc, #28]	@ (80005d4 <MX_FREERTOS_Init+0x34>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <MX_FREERTOS_Init+0x38>)
 80005ba:	f007 fea7 	bl	800830c <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <MX_FREERTOS_Init+0x3c>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	0800b1d4 	.word	0x0800b1d4
 80005cc:	08001539 	.word	0x08001539
 80005d0:	2000007c 	.word	0x2000007c
 80005d4:	0800b1f8 	.word	0x0800b1f8
 80005d8:	08001431 	.word	0x08001431
 80005dc:	20000080 	.word	0x20000080

080005e0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f6:	4b87      	ldr	r3, [pc, #540]	@ (8000814 <MX_GPIO_Init+0x234>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a86      	ldr	r2, [pc, #536]	@ (8000814 <MX_GPIO_Init+0x234>)
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b84      	ldr	r3, [pc, #528]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b81      	ldr	r3, [pc, #516]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a80      	ldr	r2, [pc, #512]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b7e      	ldr	r3, [pc, #504]	@ (8000814 <MX_GPIO_Init+0x234>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000626:	4b7b      	ldr	r3, [pc, #492]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a7a      	ldr	r2, [pc, #488]	@ (8000814 <MX_GPIO_Init+0x234>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b78      	ldr	r3, [pc, #480]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b75      	ldr	r3, [pc, #468]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a74      	ldr	r2, [pc, #464]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b72      	ldr	r3, [pc, #456]	@ (8000814 <MX_GPIO_Init+0x234>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b6f      	ldr	r3, [pc, #444]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a6e      	ldr	r2, [pc, #440]	@ (8000814 <MX_GPIO_Init+0x234>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b6c      	ldr	r3, [pc, #432]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066e:	4b69      	ldr	r3, [pc, #420]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a68      	ldr	r2, [pc, #416]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b66      	ldr	r3, [pc, #408]	@ (8000814 <MX_GPIO_Init+0x234>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	4b63      	ldr	r3, [pc, #396]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a62      	ldr	r2, [pc, #392]	@ (8000814 <MX_GPIO_Init+0x234>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b60      	ldr	r3, [pc, #384]	@ (8000814 <MX_GPIO_Init+0x234>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2140      	movs	r1, #64	@ 0x40
 80006a2:	485d      	ldr	r0, [pc, #372]	@ (8000818 <MX_GPIO_Init+0x238>)
 80006a4:	f003 f80e 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006ae:	485b      	ldr	r0, [pc, #364]	@ (800081c <MX_GPIO_Init+0x23c>)
 80006b0:	f003 f808 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2141      	movs	r1, #65	@ 0x41
 80006b8:	4859      	ldr	r0, [pc, #356]	@ (8000820 <MX_GPIO_Init+0x240>)
 80006ba:	f003 f803 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2110      	movs	r1, #16
 80006c2:	4858      	ldr	r0, [pc, #352]	@ (8000824 <MX_GPIO_Init+0x244>)
 80006c4:	f002 fffe 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DETECTOR_ECHO_Pin */
  GPIO_InitStruct.Pin = DETECTOR_ECHO_Pin;
 80006c8:	2320      	movs	r3, #32
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DETECTOR_ECHO_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	484f      	ldr	r0, [pc, #316]	@ (8000818 <MX_GPIO_Init+0x238>)
 80006dc:	f002 fe2e 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECTOR_TRIGGER_Pin */
  GPIO_InitStruct.Pin = DETECTOR_TRIGGER_Pin;
 80006e0:	2340      	movs	r3, #64	@ 0x40
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DETECTOR_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4848      	ldr	r0, [pc, #288]	@ (8000818 <MX_GPIO_Init+0x238>)
 80006f8:	f002 fe20 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000702:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	4845      	ldr	r0, [pc, #276]	@ (8000828 <MX_GPIO_Init+0x248>)
 8000714:	f002 fe12 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000718:	2332      	movs	r3, #50	@ 0x32
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000728:	230b      	movs	r3, #11
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	483d      	ldr	r0, [pc, #244]	@ (8000828 <MX_GPIO_Init+0x248>)
 8000734:	f002 fe02 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000738:	2386      	movs	r3, #134	@ 0x86
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000748:	230b      	movs	r3, #11
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4836      	ldr	r0, [pc, #216]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000754:	f002 fdf2 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000758:	f244 0381 	movw	r3, #16513	@ 0x4081
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	482a      	ldr	r0, [pc, #168]	@ (800081c <MX_GPIO_Init+0x23c>)
 8000772:	f002 fde3 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 8000776:	2341      	movs	r3, #65	@ 0x41
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4824      	ldr	r0, [pc, #144]	@ (8000820 <MX_GPIO_Init+0x240>)
 800078e:	f002 fdd5 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000792:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a4:	230b      	movs	r3, #11
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	481b      	ldr	r0, [pc, #108]	@ (800081c <MX_GPIO_Init+0x23c>)
 80007b0:	f002 fdc4 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b4:	2380      	movs	r3, #128	@ 0x80
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4816      	ldr	r0, [pc, #88]	@ (8000820 <MX_GPIO_Init+0x240>)
 80007c8:	f002 fdb8 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007cc:	2310      	movs	r3, #16
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4810      	ldr	r0, [pc, #64]	@ (8000824 <MX_GPIO_Init+0x244>)
 80007e4:	f002 fdaa 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007e8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007fa:	230b      	movs	r3, #11
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4806      	ldr	r0, [pc, #24]	@ (8000820 <MX_GPIO_Init+0x240>)
 8000806:	f002 fd99 	bl	800333c <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3730      	adds	r7, #48	@ 0x30
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40021000 	.word	0x40021000
 800081c:	40020400 	.word	0x40020400
 8000820:	40021800 	.word	0x40021800
 8000824:	40020c00 	.word	0x40020c00
 8000828:	40020800 	.word	0x40020800
 800082c:	40020000 	.word	0x40020000

08000830 <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8000830:	b480      	push	{r7}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6178      	str	r0, [r7, #20]
 8000838:	ed87 0a04 	vstr	s0, [r7, #16]
 800083c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000840:	ed87 1a02 	vstr	s2, [r7, #8]
 8000844:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	615a      	str	r2, [r3, #20]
}
 800086a:	bf00      	nop
 800086c:	371c      	adds	r7, #28
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <pid_reset>:

void pid_reset(PID *pid_data)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 8000896:	b480      	push	{r7}
 8000898:	b089      	sub	sp, #36	@ 0x24
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	441a      	add	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ca:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e4:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	ee07 3a90 	vmov	s15, r3
 80008fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000902:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000912:	ed97 7a07 	vldr	s14, [r7, #28]
 8000916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800091a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091e:	db08      	blt.n	8000932 <pid_calculate+0x9c>
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092c:	edc7 7a07 	vstr	s15, [r7, #28]
 8000930:	e016      	b.n	8000960 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	425b      	negs	r3, r3
 8000938:	ee07 3a90 	vmov	s15, r3
 800093c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000940:	ed97 7a07 	vldr	s14, [r7, #28]
 8000944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094c:	d808      	bhi.n	8000960 <pid_calculate+0xca>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	425b      	negs	r3, r3
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095c:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8000966:	ed97 7a05 	vldr	s14, [r7, #20]
 800096a:	edd7 7a07 	vldr	s15, [r7, #28]
 800096e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000972:	edd7 7a04 	vldr	s15, [r7, #16]
 8000976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800097e:	ee17 3a90 	vmov	r3, s15
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	@ 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <Init_Motor>:

MOTOR motorA;
MOTOR motorB;

void Init_Motor(MOTOR *m, TIM_HandleTypeDef *enc, uint32_t axis, TIM_HandleTypeDef* front, TIM_HandleTypeDef* back)
{
 800098e:	b480      	push	{r7}
 8000990:	b085      	sub	sp, #20
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	603b      	str	r3, [r7, #0]
	m->encoder = enc;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	601a      	str	r2, [r3, #0]
	m->axisTimer = axis;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	60da      	str	r2, [r3, #12]
	m->motorBack = back;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	605a      	str	r2, [r3, #4]
	m->motorFront = front;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	609a      	str	r2, [r3, #8]

	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80009ba:	825a      	strh	r2, [r3, #18]

	m->pulse_count = 0;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
	m->measured_speed = 0;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
	m->set_speed = 0;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
    m->actual_PWM = 0;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f849 	bl	8000a80 <motor_update_count>

	m->measured_speed = abs((m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80009f6:	fb02 f303 	mul.w	r3, r2, r3
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	8a52      	ldrh	r2, [r2, #18]
 80009fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a02:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a06:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	619a      	str	r2, [r3, #24]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69d9      	ldr	r1, [r3, #28]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	f7ff ff3a 	bl	8000896 <pid_calculate>
 8000a22:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6a1a      	ldr	r2, [r3, #32]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	441a      	add	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	621a      	str	r2, [r3, #32]

	if(m->actual_PWM >= 0)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a1b      	ldr	r3, [r3, #32]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db05      	blt.n	8000a44 <motor_calculate_speed+0x64>
	{
		SetMotorSpeed(m, m->actual_PWM);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 f8c9 	bl	8000bd6 <SetMotorSpeed>

	}

}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <ResetMotor>:

void ResetMotor(MOTOR *m) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	m->set_speed = 0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <motor_set_speed>:
enum DIRECTION {
	DEFAULT, FRONT, BACK
};

void motor_set_speed(MOTOR *m, short direction, int set_speed)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	817b      	strh	r3, [r7, #10]
	if(set_speed != m->set_speed)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d004      	beq.n	8000ad0 <motor_set_speed+0x22>
		pid_reset(&(m->pid_controller));
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3324      	adds	r3, #36	@ 0x24
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fed3 	bl	8000876 <pid_reset>

	m->set_speed = set_speed;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	61da      	str	r2, [r3, #28]
	m->direction = direction;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	897a      	ldrh	r2, [r7, #10]
 8000ada:	821a      	strh	r2, [r3, #16]
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <MotorABS>:

void MotorABS(MOTOR* m) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	ResetMotor(m);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ffad 	bl	8000a4c <ResetMotor>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d105      	bne.n	8000b06 <MotorABS+0x22>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2200      	movs	r2, #0
 8000b02:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b04:	e02c      	b.n	8000b60 <MotorABS+0x7c>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d105      	bne.n	8000b1a <MotorABS+0x36>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2300      	movs	r3, #0
 8000b16:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b18:	e022      	b.n	8000b60 <MotorABS+0x7c>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d105      	bne.n	8000b2e <MotorABS+0x4a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b2c:	e018      	b.n	8000b60 <MotorABS+0x7c>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	2b0c      	cmp	r3, #12
 8000b34:	d105      	bne.n	8000b42 <MotorABS+0x5e>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b40:	e00e      	b.n	8000b60 <MotorABS+0x7c>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	2b10      	cmp	r3, #16
 8000b48:	d105      	bne.n	8000b56 <MotorABS+0x72>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	2300      	movs	r3, #0
 8000b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b54:	e004      	b.n	8000b60 <MotorABS+0x7c>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d105      	bne.n	8000b74 <MotorABS+0x90>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b72:	e02c      	b.n	8000bce <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d105      	bne.n	8000b88 <MotorABS+0xa4>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b86:	e022      	b.n	8000bce <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d105      	bne.n	8000b9c <MotorABS+0xb8>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	2300      	movs	r3, #0
 8000b98:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b9a:	e018      	b.n	8000bce <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	2b0c      	cmp	r3, #12
 8000ba2:	d105      	bne.n	8000bb0 <MotorABS+0xcc>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	2300      	movs	r3, #0
 8000bac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bae:	e00e      	b.n	8000bce <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	2b10      	cmp	r3, #16
 8000bb6:	d105      	bne.n	8000bc4 <MotorABS+0xe0>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000bc2:	e004      	b.n	8000bce <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <SetMotorSpeed>:

void SetMotorSpeed(MOTOR* m, uint16_t speed)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	807b      	strh	r3, [r7, #2]
	switch (m->direction) {
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	f000 810b 	beq.w	8000e04 <SetMotorSpeed+0x22e>
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	f300 8183 	bgt.w	8000efa <SetMotorSpeed+0x324>
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <SetMotorSpeed+0x2a>
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	f000 8088 	beq.w	8000d0e <SetMotorSpeed+0x138>
		break;
	}


	//__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed);
}
 8000bfe:	e17c      	b.n	8000efa <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d304      	bcc.n	8000c18 <SetMotorSpeed+0x42>
			speed = m->motorFront->Instance->ARR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c16:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <SetMotorSpeed+0x56>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c2a:	e02c      	b.n	8000c86 <SetMotorSpeed+0xb0>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d105      	bne.n	8000c40 <SetMotorSpeed+0x6a>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c3e:	e022      	b.n	8000c86 <SetMotorSpeed+0xb0>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	2b08      	cmp	r3, #8
 8000c46:	d105      	bne.n	8000c54 <SetMotorSpeed+0x7e>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c52:	e018      	b.n	8000c86 <SetMotorSpeed+0xb0>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	2b0c      	cmp	r3, #12
 8000c5a:	d105      	bne.n	8000c68 <SetMotorSpeed+0x92>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	e00e      	b.n	8000c86 <SetMotorSpeed+0xb0>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	2b10      	cmp	r3, #16
 8000c6e:	d105      	bne.n	8000c7c <SetMotorSpeed+0xa6>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7a:	e004      	b.n	8000c86 <SetMotorSpeed+0xb0>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	65d3      	str	r3, [r2, #92]	@ 0x5c
		if(speed >= m->motorBack->Instance->ARR)
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d304      	bcc.n	8000c9e <SetMotorSpeed+0xc8>
			speed = m->motorBack->Instance->ARR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c9c:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d105      	bne.n	8000cb2 <SetMotorSpeed+0xdc>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	887a      	ldrh	r2, [r7, #2]
 8000cae:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000cb0:	e123      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d105      	bne.n	8000cc6 <SetMotorSpeed+0xf0>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	887b      	ldrh	r3, [r7, #2]
 8000cc2:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000cc4:	e119      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d105      	bne.n	8000cda <SetMotorSpeed+0x104>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000cd8:	e10f      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	2b0c      	cmp	r3, #12
 8000ce0:	d105      	bne.n	8000cee <SetMotorSpeed+0x118>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000cec:	e105      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	2b10      	cmp	r3, #16
 8000cf4:	d105      	bne.n	8000d02 <SetMotorSpeed+0x12c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000d00:	e0fb      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000d0c:	e0f5      	b.n	8000efa <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d304      	bcc.n	8000d26 <SetMotorSpeed+0x150>
			speed = m->motorFront->Instance->ARR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d24:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d105      	bne.n	8000d3a <SetMotorSpeed+0x164>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	887a      	ldrh	r2, [r7, #2]
 8000d36:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d38:	e02c      	b.n	8000d94 <SetMotorSpeed+0x1be>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d105      	bne.n	8000d4e <SetMotorSpeed+0x178>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d4c:	e022      	b.n	8000d94 <SetMotorSpeed+0x1be>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d105      	bne.n	8000d62 <SetMotorSpeed+0x18c>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d60:	e018      	b.n	8000d94 <SetMotorSpeed+0x1be>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b0c      	cmp	r3, #12
 8000d68:	d105      	bne.n	8000d76 <SetMotorSpeed+0x1a0>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d74:	e00e      	b.n	8000d94 <SetMotorSpeed+0x1be>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	2b10      	cmp	r3, #16
 8000d7c:	d105      	bne.n	8000d8a <SetMotorSpeed+0x1b4>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d88:	e004      	b.n	8000d94 <SetMotorSpeed+0x1be>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	887b      	ldrh	r3, [r7, #2]
 8000d92:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d105      	bne.n	8000da8 <SetMotorSpeed+0x1d2>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000da6:	e0a8      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d105      	bne.n	8000dbc <SetMotorSpeed+0x1e6>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	2300      	movs	r3, #0
 8000db8:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000dba:	e09e      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d105      	bne.n	8000dd0 <SetMotorSpeed+0x1fa>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000dce:	e094      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	2b0c      	cmp	r3, #12
 8000dd6:	d105      	bne.n	8000de4 <SetMotorSpeed+0x20e>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000de2:	e08a      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b10      	cmp	r3, #16
 8000dea:	d105      	bne.n	8000df8 <SetMotorSpeed+0x222>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000df6:	e080      	b.n	8000efa <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000e02:	e07a      	b.n	8000efa <SetMotorSpeed+0x324>
		if(speed >= m->motorBack->Instance->ARR)
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d304      	bcc.n	8000e1c <SetMotorSpeed+0x246>
			speed = m->motorBack->Instance->ARR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1a:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d105      	bne.n	8000e30 <SetMotorSpeed+0x25a>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e2e:	e02c      	b.n	8000e8a <SetMotorSpeed+0x2b4>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d105      	bne.n	8000e44 <SetMotorSpeed+0x26e>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e42:	e022      	b.n	8000e8a <SetMotorSpeed+0x2b4>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d105      	bne.n	8000e58 <SetMotorSpeed+0x282>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e56:	e018      	b.n	8000e8a <SetMotorSpeed+0x2b4>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2b0c      	cmp	r3, #12
 8000e5e:	d105      	bne.n	8000e6c <SetMotorSpeed+0x296>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	e00e      	b.n	8000e8a <SetMotorSpeed+0x2b4>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	2b10      	cmp	r3, #16
 8000e72:	d105      	bne.n	8000e80 <SetMotorSpeed+0x2aa>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7e:	e004      	b.n	8000e8a <SetMotorSpeed+0x2b4>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d105      	bne.n	8000e9e <SetMotorSpeed+0x2c8>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000e9c:	e02c      	b.n	8000ef8 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d105      	bne.n	8000eb2 <SetMotorSpeed+0x2dc>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2300      	movs	r3, #0
 8000eae:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000eb0:	e022      	b.n	8000ef8 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d105      	bne.n	8000ec6 <SetMotorSpeed+0x2f0>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000ec4:	e018      	b.n	8000ef8 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b0c      	cmp	r3, #12
 8000ecc:	d105      	bne.n	8000eda <SetMotorSpeed+0x304>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000ed8:	e00e      	b.n	8000ef8 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b10      	cmp	r3, #16
 8000ee0:	d105      	bne.n	8000eee <SetMotorSpeed+0x318>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000eec:	e004      	b.n	8000ef8 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000ef8:	bf00      	nop
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <Init_MotorSystem>:

void Init_MotorSystem()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af02      	add	r7, sp, #8
	Init_Motor(&motorA, &htim8, TIM_CHANNEL_1, &htim2, &htim5);
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <Init_MotorSystem+0x60>)
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <Init_MotorSystem+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	4916      	ldr	r1, [pc, #88]	@ (8000f70 <Init_MotorSystem+0x68>)
 8000f18:	4816      	ldr	r0, [pc, #88]	@ (8000f74 <Init_MotorSystem+0x6c>)
 8000f1a:	f7ff fd38 	bl	800098e <Init_Motor>
	Init_Motor(&motorB, &htim3, TIM_CHANNEL_4, &htim2, &htim5);
 8000f1e:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <Init_MotorSystem+0x60>)
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <Init_MotorSystem+0x64>)
 8000f24:	220c      	movs	r2, #12
 8000f26:	4914      	ldr	r1, [pc, #80]	@ (8000f78 <Init_MotorSystem+0x70>)
 8000f28:	4814      	ldr	r0, [pc, #80]	@ (8000f7c <Init_MotorSystem+0x74>)
 8000f2a:	f7ff fd30 	bl	800098e <Init_Motor>
	//Init_Motor(&motorB, &htim4, TIM_CHANNEL_1, &htim2, &htim5);

	pid_init(&(motorA.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8000f80 <Init_MotorSystem+0x78>
 8000f34:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000f80 <Init_MotorSystem+0x78>
 8000f38:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000f3c:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <Init_MotorSystem+0x7c>)
 8000f3e:	f7ff fc77 	bl	8000830 <pid_init>
	pid_init(&(motorB.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000f42:	2101      	movs	r1, #1
 8000f44:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000f80 <Init_MotorSystem+0x78>
 8000f48:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000f80 <Init_MotorSystem+0x78>
 8000f4c:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000f50:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <Init_MotorSystem+0x80>)
 8000f52:	f7ff fc6d 	bl	8000830 <pid_init>

	MotorABS(&motorA);
 8000f56:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <Init_MotorSystem+0x6c>)
 8000f58:	f7ff fdc4 	bl	8000ae4 <MotorABS>
	MotorABS(&motorB);
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <Init_MotorSystem+0x74>)
 8000f5e:	f7ff fdc1 	bl	8000ae4 <MotorABS>
	//SetMotorSpeed(&motorB, 0);
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000028c 	.word	0x2000028c
 8000f6c:	200001a8 	.word	0x200001a8
 8000f70:	20000324 	.word	0x20000324
 8000f74:	200000cc 	.word	0x200000cc
 8000f78:	200001f4 	.word	0x200001f4
 8000f7c:	20000108 	.word	0x20000108
 8000f80:	3d4ccccd 	.word	0x3d4ccccd
 8000f84:	200000f0 	.word	0x200000f0
 8000f88:	2000012c 	.word	0x2000012c

08000f8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a06      	ldr	r2, [pc, #24]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d105      	bne.n	8000faa <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		motor_calculate_speed(&motorA);
 8000f9e:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000fa0:	f7ff fd1e 	bl	80009e0 <motor_calculate_speed>
		motor_calculate_speed(&motorB);
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fa6:	f7ff fd1b 	bl	80009e0 <motor_calculate_speed>
	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40001000 	.word	0x40001000
 8000fb8:	200000cc 	.word	0x200000cc
 8000fbc:	20000108 	.word	0x20000108

08000fc0 <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d104      	bne.n	8000fd8 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4812      	ldr	r0, [pc, #72]	@ (800101c <Set_PWM_Frequency+0x5c>)
 8000fd2:	f004 f901 	bl	80051d8 <HAL_TIM_PWM_Stop>
        return;
 8000fd6:	e01e      	b.n	8001016 <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <Set_PWM_Frequency+0x60>)
 8000fda:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <Set_PWM_Frequency+0x5c>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	fb02 f303 	mul.w	r3, r2, r3
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim12, period);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <Set_PWM_Frequency+0x5c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ffe:	4a07      	ldr	r2, [pc, #28]	@ (800101c <Set_PWM_Frequency+0x5c>)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <Set_PWM_Frequency+0x5c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	0852      	lsrs	r2, r2, #1
 800100c:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800100e:	2104      	movs	r1, #4
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <Set_PWM_Frequency+0x5c>)
 8001012:	f003 ffe7 	bl	8004fe4 <HAL_TIM_PWM_Start>
}
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200003bc 	.word	0x200003bc
 8001020:	05b8d800 	.word	0x05b8d800

08001024 <ProcessCommand>:

int hornOn = 0;
int engineOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

			if (strcmp((char*)cmd, "INIT") == 0) {
 800102c:	49bc      	ldr	r1, [pc, #752]	@ (8001320 <ProcessCommand+0x2fc>)
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff f906 	bl	8000240 <strcmp>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10d      	bne.n	8001056 <ProcessCommand+0x32>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800103a:	2101      	movs	r1, #1
 800103c:	48b9      	ldr	r0, [pc, #740]	@ (8001324 <ProcessCommand+0x300>)
 800103e:	f002 fb5a 	bl	80036f6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001042:	2180      	movs	r1, #128	@ 0x80
 8001044:	48b7      	ldr	r0, [pc, #732]	@ (8001324 <ProcessCommand+0x300>)
 8001046:	f002 fb56 	bl	80036f6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800104a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800104e:	48b5      	ldr	r0, [pc, #724]	@ (8001324 <ProcessCommand+0x300>)
 8001050:	f002 fb51 	bl	80036f6 <HAL_GPIO_TogglePin>
	    }

	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8001054:	e1da      	b.n	800140c <ProcessCommand+0x3e8>
			else if (strcmp((char*)cmd, "CMD0") == 0) {
 8001056:	49b4      	ldr	r1, [pc, #720]	@ (8001328 <ProcessCommand+0x304>)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f8f1 	bl	8000240 <strcmp>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d163      	bne.n	800112c <ProcessCommand+0x108>
				if (!engineOn) {
 8001064:	4bb1      	ldr	r3, [pc, #708]	@ (800132c <ProcessCommand+0x308>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d12a      	bne.n	80010c2 <ProcessCommand+0x9e>
					HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800106c:	213c      	movs	r1, #60	@ 0x3c
 800106e:	48b0      	ldr	r0, [pc, #704]	@ (8001330 <ProcessCommand+0x30c>)
 8001070:	f004 f9d8 	bl	8005424 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001074:	213c      	movs	r1, #60	@ 0x3c
 8001076:	48af      	ldr	r0, [pc, #700]	@ (8001334 <ProcessCommand+0x310>)
 8001078:	f004 f9d4 	bl	8005424 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800107c:	213c      	movs	r1, #60	@ 0x3c
 800107e:	48ae      	ldr	r0, [pc, #696]	@ (8001338 <ProcessCommand+0x314>)
 8001080:	f004 f9d0 	bl	8005424 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001084:	213c      	movs	r1, #60	@ 0x3c
 8001086:	48ad      	ldr	r0, [pc, #692]	@ (800133c <ProcessCommand+0x318>)
 8001088:	f004 f9cc 	bl	8005424 <HAL_TIM_Encoder_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800108c:	2100      	movs	r1, #0
 800108e:	48ac      	ldr	r0, [pc, #688]	@ (8001340 <ProcessCommand+0x31c>)
 8001090:	f003 ffa8 	bl	8004fe4 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001094:	210c      	movs	r1, #12
 8001096:	48aa      	ldr	r0, [pc, #680]	@ (8001340 <ProcessCommand+0x31c>)
 8001098:	f003 ffa4 	bl	8004fe4 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800109c:	2100      	movs	r1, #0
 800109e:	48a9      	ldr	r0, [pc, #676]	@ (8001344 <ProcessCommand+0x320>)
 80010a0:	f003 ffa0 	bl	8004fe4 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80010a4:	210c      	movs	r1, #12
 80010a6:	48a7      	ldr	r0, [pc, #668]	@ (8001344 <ProcessCommand+0x320>)
 80010a8:	f003 ff9c 	bl	8004fe4 <HAL_TIM_PWM_Start>
					HAL_TIM_Base_Start_IT(&htim6);
 80010ac:	48a6      	ldr	r0, [pc, #664]	@ (8001348 <ProcessCommand+0x324>)
 80010ae:	f003 fe9b 	bl	8004de8 <HAL_TIM_Base_Start_IT>
					HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80010b2:	2104      	movs	r1, #4
 80010b4:	48a5      	ldr	r0, [pc, #660]	@ (800134c <ProcessCommand+0x328>)
 80010b6:	f003 ff95 	bl	8004fe4 <HAL_TIM_PWM_Start>
					engineOn = 1;
 80010ba:	4b9c      	ldr	r3, [pc, #624]	@ (800132c <ProcessCommand+0x308>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e02c      	b.n	800111c <ProcessCommand+0xf8>
				ResetMotor(&motorA);
 80010c2:	48a3      	ldr	r0, [pc, #652]	@ (8001350 <ProcessCommand+0x32c>)
 80010c4:	f7ff fcc2 	bl	8000a4c <ResetMotor>
				HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80010c8:	213c      	movs	r1, #60	@ 0x3c
 80010ca:	4899      	ldr	r0, [pc, #612]	@ (8001330 <ProcessCommand+0x30c>)
 80010cc:	f004 fa38 	bl	8005540 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 80010d0:	213c      	movs	r1, #60	@ 0x3c
 80010d2:	4898      	ldr	r0, [pc, #608]	@ (8001334 <ProcessCommand+0x310>)
 80010d4:	f004 fa34 	bl	8005540 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 80010d8:	213c      	movs	r1, #60	@ 0x3c
 80010da:	4897      	ldr	r0, [pc, #604]	@ (8001338 <ProcessCommand+0x314>)
 80010dc:	f004 fa30 	bl	8005540 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim8, TIM_CHANNEL_ALL);
 80010e0:	213c      	movs	r1, #60	@ 0x3c
 80010e2:	4896      	ldr	r0, [pc, #600]	@ (800133c <ProcessCommand+0x318>)
 80010e4:	f004 fa2c 	bl	8005540 <HAL_TIM_Encoder_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	4895      	ldr	r0, [pc, #596]	@ (8001340 <ProcessCommand+0x31c>)
 80010ec:	f004 f874 	bl	80051d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80010f0:	210c      	movs	r1, #12
 80010f2:	4893      	ldr	r0, [pc, #588]	@ (8001340 <ProcessCommand+0x31c>)
 80010f4:	f004 f870 	bl	80051d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 80010f8:	2100      	movs	r1, #0
 80010fa:	4892      	ldr	r0, [pc, #584]	@ (8001344 <ProcessCommand+0x320>)
 80010fc:	f004 f86c 	bl	80051d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8001100:	210c      	movs	r1, #12
 8001102:	4890      	ldr	r0, [pc, #576]	@ (8001344 <ProcessCommand+0x320>)
 8001104:	f004 f868 	bl	80051d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim6);
 8001108:	488f      	ldr	r0, [pc, #572]	@ (8001348 <ProcessCommand+0x324>)
 800110a:	f003 fee5 	bl	8004ed8 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 800110e:	2104      	movs	r1, #4
 8001110:	488e      	ldr	r0, [pc, #568]	@ (800134c <ProcessCommand+0x328>)
 8001112:	f004 f861 	bl	80051d8 <HAL_TIM_PWM_Stop>
				engineOn = 0;
 8001116:	4b85      	ldr	r3, [pc, #532]	@ (800132c <ProcessCommand+0x308>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"ENGINE RUNNING\r\n", 16, HAL_MAX_DELAY);
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	2210      	movs	r2, #16
 8001122:	498c      	ldr	r1, [pc, #560]	@ (8001354 <ProcessCommand+0x330>)
 8001124:	488c      	ldr	r0, [pc, #560]	@ (8001358 <ProcessCommand+0x334>)
 8001126:	f005 fa83 	bl	8006630 <HAL_UART_Transmit>
}
 800112a:	e16f      	b.n	800140c <ProcessCommand+0x3e8>
		else if (strcmp((char*)cmd, "CMDA") == 0) {
 800112c:	498b      	ldr	r1, [pc, #556]	@ (800135c <ProcessCommand+0x338>)
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff f886 	bl	8000240 <strcmp>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <ProcessCommand+0x12e>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 800113a:	2101      	movs	r1, #1
 800113c:	4888      	ldr	r0, [pc, #544]	@ (8001360 <ProcessCommand+0x33c>)
 800113e:	f002 fada 	bl	80036f6 <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart3, (uint8_t*)"LIGHTS RUNNING\r\n", 16, HAL_MAX_DELAY);
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2210      	movs	r2, #16
 8001148:	4986      	ldr	r1, [pc, #536]	@ (8001364 <ProcessCommand+0x340>)
 800114a:	4883      	ldr	r0, [pc, #524]	@ (8001358 <ProcessCommand+0x334>)
 800114c:	f005 fa70 	bl	8006630 <HAL_UART_Transmit>
}
 8001150:	e15c      	b.n	800140c <ProcessCommand+0x3e8>
	    else if (strcmp((char*)cmd, "CMDB") == 0) {
 8001152:	4985      	ldr	r1, [pc, #532]	@ (8001368 <ProcessCommand+0x344>)
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff f873 	bl	8000240 <strcmp>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d119      	bne.n	8001194 <ProcessCommand+0x170>
	    	if (!hornOn) {
 8001160:	4b82      	ldr	r3, [pc, #520]	@ (800136c <ProcessCommand+0x348>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d107      	bne.n	8001178 <ProcessCommand+0x154>
		    	Set_PWM_Frequency(1000);
 8001168:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800116c:	f7ff ff28 	bl	8000fc0 <Set_PWM_Frequency>
		    	hornOn = 1;
 8001170:	4b7e      	ldr	r3, [pc, #504]	@ (800136c <ProcessCommand+0x348>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e005      	b.n	8001184 <ProcessCommand+0x160>
	    		Set_PWM_Frequency(0);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ff21 	bl	8000fc0 <Set_PWM_Frequency>
	    		hornOn = 0;
 800117e:	4b7b      	ldr	r3, [pc, #492]	@ (800136c <ProcessCommand+0x348>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"HORN RUNNING\r\n", 14, HAL_MAX_DELAY);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	220e      	movs	r2, #14
 800118a:	4979      	ldr	r1, [pc, #484]	@ (8001370 <ProcessCommand+0x34c>)
 800118c:	4872      	ldr	r0, [pc, #456]	@ (8001358 <ProcessCommand+0x334>)
 800118e:	f005 fa4f 	bl	8006630 <HAL_UART_Transmit>
}
 8001192:	e13b      	b.n	800140c <ProcessCommand+0x3e8>
	    else if (strcmp((char*)cmd, "CMDC") == 0) {
 8001194:	4977      	ldr	r1, [pc, #476]	@ (8001374 <ProcessCommand+0x350>)
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f852 	bl	8000240 <strcmp>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10d      	bne.n	80011be <ProcessCommand+0x19a>
	    	MotorABS(&motorA);
 80011a2:	486b      	ldr	r0, [pc, #428]	@ (8001350 <ProcessCommand+0x32c>)
 80011a4:	f7ff fc9e 	bl	8000ae4 <MotorABS>
	    	MotorABS(&motorB);
 80011a8:	4873      	ldr	r0, [pc, #460]	@ (8001378 <ProcessCommand+0x354>)
 80011aa:	f7ff fc9b 	bl	8000ae4 <MotorABS>
			HAL_UART_Transmit(&huart3, (uint8_t*)"ABS!!!\r\n", 8, HAL_MAX_DELAY);
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	2208      	movs	r2, #8
 80011b4:	4971      	ldr	r1, [pc, #452]	@ (800137c <ProcessCommand+0x358>)
 80011b6:	4868      	ldr	r0, [pc, #416]	@ (8001358 <ProcessCommand+0x334>)
 80011b8:	f005 fa3a 	bl	8006630 <HAL_UART_Transmit>
}
 80011bc:	e126      	b.n	800140c <ProcessCommand+0x3e8>
	    else if (strncmp((char*)cmd, "CMD", 3) == 0) {
 80011be:	2203      	movs	r2, #3
 80011c0:	496f      	ldr	r1, [pc, #444]	@ (8001380 <ProcessCommand+0x35c>)
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f009 feca 	bl	800af5c <strncmp>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 8117 	bne.w	80013fe <ProcessCommand+0x3da>
	        char* modeStr = (char*)cmd + 3;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3303      	adds	r3, #3
 80011d4:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f009 fe30 	bl	800ae3c <atoi>
 80011dc:	60b8      	str	r0, [r7, #8]
	        if (mode >= 1 && mode <= 9) {
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f340 8104 	ble.w	80013ee <ProcessCommand+0x3ca>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b09      	cmp	r3, #9
 80011ea:	f300 8100 	bgt.w	80013ee <ProcessCommand+0x3ca>
	            switch (mode) {
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	f200 80f8 	bhi.w	80013e8 <ProcessCommand+0x3c4>
 80011f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001200 <ProcessCommand+0x1dc>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001225 	.word	0x08001225
 8001204:	08001249 	.word	0x08001249
 8001208:	0800126d 	.word	0x0800126d
 800120c:	08001291 	.word	0x08001291
 8001210:	080012b5 	.word	0x080012b5
 8001214:	080012d9 	.word	0x080012d9
 8001218:	080012fd 	.word	0x080012fd
 800121c:	080013a1 	.word	0x080013a1
 8001220:	080013c5 	.word	0x080013c5
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	2212      	movs	r2, #18
 800122a:	4956      	ldr	r1, [pc, #344]	@ (8001384 <ProcessCommand+0x360>)
 800122c:	484a      	ldr	r0, [pc, #296]	@ (8001358 <ProcessCommand+0x334>)
 800122e:	f005 f9ff 	bl	8006630 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, DEFAULT, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	4846      	ldr	r0, [pc, #280]	@ (8001350 <ProcessCommand+0x32c>)
 8001238:	f7ff fc39 	bl	8000aae <motor_set_speed>
	                    motor_set_speed(&motorB, DEFAULT, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	484d      	ldr	r0, [pc, #308]	@ (8001378 <ProcessCommand+0x354>)
 8001242:	f7ff fc34 	bl	8000aae <motor_set_speed>
	                    break;
 8001246:	e0d0      	b.n	80013ea <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	2212      	movs	r2, #18
 800124e:	494e      	ldr	r1, [pc, #312]	@ (8001388 <ProcessCommand+0x364>)
 8001250:	4841      	ldr	r0, [pc, #260]	@ (8001358 <ProcessCommand+0x334>)
 8001252:	f005 f9ed 	bl	8006630 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 93);
 8001256:	225d      	movs	r2, #93	@ 0x5d
 8001258:	2101      	movs	r1, #1
 800125a:	483d      	ldr	r0, [pc, #244]	@ (8001350 <ProcessCommand+0x32c>)
 800125c:	f7ff fc27 	bl	8000aae <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 8001260:	2264      	movs	r2, #100	@ 0x64
 8001262:	2101      	movs	r1, #1
 8001264:	4844      	ldr	r0, [pc, #272]	@ (8001378 <ProcessCommand+0x354>)
 8001266:	f7ff fc22 	bl	8000aae <motor_set_speed>
	                    break;
 800126a:	e0be      	b.n	80013ea <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	2212      	movs	r2, #18
 8001272:	4946      	ldr	r1, [pc, #280]	@ (800138c <ProcessCommand+0x368>)
 8001274:	4838      	ldr	r0, [pc, #224]	@ (8001358 <ProcessCommand+0x334>)
 8001276:	f005 f9db 	bl	8006630 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 50);
 800127a:	2232      	movs	r2, #50	@ 0x32
 800127c:	2101      	movs	r1, #1
 800127e:	4834      	ldr	r0, [pc, #208]	@ (8001350 <ProcessCommand+0x32c>)
 8001280:	f7ff fc15 	bl	8000aae <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 8001284:	2264      	movs	r2, #100	@ 0x64
 8001286:	2101      	movs	r1, #1
 8001288:	483b      	ldr	r0, [pc, #236]	@ (8001378 <ProcessCommand+0x354>)
 800128a:	f7ff fc10 	bl	8000aae <motor_set_speed>
	                    break;
 800128e:	e0ac      	b.n	80013ea <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	2212      	movs	r2, #18
 8001296:	493e      	ldr	r1, [pc, #248]	@ (8001390 <ProcessCommand+0x36c>)
 8001298:	482f      	ldr	r0, [pc, #188]	@ (8001358 <ProcessCommand+0x334>)
 800129a:	f005 f9c9 	bl	8006630 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 800129e:	2264      	movs	r2, #100	@ 0x64
 80012a0:	2102      	movs	r1, #2
 80012a2:	482b      	ldr	r0, [pc, #172]	@ (8001350 <ProcessCommand+0x32c>)
 80012a4:	f7ff fc03 	bl	8000aae <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 80012a8:	2264      	movs	r2, #100	@ 0x64
 80012aa:	2101      	movs	r1, #1
 80012ac:	4832      	ldr	r0, [pc, #200]	@ (8001378 <ProcessCommand+0x354>)
 80012ae:	f7ff fbfe 	bl	8000aae <motor_set_speed>
	                    break;
 80012b2:	e09a      	b.n	80013ea <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	2212      	movs	r2, #18
 80012ba:	4936      	ldr	r1, [pc, #216]	@ (8001394 <ProcessCommand+0x370>)
 80012bc:	4826      	ldr	r0, [pc, #152]	@ (8001358 <ProcessCommand+0x334>)
 80012be:	f005 f9b7 	bl	8006630 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 50);
 80012c2:	2232      	movs	r2, #50	@ 0x32
 80012c4:	2102      	movs	r1, #2
 80012c6:	4822      	ldr	r0, [pc, #136]	@ (8001350 <ProcessCommand+0x32c>)
 80012c8:	f7ff fbf1 	bl	8000aae <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 80012cc:	2264      	movs	r2, #100	@ 0x64
 80012ce:	2102      	movs	r1, #2
 80012d0:	4829      	ldr	r0, [pc, #164]	@ (8001378 <ProcessCommand+0x354>)
 80012d2:	f7ff fbec 	bl	8000aae <motor_set_speed>
	                    break;
 80012d6:	e088      	b.n	80013ea <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	2212      	movs	r2, #18
 80012de:	492e      	ldr	r1, [pc, #184]	@ (8001398 <ProcessCommand+0x374>)
 80012e0:	481d      	ldr	r0, [pc, #116]	@ (8001358 <ProcessCommand+0x334>)
 80012e2:	f005 f9a5 	bl	8006630 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 80012e6:	2264      	movs	r2, #100	@ 0x64
 80012e8:	2102      	movs	r1, #2
 80012ea:	4819      	ldr	r0, [pc, #100]	@ (8001350 <ProcessCommand+0x32c>)
 80012ec:	f7ff fbdf 	bl	8000aae <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 80012f0:	2264      	movs	r2, #100	@ 0x64
 80012f2:	2102      	movs	r1, #2
 80012f4:	4820      	ldr	r0, [pc, #128]	@ (8001378 <ProcessCommand+0x354>)
 80012f6:	f7ff fbda 	bl	8000aae <motor_set_speed>
	                    break;
 80012fa:	e076      	b.n	80013ea <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001300:	2212      	movs	r2, #18
 8001302:	4926      	ldr	r1, [pc, #152]	@ (800139c <ProcessCommand+0x378>)
 8001304:	4814      	ldr	r0, [pc, #80]	@ (8001358 <ProcessCommand+0x334>)
 8001306:	f005 f993 	bl	8006630 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 800130a:	2264      	movs	r2, #100	@ 0x64
 800130c:	2102      	movs	r1, #2
 800130e:	4810      	ldr	r0, [pc, #64]	@ (8001350 <ProcessCommand+0x32c>)
 8001310:	f7ff fbcd 	bl	8000aae <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 50);
 8001314:	2232      	movs	r2, #50	@ 0x32
 8001316:	2102      	movs	r1, #2
 8001318:	4817      	ldr	r0, [pc, #92]	@ (8001378 <ProcessCommand+0x354>)
 800131a:	f7ff fbc8 	bl	8000aae <motor_set_speed>
	                    break;
 800131e:	e064      	b.n	80013ea <ProcessCommand+0x3c6>
 8001320:	0800b040 	.word	0x0800b040
 8001324:	40020400 	.word	0x40020400
 8001328:	0800b048 	.word	0x0800b048
 800132c:	20000148 	.word	0x20000148
 8001330:	2000015c 	.word	0x2000015c
 8001334:	200001f4 	.word	0x200001f4
 8001338:	20000240 	.word	0x20000240
 800133c:	20000324 	.word	0x20000324
 8001340:	200001a8 	.word	0x200001a8
 8001344:	2000028c 	.word	0x2000028c
 8001348:	200002d8 	.word	0x200002d8
 800134c:	200003bc 	.word	0x200003bc
 8001350:	200000cc 	.word	0x200000cc
 8001354:	0800b050 	.word	0x0800b050
 8001358:	20000490 	.word	0x20000490
 800135c:	0800b064 	.word	0x0800b064
 8001360:	40021800 	.word	0x40021800
 8001364:	0800b06c 	.word	0x0800b06c
 8001368:	0800b080 	.word	0x0800b080
 800136c:	20000144 	.word	0x20000144
 8001370:	0800b088 	.word	0x0800b088
 8001374:	0800b098 	.word	0x0800b098
 8001378:	20000108 	.word	0x20000108
 800137c:	0800b0a0 	.word	0x0800b0a0
 8001380:	0800b0ac 	.word	0x0800b0ac
 8001384:	0800b0b0 	.word	0x0800b0b0
 8001388:	0800b0c4 	.word	0x0800b0c4
 800138c:	0800b0d8 	.word	0x0800b0d8
 8001390:	0800b0ec 	.word	0x0800b0ec
 8001394:	0800b100 	.word	0x0800b100
 8001398:	0800b114 	.word	0x0800b114
 800139c:	0800b128 	.word	0x0800b128
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	2212      	movs	r2, #18
 80013a6:	491b      	ldr	r1, [pc, #108]	@ (8001414 <ProcessCommand+0x3f0>)
 80013a8:	481b      	ldr	r0, [pc, #108]	@ (8001418 <ProcessCommand+0x3f4>)
 80013aa:	f005 f941 	bl	8006630 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 80013ae:	2264      	movs	r2, #100	@ 0x64
 80013b0:	2101      	movs	r1, #1
 80013b2:	481a      	ldr	r0, [pc, #104]	@ (800141c <ProcessCommand+0x3f8>)
 80013b4:	f7ff fb7b 	bl	8000aae <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 80013b8:	2264      	movs	r2, #100	@ 0x64
 80013ba:	2102      	movs	r1, #2
 80013bc:	4818      	ldr	r0, [pc, #96]	@ (8001420 <ProcessCommand+0x3fc>)
 80013be:	f7ff fb76 	bl	8000aae <motor_set_speed>
	                    break;
 80013c2:	e012      	b.n	80013ea <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	2212      	movs	r2, #18
 80013ca:	4916      	ldr	r1, [pc, #88]	@ (8001424 <ProcessCommand+0x400>)
 80013cc:	4812      	ldr	r0, [pc, #72]	@ (8001418 <ProcessCommand+0x3f4>)
 80013ce:	f005 f92f 	bl	8006630 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 80013d2:	2264      	movs	r2, #100	@ 0x64
 80013d4:	2101      	movs	r1, #1
 80013d6:	4811      	ldr	r0, [pc, #68]	@ (800141c <ProcessCommand+0x3f8>)
 80013d8:	f7ff fb69 	bl	8000aae <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 50);
 80013dc:	2232      	movs	r2, #50	@ 0x32
 80013de:	2101      	movs	r1, #1
 80013e0:	480f      	ldr	r0, [pc, #60]	@ (8001420 <ProcessCommand+0x3fc>)
 80013e2:	f7ff fb64 	bl	8000aae <motor_set_speed>
	                    break;
 80013e6:	e000      	b.n	80013ea <ProcessCommand+0x3c6>
	                    break;
 80013e8:	bf00      	nop
	            switch (mode) {
 80013ea:	bf00      	nop
}
 80013ec:	e00e      	b.n	800140c <ProcessCommand+0x3e8>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2215      	movs	r2, #21
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <ProcessCommand+0x404>)
 80013f6:	4808      	ldr	r0, [pc, #32]	@ (8001418 <ProcessCommand+0x3f4>)
 80013f8:	f005 f91a 	bl	8006630 <HAL_UART_Transmit>
}
 80013fc:	e006      	b.n	800140c <ProcessCommand+0x3e8>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	2211      	movs	r2, #17
 8001404:	4909      	ldr	r1, [pc, #36]	@ (800142c <ProcessCommand+0x408>)
 8001406:	4804      	ldr	r0, [pc, #16]	@ (8001418 <ProcessCommand+0x3f4>)
 8001408:	f005 f912 	bl	8006630 <HAL_UART_Transmit>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	0800b13c 	.word	0x0800b13c
 8001418:	20000490 	.word	0x20000490
 800141c:	200000cc 	.word	0x200000cc
 8001420:	20000108 	.word	0x20000108
 8001424:	0800b150 	.word	0x0800b150
 8001428:	0800b164 	.word	0x0800b164
 800142c:	0800b17c 	.word	0x0800b17c

08001430 <DistanceSensor>:
uint32_t pMillis,
	Value1;
	Value2;
	Distance;

void DistanceSensor(void*) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim9);
 8001438:	4839      	ldr	r0, [pc, #228]	@ (8001520 <DistanceSensor+0xf0>)
 800143a:	f003 fc65 	bl	8004d08 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2140      	movs	r1, #64	@ 0x40
 8001442:	4838      	ldr	r0, [pc, #224]	@ (8001524 <DistanceSensor+0xf4>)
 8001444:	f002 f93e 	bl	80036c4 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2140      	movs	r1, #64	@ 0x40
 800144c:	4835      	ldr	r0, [pc, #212]	@ (8001524 <DistanceSensor+0xf4>)
 800144e:	f002 f939 	bl	80036c4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim9, 0);
 8001452:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <DistanceSensor+0xf0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	@ 0x24
		while (__HAL_TIM_GET_COUNTER (&htim9) < 10);
 800145a:	bf00      	nop
 800145c:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <DistanceSensor+0xf0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	2b09      	cmp	r3, #9
 8001464:	d9fa      	bls.n	800145c <DistanceSensor+0x2c>
		HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2140      	movs	r1, #64	@ 0x40
 800146a:	482e      	ldr	r0, [pc, #184]	@ (8001524 <DistanceSensor+0xf4>)
 800146c:	f002 f92a 	bl	80036c4 <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick();
 8001470:	f001 faa6 	bl	80029c0 <HAL_GetTick>
 8001474:	4603      	mov	r3, r0
 8001476:	4a2c      	ldr	r2, [pc, #176]	@ (8001528 <DistanceSensor+0xf8>)
 8001478:	6013      	str	r3, [r2, #0]

		while (!(HAL_GPIO_ReadPin (DETECTOR_ECHO_GPIO_Port, DETECTOR_ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 800147a:	bf00      	nop
 800147c:	2120      	movs	r1, #32
 800147e:	4829      	ldr	r0, [pc, #164]	@ (8001524 <DistanceSensor+0xf4>)
 8001480:	f002 f908 	bl	8003694 <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d108      	bne.n	800149c <DistanceSensor+0x6c>
 800148a:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <DistanceSensor+0xf8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f103 040a 	add.w	r4, r3, #10
 8001492:	f001 fa95 	bl	80029c0 <HAL_GetTick>
 8001496:	4603      	mov	r3, r0
 8001498:	429c      	cmp	r4, r3
 800149a:	d8ef      	bhi.n	800147c <DistanceSensor+0x4c>
		Value1 = __HAL_TIM_GET_COUNTER (&htim9);
 800149c:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <DistanceSensor+0xf0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a2:	4a22      	ldr	r2, [pc, #136]	@ (800152c <DistanceSensor+0xfc>)
 80014a4:	6013      	str	r3, [r2, #0]

		pMillis = HAL_GetTick();
 80014a6:	f001 fa8b 	bl	80029c0 <HAL_GetTick>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001528 <DistanceSensor+0xf8>)
 80014ae:	6013      	str	r3, [r2, #0]

		while ((HAL_GPIO_ReadPin (DETECTOR_ECHO_GPIO_Port, DETECTOR_ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 80014b0:	bf00      	nop
 80014b2:	2120      	movs	r1, #32
 80014b4:	481b      	ldr	r0, [pc, #108]	@ (8001524 <DistanceSensor+0xf4>)
 80014b6:	f002 f8ed 	bl	8003694 <HAL_GPIO_ReadPin>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <DistanceSensor+0xa2>
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <DistanceSensor+0xf8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80014c8:	f001 fa7a 	bl	80029c0 <HAL_GetTick>
 80014cc:	4603      	mov	r3, r0
 80014ce:	429c      	cmp	r4, r3
 80014d0:	d8ef      	bhi.n	80014b2 <DistanceSensor+0x82>
		Value2 = __HAL_TIM_GET_COUNTER (&htim9);
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <DistanceSensor+0xf0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	461a      	mov	r2, r3
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <DistanceSensor+0x100>)
 80014dc:	601a      	str	r2, [r3, #0]

		Distance = (Value2-Value1)* 0.034/2;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <DistanceSensor+0x100>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <DistanceSensor+0xfc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80014f2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001518 <DistanceSensor+0xe8>
 80014f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014fa:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80014fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001502:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001506:	ee17 2a90 	vmov	r2, s15
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <DistanceSensor+0x104>)
 800150c:	601a      	str	r2, [r3, #0]
		osDelay(50);
 800150e:	2032      	movs	r0, #50	@ 0x32
 8001510:	f006 ffa2 	bl	8008458 <osDelay>
		HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_SET);
 8001514:	e798      	b.n	8001448 <DistanceSensor+0x18>
 8001516:	bf00      	nop
 8001518:	b020c49c 	.word	0xb020c49c
 800151c:	3fa16872 	.word	0x3fa16872
 8001520:	20000370 	.word	0x20000370
 8001524:	40021000 	.word	0x40021000
 8001528:	2000014c 	.word	0x2000014c
 800152c:	20000150 	.word	0x20000150
 8001530:	20000154 	.word	0x20000154
 8001534:	20000158 	.word	0x20000158

08001538 <ProcessHeartBeat>:
	}
}


void ProcessHeartBeat(void* argument) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    for (;;) {

    	if (!engineOn)
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <ProcessHeartBeat+0x54>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01f      	beq.n	8001588 <ProcessHeartBeat+0x50>
    		continue;

    	int16_t data[5] = {motorA.measured_speed, motorB.measured_speed, motorA.set_speed, motorB.set_speed, Distance};
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <ProcessHeartBeat+0x58>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	b21b      	sxth	r3, r3
 800154e:	81bb      	strh	r3, [r7, #12]
 8001550:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <ProcessHeartBeat+0x5c>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	b21b      	sxth	r3, r3
 8001556:	81fb      	strh	r3, [r7, #14]
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <ProcessHeartBeat+0x58>)
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	b21b      	sxth	r3, r3
 800155e:	823b      	strh	r3, [r7, #16]
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <ProcessHeartBeat+0x5c>)
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	b21b      	sxth	r3, r3
 8001566:	827b      	strh	r3, [r7, #18]
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <ProcessHeartBeat+0x60>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b21b      	sxth	r3, r3
 800156e:	82bb      	strh	r3, [r7, #20]
    	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), HAL_MAX_DELAY);
 8001570:	f107 010c 	add.w	r1, r7, #12
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	220a      	movs	r2, #10
 800157a:	4808      	ldr	r0, [pc, #32]	@ (800159c <ProcessHeartBeat+0x64>)
 800157c:	f005 f858 	bl	8006630 <HAL_UART_Transmit>

        osDelay(100);
 8001580:	2064      	movs	r0, #100	@ 0x64
 8001582:	f006 ff69 	bl	8008458 <osDelay>
 8001586:	e7db      	b.n	8001540 <ProcessHeartBeat+0x8>
    		continue;
 8001588:	bf00      	nop
    for (;;) {
 800158a:	e7d9      	b.n	8001540 <ProcessHeartBeat+0x8>
 800158c:	20000148 	.word	0x20000148
 8001590:	200000cc 	.word	0x200000cc
 8001594:	20000108 	.word	0x20000108
 8001598:	20000158 	.word	0x20000158
 800159c:	20000408 	.word	0x20000408

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a6:	f001 f9ba 	bl	800291e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015aa:	f000 f841 	bl	8001630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ae:	f7ff f817 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015b2:	f7fe ffcf 	bl	8000554 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015b6:	f000 ff99 	bl	80024ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80015ba:	f001 f8df 	bl	800277c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80015be:	f000 ff65 	bl	800248c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80015c2:	f000 f9fb 	bl	80019bc <MX_TIM1_Init>
  MX_TIM3_Init();
 80015c6:	f000 fab7 	bl	8001b38 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015ca:	f000 fb0b 	bl	8001be4 <MX_TIM4_Init>
  MX_TIM8_Init();
 80015ce:	f000 fbfd 	bl	8001dcc <MX_TIM8_Init>
  MX_TIM2_Init();
 80015d2:	f000 fa4d 	bl	8001a70 <MX_TIM2_Init>
  MX_TIM6_Init();
 80015d6:	f000 fbc1 	bl	8001d5c <MX_TIM6_Init>
  MX_TIM5_Init();
 80015da:	f000 fb59 	bl	8001c90 <MX_TIM5_Init>
  MX_TIM12_Init();
 80015de:	f000 fc89 	bl	8001ef4 <MX_TIM12_Init>
  MX_TIM9_Init();
 80015e2:	f000 fc4d 	bl	8001e80 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <main+0x80>)
 80015e8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7fe fe32 	bl	8000254 <strlen>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	480a      	ldr	r0, [pc, #40]	@ (8001624 <main+0x84>)
 80015fc:	f005 f818 	bl	8006630 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	4909      	ldr	r1, [pc, #36]	@ (8001628 <main+0x88>)
 8001604:	4809      	ldr	r0, [pc, #36]	@ (800162c <main+0x8c>)
 8001606:	f005 f89c 	bl	8006742 <HAL_UART_Receive_IT>

  Init_MotorSystem();
 800160a:	f7ff fc7d 	bl	8000f08 <Init_MotorSystem>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800160e:	f006 fe13 	bl	8008238 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001612:	f7fe ffc5 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001616:	f006 fe43 	bl	80082a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800161a:	bf00      	nop
 800161c:	e7fd      	b.n	800161a <main+0x7a>
 800161e:	bf00      	nop
 8001620:	0800b190 	.word	0x0800b190
 8001624:	20000490 	.word	0x20000490
 8001628:	20000084 	.word	0x20000084
 800162c:	20000408 	.word	0x20000408

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b094      	sub	sp, #80	@ 0x50
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	2234      	movs	r2, #52	@ 0x34
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f009 fc84 	bl	800af4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001654:	f002 f9a4 	bl	80039a0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <SystemClock_Config+0xdc>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	4a2b      	ldr	r2, [pc, #172]	@ (800170c <SystemClock_Config+0xdc>)
 800165e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	@ 0x40
 8001664:	4b29      	ldr	r3, [pc, #164]	@ (800170c <SystemClock_Config+0xdc>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <SystemClock_Config+0xe0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001678:	4a25      	ldr	r2, [pc, #148]	@ (8001710 <SystemClock_Config+0xe0>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <SystemClock_Config+0xe0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800168c:	2301      	movs	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001690:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80016a4:	2360      	movs	r3, #96	@ 0x60
 80016a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016ac:	2304      	movs	r3, #4
 80016ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 f9d1 	bl	8003a60 <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016c4:	f000 f860 	bl	8001788 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016c8:	f002 f97a 	bl	80039c0 <HAL_PWREx_EnableOverDrive>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016d2:	f000 f859 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d6:	230f      	movs	r3, #15
 80016d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016da:	2302      	movs	r3, #2
 80016dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	2103      	movs	r1, #3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fc62 	bl	8003fbc <HAL_RCC_ClockConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80016fe:	f000 f843 	bl	8001788 <Error_Handler>
  }
}
 8001702:	bf00      	nop
 8001704:	3750      	adds	r7, #80	@ 0x50
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40007000 	.word	0x40007000

08001714 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a13      	ldr	r2, [pc, #76]	@ (8001770 <HAL_UART_RxCpltCallback+0x5c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d120      	bne.n	8001768 <HAL_UART_RxCpltCallback+0x54>
		HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	2201      	movs	r2, #1
 800172c:	4911      	ldr	r1, [pc, #68]	@ (8001774 <HAL_UART_RxCpltCallback+0x60>)
 800172e:	4812      	ldr	r0, [pc, #72]	@ (8001778 <HAL_UART_RxCpltCallback+0x64>)
 8001730:	f004 ff7e 	bl	8006630 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001734:	2201      	movs	r2, #1
 8001736:	490f      	ldr	r1, [pc, #60]	@ (8001774 <HAL_UART_RxCpltCallback+0x60>)
 8001738:	4810      	ldr	r0, [pc, #64]	@ (800177c <HAL_UART_RxCpltCallback+0x68>)
 800173a:	f005 f802 	bl	8006742 <HAL_UART_Receive_IT>
		rxBuff[rxIdx++] = rxData[0];
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <HAL_UART_RxCpltCallback+0x6c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	b2d1      	uxtb	r1, r2
 8001746:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <HAL_UART_RxCpltCallback+0x6c>)
 8001748:	7011      	strb	r1, [r2, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <HAL_UART_RxCpltCallback+0x60>)
 800174e:	7819      	ldrb	r1, [r3, #0]
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <HAL_UART_RxCpltCallback+0x70>)
 8001752:	5499      	strb	r1, [r3, r2]

		if (rxIdx == 4) {
 8001754:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_UART_RxCpltCallback+0x6c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d105      	bne.n	8001768 <HAL_UART_RxCpltCallback+0x54>
			//HAL_UART_Transmit(&huart3, rxBuff, rxIdx, HAL_MAX_DELAY);
			ProcessCommand(rxBuff);
 800175c:	4809      	ldr	r0, [pc, #36]	@ (8001784 <HAL_UART_RxCpltCallback+0x70>)
 800175e:	f7ff fc61 	bl	8001024 <ProcessCommand>
			rxIdx = 0;
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <HAL_UART_RxCpltCallback+0x6c>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40004400 	.word	0x40004400
 8001774:	20000084 	.word	0x20000084
 8001778:	20000490 	.word	0x20000490
 800177c:	20000408 	.word	0x20000408
 8001780:	200000c8 	.word	0x200000c8
 8001784:	20000088 	.word	0x20000088

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <Error_Handler+0x8>

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	210f      	movs	r1, #15
 80017ce:	f06f 0001 	mvn.w	r0, #1
 80017d2:	f001 fa00 	bl	8002bd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <MemManage_Handler+0x4>

080017fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <UsageFault_Handler+0x4>

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181e:	f001 f8bb 	bl	8002998 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001822:	f008 fa93 	bl	8009d4c <xTaskGetSchedulerState>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d001      	beq.n	8001830 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800182c:	f009 f884 	bl	800a938 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <DMA1_Stream5_IRQHandler+0x10>)
 800183a:	f001 fb43 	bl	8002ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000518 	.word	0x20000518

08001848 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <DMA1_Stream6_IRQHandler+0x10>)
 800184e:	f001 fb39 	bl	8002ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000578 	.word	0x20000578

0800185c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001860:	4803      	ldr	r0, [pc, #12]	@ (8001870 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001862:	f003 ff14 	bl	800568e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001866:	4803      	ldr	r0, [pc, #12]	@ (8001874 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001868:	f003 ff11 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000015c 	.word	0x2000015c
 8001874:	20000370 	.word	0x20000370

08001878 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800187e:	f003 ff06 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000015c 	.word	0x2000015c

0800188c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001892:	f003 fefc 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000015c 	.word	0x2000015c

080018a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <TIM1_CC_IRQHandler+0x10>)
 80018a6:	f003 fef2 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000015c 	.word	0x2000015c

080018b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <TIM2_IRQHandler+0x10>)
 80018ba:	f003 fee8 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001a8 	.word	0x200001a8

080018c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <TIM3_IRQHandler+0x10>)
 80018ce:	f003 fede 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200001f4 	.word	0x200001f4

080018dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <TIM4_IRQHandler+0x10>)
 80018e2:	f003 fed4 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000240 	.word	0x20000240

080018f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <USART2_IRQHandler+0x10>)
 80018f6:	f004 ff69 	bl	80067cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000408 	.word	0x20000408

08001904 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <USART3_IRQHandler+0x10>)
 800190a:	f004 ff5f 	bl	80067cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000490 	.word	0x20000490

08001918 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800191c:	4803      	ldr	r0, [pc, #12]	@ (800192c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800191e:	f003 feb6 	bl	800568e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8001922:	4803      	ldr	r0, [pc, #12]	@ (8001930 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8001924:	f003 feb3 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000324 	.word	0x20000324
 8001930:	200003bc 	.word	0x200003bc

08001934 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800193a:	f003 fea8 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000324 	.word	0x20000324

08001948 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800194e:	f003 fe9e 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000324 	.word	0x20000324

0800195c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <TIM8_CC_IRQHandler+0x10>)
 8001962:	f003 fe94 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000324 	.word	0x20000324

08001970 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <TIM5_IRQHandler+0x10>)
 8001976:	f003 fe8a 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000028c 	.word	0x2000028c

08001984 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <TIM6_DAC_IRQHandler+0x10>)
 800198a:	f003 fe80 	bl	800568e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200002d8 	.word	0x200002d8

08001998 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <SystemInit+0x20>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a2:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <SystemInit+0x20>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08c      	sub	sp, #48	@ 0x30
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	2224      	movs	r2, #36	@ 0x24
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f009 fabe 	bl	800af4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	463b      	mov	r3, r7
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019da:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <MX_TIM1_Init+0xac>)
 80019dc:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <MX_TIM1_Init+0xb0>)
 80019de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <MX_TIM1_Init+0xac>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <MX_TIM1_Init+0xac>)
 80019e8:	2210      	movs	r2, #16
 80019ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <MX_TIM1_Init+0xac>)
 80019ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <MX_TIM1_Init+0xac>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <MX_TIM1_Init+0xac>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a00:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <MX_TIM1_Init+0xac>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a06:	2303      	movs	r3, #3
 8001a08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a16:	230f      	movs	r3, #15
 8001a18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001a26:	230f      	movs	r3, #15
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <MX_TIM1_Init+0xac>)
 8001a32:	f003 fc51 	bl	80052d8 <HAL_TIM_Encoder_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a3c:	f7ff fea4 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_TIM1_Init+0xac>)
 8001a52:	f004 fcf3 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a5c:	f7ff fe94 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	3730      	adds	r7, #48	@ 0x30
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	2000015c 	.word	0x2000015c
 8001a6c:	40010000 	.word	0x40010000

08001a70 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a82:	463b      	mov	r3, r7
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a94:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001a96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001a9c:	4b25      	ldr	r3, [pc, #148]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001a9e:	222f      	movs	r2, #47	@ 0x2f
 8001aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001aa8:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001aaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001abc:	481d      	ldr	r0, [pc, #116]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001abe:	f003 fa3a 	bl	8004f36 <HAL_TIM_PWM_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ac8:	f7ff fe5e 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4816      	ldr	r0, [pc, #88]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001adc:	f004 fcae 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ae6:	f7ff fe4f 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aea:	2360      	movs	r3, #96	@ 0x60
 8001aec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afa:	463b      	mov	r3, r7
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	480c      	ldr	r0, [pc, #48]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001b02:	f003 fecb 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001b0c:	f7ff fe3c 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	220c      	movs	r2, #12
 8001b14:	4619      	mov	r1, r3
 8001b16:	4807      	ldr	r0, [pc, #28]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001b18:	f003 fec0 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001b22:	f7ff fe31 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b26:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <MX_TIM2_Init+0xc4>)
 8001b28:	f000 fc12 	bl	8002350 <HAL_TIM_MspPostInit>

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	@ 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200001a8 	.word	0x200001a8

08001b38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	@ 0x30
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2224      	movs	r2, #36	@ 0x24
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f009 fa00 	bl	800af4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <MX_TIM3_Init+0xa4>)
 8001b58:	4a21      	ldr	r2, [pc, #132]	@ (8001be0 <MX_TIM3_Init+0xa8>)
 8001b5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <MX_TIM3_Init+0xa4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <MX_TIM3_Init+0xa4>)
 8001b64:	2210      	movs	r2, #16
 8001b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b68:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <MX_TIM3_Init+0xa4>)
 8001b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <MX_TIM3_Init+0xa4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <MX_TIM3_Init+0xa4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b84:	2301      	movs	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b94:	2301      	movs	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <MX_TIM3_Init+0xa4>)
 8001ba8:	f003 fb96 	bl	80052d8 <HAL_TIM_Encoder_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001bb2:	f7ff fde9 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4806      	ldr	r0, [pc, #24]	@ (8001bdc <MX_TIM3_Init+0xa4>)
 8001bc4:	f004 fc3a 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001bce:	f7ff fddb 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	3730      	adds	r7, #48	@ 0x30
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200001f4 	.word	0x200001f4
 8001be0:	40000400 	.word	0x40000400

08001be4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	@ 0x30
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	2224      	movs	r2, #36	@ 0x24
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f009 f9aa 	bl	800af4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c02:	4b21      	ldr	r3, [pc, #132]	@ (8001c88 <MX_TIM4_Init+0xa4>)
 8001c04:	4a21      	ldr	r2, [pc, #132]	@ (8001c8c <MX_TIM4_Init+0xa8>)
 8001c06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <MX_TIM4_Init+0xa4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <MX_TIM4_Init+0xa4>)
 8001c10:	2210      	movs	r2, #16
 8001c12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <MX_TIM4_Init+0xa4>)
 8001c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <MX_TIM4_Init+0xa4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <MX_TIM4_Init+0xa4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c30:	2301      	movs	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001c38:	230f      	movs	r3, #15
 8001c3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c40:	2301      	movs	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001c48:	230f      	movs	r3, #15
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4619      	mov	r1, r3
 8001c52:	480d      	ldr	r0, [pc, #52]	@ (8001c88 <MX_TIM4_Init+0xa4>)
 8001c54:	f003 fb40 	bl	80052d8 <HAL_TIM_Encoder_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001c5e:	f7ff fd93 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	@ (8001c88 <MX_TIM4_Init+0xa4>)
 8001c70:	f004 fbe4 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c7a:	f7ff fd85 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	3730      	adds	r7, #48	@ 0x30
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000240 	.word	0x20000240
 8001c8c:	40000800 	.word	0x40000800

08001c90 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cb4:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001cb6:	4a28      	ldr	r2, [pc, #160]	@ (8001d58 <MX_TIM5_Init+0xc8>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001cba:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001cbc:	222f      	movs	r2, #47	@ 0x2f
 8001cbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001cc6:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001cc8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ccc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001cda:	481e      	ldr	r0, [pc, #120]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001cdc:	f003 f92b 	bl	8004f36 <HAL_TIM_PWM_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001ce6:	f7ff fd4f 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4816      	ldr	r0, [pc, #88]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001cfa:	f004 fb9f 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001d04:	f7ff fd40 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d08:	2360      	movs	r3, #96	@ 0x60
 8001d0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480d      	ldr	r0, [pc, #52]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001d20:	f003 fdbc 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001d2a:	f7ff fd2d 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	220c      	movs	r2, #12
 8001d32:	4619      	mov	r1, r3
 8001d34:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001d36:	f003 fdb1 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001d40:	f7ff fd22 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d44:	4803      	ldr	r0, [pc, #12]	@ (8001d54 <MX_TIM5_Init+0xc4>)
 8001d46:	f000 fb03 	bl	8002350 <HAL_TIM_MspPostInit>

}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	@ 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000028c 	.word	0x2000028c
 8001d58:	40000c00 	.word	0x40000c00

08001d5c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <MX_TIM6_Init+0x68>)
 8001d6e:	4a16      	ldr	r2, [pc, #88]	@ (8001dc8 <MX_TIM6_Init+0x6c>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <MX_TIM6_Init+0x68>)
 8001d74:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001d78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <MX_TIM6_Init+0x68>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <MX_TIM6_Init+0x68>)
 8001d82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <MX_TIM6_Init+0x68>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d8e:	480d      	ldr	r0, [pc, #52]	@ (8001dc4 <MX_TIM6_Init+0x68>)
 8001d90:	f002 ff62 	bl	8004c58 <HAL_TIM_Base_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d9a:	f7ff fcf5 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	@ (8001dc4 <MX_TIM6_Init+0x68>)
 8001dac:	f004 fb46 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001db6:	f7ff fce7 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200002d8 	.word	0x200002d8
 8001dc8:	40001000 	.word	0x40001000

08001dcc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	@ 0x30
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	2224      	movs	r2, #36	@ 0x24
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f009 f8b6 	bl	800af4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dea:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <MX_TIM8_Init+0xac>)
 8001dec:	4a23      	ldr	r2, [pc, #140]	@ (8001e7c <MX_TIM8_Init+0xb0>)
 8001dee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001df0:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <MX_TIM8_Init+0xac>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001df6:	4b20      	ldr	r3, [pc, #128]	@ (8001e78 <MX_TIM8_Init+0xac>)
 8001df8:	2210      	movs	r2, #16
 8001dfa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <MX_TIM8_Init+0xac>)
 8001dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e04:	4b1c      	ldr	r3, [pc, #112]	@ (8001e78 <MX_TIM8_Init+0xac>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <MX_TIM8_Init+0xac>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <MX_TIM8_Init+0xac>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e16:	2303      	movs	r3, #3
 8001e18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001e26:	230f      	movs	r3, #15
 8001e28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001e36:	230f      	movs	r3, #15
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <MX_TIM8_Init+0xac>)
 8001e42:	f003 fa49 	bl	80052d8 <HAL_TIM_Encoder_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001e4c:	f7ff fc9c 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	@ (8001e78 <MX_TIM8_Init+0xac>)
 8001e62:	f004 faeb 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001e6c:	f7ff fc8c 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3730      	adds	r7, #48	@ 0x30
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000324 	.word	0x20000324
 8001e7c:	40010400 	.word	0x40010400

08001e80 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e92:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <MX_TIM9_Init+0x6c>)
 8001e94:	4a16      	ldr	r2, [pc, #88]	@ (8001ef0 <MX_TIM9_Init+0x70>)
 8001e96:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 95;
 8001e98:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <MX_TIM9_Init+0x6c>)
 8001e9a:	225f      	movs	r2, #95	@ 0x5f
 8001e9c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <MX_TIM9_Init+0x6c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <MX_TIM9_Init+0x6c>)
 8001ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eaa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <MX_TIM9_Init+0x6c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_TIM9_Init+0x6c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001eb8:	480c      	ldr	r0, [pc, #48]	@ (8001eec <MX_TIM9_Init+0x6c>)
 8001eba:	f002 fecd 	bl	8004c58 <HAL_TIM_Base_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001ec4:	f7ff fc60 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ecc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ece:	463b      	mov	r3, r7
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4806      	ldr	r0, [pc, #24]	@ (8001eec <MX_TIM9_Init+0x6c>)
 8001ed4:	f003 fdf6 	bl	8005ac4 <HAL_TIM_ConfigClockSource>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001ede:	f7ff fc53 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000370 	.word	0x20000370
 8001ef0:	40014000 	.word	0x40014000

08001ef4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
 8001f08:	615a      	str	r2, [r3, #20]
 8001f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <MX_TIM12_Init+0x84>)
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <MX_TIM12_Init+0x88>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001f12:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <MX_TIM12_Init+0x84>)
 8001f14:	225f      	movs	r2, #95	@ 0x5f
 8001f16:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <MX_TIM12_Init+0x84>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <MX_TIM12_Init+0x84>)
 8001f20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f24:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <MX_TIM12_Init+0x84>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <MX_TIM12_Init+0x84>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f32:	4811      	ldr	r0, [pc, #68]	@ (8001f78 <MX_TIM12_Init+0x84>)
 8001f34:	f002 ffff 	bl	8004f36 <HAL_TIM_PWM_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001f3e:	f7ff fc23 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f42:	2360      	movs	r3, #96	@ 0x60
 8001f44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2204      	movs	r2, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	4807      	ldr	r0, [pc, #28]	@ (8001f78 <MX_TIM12_Init+0x84>)
 8001f5a:	f003 fc9f 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001f64:	f7ff fc10 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f68:	4803      	ldr	r0, [pc, #12]	@ (8001f78 <MX_TIM12_Init+0x84>)
 8001f6a:	f000 f9f1 	bl	8002350 <HAL_TIM_MspPostInit>

}
 8001f6e:	bf00      	nop
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200003bc 	.word	0x200003bc
 8001f7c:	40001800 	.word	0x40001800

08001f80 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b090      	sub	sp, #64	@ 0x40
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a93      	ldr	r2, [pc, #588]	@ (80021ec <HAL_TIM_Encoder_MspInit+0x26c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d149      	bne.n	8002036 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa2:	4b93      	ldr	r3, [pc, #588]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a92      	ldr	r2, [pc, #584]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b90      	ldr	r3, [pc, #576]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fba:	4b8d      	ldr	r3, [pc, #564]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a8c      	ldr	r2, [pc, #560]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b8a      	ldr	r3, [pc, #552]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 8001fd2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fec:	4619      	mov	r1, r3
 8001fee:	4881      	ldr	r0, [pc, #516]	@ (80021f4 <HAL_TIM_Encoder_MspInit+0x274>)
 8001ff0:	f001 f9a4 	bl	800333c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2105      	movs	r1, #5
 8001ff8:	2018      	movs	r0, #24
 8001ffa:	f000 fdec 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ffe:	2018      	movs	r0, #24
 8002000:	f000 fe05 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2105      	movs	r1, #5
 8002008:	2019      	movs	r0, #25
 800200a:	f000 fde4 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800200e:	2019      	movs	r0, #25
 8002010:	f000 fdfd 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2105      	movs	r1, #5
 8002018:	201a      	movs	r0, #26
 800201a:	f000 fddc 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800201e:	201a      	movs	r0, #26
 8002020:	f000 fdf5 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2105      	movs	r1, #5
 8002028:	201b      	movs	r0, #27
 800202a:	f000 fdd4 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800202e:	201b      	movs	r0, #27
 8002030:	f000 fded 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002034:	e0d5      	b.n	80021e2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6f      	ldr	r2, [pc, #444]	@ (80021f8 <HAL_TIM_Encoder_MspInit+0x278>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d14c      	bne.n	80020da <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002040:	4b6b      	ldr	r3, [pc, #428]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	4a6a      	ldr	r2, [pc, #424]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	6413      	str	r3, [r2, #64]	@ 0x40
 800204c:	4b68      	ldr	r3, [pc, #416]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	4b65      	ldr	r3, [pc, #404]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	4a64      	ldr	r2, [pc, #400]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6313      	str	r3, [r2, #48]	@ 0x30
 8002064:	4b62      	ldr	r3, [pc, #392]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	4a5e      	ldr	r2, [pc, #376]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6313      	str	r3, [r2, #48]	@ 0x30
 800207c:	4b5c      	ldr	r3, [pc, #368]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8002088:	2340      	movs	r3, #64	@ 0x40
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002098:	2302      	movs	r3, #2
 800209a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	4856      	ldr	r0, [pc, #344]	@ (80021fc <HAL_TIM_Encoder_MspInit+0x27c>)
 80020a4:	f001 f94a 	bl	800333c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 80020a8:	2320      	movs	r3, #32
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020b8:	2302      	movs	r3, #2
 80020ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c0:	4619      	mov	r1, r3
 80020c2:	484f      	ldr	r0, [pc, #316]	@ (8002200 <HAL_TIM_Encoder_MspInit+0x280>)
 80020c4:	f001 f93a 	bl	800333c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2105      	movs	r1, #5
 80020cc:	201d      	movs	r0, #29
 80020ce:	f000 fd82 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020d2:	201d      	movs	r0, #29
 80020d4:	f000 fd9b 	bl	8002c0e <HAL_NVIC_EnableIRQ>
}
 80020d8:	e083      	b.n	80021e2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a49      	ldr	r2, [pc, #292]	@ (8002204 <HAL_TIM_Encoder_MspInit+0x284>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d131      	bne.n	8002148 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020e4:	4b42      	ldr	r3, [pc, #264]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	4a41      	ldr	r2, [pc, #260]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f0:	4b3f      	ldr	r3, [pc, #252]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fc:	4b3c      	ldr	r3, [pc, #240]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	4a3b      	ldr	r2, [pc, #236]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6313      	str	r3, [r2, #48]	@ 0x30
 8002108:	4b39      	ldr	r3, [pc, #228]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8002114:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002126:	2302      	movs	r3, #2
 8002128:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212e:	4619      	mov	r1, r3
 8002130:	4835      	ldr	r0, [pc, #212]	@ (8002208 <HAL_TIM_Encoder_MspInit+0x288>)
 8002132:	f001 f903 	bl	800333c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2105      	movs	r1, #5
 800213a:	201e      	movs	r0, #30
 800213c:	f000 fd4b 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002140:	201e      	movs	r0, #30
 8002142:	f000 fd64 	bl	8002c0e <HAL_NVIC_EnableIRQ>
}
 8002146:	e04c      	b.n	80021e2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2f      	ldr	r2, [pc, #188]	@ (800220c <HAL_TIM_Encoder_MspInit+0x28c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d147      	bne.n	80021e2 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002152:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	4a26      	ldr	r2, [pc, #152]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	6453      	str	r3, [r2, #68]	@ 0x44
 800215e:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a20      	ldr	r2, [pc, #128]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8002182:	23c0      	movs	r3, #192	@ 0xc0
 8002184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002192:	2303      	movs	r3, #3
 8002194:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800219a:	4619      	mov	r1, r3
 800219c:	481c      	ldr	r0, [pc, #112]	@ (8002210 <HAL_TIM_Encoder_MspInit+0x290>)
 800219e:	f001 f8cd 	bl	800333c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2105      	movs	r1, #5
 80021a6:	202b      	movs	r0, #43	@ 0x2b
 80021a8:	f000 fd15 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80021ac:	202b      	movs	r0, #43	@ 0x2b
 80021ae:	f000 fd2e 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2105      	movs	r1, #5
 80021b6:	202c      	movs	r0, #44	@ 0x2c
 80021b8:	f000 fd0d 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80021bc:	202c      	movs	r0, #44	@ 0x2c
 80021be:	f000 fd26 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2105      	movs	r1, #5
 80021c6:	202d      	movs	r0, #45	@ 0x2d
 80021c8:	f000 fd05 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80021cc:	202d      	movs	r0, #45	@ 0x2d
 80021ce:	f000 fd1e 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2105      	movs	r1, #5
 80021d6:	202e      	movs	r0, #46	@ 0x2e
 80021d8:	f000 fcfd 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80021dc:	202e      	movs	r0, #46	@ 0x2e
 80021de:	f000 fd16 	bl	8002c0e <HAL_NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3740      	adds	r7, #64	@ 0x40
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40010000 	.word	0x40010000
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40000400 	.word	0x40000400
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40000800 	.word	0x40000800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40010400 	.word	0x40010400
 8002210:	40020800 	.word	0x40020800

08002214 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002224:	d114      	bne.n	8002250 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	4a25      	ldr	r2, [pc, #148]	@ (80022c0 <HAL_TIM_PWM_MspInit+0xac>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6413      	str	r3, [r2, #64]	@ 0x40
 8002232:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2105      	movs	r1, #5
 8002242:	201c      	movs	r0, #28
 8002244:	f000 fcc7 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002248:	201c      	movs	r0, #28
 800224a:	f000 fce0 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800224e:	e032      	b.n	80022b6 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1b      	ldr	r2, [pc, #108]	@ (80022c4 <HAL_TIM_PWM_MspInit+0xb0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d114      	bne.n	8002284 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800225a:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <HAL_TIM_PWM_MspInit+0xac>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	4a18      	ldr	r2, [pc, #96]	@ (80022c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6413      	str	r3, [r2, #64]	@ 0x40
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2105      	movs	r1, #5
 8002276:	2032      	movs	r0, #50	@ 0x32
 8002278:	f000 fcad 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800227c:	2032      	movs	r0, #50	@ 0x32
 800227e:	f000 fcc6 	bl	8002c0e <HAL_NVIC_EnableIRQ>
}
 8002282:	e018      	b.n	80022b6 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <HAL_TIM_PWM_MspInit+0xb4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d113      	bne.n	80022b6 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800228e:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a0b      	ldr	r2, [pc, #44]	@ (80022c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <HAL_TIM_PWM_MspInit+0xac>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2105      	movs	r1, #5
 80022aa:	202b      	movs	r0, #43	@ 0x2b
 80022ac:	f000 fc93 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80022b0:	202b      	movs	r0, #43	@ 0x2b
 80022b2:	f000 fcac 	bl	8002c0e <HAL_NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40000c00 	.word	0x40000c00
 80022c8:	40001800 	.word	0x40001800

080022cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <HAL_TIM_Base_MspInit+0x78>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d114      	bne.n	8002308 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022de:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_TIM_Base_MspInit+0x7c>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	4a19      	ldr	r2, [pc, #100]	@ (8002348 <HAL_TIM_Base_MspInit+0x7c>)
 80022e4:	f043 0310 	orr.w	r3, r3, #16
 80022e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <HAL_TIM_Base_MspInit+0x7c>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2105      	movs	r1, #5
 80022fa:	2036      	movs	r0, #54	@ 0x36
 80022fc:	f000 fc6b 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002300:	2036      	movs	r0, #54	@ 0x36
 8002302:	f000 fc84 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002306:	e018      	b.n	800233a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM9)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0f      	ldr	r2, [pc, #60]	@ (800234c <HAL_TIM_Base_MspInit+0x80>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d113      	bne.n	800233a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <HAL_TIM_Base_MspInit+0x7c>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4a0c      	ldr	r2, [pc, #48]	@ (8002348 <HAL_TIM_Base_MspInit+0x7c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6453      	str	r3, [r2, #68]	@ 0x44
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <HAL_TIM_Base_MspInit+0x7c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2105      	movs	r1, #5
 800232e:	2018      	movs	r0, #24
 8002330:	f000 fc51 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002334:	2018      	movs	r0, #24
 8002336:	f000 fc6a 	bl	8002c0e <HAL_NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40001000 	.word	0x40001000
 8002348:	40023800 	.word	0x40023800
 800234c:	40014000 	.word	0x40014000

08002350 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	@ 0x30
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002370:	d139      	bne.n	80023e6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	4b41      	ldr	r3, [pc, #260]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a40      	ldr	r2, [pc, #256]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b3e      	ldr	r3, [pc, #248]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a3a      	ldr	r2, [pc, #232]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b38      	ldr	r3, [pc, #224]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 80023a2:	2320      	movs	r3, #32
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023b2:	2301      	movs	r3, #1
 80023b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	482f      	ldr	r0, [pc, #188]	@ (800247c <HAL_TIM_MspPostInit+0x12c>)
 80023be:	f000 ffbd 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 80023c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023d4:	2301      	movs	r3, #1
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	4828      	ldr	r0, [pc, #160]	@ (8002480 <HAL_TIM_MspPostInit+0x130>)
 80023e0:	f000 ffac 	bl	800333c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023e4:	e043      	b.n	800246e <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a26      	ldr	r2, [pc, #152]	@ (8002484 <HAL_TIM_MspPostInit+0x134>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d11c      	bne.n	800242a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f4:	4a20      	ldr	r2, [pc, #128]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8002408:	2309      	movs	r3, #9
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002418:	2302      	movs	r3, #2
 800241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	4816      	ldr	r0, [pc, #88]	@ (800247c <HAL_TIM_MspPostInit+0x12c>)
 8002424:	f000 ff8a 	bl	800333c <HAL_GPIO_Init>
}
 8002428:	e021      	b.n	800246e <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_TIM_MspPostInit+0x138>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d11c      	bne.n	800246e <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002438:	4a0f      	ldr	r2, [pc, #60]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002440:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <HAL_TIM_MspPostInit+0x128>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800244c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800245e:	2309      	movs	r3, #9
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	@ (8002480 <HAL_TIM_MspPostInit+0x130>)
 800246a:	f000 ff67 	bl	800333c <HAL_GPIO_Init>
}
 800246e:	bf00      	nop
 8002470:	3730      	adds	r7, #48	@ 0x30
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40000c00 	.word	0x40000c00
 8002488:	40001800 	.word	0x40001800

0800248c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002490:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 8002492:	4a15      	ldr	r2, [pc, #84]	@ (80024e8 <MX_USART2_UART_Init+0x5c>)
 8002494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002496:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 8002498:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800249c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c2:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ce:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <MX_USART2_UART_Init+0x58>)
 80024d0:	f004 f860 	bl	8006594 <HAL_UART_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024da:	f7ff f955 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000408 	.word	0x20000408
 80024e8:	40004400 	.word	0x40004400

080024ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024f0:	4b14      	ldr	r3, [pc, #80]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 80024f2:	4a15      	ldr	r2, [pc, #84]	@ (8002548 <MX_USART3_UART_Init+0x5c>)
 80024f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024f6:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 80024f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024fe:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002504:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800250a:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 8002512:	220c      	movs	r2, #12
 8002514:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800251c:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002522:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	@ (8002544 <MX_USART3_UART_Init+0x58>)
 8002530:	f004 f830 	bl	8006594 <HAL_UART_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800253a:	f7ff f925 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000490 	.word	0x20000490
 8002548:	40004800 	.word	0x40004800

0800254c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0b0      	sub	sp, #192	@ 0xc0
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	2290      	movs	r2, #144	@ 0x90
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f008 fced 	bl	800af4c <memset>
  if(uartHandle->Instance==USART2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a79      	ldr	r2, [pc, #484]	@ (800275c <HAL_UART_MspInit+0x210>)
 8002578:	4293      	cmp	r3, r2
 800257a:	f040 80a0 	bne.w	80026be <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002582:	2300      	movs	r3, #0
 8002584:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4618      	mov	r0, r3
 800258c:	f001 ff3c 	bl	8004408 <HAL_RCCEx_PeriphCLKConfig>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002596:	f7ff f8f7 	bl	8001788 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800259a:	4b71      	ldr	r3, [pc, #452]	@ (8002760 <HAL_UART_MspInit+0x214>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a70      	ldr	r2, [pc, #448]	@ (8002760 <HAL_UART_MspInit+0x214>)
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002760 <HAL_UART_MspInit+0x214>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002760 <HAL_UART_MspInit+0x214>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	4a6a      	ldr	r2, [pc, #424]	@ (8002760 <HAL_UART_MspInit+0x214>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025be:	4b68      	ldr	r3, [pc, #416]	@ (8002760 <HAL_UART_MspInit+0x214>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025ca:	2360      	movs	r3, #96	@ 0x60
 80025cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e2:	2307      	movs	r3, #7
 80025e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80025ec:	4619      	mov	r1, r3
 80025ee:	485d      	ldr	r0, [pc, #372]	@ (8002764 <HAL_UART_MspInit+0x218>)
 80025f0:	f000 fea4 	bl	800333c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80025f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 80025f6:	4a5d      	ldr	r2, [pc, #372]	@ (800276c <HAL_UART_MspInit+0x220>)
 80025f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80025fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 80025fc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002600:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002602:	4b59      	ldr	r3, [pc, #356]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002608:	4b57      	ldr	r3, [pc, #348]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800260e:	4b56      	ldr	r3, [pc, #344]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 8002610:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002614:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002616:	4b54      	ldr	r3, [pc, #336]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 8002618:	2200      	movs	r2, #0
 800261a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800261c:	4b52      	ldr	r3, [pc, #328]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002622:	4b51      	ldr	r3, [pc, #324]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 8002624:	2200      	movs	r2, #0
 8002626:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002628:	4b4f      	ldr	r3, [pc, #316]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 800262a:	2200      	movs	r2, #0
 800262c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800262e:	4b4e      	ldr	r3, [pc, #312]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 8002630:	2200      	movs	r2, #0
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002634:	484c      	ldr	r0, [pc, #304]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 8002636:	f000 fb05 	bl	8002c44 <HAL_DMA_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8002640:	f7ff f8a2 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a48      	ldr	r2, [pc, #288]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 8002648:	675a      	str	r2, [r3, #116]	@ 0x74
 800264a:	4a47      	ldr	r2, [pc, #284]	@ (8002768 <HAL_UART_MspInit+0x21c>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002650:	4b47      	ldr	r3, [pc, #284]	@ (8002770 <HAL_UART_MspInit+0x224>)
 8002652:	4a48      	ldr	r2, [pc, #288]	@ (8002774 <HAL_UART_MspInit+0x228>)
 8002654:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002656:	4b46      	ldr	r3, [pc, #280]	@ (8002770 <HAL_UART_MspInit+0x224>)
 8002658:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800265c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800265e:	4b44      	ldr	r3, [pc, #272]	@ (8002770 <HAL_UART_MspInit+0x224>)
 8002660:	2240      	movs	r2, #64	@ 0x40
 8002662:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002664:	4b42      	ldr	r3, [pc, #264]	@ (8002770 <HAL_UART_MspInit+0x224>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800266a:	4b41      	ldr	r3, [pc, #260]	@ (8002770 <HAL_UART_MspInit+0x224>)
 800266c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002670:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002672:	4b3f      	ldr	r3, [pc, #252]	@ (8002770 <HAL_UART_MspInit+0x224>)
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002678:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_UART_MspInit+0x224>)
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800267e:	4b3c      	ldr	r3, [pc, #240]	@ (8002770 <HAL_UART_MspInit+0x224>)
 8002680:	2200      	movs	r2, #0
 8002682:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002684:	4b3a      	ldr	r3, [pc, #232]	@ (8002770 <HAL_UART_MspInit+0x224>)
 8002686:	2200      	movs	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800268a:	4b39      	ldr	r3, [pc, #228]	@ (8002770 <HAL_UART_MspInit+0x224>)
 800268c:	2200      	movs	r2, #0
 800268e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002690:	4837      	ldr	r0, [pc, #220]	@ (8002770 <HAL_UART_MspInit+0x224>)
 8002692:	f000 fad7 	bl	8002c44 <HAL_DMA_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 800269c:	f7ff f874 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a33      	ldr	r2, [pc, #204]	@ (8002770 <HAL_UART_MspInit+0x224>)
 80026a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80026a6:	4a32      	ldr	r2, [pc, #200]	@ (8002770 <HAL_UART_MspInit+0x224>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2105      	movs	r1, #5
 80026b0:	2026      	movs	r0, #38	@ 0x26
 80026b2:	f000 fa90 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026b6:	2026      	movs	r0, #38	@ 0x26
 80026b8:	f000 faa9 	bl	8002c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026bc:	e049      	b.n	8002752 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002778 <HAL_UART_MspInit+0x22c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d144      	bne.n	8002752 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d2:	f107 031c 	add.w	r3, r7, #28
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 fe96 	bl	8004408 <HAL_RCCEx_PeriphCLKConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80026e2:	f7ff f851 	bl	8001788 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <HAL_UART_MspInit+0x214>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <HAL_UART_MspInit+0x214>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_UART_MspInit+0x214>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fe:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <HAL_UART_MspInit+0x214>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	4a17      	ldr	r2, [pc, #92]	@ (8002760 <HAL_UART_MspInit+0x214>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6313      	str	r3, [r2, #48]	@ 0x30
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HAL_UART_MspInit+0x214>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002716:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800271a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002730:	2307      	movs	r3, #7
 8002732:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002736:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800273a:	4619      	mov	r1, r3
 800273c:	4809      	ldr	r0, [pc, #36]	@ (8002764 <HAL_UART_MspInit+0x218>)
 800273e:	f000 fdfd 	bl	800333c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2105      	movs	r1, #5
 8002746:	2027      	movs	r0, #39	@ 0x27
 8002748:	f000 fa45 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800274c:	2027      	movs	r0, #39	@ 0x27
 800274e:	f000 fa5e 	bl	8002c0e <HAL_NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	37c0      	adds	r7, #192	@ 0xc0
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40004400 	.word	0x40004400
 8002760:	40023800 	.word	0x40023800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	20000518 	.word	0x20000518
 800276c:	40026088 	.word	0x40026088
 8002770:	20000578 	.word	0x20000578
 8002774:	400260a0 	.word	0x400260a0
 8002778:	40004800 	.word	0x40004800

0800277c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002780:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002782:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002786:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002788:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800278a:	2206      	movs	r2, #6
 800278c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002790:	2202      	movs	r2, #2
 8002792:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002794:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002796:	2200      	movs	r2, #0
 8002798:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800279a:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800279c:	2202      	movs	r2, #2
 800279e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80027ac:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80027be:	4805      	ldr	r0, [pc, #20]	@ (80027d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027c0:	f000 ffb3 	bl	800372a <HAL_PCD_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80027ca:	f7fe ffdd 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200005d8 	.word	0x200005d8

080027d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b0ae      	sub	sp, #184	@ 0xb8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2290      	movs	r2, #144	@ 0x90
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f008 fba7 	bl	800af4c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002806:	d159      	bne.n	80028bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002808:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800280c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4618      	mov	r0, r3
 800281a:	f001 fdf5 	bl	8004408 <HAL_RCCEx_PeriphCLKConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002824:	f7fe ffb0 	bl	8001788 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002828:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <HAL_PCD_MspInit+0xec>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	4a25      	ldr	r2, [pc, #148]	@ (80028c4 <HAL_PCD_MspInit+0xec>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6313      	str	r3, [r2, #48]	@ 0x30
 8002834:	4b23      	ldr	r3, [pc, #140]	@ (80028c4 <HAL_PCD_MspInit+0xec>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002840:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800285a:	230a      	movs	r3, #10
 800285c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002864:	4619      	mov	r1, r3
 8002866:	4818      	ldr	r0, [pc, #96]	@ (80028c8 <HAL_PCD_MspInit+0xf0>)
 8002868:	f000 fd68 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800286c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002870:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002880:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002884:	4619      	mov	r1, r3
 8002886:	4810      	ldr	r0, [pc, #64]	@ (80028c8 <HAL_PCD_MspInit+0xf0>)
 8002888:	f000 fd58 	bl	800333c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800288c:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <HAL_PCD_MspInit+0xec>)
 800288e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002890:	4a0c      	ldr	r2, [pc, #48]	@ (80028c4 <HAL_PCD_MspInit+0xec>)
 8002892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002896:	6353      	str	r3, [r2, #52]	@ 0x34
 8002898:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_PCD_MspInit+0xec>)
 800289a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <HAL_PCD_MspInit+0xec>)
 80028a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a8:	4a06      	ldr	r2, [pc, #24]	@ (80028c4 <HAL_PCD_MspInit+0xec>)
 80028aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b0:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <HAL_PCD_MspInit+0xec>)
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80028bc:	bf00      	nop
 80028be:	37b8      	adds	r7, #184	@ 0xb8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020000 	.word	0x40020000

080028cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028d0:	f7ff f862 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d4:	480c      	ldr	r0, [pc, #48]	@ (8002908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028d6:	490d      	ldr	r1, [pc, #52]	@ (800290c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028dc:	e002      	b.n	80028e4 <LoopCopyDataInit>

080028de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e2:	3304      	adds	r3, #4

080028e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e8:	d3f9      	bcc.n	80028de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f0:	e001      	b.n	80028f6 <LoopFillZerobss>

080028f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f4:	3204      	adds	r2, #4

080028f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f8:	d3fb      	bcc.n	80028f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028fa:	f008 fb47 	bl	800af8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028fe:	f7fe fe4f 	bl	80015a0 <main>
  bx  lr    
 8002902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002904:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800290c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002910:	0800b350 	.word	0x0800b350
  ldr r2, =_sbss
 8002914:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002918:	2000553c 	.word	0x2000553c

0800291c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800291c:	e7fe      	b.n	800291c <ADC_IRQHandler>

0800291e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002922:	2003      	movs	r0, #3
 8002924:	f000 f94c 	bl	8002bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002928:	200f      	movs	r0, #15
 800292a:	f000 f805 	bl	8002938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800292e:	f7fe ff31 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_InitTick+0x54>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <HAL_InitTick+0x58>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f967 	bl	8002c2a <HAL_SYSTICK_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00e      	b.n	8002984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d80a      	bhi.n	8002982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f000 f92f 	bl	8002bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002978:	4a06      	ldr	r2, [pc, #24]	@ (8002994 <HAL_InitTick+0x5c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000000 	.word	0x20000000
 8002990:	20000008 	.word	0x20000008
 8002994:	20000004 	.word	0x20000004

08002998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_IncTick+0x20>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_IncTick+0x24>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	@ (80029bc <HAL_IncTick+0x24>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000008 	.word	0x20000008
 80029bc:	20000ab8 	.word	0x20000ab8

080029c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return uwTick;
 80029c4:	4b03      	ldr	r3, [pc, #12]	@ (80029d4 <HAL_GetTick+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000ab8 	.word	0x20000ab8

080029d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff ffee 	bl	80029c0 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d005      	beq.n	80029fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <HAL_Delay+0x44>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029fe:	bf00      	nop
 8002a00:	f7ff ffde 	bl	80029c0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d8f7      	bhi.n	8002a00 <HAL_Delay+0x28>
  {
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000008 	.word	0x20000008

08002a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x40>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a48:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4e:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x40>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	60d3      	str	r3, [r2, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00
 8002a64:	05fa0000 	.word	0x05fa0000

08002a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	db0b      	blt.n	8002aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4907      	ldr	r1, [pc, #28]	@ (8002abc <__NVIC_EnableIRQ+0x38>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000e100 	.word	0xe000e100

08002ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0a      	blt.n	8002aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	490c      	ldr	r1, [pc, #48]	@ (8002b0c <__NVIC_SetPriority+0x4c>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	0112      	lsls	r2, r2, #4
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae8:	e00a      	b.n	8002b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4908      	ldr	r1, [pc, #32]	@ (8002b10 <__NVIC_SetPriority+0x50>)
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3b04      	subs	r3, #4
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	440b      	add	r3, r1
 8002afe:	761a      	strb	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	@ 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f1c3 0307 	rsb	r3, r3, #7
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	bf28      	it	cs
 8002b32:	2304      	movcs	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d902      	bls.n	8002b44 <NVIC_EncodePriority+0x30>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3b03      	subs	r3, #3
 8002b42:	e000      	b.n	8002b46 <NVIC_EncodePriority+0x32>
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	4313      	orrs	r3, r2
         );
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	@ 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b8c:	d301      	bcc.n	8002b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00f      	b.n	8002bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b92:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <SysTick_Config+0x40>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	f7ff ff8e 	bl	8002ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba4:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <SysTick_Config+0x40>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002baa:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <SysTick_Config+0x40>)
 8002bac:	2207      	movs	r2, #7
 8002bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	e000e010 	.word	0xe000e010

08002bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff29 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be8:	f7ff ff3e 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff ff8e 	bl	8002b14 <NVIC_EncodePriority>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff5d 	bl	8002ac0 <__NVIC_SetPriority>
}
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff31 	bl	8002a84 <__NVIC_EnableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffa2 	bl	8002b7c <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff feb6 	bl	80029c0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e099      	b.n	8002d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c80:	e00f      	b.n	8002ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c82:	f7ff fe9d 	bl	80029c0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d908      	bls.n	8002ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e078      	b.n	8002d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e8      	bne.n	8002c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4b38      	ldr	r3, [pc, #224]	@ (8002d9c <HAL_DMA_Init+0x158>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d107      	bne.n	8002d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	4313      	orrs	r3, r2
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0307 	bic.w	r3, r3, #7
 8002d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d117      	bne.n	8002d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00e      	beq.n	8002d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa7b 	bl	8003244 <DMA_CheckFifoParam>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2240      	movs	r2, #64	@ 0x40
 8002d58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d62:	2301      	movs	r3, #1
 8002d64:	e016      	b.n	8002d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa32 	bl	80031d8 <DMA_CalcBaseAndBitshift>
 8002d74:	4603      	mov	r3, r0
 8002d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	223f      	movs	r2, #63	@ 0x3f
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	e010803f 	.word	0xe010803f

08002da0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dae:	f7ff fe07 	bl	80029c0 <HAL_GetTick>
 8002db2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d008      	beq.n	8002dd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2280      	movs	r2, #128	@ 0x80
 8002dc4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e052      	b.n	8002e78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0216 	bic.w	r2, r2, #22
 8002de0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002df0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <HAL_DMA_Abort+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0208 	bic.w	r2, r2, #8
 8002e10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e22:	e013      	b.n	8002e4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e24:	f7ff fdcc 	bl	80029c0 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d90c      	bls.n	8002e4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e015      	b.n	8002e78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e4      	bne.n	8002e24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5e:	223f      	movs	r2, #63	@ 0x3f
 8002e60:	409a      	lsls	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2280      	movs	r2, #128	@ 0x80
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00c      	b.n	8002eb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2205      	movs	r2, #5
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ed0:	4b8e      	ldr	r3, [pc, #568]	@ (800310c <HAL_DMA_IRQHandler+0x248>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a8e      	ldr	r2, [pc, #568]	@ (8003110 <HAL_DMA_IRQHandler+0x24c>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0a9b      	lsrs	r3, r3, #10
 8002edc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eee:	2208      	movs	r2, #8
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01a      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f34:	2201      	movs	r2, #1
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d012      	beq.n	8002f66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f52:	2201      	movs	r2, #1
 8002f54:	409a      	lsls	r2, r3
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5e:	f043 0202 	orr.w	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f88:	2204      	movs	r2, #4
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f94:	f043 0204 	orr.w	r2, r3, #4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d043      	beq.n	8003034 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d03c      	beq.n	8003034 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d018      	beq.n	8003006 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d024      	beq.n	8003034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
 8002ff2:	e01f      	b.n	8003034 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	4798      	blx	r3
 8003004:	e016      	b.n	8003034 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d107      	bne.n	8003024 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0208 	bic.w	r2, r2, #8
 8003022:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	2220      	movs	r2, #32
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 808f 	beq.w	8003164 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8087 	beq.w	8003164 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305a:	2220      	movs	r2, #32
 800305c:	409a      	lsls	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b05      	cmp	r3, #5
 800306c:	d136      	bne.n	80030dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0216 	bic.w	r2, r2, #22
 800307c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800308c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_DMA_IRQHandler+0x1da>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0208 	bic.w	r2, r2, #8
 80030ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	223f      	movs	r2, #63	@ 0x3f
 80030b4:	409a      	lsls	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d07e      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
        }
        return;
 80030da:	e079      	b.n	80031d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01d      	beq.n	8003126 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10d      	bne.n	8003114 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d031      	beq.n	8003164 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
 8003108:	e02c      	b.n	8003164 <HAL_DMA_IRQHandler+0x2a0>
 800310a:	bf00      	nop
 800310c:	20000000 	.word	0x20000000
 8003110:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d023      	beq.n	8003164 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
 8003124:	e01e      	b.n	8003164 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10f      	bne.n	8003154 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0210 	bic.w	r2, r2, #16
 8003142:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	2b00      	cmp	r3, #0
 800316a:	d032      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d022      	beq.n	80031be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2205      	movs	r2, #5
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	3301      	adds	r3, #1
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d307      	bcc.n	80031ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f2      	bne.n	8003190 <HAL_DMA_IRQHandler+0x2cc>
 80031aa:	e000      	b.n	80031ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
 80031ce:	e000      	b.n	80031d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031d0:	bf00      	nop
    }
  }
}
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	3b10      	subs	r3, #16
 80031e8:	4a13      	ldr	r2, [pc, #76]	@ (8003238 <DMA_CalcBaseAndBitshift+0x60>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031f2:	4a12      	ldr	r2, [pc, #72]	@ (800323c <DMA_CalcBaseAndBitshift+0x64>)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d908      	bls.n	8003218 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <DMA_CalcBaseAndBitshift+0x68>)
 800320e:	4013      	ands	r3, r2
 8003210:	1d1a      	adds	r2, r3, #4
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	659a      	str	r2, [r3, #88]	@ 0x58
 8003216:	e006      	b.n	8003226 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <DMA_CalcBaseAndBitshift+0x68>)
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	aaaaaaab 	.word	0xaaaaaaab
 800323c:	0800b234 	.word	0x0800b234
 8003240:	fffffc00 	.word	0xfffffc00

08003244 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11f      	bne.n	800329e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d856      	bhi.n	8003312 <DMA_CheckFifoParam+0xce>
 8003264:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <DMA_CheckFifoParam+0x28>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800327d 	.word	0x0800327d
 8003270:	0800328f 	.word	0x0800328f
 8003274:	0800327d 	.word	0x0800327d
 8003278:	08003313 	.word	0x08003313
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d046      	beq.n	8003316 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800328c:	e043      	b.n	8003316 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003292:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003296:	d140      	bne.n	800331a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329c:	e03d      	b.n	800331a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a6:	d121      	bne.n	80032ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d837      	bhi.n	800331e <DMA_CheckFifoParam+0xda>
 80032ae:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <DMA_CheckFifoParam+0x70>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032cb 	.word	0x080032cb
 80032bc:	080032c5 	.word	0x080032c5
 80032c0:	080032dd 	.word	0x080032dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      break;
 80032c8:	e030      	b.n	800332c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d025      	beq.n	8003322 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032da:	e022      	b.n	8003322 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032e4:	d11f      	bne.n	8003326 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032ea:	e01c      	b.n	8003326 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d903      	bls.n	80032fa <DMA_CheckFifoParam+0xb6>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d003      	beq.n	8003300 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032f8:	e018      	b.n	800332c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
      break;
 80032fe:	e015      	b.n	800332c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00e      	beq.n	800332a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e00b      	b.n	800332a <DMA_CheckFifoParam+0xe6>
      break;
 8003312:	bf00      	nop
 8003314:	e00a      	b.n	800332c <DMA_CheckFifoParam+0xe8>
      break;
 8003316:	bf00      	nop
 8003318:	e008      	b.n	800332c <DMA_CheckFifoParam+0xe8>
      break;
 800331a:	bf00      	nop
 800331c:	e006      	b.n	800332c <DMA_CheckFifoParam+0xe8>
      break;
 800331e:	bf00      	nop
 8003320:	e004      	b.n	800332c <DMA_CheckFifoParam+0xe8>
      break;
 8003322:	bf00      	nop
 8003324:	e002      	b.n	800332c <DMA_CheckFifoParam+0xe8>
      break;   
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <DMA_CheckFifoParam+0xe8>
      break;
 800332a:	bf00      	nop
    }
  } 
  
  return status; 
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	@ 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e175      	b.n	8003648 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800335c:	2201      	movs	r2, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	429a      	cmp	r2, r3
 8003376:	f040 8164 	bne.w	8003642 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d005      	beq.n	8003392 <HAL_GPIO_Init+0x56>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d130      	bne.n	80033f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c8:	2201      	movs	r2, #1
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 0201 	and.w	r2, r3, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d017      	beq.n	8003430 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d123      	bne.n	8003484 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	08da      	lsrs	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3208      	adds	r2, #8
 8003444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	220f      	movs	r2, #15
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	08da      	lsrs	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3208      	adds	r2, #8
 800347e:	69b9      	ldr	r1, [r7, #24]
 8003480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	2203      	movs	r2, #3
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0203 	and.w	r2, r3, #3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80be 	beq.w	8003642 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c6:	4b66      	ldr	r3, [pc, #408]	@ (8003660 <HAL_GPIO_Init+0x324>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	4a65      	ldr	r2, [pc, #404]	@ (8003660 <HAL_GPIO_Init+0x324>)
 80034cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034d2:	4b63      	ldr	r3, [pc, #396]	@ (8003660 <HAL_GPIO_Init+0x324>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034de:	4a61      	ldr	r2, [pc, #388]	@ (8003664 <HAL_GPIO_Init+0x328>)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	3302      	adds	r3, #2
 80034e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4013      	ands	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a58      	ldr	r2, [pc, #352]	@ (8003668 <HAL_GPIO_Init+0x32c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d037      	beq.n	800357a <HAL_GPIO_Init+0x23e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a57      	ldr	r2, [pc, #348]	@ (800366c <HAL_GPIO_Init+0x330>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d031      	beq.n	8003576 <HAL_GPIO_Init+0x23a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a56      	ldr	r2, [pc, #344]	@ (8003670 <HAL_GPIO_Init+0x334>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02b      	beq.n	8003572 <HAL_GPIO_Init+0x236>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a55      	ldr	r2, [pc, #340]	@ (8003674 <HAL_GPIO_Init+0x338>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d025      	beq.n	800356e <HAL_GPIO_Init+0x232>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a54      	ldr	r2, [pc, #336]	@ (8003678 <HAL_GPIO_Init+0x33c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01f      	beq.n	800356a <HAL_GPIO_Init+0x22e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a53      	ldr	r2, [pc, #332]	@ (800367c <HAL_GPIO_Init+0x340>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d019      	beq.n	8003566 <HAL_GPIO_Init+0x22a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_GPIO_Init+0x344>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_GPIO_Init+0x226>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a51      	ldr	r2, [pc, #324]	@ (8003684 <HAL_GPIO_Init+0x348>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00d      	beq.n	800355e <HAL_GPIO_Init+0x222>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a50      	ldr	r2, [pc, #320]	@ (8003688 <HAL_GPIO_Init+0x34c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <HAL_GPIO_Init+0x21e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4f      	ldr	r2, [pc, #316]	@ (800368c <HAL_GPIO_Init+0x350>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_GPIO_Init+0x21a>
 8003552:	2309      	movs	r3, #9
 8003554:	e012      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003556:	230a      	movs	r3, #10
 8003558:	e010      	b.n	800357c <HAL_GPIO_Init+0x240>
 800355a:	2308      	movs	r3, #8
 800355c:	e00e      	b.n	800357c <HAL_GPIO_Init+0x240>
 800355e:	2307      	movs	r3, #7
 8003560:	e00c      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003562:	2306      	movs	r3, #6
 8003564:	e00a      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003566:	2305      	movs	r3, #5
 8003568:	e008      	b.n	800357c <HAL_GPIO_Init+0x240>
 800356a:	2304      	movs	r3, #4
 800356c:	e006      	b.n	800357c <HAL_GPIO_Init+0x240>
 800356e:	2303      	movs	r3, #3
 8003570:	e004      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003572:	2302      	movs	r3, #2
 8003574:	e002      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_GPIO_Init+0x240>
 800357a:	2300      	movs	r3, #0
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	f002 0203 	and.w	r2, r2, #3
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	4093      	lsls	r3, r2
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800358c:	4935      	ldr	r1, [pc, #212]	@ (8003664 <HAL_GPIO_Init+0x328>)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359a:	4b3d      	ldr	r3, [pc, #244]	@ (8003690 <HAL_GPIO_Init+0x354>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035be:	4a34      	ldr	r2, [pc, #208]	@ (8003690 <HAL_GPIO_Init+0x354>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c4:	4b32      	ldr	r3, [pc, #200]	@ (8003690 <HAL_GPIO_Init+0x354>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e8:	4a29      	ldr	r2, [pc, #164]	@ (8003690 <HAL_GPIO_Init+0x354>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ee:	4b28      	ldr	r3, [pc, #160]	@ (8003690 <HAL_GPIO_Init+0x354>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003612:	4a1f      	ldr	r2, [pc, #124]	@ (8003690 <HAL_GPIO_Init+0x354>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003618:	4b1d      	ldr	r3, [pc, #116]	@ (8003690 <HAL_GPIO_Init+0x354>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800363c:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <HAL_GPIO_Init+0x354>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3301      	adds	r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	f67f ae86 	bls.w	800335c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	40013800 	.word	0x40013800
 8003668:	40020000 	.word	0x40020000
 800366c:	40020400 	.word	0x40020400
 8003670:	40020800 	.word	0x40020800
 8003674:	40020c00 	.word	0x40020c00
 8003678:	40021000 	.word	0x40021000
 800367c:	40021400 	.word	0x40021400
 8003680:	40021800 	.word	0x40021800
 8003684:	40021c00 	.word	0x40021c00
 8003688:	40022000 	.word	0x40022000
 800368c:	40022400 	.word	0x40022400
 8003690:	40013c00 	.word	0x40013c00

08003694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	887b      	ldrh	r3, [r7, #2]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e001      	b.n	80036b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
 80036d0:	4613      	mov	r3, r2
 80036d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036e0:	e003      	b.n	80036ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	041a      	lsls	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	619a      	str	r2, [r3, #24]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003708:	887a      	ldrh	r2, [r7, #2]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4013      	ands	r3, r2
 800370e:	041a      	lsls	r2, r3, #16
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	43d9      	mvns	r1, r3
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	400b      	ands	r3, r1
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af02      	add	r7, sp, #8
 8003730:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e108      	b.n	800394e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff f83e 	bl	80027d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2203      	movs	r2, #3
 8003760:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800376a:	d102      	bne.n	8003772 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f004 fac2 	bl	8007d00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7c1a      	ldrb	r2, [r3, #16]
 8003784:	f88d 2000 	strb.w	r2, [sp]
 8003788:	3304      	adds	r3, #4
 800378a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378c:	f004 fa5e 	bl	8007c4c <USB_CoreInit>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0d5      	b.n	800394e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 faba 	bl	8007d22 <USB_SetCurrentMode>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0c6      	b.n	800394e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e04a      	b.n	800385c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3315      	adds	r3, #21
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3314      	adds	r3, #20
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	b298      	uxth	r0, r3
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	332e      	adds	r3, #46	@ 0x2e
 8003802:	4602      	mov	r2, r0
 8003804:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3318      	adds	r3, #24
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	331c      	adds	r3, #28
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3320      	adds	r3, #32
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3324      	adds	r3, #36	@ 0x24
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	3301      	adds	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	429a      	cmp	r2, r3
 8003864:	d3af      	bcc.n	80037c6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003866:	2300      	movs	r3, #0
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	e044      	b.n	80038f6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	3301      	adds	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	791b      	ldrb	r3, [r3, #4]
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d3b5      	bcc.n	800386c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7c1a      	ldrb	r2, [r3, #16]
 8003908:	f88d 2000 	strb.w	r2, [sp]
 800390c:	3304      	adds	r3, #4
 800390e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003910:	f004 fa54 	bl	8007dbc <USB_DevInit>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e013      	b.n	800394e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	7b1b      	ldrb	r3, [r3, #12]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d102      	bne.n	8003942 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f80b 	bl	8003958 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f004 fc0f 	bl	800816a <USB_DevDisconnect>

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_PCDEx_ActivateLPM+0x44>)
 8003988:	4313      	orrs	r3, r2
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	10000003 	.word	0x10000003

080039a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ae:	6013      	str	r3, [r2, #0]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40007000 	.word	0x40007000

080039c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	4b23      	ldr	r3, [pc, #140]	@ (8003a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	4a22      	ldr	r2, [pc, #136]	@ (8003a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80039d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d6:	4b20      	ldr	r3, [pc, #128]	@ (8003a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039e2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ee:	f7fe ffe7 	bl	80029c0 <HAL_GetTick>
 80039f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039f4:	e009      	b.n	8003a0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039f6:	f7fe ffe3 	bl	80029c0 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a04:	d901      	bls.n	8003a0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e022      	b.n	8003a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a0a:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a16:	d1ee      	bne.n	80039f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a18:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a24:	f7fe ffcc 	bl	80029c0 <HAL_GetTick>
 8003a28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a2a:	e009      	b.n	8003a40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a2c:	f7fe ffc8 	bl	80029c0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a3a:	d901      	bls.n	8003a40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e007      	b.n	8003a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a40:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a4c:	d1ee      	bne.n	8003a2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40007000 	.word	0x40007000

08003a60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e29b      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8087 	beq.w	8003b92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a84:	4b96      	ldr	r3, [pc, #600]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d00c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a90:	4b93      	ldr	r3, [pc, #588]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d112      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62>
 8003a9c:	4b90      	ldr	r3, [pc, #576]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d06c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x130>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d168      	bne.n	8003b90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e275      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x7a>
 8003acc:	4b84      	ldr	r3, [pc, #528]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a83      	ldr	r2, [pc, #524]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e02e      	b.n	8003b38 <HAL_RCC_OscConfig+0xd8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x9c>
 8003ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b7c      	ldr	r3, [pc, #496]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xd8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0xc0>
 8003b06:	4b76      	ldr	r3, [pc, #472]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a75      	ldr	r2, [pc, #468]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b73      	ldr	r3, [pc, #460]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a72      	ldr	r2, [pc, #456]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xd8>
 8003b20:	4b6f      	ldr	r3, [pc, #444]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a6e      	ldr	r2, [pc, #440]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6b      	ldr	r2, [pc, #428]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe ff3e 	bl	80029c0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fe ff3a 	bl	80029c0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	@ 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e229      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b61      	ldr	r3, [pc, #388]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xe8>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe ff2a 	bl	80029c0 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe ff26 	bl	80029c0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	@ 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e215      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	4b57      	ldr	r3, [pc, #348]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x110>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d069      	beq.n	8003c72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b9e:	4b50      	ldr	r3, [pc, #320]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b4d      	ldr	r3, [pc, #308]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x190>
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	4b47      	ldr	r3, [pc, #284]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x17a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1e9      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b41      	ldr	r3, [pc, #260]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	493d      	ldr	r1, [pc, #244]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	e040      	b.n	8003c72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d023      	beq.n	8003c40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf8:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a38      	ldr	r2, [pc, #224]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe fedc 	bl	80029c0 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0c:	f7fe fed8 	bl	80029c0 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1c7      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1e:	4b30      	ldr	r3, [pc, #192]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4929      	ldr	r1, [pc, #164]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
 8003c3e:	e018      	b.n	8003c72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c40:	4b27      	ldr	r3, [pc, #156]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a26      	ldr	r2, [pc, #152]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fe feb8 	bl	80029c0 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c54:	f7fe feb4 	bl	80029c0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1a3      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d038      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d019      	beq.n	8003cba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c86:	4b16      	ldr	r3, [pc, #88]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fe fe95 	bl	80029c0 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9a:	f7fe fe91 	bl	80029c0 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e180      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x23a>
 8003cb8:	e01a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cba:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbe:	4a08      	ldr	r2, [pc, #32]	@ (8003ce0 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7fe fe7b 	bl	80029c0 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cce:	f7fe fe77 	bl	80029c0 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d903      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e166      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
 8003ce0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	4b92      	ldr	r3, [pc, #584]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ee      	bne.n	8003cce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a4 	beq.w	8003e46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfe:	4b8c      	ldr	r3, [pc, #560]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10d      	bne.n	8003d26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	4b89      	ldr	r3, [pc, #548]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	4a88      	ldr	r2, [pc, #544]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d16:	4b86      	ldr	r3, [pc, #536]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d26:	4b83      	ldr	r3, [pc, #524]	@ (8003f34 <HAL_RCC_OscConfig+0x4d4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d118      	bne.n	8003d64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d32:	4b80      	ldr	r3, [pc, #512]	@ (8003f34 <HAL_RCC_OscConfig+0x4d4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7f      	ldr	r2, [pc, #508]	@ (8003f34 <HAL_RCC_OscConfig+0x4d4>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe fe3f 	bl	80029c0 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fe fe3b 	bl	80029c0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b64      	cmp	r3, #100	@ 0x64
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e12a      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d58:	4b76      	ldr	r3, [pc, #472]	@ (8003f34 <HAL_RCC_OscConfig+0x4d4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x31a>
 8003d6c:	4b70      	ldr	r3, [pc, #448]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	4a6f      	ldr	r2, [pc, #444]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d78:	e02d      	b.n	8003dd6 <HAL_RCC_OscConfig+0x376>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x33c>
 8003d82:	4b6b      	ldr	r3, [pc, #428]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	4a6a      	ldr	r2, [pc, #424]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8e:	4b68      	ldr	r3, [pc, #416]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	4a67      	ldr	r2, [pc, #412]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9a:	e01c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x376>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCC_OscConfig+0x35e>
 8003da4:	4b62      	ldr	r3, [pc, #392]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	4a61      	ldr	r2, [pc, #388]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db0:	4b5f      	ldr	r3, [pc, #380]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dbc:	e00b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x376>
 8003dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dca:	4b59      	ldr	r3, [pc, #356]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	4a58      	ldr	r2, [pc, #352]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d015      	beq.n	8003e0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fe fdef 	bl	80029c0 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fe fdeb 	bl	80029c0 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0d8      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ee      	beq.n	8003de6 <HAL_RCC_OscConfig+0x386>
 8003e08:	e014      	b.n	8003e34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7fe fdd9 	bl	80029c0 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fe fdd5 	bl	80029c0 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0c2      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e28:	4b41      	ldr	r3, [pc, #260]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ee      	bne.n	8003e12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d105      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e44:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 80ae 	beq.w	8003fac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e50:	4b37      	ldr	r3, [pc, #220]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d06d      	beq.n	8003f38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d14b      	bne.n	8003efc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e64:	4b32      	ldr	r3, [pc, #200]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a31      	ldr	r2, [pc, #196]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe fda6 	bl	80029c0 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fe fda2 	bl	80029c0 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e091      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	4b29      	ldr	r3, [pc, #164]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	019b      	lsls	r3, r3, #6
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec0:	071b      	lsls	r3, r3, #28
 8003ec2:	491b      	ldr	r1, [pc, #108]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec8:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe fd74 	bl	80029c0 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe fd70 	bl	80029c0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e05f      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x47c>
 8003efa:	e057      	b.n	8003fac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0b      	ldr	r2, [pc, #44]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fe fd5a 	bl	80029c0 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fe fd56 	bl	80029c0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e045      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	4b03      	ldr	r3, [pc, #12]	@ (8003f30 <HAL_RCC_OscConfig+0x4d0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4b0>
 8003f2e:	e03d      	b.n	8003fac <HAL_RCC_OscConfig+0x54c>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f38:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb8 <HAL_RCC_OscConfig+0x558>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d030      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d129      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d122      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d119      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d10f      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800

08003fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0d0      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d910      	bls.n	8004004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b67      	ldr	r3, [pc, #412]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 020f 	bic.w	r2, r3, #15
 8003fea:	4965      	ldr	r1, [pc, #404]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b63      	ldr	r3, [pc, #396]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0b8      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800401c:	4b59      	ldr	r3, [pc, #356]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4a58      	ldr	r2, [pc, #352]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004034:	4b53      	ldr	r3, [pc, #332]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a52      	ldr	r2, [pc, #328]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800403a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800403e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b50      	ldr	r3, [pc, #320]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	494d      	ldr	r1, [pc, #308]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d040      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b47      	ldr	r3, [pc, #284]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d115      	bne.n	800409e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07f      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	4b41      	ldr	r3, [pc, #260]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e073      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408e:	4b3d      	ldr	r3, [pc, #244]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06b      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409e:	4b39      	ldr	r3, [pc, #228]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 0203 	bic.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4936      	ldr	r1, [pc, #216]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7fe fc86 	bl	80029c0 <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b8:	f7fe fc82 	bl	80029c0 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e053      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 020c 	and.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1eb      	bne.n	80040b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040e0:	4b27      	ldr	r3, [pc, #156]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d210      	bcs.n	8004110 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 020f 	bic.w	r2, r3, #15
 80040f6:	4922      	ldr	r1, [pc, #136]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b20      	ldr	r3, [pc, #128]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e032      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800411c:	4b19      	ldr	r3, [pc, #100]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4916      	ldr	r1, [pc, #88]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800413a:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	490e      	ldr	r1, [pc, #56]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800414e:	f000 f821 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8004152:	4602      	mov	r2, r0
 8004154:	4b0b      	ldr	r3, [pc, #44]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	490a      	ldr	r1, [pc, #40]	@ (8004188 <HAL_RCC_ClockConfig+0x1cc>)
 8004160:	5ccb      	ldrb	r3, [r1, r3]
 8004162:	fa22 f303 	lsr.w	r3, r2, r3
 8004166:	4a09      	ldr	r2, [pc, #36]	@ (800418c <HAL_RCC_ClockConfig+0x1d0>)
 8004168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800416a:	4b09      	ldr	r3, [pc, #36]	@ (8004190 <HAL_RCC_ClockConfig+0x1d4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fbe2 	bl	8002938 <HAL_InitTick>

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023c00 	.word	0x40023c00
 8004184:	40023800 	.word	0x40023800
 8004188:	0800b21c 	.word	0x0800b21c
 800418c:	20000000 	.word	0x20000000
 8004190:	20000004 	.word	0x20000004

08004194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004198:	b094      	sub	sp, #80	@ 0x50
 800419a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a0:	2300      	movs	r3, #0
 80041a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a4:	2300      	movs	r3, #0
 80041a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ac:	4b79      	ldr	r3, [pc, #484]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d00d      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x40>
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	f200 80e1 	bhi.w	8004380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x34>
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d003      	beq.n	80041ce <HAL_RCC_GetSysClockFreq+0x3a>
 80041c6:	e0db      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b73      	ldr	r3, [pc, #460]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041cc:	e0db      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ce:	4b73      	ldr	r3, [pc, #460]	@ (800439c <HAL_RCC_GetSysClockFreq+0x208>)
 80041d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041d2:	e0d8      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041de:	4b6d      	ldr	r3, [pc, #436]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d063      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	2200      	movs	r2, #0
 80041f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	@ 0x34
 8004202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004206:	4622      	mov	r2, r4
 8004208:	462b      	mov	r3, r5
 800420a:	f04f 0000 	mov.w	r0, #0
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	0159      	lsls	r1, r3, #5
 8004214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004218:	0150      	lsls	r0, r2, #5
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4621      	mov	r1, r4
 8004220:	1a51      	subs	r1, r2, r1
 8004222:	6139      	str	r1, [r7, #16]
 8004224:	4629      	mov	r1, r5
 8004226:	eb63 0301 	sbc.w	r3, r3, r1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004238:	4659      	mov	r1, fp
 800423a:	018b      	lsls	r3, r1, #6
 800423c:	4651      	mov	r1, sl
 800423e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004242:	4651      	mov	r1, sl
 8004244:	018a      	lsls	r2, r1, #6
 8004246:	4651      	mov	r1, sl
 8004248:	ebb2 0801 	subs.w	r8, r2, r1
 800424c:	4659      	mov	r1, fp
 800424e:	eb63 0901 	sbc.w	r9, r3, r1
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800425e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004266:	4690      	mov	r8, r2
 8004268:	4699      	mov	r9, r3
 800426a:	4623      	mov	r3, r4
 800426c:	eb18 0303 	adds.w	r3, r8, r3
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	462b      	mov	r3, r5
 8004274:	eb49 0303 	adc.w	r3, r9, r3
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004286:	4629      	mov	r1, r5
 8004288:	024b      	lsls	r3, r1, #9
 800428a:	4621      	mov	r1, r4
 800428c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004290:	4621      	mov	r1, r4
 8004292:	024a      	lsls	r2, r1, #9
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800429a:	2200      	movs	r2, #0
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800429e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042a4:	f7fb ffde 	bl	8000264 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b0:	e058      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b2:	4b38      	ldr	r3, [pc, #224]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	2200      	movs	r2, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	4611      	mov	r1, r2
 80042be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042c2:	623b      	str	r3, [r7, #32]
 80042c4:	2300      	movs	r3, #0
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	f04f 0000 	mov.w	r0, #0
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	0159      	lsls	r1, r3, #5
 80042da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042de:	0150      	lsls	r0, r2, #5
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4641      	mov	r1, r8
 80042e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80042ea:	4649      	mov	r1, r9
 80042ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004304:	ebb2 040a 	subs.w	r4, r2, sl
 8004308:	eb63 050b 	sbc.w	r5, r3, fp
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	00eb      	lsls	r3, r5, #3
 8004316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431a:	00e2      	lsls	r2, r4, #3
 800431c:	4614      	mov	r4, r2
 800431e:	461d      	mov	r5, r3
 8004320:	4643      	mov	r3, r8
 8004322:	18e3      	adds	r3, r4, r3
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	464b      	mov	r3, r9
 8004328:	eb45 0303 	adc.w	r3, r5, r3
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800433a:	4629      	mov	r1, r5
 800433c:	028b      	lsls	r3, r1, #10
 800433e:	4621      	mov	r1, r4
 8004340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004344:	4621      	mov	r1, r4
 8004346:	028a      	lsls	r2, r1, #10
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800434e:	2200      	movs	r2, #0
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	61fa      	str	r2, [r7, #28]
 8004354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004358:	f7fb ff84 	bl	8000264 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4613      	mov	r3, r2
 8004362:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	3301      	adds	r3, #1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004374:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800437e:	e002      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004380:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x204>)
 8004382:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004388:	4618      	mov	r0, r3
 800438a:	3750      	adds	r7, #80	@ 0x50
 800438c:	46bd      	mov	sp, r7
 800438e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
 8004398:	00f42400 	.word	0x00f42400
 800439c:	007a1200 	.word	0x007a1200

080043a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a4:	4b03      	ldr	r3, [pc, #12]	@ (80043b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000000 	.word	0x20000000

080043b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043bc:	f7ff fff0 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043c0:	4602      	mov	r2, r0
 80043c2:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	4903      	ldr	r1, [pc, #12]	@ (80043dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ce:	5ccb      	ldrb	r3, [r1, r3]
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40023800 	.word	0x40023800
 80043dc:	0800b22c 	.word	0x0800b22c

080043e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e4:	f7ff ffdc 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0b5b      	lsrs	r3, r3, #13
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4903      	ldr	r1, [pc, #12]	@ (8004404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	0800b22c 	.word	0x0800b22c

08004408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d012      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004430:	4b69      	ldr	r3, [pc, #420]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4a68      	ldr	r2, [pc, #416]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800443a:	6093      	str	r3, [r2, #8]
 800443c:	4b66      	ldr	r3, [pc, #408]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004444:	4964      	ldr	r1, [pc, #400]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d017      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004462:	4b5d      	ldr	r3, [pc, #372]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004468:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004470:	4959      	ldr	r1, [pc, #356]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004480:	d101      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004482:	2301      	movs	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800448e:	2301      	movs	r3, #1
 8004490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d017      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800449e:	4b4e      	ldr	r3, [pc, #312]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	494a      	ldr	r1, [pc, #296]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044bc:	d101      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 808b 	beq.w	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	4b3a      	ldr	r3, [pc, #232]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	4a39      	ldr	r2, [pc, #228]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80044f8:	4b37      	ldr	r3, [pc, #220]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004504:	4b35      	ldr	r3, [pc, #212]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a34      	ldr	r2, [pc, #208]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800450a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800450e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004510:	f7fe fa56 	bl	80029c0 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004518:	f7fe fa52 	bl	80029c0 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	@ 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e38f      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800452a:	4b2c      	ldr	r3, [pc, #176]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004536:	4b28      	ldr	r3, [pc, #160]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d035      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d02e      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004554:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800455c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455e:	4b1e      	ldr	r3, [pc, #120]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004568:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800456a:	4b1b      	ldr	r3, [pc, #108]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456e:	4a1a      	ldr	r2, [pc, #104]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004574:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004576:	4a18      	ldr	r2, [pc, #96]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800457c:	4b16      	ldr	r3, [pc, #88]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d114      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fe fa1a 	bl	80029c0 <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	e00a      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fe fa16 	bl	80029c0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e351      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a6:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0ee      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045be:	d111      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045c0:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045cc:	4b04      	ldr	r3, [pc, #16]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ce:	400b      	ands	r3, r1
 80045d0:	4901      	ldr	r1, [pc, #4]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
 80045d6:	e00b      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40007000 	.word	0x40007000
 80045e0:	0ffffcff 	.word	0x0ffffcff
 80045e4:	4bac      	ldr	r3, [pc, #688]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4aab      	ldr	r2, [pc, #684]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045ee:	6093      	str	r3, [r2, #8]
 80045f0:	4ba9      	ldr	r3, [pc, #676]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fc:	49a6      	ldr	r1, [pc, #664]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	d010      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800460e:	4ba2      	ldr	r3, [pc, #648]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004614:	4aa0      	ldr	r2, [pc, #640]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800461a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800461e:	4b9e      	ldr	r3, [pc, #632]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004620:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	499b      	ldr	r1, [pc, #620]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800463c:	4b96      	ldr	r3, [pc, #600]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004642:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800464a:	4993      	ldr	r1, [pc, #588]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800465e:	4b8e      	ldr	r3, [pc, #568]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800466c:	498a      	ldr	r1, [pc, #552]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004680:	4b85      	ldr	r3, [pc, #532]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800468e:	4982      	ldr	r1, [pc, #520]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b0:	4979      	ldr	r1, [pc, #484]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c4:	4b74      	ldr	r3, [pc, #464]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ca:	f023 0203 	bic.w	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d2:	4971      	ldr	r1, [pc, #452]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	f023 020c 	bic.w	r2, r3, #12
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f4:	4968      	ldr	r1, [pc, #416]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004708:	4b63      	ldr	r3, [pc, #396]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004716:	4960      	ldr	r1, [pc, #384]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800472a:	4b5b      	ldr	r3, [pc, #364]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004730:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004738:	4957      	ldr	r1, [pc, #348]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800474c:	4b52      	ldr	r3, [pc, #328]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004752:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475a:	494f      	ldr	r1, [pc, #316]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800476e:	4b4a      	ldr	r3, [pc, #296]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004774:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	4946      	ldr	r1, [pc, #280]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004790:	4b41      	ldr	r3, [pc, #260]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004796:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479e:	493e      	ldr	r1, [pc, #248]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047b2:	4b39      	ldr	r3, [pc, #228]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c0:	4935      	ldr	r1, [pc, #212]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047d4:	4b30      	ldr	r3, [pc, #192]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e2:	492d      	ldr	r1, [pc, #180]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d011      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047f6:	4b28      	ldr	r3, [pc, #160]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004804:	4924      	ldr	r1, [pc, #144]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004826:	2301      	movs	r3, #1
 8004828:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004836:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004844:	4914      	ldr	r1, [pc, #80]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004858:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004868:	490b      	ldr	r1, [pc, #44]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00f      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800487c:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800488c:	4902      	ldr	r1, [pc, #8]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004894:	e002      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048a8:	4b8a      	ldr	r3, [pc, #552]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	4986      	ldr	r1, [pc, #536]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048cc:	4b81      	ldr	r3, [pc, #516]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048dc:	497d      	ldr	r1, [pc, #500]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d006      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 80d6 	beq.w	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048f8:	4b76      	ldr	r3, [pc, #472]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a75      	ldr	r2, [pc, #468]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004904:	f7fe f85c 	bl	80029c0 <HAL_GetTick>
 8004908:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800490c:	f7fe f858 	bl	80029c0 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	@ 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e195      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800491e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d021      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493a:	2b00      	cmp	r3, #0
 800493c:	d11d      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800493e:	4b65      	ldr	r3, [pc, #404]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800494c:	4b61      	ldr	r3, [pc, #388]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004952:	0e1b      	lsrs	r3, r3, #24
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	019a      	lsls	r2, r3, #6
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	431a      	orrs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	061b      	lsls	r3, r3, #24
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	071b      	lsls	r3, r3, #28
 8004972:	4958      	ldr	r1, [pc, #352]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049a4:	d129      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049a6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049b4:	4b47      	ldr	r3, [pc, #284]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ba:	0f1b      	lsrs	r3, r3, #28
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	019a      	lsls	r2, r3, #6
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	071b      	lsls	r3, r3, #28
 80049da:	493e      	ldr	r1, [pc, #248]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049e2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049e8:	f023 021f 	bic.w	r2, r3, #31
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	3b01      	subs	r3, #1
 80049f2:	4938      	ldr	r1, [pc, #224]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01d      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a06:	4b33      	ldr	r3, [pc, #204]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a0c:	0e1b      	lsrs	r3, r3, #24
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a14:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a1a:	0f1b      	lsrs	r3, r3, #28
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	019a      	lsls	r2, r3, #6
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	071b      	lsls	r3, r3, #28
 8004a3a:	4926      	ldr	r1, [pc, #152]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d011      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	019a      	lsls	r2, r3, #6
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	061b      	lsls	r3, r3, #24
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	071b      	lsls	r3, r3, #28
 8004a6a:	491a      	ldr	r1, [pc, #104]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a72:	4b18      	ldr	r3, [pc, #96]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a17      	ldr	r2, [pc, #92]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a7e:	f7fd ff9f 	bl	80029c0 <HAL_GetTick>
 8004a82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a86:	f7fd ff9b 	bl	80029c0 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b64      	cmp	r3, #100	@ 0x64
 8004a92:	d901      	bls.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0d8      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a98:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	f040 80ce 	bne.w	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004aac:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a08      	ldr	r2, [pc, #32]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab8:	f7fd ff82 	bl	80029c0 <HAL_GetTick>
 8004abc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ac0:	f7fd ff7e 	bl	80029c0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	@ 0x64
 8004acc:	d904      	bls.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0bb      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ae4:	d0ec      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d02e      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d12a      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b0e:	4b51      	ldr	r3, [pc, #324]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b22:	0f1b      	lsrs	r3, r3, #28
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	019a      	lsls	r2, r3, #6
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	061b      	lsls	r3, r3, #24
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	071b      	lsls	r3, r3, #28
 8004b42:	4944      	ldr	r1, [pc, #272]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b4a:	4b42      	ldr	r3, [pc, #264]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	493d      	ldr	r1, [pc, #244]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d022      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b78:	d11d      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b7a:	4b36      	ldr	r3, [pc, #216]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	0e1b      	lsrs	r3, r3, #24
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b88:	4b32      	ldr	r3, [pc, #200]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8e:	0f1b      	lsrs	r3, r3, #28
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	019a      	lsls	r2, r3, #6
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	061b      	lsls	r3, r3, #24
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	071b      	lsls	r3, r3, #28
 8004bae:	4929      	ldr	r1, [pc, #164]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d028      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bc2:	4b24      	ldr	r3, [pc, #144]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc8:	0e1b      	lsrs	r3, r3, #24
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bd0:	4b20      	ldr	r3, [pc, #128]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	019a      	lsls	r2, r3, #6
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	431a      	orrs	r2, r3
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	071b      	lsls	r3, r3, #28
 8004bf6:	4917      	ldr	r1, [pc, #92]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bfe:	4b15      	ldr	r3, [pc, #84]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0c:	4911      	ldr	r1, [pc, #68]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c14:	4b0f      	ldr	r3, [pc, #60]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0e      	ldr	r2, [pc, #56]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c20:	f7fd fece 	bl	80029c0 <HAL_GetTick>
 8004c24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c28:	f7fd feca 	bl	80029c0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	@ 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e007      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c3a:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c46:	d1ef      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800

08004c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e049      	b.n	8004cfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fd fb24 	bl	80022cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f001 f806 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d001      	beq.n	8004d20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e04c      	b.n	8004dba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a26      	ldr	r2, [pc, #152]	@ (8004dc8 <HAL_TIM_Base_Start+0xc0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3a:	d01d      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a22      	ldr	r2, [pc, #136]	@ (8004dcc <HAL_TIM_Base_Start+0xc4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a21      	ldr	r2, [pc, #132]	@ (8004dd0 <HAL_TIM_Base_Start+0xc8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd4 <HAL_TIM_Base_Start+0xcc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd8 <HAL_TIM_Base_Start+0xd0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	@ (8004ddc <HAL_TIM_Base_Start+0xd4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	@ (8004de0 <HAL_TIM_Base_Start+0xd8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d115      	bne.n	8004da4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	4b19      	ldr	r3, [pc, #100]	@ (8004de4 <HAL_TIM_Base_Start+0xdc>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d015      	beq.n	8004db6 <HAL_TIM_Base_Start+0xae>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d90:	d011      	beq.n	8004db6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	e008      	b.n	8004db6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e000      	b.n	8004db8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40010400 	.word	0x40010400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40001800 	.word	0x40001800
 8004de4:	00010007 	.word	0x00010007

08004de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d001      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e054      	b.n	8004eaa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d022      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2a:	d01d      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a22      	ldr	r2, [pc, #136]	@ (8004ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d018      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a21      	ldr	r2, [pc, #132]	@ (8004ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00e      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <HAL_TIM_Base_Start_IT+0xe4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d115      	bne.n	8004e94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	4b19      	ldr	r3, [pc, #100]	@ (8004ed4 <HAL_TIM_Base_Start_IT+0xec>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b06      	cmp	r3, #6
 8004e78:	d015      	beq.n	8004ea6 <HAL_TIM_Base_Start_IT+0xbe>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e80:	d011      	beq.n	8004ea6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e92:	e008      	b.n	8004ea6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e000      	b.n	8004ea8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40001800 	.word	0x40001800
 8004ed4:	00010007 	.word	0x00010007

08004ed8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10f      	bne.n	8004f20 <HAL_TIM_Base_Stop_IT+0x48>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6a1a      	ldr	r2, [r3, #32]
 8004f06:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d107      	bne.n	8004f20 <HAL_TIM_Base_Stop_IT+0x48>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e049      	b.n	8004fdc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fd f959 	bl	8002214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f000 fe97 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_TIM_PWM_Start+0x24>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e03c      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d109      	bne.n	8005022 <HAL_TIM_PWM_Start+0x3e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	bf14      	ite	ne
 800501a:	2301      	movne	r3, #1
 800501c:	2300      	moveq	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e02f      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d109      	bne.n	800503c <HAL_TIM_PWM_Start+0x58>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e022      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d109      	bne.n	8005056 <HAL_TIM_PWM_Start+0x72>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	2300      	moveq	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e015      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b10      	cmp	r3, #16
 800505a:	d109      	bne.n	8005070 <HAL_TIM_PWM_Start+0x8c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e008      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e092      	b.n	80051b0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_TIM_PWM_Start+0xb6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005098:	e023      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d104      	bne.n	80050aa <HAL_TIM_PWM_Start+0xc6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050a8:	e01b      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_PWM_Start+0xd6>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050b8:	e013      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d104      	bne.n	80050ca <HAL_TIM_PWM_Start+0xe6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050c8:	e00b      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d104      	bne.n	80050da <HAL_TIM_PWM_Start+0xf6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d8:	e003      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2201      	movs	r2, #1
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 f980 	bl	80063f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a30      	ldr	r2, [pc, #192]	@ (80051b8 <HAL_TIM_PWM_Start+0x1d4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIM_PWM_Start+0x120>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2f      	ldr	r2, [pc, #188]	@ (80051bc <HAL_TIM_PWM_Start+0x1d8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d101      	bne.n	8005108 <HAL_TIM_PWM_Start+0x124>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <HAL_TIM_PWM_Start+0x126>
 8005108:	2300      	movs	r3, #0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800511c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a25      	ldr	r2, [pc, #148]	@ (80051b8 <HAL_TIM_PWM_Start+0x1d4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d022      	beq.n	800516e <HAL_TIM_PWM_Start+0x18a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005130:	d01d      	beq.n	800516e <HAL_TIM_PWM_Start+0x18a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a22      	ldr	r2, [pc, #136]	@ (80051c0 <HAL_TIM_PWM_Start+0x1dc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d018      	beq.n	800516e <HAL_TIM_PWM_Start+0x18a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a20      	ldr	r2, [pc, #128]	@ (80051c4 <HAL_TIM_PWM_Start+0x1e0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <HAL_TIM_PWM_Start+0x18a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1f      	ldr	r2, [pc, #124]	@ (80051c8 <HAL_TIM_PWM_Start+0x1e4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00e      	beq.n	800516e <HAL_TIM_PWM_Start+0x18a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a19      	ldr	r2, [pc, #100]	@ (80051bc <HAL_TIM_PWM_Start+0x1d8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_TIM_PWM_Start+0x18a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1b      	ldr	r2, [pc, #108]	@ (80051cc <HAL_TIM_PWM_Start+0x1e8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_TIM_PWM_Start+0x18a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a19      	ldr	r2, [pc, #100]	@ (80051d0 <HAL_TIM_PWM_Start+0x1ec>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d115      	bne.n	800519a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	4b17      	ldr	r3, [pc, #92]	@ (80051d4 <HAL_TIM_PWM_Start+0x1f0>)
 8005176:	4013      	ands	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b06      	cmp	r3, #6
 800517e:	d015      	beq.n	80051ac <HAL_TIM_PWM_Start+0x1c8>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005186:	d011      	beq.n	80051ac <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	e008      	b.n	80051ac <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e000      	b.n	80051ae <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40010400 	.word	0x40010400
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40001800 	.word	0x40001800
 80051d4:	00010007 	.word	0x00010007

080051d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2200      	movs	r2, #0
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 f900 	bl	80063f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a36      	ldr	r2, [pc, #216]	@ (80052d0 <HAL_TIM_PWM_Stop+0xf8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_TIM_PWM_Stop+0x2c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a35      	ldr	r2, [pc, #212]	@ (80052d4 <HAL_TIM_PWM_Stop+0xfc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d101      	bne.n	8005208 <HAL_TIM_PWM_Stop+0x30>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_TIM_PWM_Stop+0x32>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d017      	beq.n	800523e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10f      	bne.n	800523e <HAL_TIM_PWM_Stop+0x66>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a1a      	ldr	r2, [r3, #32]
 8005224:	f240 4344 	movw	r3, #1092	@ 0x444
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d107      	bne.n	800523e <HAL_TIM_PWM_Stop+0x66>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800523c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a1a      	ldr	r2, [r3, #32]
 8005244:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10f      	bne.n	800526e <HAL_TIM_PWM_Stop+0x96>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	f240 4344 	movw	r3, #1092	@ 0x444
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d107      	bne.n	800526e <HAL_TIM_PWM_Stop+0x96>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <HAL_TIM_PWM_Stop+0xa6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800527c:	e023      	b.n	80052c6 <HAL_TIM_PWM_Stop+0xee>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b04      	cmp	r3, #4
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Stop+0xb6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800528c:	e01b      	b.n	80052c6 <HAL_TIM_PWM_Stop+0xee>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Stop+0xc6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800529c:	e013      	b.n	80052c6 <HAL_TIM_PWM_Stop+0xee>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Stop+0xd6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052ac:	e00b      	b.n	80052c6 <HAL_TIM_PWM_Stop+0xee>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Stop+0xe6>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052bc:	e003      	b.n	80052c6 <HAL_TIM_PWM_Stop+0xee>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400

080052d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e08f      	b.n	800540c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fc fe3d 	bl	8001f80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6899      	ldr	r1, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4b3e      	ldr	r3, [pc, #248]	@ (8005414 <HAL_TIM_Encoder_Init+0x13c>)
 800531a:	400b      	ands	r3, r1
 800531c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3304      	adds	r3, #4
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f000 fcbd 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4b31      	ldr	r3, [pc, #196]	@ (8005418 <HAL_TIM_Encoder_Init+0x140>)
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	4313      	orrs	r3, r2
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4b2b      	ldr	r3, [pc, #172]	@ (800541c <HAL_TIM_Encoder_Init+0x144>)
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4b2a      	ldr	r3, [pc, #168]	@ (8005420 <HAL_TIM_Encoder_Init+0x148>)
 8005376:	4013      	ands	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	4313      	orrs	r3, r2
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	011a      	lsls	r2, r3, #4
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	031b      	lsls	r3, r3, #12
 8005398:	4313      	orrs	r3, r2
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	4313      	orrs	r3, r2
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	fffebff8 	.word	0xfffebff8
 8005418:	fffffcfc 	.word	0xfffffcfc
 800541c:	fffff3f3 	.word	0xfffff3f3
 8005420:	ffff0f0f 	.word	0xffff0f0f

08005424 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005434:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800543c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005444:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800544c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d110      	bne.n	8005476 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d102      	bne.n	8005460 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800545a:	7b7b      	ldrb	r3, [r7, #13]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d001      	beq.n	8005464 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e069      	b.n	8005538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005474:	e031      	b.n	80054da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b04      	cmp	r3, #4
 800547a:	d110      	bne.n	800549e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d102      	bne.n	8005488 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005482:	7b3b      	ldrb	r3, [r7, #12]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d001      	beq.n	800548c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e055      	b.n	8005538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800549c:	e01d      	b.n	80054da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d108      	bne.n	80054b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a4:	7bbb      	ldrb	r3, [r7, #14]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d105      	bne.n	80054b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054aa:	7b7b      	ldrb	r3, [r7, #13]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d102      	bne.n	80054b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054b0:	7b3b      	ldrb	r3, [r7, #12]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d001      	beq.n	80054ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e03e      	b.n	8005538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <HAL_TIM_Encoder_Start+0xc4>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d008      	beq.n	80054f8 <HAL_TIM_Encoder_Start+0xd4>
 80054e6:	e00f      	b.n	8005508 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2201      	movs	r2, #1
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 ff7d 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 80054f6:	e016      	b.n	8005526 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2201      	movs	r2, #1
 80054fe:	2104      	movs	r1, #4
 8005500:	4618      	mov	r0, r3
 8005502:	f000 ff75 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 8005506:	e00e      	b.n	8005526 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2201      	movs	r2, #1
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f000 ff6d 	bl	80063f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2201      	movs	r2, #1
 800551c:	2104      	movs	r1, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f000 ff66 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 8005524:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_TIM_Encoder_Stop+0x18>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b04      	cmp	r3, #4
 8005554:	d008      	beq.n	8005568 <HAL_TIM_Encoder_Stop+0x28>
 8005556:	e00f      	b.n	8005578 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2200      	movs	r2, #0
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f000 ff45 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 8005566:	e016      	b.n	8005596 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2200      	movs	r2, #0
 800556e:	2104      	movs	r1, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f000 ff3d 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 8005576:	e00e      	b.n	8005596 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2200      	movs	r2, #0
 800557e:	2100      	movs	r1, #0
 8005580:	4618      	mov	r0, r3
 8005582:	f000 ff35 	bl	80063f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2200      	movs	r2, #0
 800558c:	2104      	movs	r1, #4
 800558e:	4618      	mov	r0, r3
 8005590:	f000 ff2e 	bl	80063f0 <TIM_CCxChannelCmd>
      break;
 8005594:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <HAL_TIM_Encoder_Stop+0x86>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <HAL_TIM_Encoder_Stop+0x86>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <HAL_TIM_Encoder_Stop+0x92>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d148      	bne.n	8005664 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_Encoder_Stop+0xa2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055e0:	e023      	b.n	800562a <HAL_TIM_Encoder_Stop+0xea>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_Encoder_Stop+0xb2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055f0:	e01b      	b.n	800562a <HAL_TIM_Encoder_Stop+0xea>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_Encoder_Stop+0xc2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005600:	e013      	b.n	800562a <HAL_TIM_Encoder_Stop+0xea>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	d104      	bne.n	8005612 <HAL_TIM_Encoder_Stop+0xd2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005610:	e00b      	b.n	800562a <HAL_TIM_Encoder_Stop+0xea>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b10      	cmp	r3, #16
 8005616:	d104      	bne.n	8005622 <HAL_TIM_Encoder_Stop+0xe2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005620:	e003      	b.n	800562a <HAL_TIM_Encoder_Stop+0xea>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d104      	bne.n	800563a <HAL_TIM_Encoder_Stop+0xfa>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005638:	e024      	b.n	8005684 <HAL_TIM_Encoder_Stop+0x144>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b04      	cmp	r3, #4
 800563e:	d104      	bne.n	800564a <HAL_TIM_Encoder_Stop+0x10a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005648:	e01c      	b.n	8005684 <HAL_TIM_Encoder_Stop+0x144>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b08      	cmp	r3, #8
 800564e:	d104      	bne.n	800565a <HAL_TIM_Encoder_Stop+0x11a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005658:	e014      	b.n	8005684 <HAL_TIM_Encoder_Stop+0x144>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8005662:	e00f      	b.n	8005684 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d020      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01b      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f06f 0202 	mvn.w	r2, #2
 80056c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fac7 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 80056de:	e005      	b.n	80056ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fab9 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 faca 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d020      	beq.n	800573e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01b      	beq.n	800573e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f06f 0204 	mvn.w	r2, #4
 800570e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 faa1 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 800572a:	e005      	b.n	8005738 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fa93 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 faa4 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d020      	beq.n	800578a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d01b      	beq.n	800578a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f06f 0208 	mvn.w	r2, #8
 800575a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2204      	movs	r2, #4
 8005760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fa7b 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 8005776:	e005      	b.n	8005784 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fa6d 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa7e 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01b      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0210 	mvn.w	r2, #16
 80057a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2208      	movs	r2, #8
 80057ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa55 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 80057c2:	e005      	b.n	80057d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fa47 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fa58 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00c      	beq.n	80057fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f06f 0201 	mvn.w	r2, #1
 80057f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fb fbc9 	bl	8000f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fea2 	bl	800656c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fe9a 	bl	8006580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00c      	beq.n	8005870 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fa12 	bl	8005c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00c      	beq.n	8005894 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0220 	mvn.w	r2, #32
 800588c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fe62 	bl	8006558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e0ff      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b14      	cmp	r3, #20
 80058c6:	f200 80f0 	bhi.w	8005aaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058ca:	a201      	add	r2, pc, #4	@ (adr r2, 80058d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	08005925 	.word	0x08005925
 80058d4:	08005aab 	.word	0x08005aab
 80058d8:	08005aab 	.word	0x08005aab
 80058dc:	08005aab 	.word	0x08005aab
 80058e0:	08005965 	.word	0x08005965
 80058e4:	08005aab 	.word	0x08005aab
 80058e8:	08005aab 	.word	0x08005aab
 80058ec:	08005aab 	.word	0x08005aab
 80058f0:	080059a7 	.word	0x080059a7
 80058f4:	08005aab 	.word	0x08005aab
 80058f8:	08005aab 	.word	0x08005aab
 80058fc:	08005aab 	.word	0x08005aab
 8005900:	080059e7 	.word	0x080059e7
 8005904:	08005aab 	.word	0x08005aab
 8005908:	08005aab 	.word	0x08005aab
 800590c:	08005aab 	.word	0x08005aab
 8005910:	08005a29 	.word	0x08005a29
 8005914:	08005aab 	.word	0x08005aab
 8005918:	08005aab 	.word	0x08005aab
 800591c:	08005aab 	.word	0x08005aab
 8005920:	08005a69 	.word	0x08005a69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fa68 	bl	8005e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0208 	orr.w	r2, r2, #8
 800593e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0204 	bic.w	r2, r2, #4
 800594e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6999      	ldr	r1, [r3, #24]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	619a      	str	r2, [r3, #24]
      break;
 8005962:	e0a5      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 faba 	bl	8005ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800597e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800598e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6999      	ldr	r1, [r3, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	619a      	str	r2, [r3, #24]
      break;
 80059a4:	e084      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fb11 	bl	8005fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0208 	orr.w	r2, r2, #8
 80059c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0204 	bic.w	r2, r2, #4
 80059d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69d9      	ldr	r1, [r3, #28]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	61da      	str	r2, [r3, #28]
      break;
 80059e4:	e064      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fb67 	bl	80060c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	021a      	lsls	r2, r3, #8
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	61da      	str	r2, [r3, #28]
      break;
 8005a26:	e043      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fb9e 	bl	8006170 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0208 	orr.w	r2, r2, #8
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0204 	bic.w	r2, r2, #4
 8005a52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a66:	e023      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fbd0 	bl	8006214 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	021a      	lsls	r2, r3, #8
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005aa8:	e002      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	75fb      	strb	r3, [r7, #23]
      break;
 8005aae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop

08005ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0b4      	b.n	8005c4a <HAL_TIM_ConfigClockSource+0x186>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4b56      	ldr	r3, [pc, #344]	@ (8005c54 <HAL_TIM_ConfigClockSource+0x190>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b18:	d03e      	beq.n	8005b98 <HAL_TIM_ConfigClockSource+0xd4>
 8005b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b1e:	f200 8087 	bhi.w	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b26:	f000 8086 	beq.w	8005c36 <HAL_TIM_ConfigClockSource+0x172>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2e:	d87f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b70      	cmp	r3, #112	@ 0x70
 8005b32:	d01a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0xa6>
 8005b34:	2b70      	cmp	r3, #112	@ 0x70
 8005b36:	d87b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b60      	cmp	r3, #96	@ 0x60
 8005b3a:	d050      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x11a>
 8005b3c:	2b60      	cmp	r3, #96	@ 0x60
 8005b3e:	d877      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b50      	cmp	r3, #80	@ 0x50
 8005b42:	d03c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0xfa>
 8005b44:	2b50      	cmp	r3, #80	@ 0x50
 8005b46:	d873      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b40      	cmp	r3, #64	@ 0x40
 8005b4a:	d058      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x13a>
 8005b4c:	2b40      	cmp	r3, #64	@ 0x40
 8005b4e:	d86f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b30      	cmp	r3, #48	@ 0x30
 8005b52:	d064      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b54:	2b30      	cmp	r3, #48	@ 0x30
 8005b56:	d86b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d060      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d867      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d05c      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d05a      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b68:	e062      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b7a:	f000 fc19 	bl	80063b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	609a      	str	r2, [r3, #8]
      break;
 8005b96:	e04f      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ba8:	f000 fc02 	bl	80063b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bba:	609a      	str	r2, [r3, #8]
      break;
 8005bbc:	e03c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 fb76 	bl	80062bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2150      	movs	r1, #80	@ 0x50
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fbcf 	bl	800637a <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e02c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fb95 	bl	800631a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2160      	movs	r1, #96	@ 0x60
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fbbf 	bl	800637a <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e01c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f000 fb56 	bl	80062bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2140      	movs	r1, #64	@ 0x40
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fbaf 	bl	800637a <TIM_ITRx_SetConfig>
      break;
 8005c1c:	e00c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f000 fba6 	bl	800637a <TIM_ITRx_SetConfig>
      break;
 8005c2e:	e003      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      break;
 8005c34:	e000      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	fffeff88 	.word	0xfffeff88

08005c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a46      	ldr	r2, [pc, #280]	@ (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d013      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a43      	ldr	r2, [pc, #268]	@ (8005dd8 <TIM_Base_SetConfig+0x130>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a42      	ldr	r2, [pc, #264]	@ (8005ddc <TIM_Base_SetConfig+0x134>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a41      	ldr	r2, [pc, #260]	@ (8005de0 <TIM_Base_SetConfig+0x138>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a40      	ldr	r2, [pc, #256]	@ (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a35      	ldr	r2, [pc, #212]	@ (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d08:	d027      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a32      	ldr	r2, [pc, #200]	@ (8005dd8 <TIM_Base_SetConfig+0x130>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d023      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a31      	ldr	r2, [pc, #196]	@ (8005ddc <TIM_Base_SetConfig+0x134>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01f      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a30      	ldr	r2, [pc, #192]	@ (8005de0 <TIM_Base_SetConfig+0x138>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2f      	ldr	r2, [pc, #188]	@ (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d017      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005de8 <TIM_Base_SetConfig+0x140>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2d      	ldr	r2, [pc, #180]	@ (8005dec <TIM_Base_SetConfig+0x144>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00f      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005df0 <TIM_Base_SetConfig+0x148>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2b      	ldr	r2, [pc, #172]	@ (8005df4 <TIM_Base_SetConfig+0x14c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d007      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005df8 <TIM_Base_SetConfig+0x150>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a29      	ldr	r2, [pc, #164]	@ (8005dfc <TIM_Base_SetConfig+0x154>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d108      	bne.n	8005d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a10      	ldr	r2, [pc, #64]	@ (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0xf8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a12      	ldr	r2, [pc, #72]	@ (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d103      	bne.n	8005da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f023 0201 	bic.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	611a      	str	r2, [r3, #16]
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800
 8005df4:	40001800 	.word	0x40001800
 8005df8:	40001c00 	.word	0x40001c00
 8005dfc:	40002000 	.word	0x40002000

08005e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f023 0201 	bic.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed8 <TIM_OC1_SetConfig+0xd8>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f023 0302 	bic.w	r3, r3, #2
 8005e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a21      	ldr	r2, [pc, #132]	@ (8005edc <TIM_OC1_SetConfig+0xdc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_OC1_SetConfig+0x64>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a20      	ldr	r2, [pc, #128]	@ (8005ee0 <TIM_OC1_SetConfig+0xe0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10c      	bne.n	8005e7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0308 	bic.w	r3, r3, #8
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <TIM_OC1_SetConfig+0xdc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_OC1_SetConfig+0x8e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a15      	ldr	r2, [pc, #84]	@ (8005ee0 <TIM_OC1_SetConfig+0xe0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d111      	bne.n	8005eb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	621a      	str	r2, [r3, #32]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	fffeff8f 	.word	0xfffeff8f
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400

08005ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f023 0210 	bic.w	r2, r3, #16
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8005fc8 <TIM_OC2_SetConfig+0xe4>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0320 	bic.w	r3, r3, #32
 8005f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a23      	ldr	r2, [pc, #140]	@ (8005fcc <TIM_OC2_SetConfig+0xe8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC2_SetConfig+0x68>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a22      	ldr	r2, [pc, #136]	@ (8005fd0 <TIM_OC2_SetConfig+0xec>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10d      	bne.n	8005f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a18      	ldr	r2, [pc, #96]	@ (8005fcc <TIM_OC2_SetConfig+0xe8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_OC2_SetConfig+0x94>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a17      	ldr	r2, [pc, #92]	@ (8005fd0 <TIM_OC2_SetConfig+0xec>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d113      	bne.n	8005fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	feff8fff 	.word	0xfeff8fff
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40010400 	.word	0x40010400

08005fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80060b4 <TIM_OC3_SetConfig+0xe0>)
 8006000:	4013      	ands	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0303 	bic.w	r3, r3, #3
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800601c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a22      	ldr	r2, [pc, #136]	@ (80060b8 <TIM_OC3_SetConfig+0xe4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC3_SetConfig+0x66>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a21      	ldr	r2, [pc, #132]	@ (80060bc <TIM_OC3_SetConfig+0xe8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d10d      	bne.n	8006056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a17      	ldr	r2, [pc, #92]	@ (80060b8 <TIM_OC3_SetConfig+0xe4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d003      	beq.n	8006066 <TIM_OC3_SetConfig+0x92>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a16      	ldr	r2, [pc, #88]	@ (80060bc <TIM_OC3_SetConfig+0xe8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d113      	bne.n	800608e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800606c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	621a      	str	r2, [r3, #32]
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	fffeff8f 	.word	0xfffeff8f
 80060b8:	40010000 	.word	0x40010000
 80060bc:	40010400 	.word	0x40010400

080060c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006164 <TIM_OC4_SetConfig+0xa4>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800610a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	031b      	lsls	r3, r3, #12
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a13      	ldr	r2, [pc, #76]	@ (8006168 <TIM_OC4_SetConfig+0xa8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_OC4_SetConfig+0x68>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a12      	ldr	r2, [pc, #72]	@ (800616c <TIM_OC4_SetConfig+0xac>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d109      	bne.n	800613c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800612e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	019b      	lsls	r3, r3, #6
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	feff8fff 	.word	0xfeff8fff
 8006168:	40010000 	.word	0x40010000
 800616c:	40010400 	.word	0x40010400

08006170 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <TIM_OC5_SetConfig+0x98>)
 800619c:	4013      	ands	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a12      	ldr	r2, [pc, #72]	@ (800620c <TIM_OC5_SetConfig+0x9c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_OC5_SetConfig+0x5e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a11      	ldr	r2, [pc, #68]	@ (8006210 <TIM_OC5_SetConfig+0xa0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d109      	bne.n	80061e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	621a      	str	r2, [r3, #32]
}
 80061fc:	bf00      	nop
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	fffeff8f 	.word	0xfffeff8f
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4b1c      	ldr	r3, [pc, #112]	@ (80062b0 <TIM_OC6_SetConfig+0x9c>)
 8006240:	4013      	ands	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	051b      	lsls	r3, r3, #20
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a13      	ldr	r2, [pc, #76]	@ (80062b4 <TIM_OC6_SetConfig+0xa0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC6_SetConfig+0x60>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a12      	ldr	r2, [pc, #72]	@ (80062b8 <TIM_OC6_SetConfig+0xa4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d109      	bne.n	8006288 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	feff8fff 	.word	0xfeff8fff
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40010400 	.word	0x40010400

080062bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f023 0201 	bic.w	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f023 030a 	bic.w	r3, r3, #10
 80062f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800631a:	b480      	push	{r7}
 800631c:	b087      	sub	sp, #28
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f023 0210 	bic.w	r2, r3, #16
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	031b      	lsls	r3, r3, #12
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	f043 0307 	orr.w	r3, r3, #7
 800639c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	609a      	str	r2, [r3, #8]
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	021a      	lsls	r2, r3, #8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	609a      	str	r2, [r3, #8]
}
 80063e4:	bf00      	nop
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	2201      	movs	r2, #1
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1a      	ldr	r2, [r3, #32]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	43db      	mvns	r3, r3
 8006412:	401a      	ands	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a1a      	ldr	r2, [r3, #32]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	fa01 f303 	lsl.w	r3, r1, r3
 8006428:	431a      	orrs	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006450:	2302      	movs	r3, #2
 8006452:	e06d      	b.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a30      	ldr	r2, [pc, #192]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2f      	ldr	r2, [pc, #188]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d108      	bne.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800648e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a20      	ldr	r2, [pc, #128]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c6:	d01d      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006544 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006548 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1a      	ldr	r2, [pc, #104]	@ (800654c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a15      	ldr	r2, [pc, #84]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a16      	ldr	r2, [pc, #88]	@ (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d10c      	bne.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800650a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	4313      	orrs	r3, r2
 8006514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40010000 	.word	0x40010000
 8006540:	40010400 	.word	0x40010400
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40014000 	.word	0x40014000
 8006554:	40001800 	.word	0x40001800

08006558 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e040      	b.n	8006628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fb ffc8 	bl	800254c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2224      	movs	r2, #36	@ 0x24
 80065c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0201 	bic.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fe6c 	bl	80072b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fc05 	bl	8006df0 <UART_SetConfig>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e01b      	b.n	8006628 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800660e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 feeb 	bl	80073fc <UART_CheckIdleState>
 8006626:	4603      	mov	r3, r0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	@ 0x28
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	4613      	mov	r3, r2
 800663e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006644:	2b20      	cmp	r3, #32
 8006646:	d177      	bne.n	8006738 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_UART_Transmit+0x24>
 800664e:	88fb      	ldrh	r3, [r7, #6]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e070      	b.n	800673a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2221      	movs	r2, #33	@ 0x21
 8006664:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006666:	f7fc f9ab 	bl	80029c0 <HAL_GetTick>
 800666a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	88fa      	ldrh	r2, [r7, #6]
 8006670:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006684:	d108      	bne.n	8006698 <HAL_UART_Transmit+0x68>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	e003      	b.n	80066a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066a0:	e02f      	b.n	8006702 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2200      	movs	r2, #0
 80066aa:	2180      	movs	r1, #128	@ 0x80
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 ff4d 	bl	800754c <UART_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e03b      	b.n	800673a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10b      	bne.n	80066e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	3302      	adds	r3, #2
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	e007      	b.n	80066f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	781a      	ldrb	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	3301      	adds	r3, #1
 80066ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1c9      	bne.n	80066a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2200      	movs	r2, #0
 8006716:	2140      	movs	r1, #64	@ 0x40
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 ff17 	bl	800754c <UART_WaitOnFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e005      	b.n	800673a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2220      	movs	r2, #32
 8006732:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e000      	b.n	800673a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006738:	2302      	movs	r3, #2
  }
}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b08a      	sub	sp, #40	@ 0x28
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	4613      	mov	r3, r2
 800674e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006756:	2b20      	cmp	r3, #32
 8006758:	d132      	bne.n	80067c0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <HAL_UART_Receive_IT+0x24>
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e02b      	b.n	80067c2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d018      	beq.n	80067b0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	613b      	str	r3, [r7, #16]
   return(result);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	623b      	str	r3, [r7, #32]
 800679e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	69f9      	ldr	r1, [r7, #28]
 80067a2:	6a3a      	ldr	r2, [r7, #32]
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e6      	bne.n	800677e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	461a      	mov	r2, r3
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 ff36 	bl	8007628 <UART_Start_Receive_IT>
 80067bc:	4603      	mov	r3, r0
 80067be:	e000      	b.n	80067c2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3728      	adds	r7, #40	@ 0x28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b0ba      	sub	sp, #232	@ 0xe8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80067f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80067fa:	4013      	ands	r3, r2
 80067fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d115      	bne.n	8006834 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00f      	beq.n	8006834 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d009      	beq.n	8006834 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 82ac 	beq.w	8006d82 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3
      }
      return;
 8006832:	e2a6      	b.n	8006d82 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8117 	beq.w	8006a6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800683e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800684a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800684e:	4b85      	ldr	r3, [pc, #532]	@ (8006a64 <HAL_UART_IRQHandler+0x298>)
 8006850:	4013      	ands	r3, r2
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 810a 	beq.w	8006a6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d011      	beq.n	8006888 <HAL_UART_IRQHandler+0xbc>
 8006864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2201      	movs	r2, #1
 8006876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800687e:	f043 0201 	orr.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d011      	beq.n	80068b8 <HAL_UART_IRQHandler+0xec>
 8006894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2202      	movs	r2, #2
 80068a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ae:	f043 0204 	orr.w	r2, r3, #4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d011      	beq.n	80068e8 <HAL_UART_IRQHandler+0x11c>
 80068c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00b      	beq.n	80068e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2204      	movs	r2, #4
 80068d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068de:	f043 0202 	orr.w	r2, r3, #2
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d017      	beq.n	8006924 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006904:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2208      	movs	r2, #8
 8006912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800691a:	f043 0208 	orr.w	r2, r3, #8
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800692c:	2b00      	cmp	r3, #0
 800692e:	d012      	beq.n	8006956 <HAL_UART_IRQHandler+0x18a>
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006934:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00c      	beq.n	8006956 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800694c:	f043 0220 	orr.w	r2, r3, #32
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 8212 	beq.w	8006d86 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00d      	beq.n	800698a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800696e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d007      	beq.n	800698a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006990:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699e:	2b40      	cmp	r3, #64	@ 0x40
 80069a0:	d005      	beq.n	80069ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d04f      	beq.n	8006a4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 ff00 	bl	80077b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069be:	2b40      	cmp	r3, #64	@ 0x40
 80069c0:	d141      	bne.n	8006a46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3308      	adds	r3, #8
 80069ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1d9      	bne.n	80069c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d013      	beq.n	8006a3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1a:	4a13      	ldr	r2, [pc, #76]	@ (8006a68 <HAL_UART_IRQHandler+0x29c>)
 8006a1c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fc fa2c 	bl	8002e80 <HAL_DMA_Abort_IT>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d017      	beq.n	8006a5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	e00f      	b.n	8006a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9b6 	bl	8006db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	e00b      	b.n	8006a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f9b2 	bl	8006db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	e007      	b.n	8006a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f9ae 	bl	8006db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a5c:	e193      	b.n	8006d86 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5e:	bf00      	nop
    return;
 8006a60:	e191      	b.n	8006d86 <HAL_UART_IRQHandler+0x5ba>
 8006a62:	bf00      	nop
 8006a64:	04000120 	.word	0x04000120
 8006a68:	0800787d 	.word	0x0800787d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	f040 814c 	bne.w	8006d0e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 8145 	beq.w	8006d0e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 813e 	beq.w	8006d0e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2210      	movs	r2, #16
 8006a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa4:	2b40      	cmp	r3, #64	@ 0x40
 8006aa6:	f040 80b6 	bne.w	8006c16 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ab6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8165 	beq.w	8006d8a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aca:	429a      	cmp	r2, r3
 8006acc:	f080 815d 	bcs.w	8006d8a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae4:	f000 8086 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1da      	bne.n	8006ae8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b44:	f023 0301 	bic.w	r3, r3, #1
 8006b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3308      	adds	r3, #8
 8006b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e1      	bne.n	8006b32 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e3      	bne.n	8006b6e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc4:	f023 0310 	bic.w	r3, r3, #16
 8006bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e4      	bne.n	8006bb4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fc f8d6 	bl	8002da0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8d8 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c14:	e0b9      	b.n	8006d8a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80ab 	beq.w	8006d8e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80a6 	beq.w	8006d8e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e4      	bne.n	8006c42 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	623b      	str	r3, [r7, #32]
   return(result);
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3308      	adds	r3, #8
 8006c98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e3      	bne.n	8006c78 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f023 0310 	bic.w	r3, r3, #16
 8006cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	69b9      	ldr	r1, [r7, #24]
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e4      	bne.n	8006cc4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f85c 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d0c:	e03f      	b.n	8006d8e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00e      	beq.n	8006d38 <HAL_UART_IRQHandler+0x56c>
 8006d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f853 	bl	8006ddc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d36:	e02d      	b.n	8006d94 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00e      	beq.n	8006d62 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01c      	beq.n	8006d92 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	4798      	blx	r3
    }
    return;
 8006d60:	e017      	b.n	8006d92 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d012      	beq.n	8006d94 <HAL_UART_IRQHandler+0x5c8>
 8006d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fd94 	bl	80078a8 <UART_EndTransmit_IT>
    return;
 8006d80:	e008      	b.n	8006d94 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006d82:	bf00      	nop
 8006d84:	e006      	b.n	8006d94 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006d86:	bf00      	nop
 8006d88:	e004      	b.n	8006d94 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006d8a:	bf00      	nop
 8006d8c:	e002      	b.n	8006d94 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006d8e:	bf00      	nop
 8006d90:	e000      	b.n	8006d94 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006d92:	bf00      	nop
  }

}
 8006d94:	37e8      	adds	r7, #232	@ 0xe8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop

08006d9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4ba6      	ldr	r3, [pc, #664]	@ (80070b4 <UART_SetConfig+0x2c4>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	6979      	ldr	r1, [r7, #20]
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a94      	ldr	r2, [pc, #592]	@ (80070b8 <UART_SetConfig+0x2c8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d120      	bne.n	8006eae <UART_SetConfig+0xbe>
 8006e6c:	4b93      	ldr	r3, [pc, #588]	@ (80070bc <UART_SetConfig+0x2cc>)
 8006e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d816      	bhi.n	8006ea8 <UART_SetConfig+0xb8>
 8006e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <UART_SetConfig+0x90>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006e91 	.word	0x08006e91
 8006e84:	08006e9d 	.word	0x08006e9d
 8006e88:	08006e97 	.word	0x08006e97
 8006e8c:	08006ea3 	.word	0x08006ea3
 8006e90:	2301      	movs	r3, #1
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e150      	b.n	8007138 <UART_SetConfig+0x348>
 8006e96:	2302      	movs	r3, #2
 8006e98:	77fb      	strb	r3, [r7, #31]
 8006e9a:	e14d      	b.n	8007138 <UART_SetConfig+0x348>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e14a      	b.n	8007138 <UART_SetConfig+0x348>
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e147      	b.n	8007138 <UART_SetConfig+0x348>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e144      	b.n	8007138 <UART_SetConfig+0x348>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a83      	ldr	r2, [pc, #524]	@ (80070c0 <UART_SetConfig+0x2d0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d132      	bne.n	8006f1e <UART_SetConfig+0x12e>
 8006eb8:	4b80      	ldr	r3, [pc, #512]	@ (80070bc <UART_SetConfig+0x2cc>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ebe:	f003 030c 	and.w	r3, r3, #12
 8006ec2:	2b0c      	cmp	r3, #12
 8006ec4:	d828      	bhi.n	8006f18 <UART_SetConfig+0x128>
 8006ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <UART_SetConfig+0xdc>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006f01 	.word	0x08006f01
 8006ed0:	08006f19 	.word	0x08006f19
 8006ed4:	08006f19 	.word	0x08006f19
 8006ed8:	08006f19 	.word	0x08006f19
 8006edc:	08006f0d 	.word	0x08006f0d
 8006ee0:	08006f19 	.word	0x08006f19
 8006ee4:	08006f19 	.word	0x08006f19
 8006ee8:	08006f19 	.word	0x08006f19
 8006eec:	08006f07 	.word	0x08006f07
 8006ef0:	08006f19 	.word	0x08006f19
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f19 	.word	0x08006f19
 8006efc:	08006f13 	.word	0x08006f13
 8006f00:	2300      	movs	r3, #0
 8006f02:	77fb      	strb	r3, [r7, #31]
 8006f04:	e118      	b.n	8007138 <UART_SetConfig+0x348>
 8006f06:	2302      	movs	r3, #2
 8006f08:	77fb      	strb	r3, [r7, #31]
 8006f0a:	e115      	b.n	8007138 <UART_SetConfig+0x348>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	e112      	b.n	8007138 <UART_SetConfig+0x348>
 8006f12:	2308      	movs	r3, #8
 8006f14:	77fb      	strb	r3, [r7, #31]
 8006f16:	e10f      	b.n	8007138 <UART_SetConfig+0x348>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e10c      	b.n	8007138 <UART_SetConfig+0x348>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a68      	ldr	r2, [pc, #416]	@ (80070c4 <UART_SetConfig+0x2d4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d120      	bne.n	8006f6a <UART_SetConfig+0x17a>
 8006f28:	4b64      	ldr	r3, [pc, #400]	@ (80070bc <UART_SetConfig+0x2cc>)
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f32:	2b30      	cmp	r3, #48	@ 0x30
 8006f34:	d013      	beq.n	8006f5e <UART_SetConfig+0x16e>
 8006f36:	2b30      	cmp	r3, #48	@ 0x30
 8006f38:	d814      	bhi.n	8006f64 <UART_SetConfig+0x174>
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d009      	beq.n	8006f52 <UART_SetConfig+0x162>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d810      	bhi.n	8006f64 <UART_SetConfig+0x174>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <UART_SetConfig+0x15c>
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d006      	beq.n	8006f58 <UART_SetConfig+0x168>
 8006f4a:	e00b      	b.n	8006f64 <UART_SetConfig+0x174>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	77fb      	strb	r3, [r7, #31]
 8006f50:	e0f2      	b.n	8007138 <UART_SetConfig+0x348>
 8006f52:	2302      	movs	r3, #2
 8006f54:	77fb      	strb	r3, [r7, #31]
 8006f56:	e0ef      	b.n	8007138 <UART_SetConfig+0x348>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	77fb      	strb	r3, [r7, #31]
 8006f5c:	e0ec      	b.n	8007138 <UART_SetConfig+0x348>
 8006f5e:	2308      	movs	r3, #8
 8006f60:	77fb      	strb	r3, [r7, #31]
 8006f62:	e0e9      	b.n	8007138 <UART_SetConfig+0x348>
 8006f64:	2310      	movs	r3, #16
 8006f66:	77fb      	strb	r3, [r7, #31]
 8006f68:	e0e6      	b.n	8007138 <UART_SetConfig+0x348>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a56      	ldr	r2, [pc, #344]	@ (80070c8 <UART_SetConfig+0x2d8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d120      	bne.n	8006fb6 <UART_SetConfig+0x1c6>
 8006f74:	4b51      	ldr	r3, [pc, #324]	@ (80070bc <UART_SetConfig+0x2cc>)
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f80:	d013      	beq.n	8006faa <UART_SetConfig+0x1ba>
 8006f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f84:	d814      	bhi.n	8006fb0 <UART_SetConfig+0x1c0>
 8006f86:	2b80      	cmp	r3, #128	@ 0x80
 8006f88:	d009      	beq.n	8006f9e <UART_SetConfig+0x1ae>
 8006f8a:	2b80      	cmp	r3, #128	@ 0x80
 8006f8c:	d810      	bhi.n	8006fb0 <UART_SetConfig+0x1c0>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <UART_SetConfig+0x1a8>
 8006f92:	2b40      	cmp	r3, #64	@ 0x40
 8006f94:	d006      	beq.n	8006fa4 <UART_SetConfig+0x1b4>
 8006f96:	e00b      	b.n	8006fb0 <UART_SetConfig+0x1c0>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e0cc      	b.n	8007138 <UART_SetConfig+0x348>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e0c9      	b.n	8007138 <UART_SetConfig+0x348>
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e0c6      	b.n	8007138 <UART_SetConfig+0x348>
 8006faa:	2308      	movs	r3, #8
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e0c3      	b.n	8007138 <UART_SetConfig+0x348>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e0c0      	b.n	8007138 <UART_SetConfig+0x348>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a44      	ldr	r2, [pc, #272]	@ (80070cc <UART_SetConfig+0x2dc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d125      	bne.n	800700c <UART_SetConfig+0x21c>
 8006fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80070bc <UART_SetConfig+0x2cc>)
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fce:	d017      	beq.n	8007000 <UART_SetConfig+0x210>
 8006fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fd4:	d817      	bhi.n	8007006 <UART_SetConfig+0x216>
 8006fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fda:	d00b      	beq.n	8006ff4 <UART_SetConfig+0x204>
 8006fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe0:	d811      	bhi.n	8007006 <UART_SetConfig+0x216>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <UART_SetConfig+0x1fe>
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fea:	d006      	beq.n	8006ffa <UART_SetConfig+0x20a>
 8006fec:	e00b      	b.n	8007006 <UART_SetConfig+0x216>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	77fb      	strb	r3, [r7, #31]
 8006ff2:	e0a1      	b.n	8007138 <UART_SetConfig+0x348>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e09e      	b.n	8007138 <UART_SetConfig+0x348>
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e09b      	b.n	8007138 <UART_SetConfig+0x348>
 8007000:	2308      	movs	r3, #8
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e098      	b.n	8007138 <UART_SetConfig+0x348>
 8007006:	2310      	movs	r3, #16
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e095      	b.n	8007138 <UART_SetConfig+0x348>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a2f      	ldr	r2, [pc, #188]	@ (80070d0 <UART_SetConfig+0x2e0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d125      	bne.n	8007062 <UART_SetConfig+0x272>
 8007016:	4b29      	ldr	r3, [pc, #164]	@ (80070bc <UART_SetConfig+0x2cc>)
 8007018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800701c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007020:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007024:	d017      	beq.n	8007056 <UART_SetConfig+0x266>
 8007026:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800702a:	d817      	bhi.n	800705c <UART_SetConfig+0x26c>
 800702c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007030:	d00b      	beq.n	800704a <UART_SetConfig+0x25a>
 8007032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007036:	d811      	bhi.n	800705c <UART_SetConfig+0x26c>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <UART_SetConfig+0x254>
 800703c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007040:	d006      	beq.n	8007050 <UART_SetConfig+0x260>
 8007042:	e00b      	b.n	800705c <UART_SetConfig+0x26c>
 8007044:	2301      	movs	r3, #1
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e076      	b.n	8007138 <UART_SetConfig+0x348>
 800704a:	2302      	movs	r3, #2
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e073      	b.n	8007138 <UART_SetConfig+0x348>
 8007050:	2304      	movs	r3, #4
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e070      	b.n	8007138 <UART_SetConfig+0x348>
 8007056:	2308      	movs	r3, #8
 8007058:	77fb      	strb	r3, [r7, #31]
 800705a:	e06d      	b.n	8007138 <UART_SetConfig+0x348>
 800705c:	2310      	movs	r3, #16
 800705e:	77fb      	strb	r3, [r7, #31]
 8007060:	e06a      	b.n	8007138 <UART_SetConfig+0x348>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <UART_SetConfig+0x2e4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d138      	bne.n	80070de <UART_SetConfig+0x2ee>
 800706c:	4b13      	ldr	r3, [pc, #76]	@ (80070bc <UART_SetConfig+0x2cc>)
 800706e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007072:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007076:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800707a:	d017      	beq.n	80070ac <UART_SetConfig+0x2bc>
 800707c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007080:	d82a      	bhi.n	80070d8 <UART_SetConfig+0x2e8>
 8007082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007086:	d00b      	beq.n	80070a0 <UART_SetConfig+0x2b0>
 8007088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800708c:	d824      	bhi.n	80070d8 <UART_SetConfig+0x2e8>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <UART_SetConfig+0x2aa>
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007096:	d006      	beq.n	80070a6 <UART_SetConfig+0x2b6>
 8007098:	e01e      	b.n	80070d8 <UART_SetConfig+0x2e8>
 800709a:	2300      	movs	r3, #0
 800709c:	77fb      	strb	r3, [r7, #31]
 800709e:	e04b      	b.n	8007138 <UART_SetConfig+0x348>
 80070a0:	2302      	movs	r3, #2
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e048      	b.n	8007138 <UART_SetConfig+0x348>
 80070a6:	2304      	movs	r3, #4
 80070a8:	77fb      	strb	r3, [r7, #31]
 80070aa:	e045      	b.n	8007138 <UART_SetConfig+0x348>
 80070ac:	2308      	movs	r3, #8
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e042      	b.n	8007138 <UART_SetConfig+0x348>
 80070b2:	bf00      	nop
 80070b4:	efff69f3 	.word	0xefff69f3
 80070b8:	40011000 	.word	0x40011000
 80070bc:	40023800 	.word	0x40023800
 80070c0:	40004400 	.word	0x40004400
 80070c4:	40004800 	.word	0x40004800
 80070c8:	40004c00 	.word	0x40004c00
 80070cc:	40005000 	.word	0x40005000
 80070d0:	40011400 	.word	0x40011400
 80070d4:	40007800 	.word	0x40007800
 80070d8:	2310      	movs	r3, #16
 80070da:	77fb      	strb	r3, [r7, #31]
 80070dc:	e02c      	b.n	8007138 <UART_SetConfig+0x348>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a72      	ldr	r2, [pc, #456]	@ (80072ac <UART_SetConfig+0x4bc>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d125      	bne.n	8007134 <UART_SetConfig+0x344>
 80070e8:	4b71      	ldr	r3, [pc, #452]	@ (80072b0 <UART_SetConfig+0x4c0>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80070f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80070f6:	d017      	beq.n	8007128 <UART_SetConfig+0x338>
 80070f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80070fc:	d817      	bhi.n	800712e <UART_SetConfig+0x33e>
 80070fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007102:	d00b      	beq.n	800711c <UART_SetConfig+0x32c>
 8007104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007108:	d811      	bhi.n	800712e <UART_SetConfig+0x33e>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <UART_SetConfig+0x326>
 800710e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007112:	d006      	beq.n	8007122 <UART_SetConfig+0x332>
 8007114:	e00b      	b.n	800712e <UART_SetConfig+0x33e>
 8007116:	2300      	movs	r3, #0
 8007118:	77fb      	strb	r3, [r7, #31]
 800711a:	e00d      	b.n	8007138 <UART_SetConfig+0x348>
 800711c:	2302      	movs	r3, #2
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e00a      	b.n	8007138 <UART_SetConfig+0x348>
 8007122:	2304      	movs	r3, #4
 8007124:	77fb      	strb	r3, [r7, #31]
 8007126:	e007      	b.n	8007138 <UART_SetConfig+0x348>
 8007128:	2308      	movs	r3, #8
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e004      	b.n	8007138 <UART_SetConfig+0x348>
 800712e:	2310      	movs	r3, #16
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e001      	b.n	8007138 <UART_SetConfig+0x348>
 8007134:	2310      	movs	r3, #16
 8007136:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007140:	d15b      	bne.n	80071fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007142:	7ffb      	ldrb	r3, [r7, #31]
 8007144:	2b08      	cmp	r3, #8
 8007146:	d828      	bhi.n	800719a <UART_SetConfig+0x3aa>
 8007148:	a201      	add	r2, pc, #4	@ (adr r2, 8007150 <UART_SetConfig+0x360>)
 800714a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714e:	bf00      	nop
 8007150:	08007175 	.word	0x08007175
 8007154:	0800717d 	.word	0x0800717d
 8007158:	08007185 	.word	0x08007185
 800715c:	0800719b 	.word	0x0800719b
 8007160:	0800718b 	.word	0x0800718b
 8007164:	0800719b 	.word	0x0800719b
 8007168:	0800719b 	.word	0x0800719b
 800716c:	0800719b 	.word	0x0800719b
 8007170:	08007193 	.word	0x08007193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007174:	f7fd f920 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 8007178:	61b8      	str	r0, [r7, #24]
        break;
 800717a:	e013      	b.n	80071a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800717c:	f7fd f930 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8007180:	61b8      	str	r0, [r7, #24]
        break;
 8007182:	e00f      	b.n	80071a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007184:	4b4b      	ldr	r3, [pc, #300]	@ (80072b4 <UART_SetConfig+0x4c4>)
 8007186:	61bb      	str	r3, [r7, #24]
        break;
 8007188:	e00c      	b.n	80071a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718a:	f7fd f803 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 800718e:	61b8      	str	r0, [r7, #24]
        break;
 8007190:	e008      	b.n	80071a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007196:	61bb      	str	r3, [r7, #24]
        break;
 8007198:	e004      	b.n	80071a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	77bb      	strb	r3, [r7, #30]
        break;
 80071a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d074      	beq.n	8007294 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	005a      	lsls	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	085b      	lsrs	r3, r3, #1
 80071b4:	441a      	add	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80071be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	2b0f      	cmp	r3, #15
 80071c4:	d916      	bls.n	80071f4 <UART_SetConfig+0x404>
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071cc:	d212      	bcs.n	80071f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f023 030f 	bic.w	r3, r3, #15
 80071d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	085b      	lsrs	r3, r3, #1
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	89fb      	ldrh	r3, [r7, #14]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	89fa      	ldrh	r2, [r7, #14]
 80071f0:	60da      	str	r2, [r3, #12]
 80071f2:	e04f      	b.n	8007294 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	77bb      	strb	r3, [r7, #30]
 80071f8:	e04c      	b.n	8007294 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071fa:	7ffb      	ldrb	r3, [r7, #31]
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d828      	bhi.n	8007252 <UART_SetConfig+0x462>
 8007200:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <UART_SetConfig+0x418>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	0800722d 	.word	0x0800722d
 800720c:	08007235 	.word	0x08007235
 8007210:	0800723d 	.word	0x0800723d
 8007214:	08007253 	.word	0x08007253
 8007218:	08007243 	.word	0x08007243
 800721c:	08007253 	.word	0x08007253
 8007220:	08007253 	.word	0x08007253
 8007224:	08007253 	.word	0x08007253
 8007228:	0800724b 	.word	0x0800724b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800722c:	f7fd f8c4 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 8007230:	61b8      	str	r0, [r7, #24]
        break;
 8007232:	e013      	b.n	800725c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007234:	f7fd f8d4 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8007238:	61b8      	str	r0, [r7, #24]
        break;
 800723a:	e00f      	b.n	800725c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800723c:	4b1d      	ldr	r3, [pc, #116]	@ (80072b4 <UART_SetConfig+0x4c4>)
 800723e:	61bb      	str	r3, [r7, #24]
        break;
 8007240:	e00c      	b.n	800725c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007242:	f7fc ffa7 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8007246:	61b8      	str	r0, [r7, #24]
        break;
 8007248:	e008      	b.n	800725c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800724e:	61bb      	str	r3, [r7, #24]
        break;
 8007250:	e004      	b.n	800725c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	77bb      	strb	r3, [r7, #30]
        break;
 800725a:	bf00      	nop
    }

    if (pclk != 0U)
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d018      	beq.n	8007294 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	085a      	lsrs	r2, r3, #1
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	441a      	add	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	fbb2 f3f3 	udiv	r3, r2, r3
 8007274:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2b0f      	cmp	r3, #15
 800727a:	d909      	bls.n	8007290 <UART_SetConfig+0x4a0>
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007282:	d205      	bcs.n	8007290 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	b29a      	uxth	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60da      	str	r2, [r3, #12]
 800728e:	e001      	b.n	8007294 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40007c00 	.word	0x40007c00
 80072b0:	40023800 	.word	0x40023800
 80072b4:	00f42400 	.word	0x00f42400

080072b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c4:	f003 0308 	and.w	r3, r3, #8
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01a      	beq.n	80073ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073b6:	d10a      	bne.n	80073ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	605a      	str	r2, [r3, #4]
  }
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b098      	sub	sp, #96	@ 0x60
 8007400:	af02      	add	r7, sp, #8
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800740c:	f7fb fad8 	bl	80029c0 <HAL_GetTick>
 8007410:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b08      	cmp	r3, #8
 800741e:	d12e      	bne.n	800747e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007420:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007428:	2200      	movs	r2, #0
 800742a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f88c 	bl	800754c <UART_WaitOnFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d021      	beq.n	800747e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800744e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	461a      	mov	r2, r3
 8007456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007458:	647b      	str	r3, [r7, #68]	@ 0x44
 800745a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800745e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e6      	bne.n	800743a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e062      	b.n	8007544 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b04      	cmp	r3, #4
 800748a:	d149      	bne.n	8007520 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800748c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007494:	2200      	movs	r2, #0
 8007496:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f856 	bl	800754c <UART_WaitOnFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d03c      	beq.n	8007520 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	623b      	str	r3, [r7, #32]
   return(result);
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80074c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e6      	bne.n	80074a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3308      	adds	r3, #8
 80074de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0301 	bic.w	r3, r3, #1
 80074ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3308      	adds	r3, #8
 80074f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074f8:	61fa      	str	r2, [r7, #28]
 80074fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	69b9      	ldr	r1, [r7, #24]
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	617b      	str	r3, [r7, #20]
   return(result);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e5      	bne.n	80074d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2220      	movs	r2, #32
 8007510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e011      	b.n	8007544 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2220      	movs	r2, #32
 8007524:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3758      	adds	r7, #88	@ 0x58
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	603b      	str	r3, [r7, #0]
 8007558:	4613      	mov	r3, r2
 800755a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800755c:	e04f      	b.n	80075fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007564:	d04b      	beq.n	80075fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007566:	f7fb fa2b 	bl	80029c0 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	429a      	cmp	r2, r3
 8007574:	d302      	bcc.n	800757c <UART_WaitOnFlagUntilTimeout+0x30>
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e04e      	b.n	800761e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d037      	beq.n	80075fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b80      	cmp	r3, #128	@ 0x80
 8007592:	d034      	beq.n	80075fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b40      	cmp	r3, #64	@ 0x40
 8007598:	d031      	beq.n	80075fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	f003 0308 	and.w	r3, r3, #8
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d110      	bne.n	80075ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2208      	movs	r2, #8
 80075ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f8ff 	bl	80077b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2208      	movs	r2, #8
 80075ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e029      	b.n	800761e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075d8:	d111      	bne.n	80075fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f8e5 	bl	80077b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e00f      	b.n	800761e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	4013      	ands	r3, r2
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	429a      	cmp	r2, r3
 800760c:	bf0c      	ite	eq
 800760e:	2301      	moveq	r3, #1
 8007610:	2300      	movne	r3, #0
 8007612:	b2db      	uxtb	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	429a      	cmp	r2, r3
 800761a:	d0a0      	beq.n	800755e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007628:	b480      	push	{r7}
 800762a:	b097      	sub	sp, #92	@ 0x5c
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	88fa      	ldrh	r2, [r7, #6]
 8007640:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	88fa      	ldrh	r2, [r7, #6]
 8007648:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800765a:	d10e      	bne.n	800767a <UART_Start_Receive_IT+0x52>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d105      	bne.n	8007670 <UART_Start_Receive_IT+0x48>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800766a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800766e:	e02d      	b.n	80076cc <UART_Start_Receive_IT+0xa4>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	22ff      	movs	r2, #255	@ 0xff
 8007674:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007678:	e028      	b.n	80076cc <UART_Start_Receive_IT+0xa4>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10d      	bne.n	800769e <UART_Start_Receive_IT+0x76>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d104      	bne.n	8007694 <UART_Start_Receive_IT+0x6c>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	22ff      	movs	r2, #255	@ 0xff
 800768e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007692:	e01b      	b.n	80076cc <UART_Start_Receive_IT+0xa4>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	227f      	movs	r2, #127	@ 0x7f
 8007698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800769c:	e016      	b.n	80076cc <UART_Start_Receive_IT+0xa4>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076a6:	d10d      	bne.n	80076c4 <UART_Start_Receive_IT+0x9c>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d104      	bne.n	80076ba <UART_Start_Receive_IT+0x92>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	227f      	movs	r2, #127	@ 0x7f
 80076b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076b8:	e008      	b.n	80076cc <UART_Start_Receive_IT+0xa4>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	223f      	movs	r2, #63	@ 0x3f
 80076be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076c2:	e003      	b.n	80076cc <UART_Start_Receive_IT+0xa4>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2222      	movs	r2, #34	@ 0x22
 80076d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3308      	adds	r3, #8
 80076e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ee:	f043 0301 	orr.w	r3, r3, #1
 80076f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80076fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800770a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e5      	bne.n	80076dc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007718:	d107      	bne.n	800772a <UART_Start_Receive_IT+0x102>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4a21      	ldr	r2, [pc, #132]	@ (80077ac <UART_Start_Receive_IT+0x184>)
 8007726:	669a      	str	r2, [r3, #104]	@ 0x68
 8007728:	e002      	b.n	8007730 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4a20      	ldr	r2, [pc, #128]	@ (80077b0 <UART_Start_Receive_IT+0x188>)
 800772e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d019      	beq.n	800776c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800774c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
 8007758:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800775c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e6      	bne.n	8007738 <UART_Start_Receive_IT+0x110>
 800776a:	e018      	b.n	800779e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	613b      	str	r3, [r7, #16]
   return(result);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f043 0320 	orr.w	r3, r3, #32
 8007780:	653b      	str	r3, [r7, #80]	@ 0x50
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800778a:	623b      	str	r3, [r7, #32]
 800778c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	69f9      	ldr	r1, [r7, #28]
 8007790:	6a3a      	ldr	r2, [r7, #32]
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	61bb      	str	r3, [r7, #24]
   return(result);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e6      	bne.n	800776c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	375c      	adds	r7, #92	@ 0x5c
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	08007aa5 	.word	0x08007aa5
 80077b0:	080078fd 	.word	0x080078fd

080077b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b095      	sub	sp, #84	@ 0x54
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077da:	643b      	str	r3, [r7, #64]	@ 0x40
 80077dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e6      	bne.n	80077bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3308      	adds	r3, #8
 80077f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800780e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e5      	bne.n	80077ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007826:	2b01      	cmp	r3, #1
 8007828:	d118      	bne.n	800785c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	60bb      	str	r3, [r7, #8]
   return(result);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f023 0310 	bic.w	r3, r3, #16
 800783e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007848:	61bb      	str	r3, [r7, #24]
 800784a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	6979      	ldr	r1, [r7, #20]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	613b      	str	r3, [r7, #16]
   return(result);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e6      	bne.n	800782a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007870:	bf00      	nop
 8007872:	3754      	adds	r7, #84	@ 0x54
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff fa88 	bl	8006db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6979      	ldr	r1, [r7, #20]
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	613b      	str	r3, [r7, #16]
   return(result);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e6      	bne.n	80078b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fa54 	bl	8006d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f4:	bf00      	nop
 80078f6:	3720      	adds	r7, #32
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b09c      	sub	sp, #112	@ 0x70
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800790a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007914:	2b22      	cmp	r3, #34	@ 0x22
 8007916:	f040 80b9 	bne.w	8007a8c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007920:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007924:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007928:	b2d9      	uxtb	r1, r3
 800792a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800792e:	b2da      	uxtb	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007934:	400a      	ands	r2, r1
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	f040 809c 	bne.w	8007a9c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007982:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007984:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80079b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80079b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e5      	bne.n	8007996 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d018      	beq.n	8007a1e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	623b      	str	r3, [r7, #32]
   return(result);
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a00:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e6      	bne.n	80079ec <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d12e      	bne.n	8007a84 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f023 0310 	bic.w	r3, r3, #16
 8007a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	69b9      	ldr	r1, [r7, #24]
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	617b      	str	r3, [r7, #20]
   return(result);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e6      	bne.n	8007a2c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	2b10      	cmp	r3, #16
 8007a6a:	d103      	bne.n	8007a74 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2210      	movs	r2, #16
 8007a72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff f9a1 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a82:	e00b      	b.n	8007a9c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7f9 fe45 	bl	8001714 <HAL_UART_RxCpltCallback>
}
 8007a8a:	e007      	b.n	8007a9c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0208 	orr.w	r2, r2, #8
 8007a9a:	619a      	str	r2, [r3, #24]
}
 8007a9c:	bf00      	nop
 8007a9e:	3770      	adds	r7, #112	@ 0x70
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b09c      	sub	sp, #112	@ 0x70
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ab2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007abc:	2b22      	cmp	r3, #34	@ 0x22
 8007abe:	f040 80b9 	bne.w	8007c34 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ad2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007ad6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ada:	4013      	ands	r3, r2
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ae0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae6:	1c9a      	adds	r2, r3, #2
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 809c 	bne.w	8007c44 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b20:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b2c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e6      	bne.n	8007b0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b50:	f023 0301 	bic.w	r3, r3, #1
 8007b54:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e5      	bne.n	8007b3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d018      	beq.n	8007bc6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bb4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e6      	bne.n	8007b94 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d12e      	bne.n	8007c2c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f023 0310 	bic.w	r3, r3, #16
 8007be8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6979      	ldr	r1, [r7, #20]
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d103      	bne.n	8007c1c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2210      	movs	r2, #16
 8007c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff f8cd 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c2a:	e00b      	b.n	8007c44 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7f9 fd71 	bl	8001714 <HAL_UART_RxCpltCallback>
}
 8007c32:	e007      	b.n	8007c44 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699a      	ldr	r2, [r3, #24]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0208 	orr.w	r2, r2, #8
 8007c42:	619a      	str	r2, [r3, #24]
}
 8007c44:	bf00      	nop
 8007c46:	3770      	adds	r7, #112	@ 0x70
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	f107 001c 	add.w	r0, r7, #28
 8007c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d121      	bne.n	8007caa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	4b21      	ldr	r3, [pc, #132]	@ (8007cfc <USB_CoreInit+0xb0>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d105      	bne.n	8007c9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa92 	bl	80081c8 <USB_CoreReset>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]
 8007ca8:	e010      	b.n	8007ccc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa86 	bl	80081c8 <USB_CoreReset>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007ccc:	7fbb      	ldrb	r3, [r7, #30]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d10b      	bne.n	8007cea <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f043 0206 	orr.w	r2, r3, #6
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f043 0220 	orr.w	r2, r3, #32
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cf6:	b004      	add	sp, #16
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	ffbdffbf 	.word	0xffbdffbf

08007d00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f023 0201 	bic.w	r2, r3, #1
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d115      	bne.n	8007d70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d50:	200a      	movs	r0, #10
 8007d52:	f7fa fe41 	bl	80029d8 <HAL_Delay>
      ms += 10U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	330a      	adds	r3, #10
 8007d5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa25 	bl	80081ac <USB_GetMode>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d01e      	beq.n	8007da6 <USB_SetCurrentMode+0x84>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d6c:	d9f0      	bls.n	8007d50 <USB_SetCurrentMode+0x2e>
 8007d6e:	e01a      	b.n	8007da6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d115      	bne.n	8007da2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d82:	200a      	movs	r0, #10
 8007d84:	f7fa fe28 	bl	80029d8 <HAL_Delay>
      ms += 10U;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	330a      	adds	r3, #10
 8007d8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa0c 	bl	80081ac <USB_GetMode>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <USB_SetCurrentMode+0x84>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d9e:	d9f0      	bls.n	8007d82 <USB_SetCurrentMode+0x60>
 8007da0:	e001      	b.n	8007da6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e005      	b.n	8007db2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2bc8      	cmp	r3, #200	@ 0xc8
 8007daa:	d101      	bne.n	8007db0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e000      	b.n	8007db2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	e009      	b.n	8007df0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	3340      	adds	r3, #64	@ 0x40
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3301      	adds	r3, #1
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2b0e      	cmp	r3, #14
 8007df4:	d9f2      	bls.n	8007ddc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007df6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d11c      	bne.n	8007e38 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e0c:	f043 0302 	orr.w	r3, r3, #2
 8007e10:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e16:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e005      	b.n	8007e44 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d10d      	bne.n	8007e74 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d104      	bne.n	8007e6a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e60:	2100      	movs	r1, #0
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f968 	bl	8008138 <USB_SetDevSpeed>
 8007e68:	e008      	b.n	8007e7c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f963 	bl	8008138 <USB_SetDevSpeed>
 8007e72:	e003      	b.n	8007e7c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e74:	2103      	movs	r1, #3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f95e 	bl	8008138 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e7c:	2110      	movs	r1, #16
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f8fa 	bl	8008078 <USB_FlushTxFifo>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f924 	bl	80080dc <USB_FlushRxFifo>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	e043      	b.n	8007f50 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007eda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ede:	d118      	bne.n	8007f12 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	e013      	b.n	8007f24 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f08:	461a      	mov	r2, r3
 8007f0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	e008      	b.n	8007f24 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f1e:	461a      	mov	r2, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f30:	461a      	mov	r2, r3
 8007f32:	2300      	movs	r3, #0
 8007f34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f42:	461a      	mov	r2, r3
 8007f44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f54:	461a      	mov	r2, r3
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d3b5      	bcc.n	8007ec8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	613b      	str	r3, [r7, #16]
 8007f60:	e043      	b.n	8007fea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f78:	d118      	bne.n	8007fac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	e013      	b.n	8007fbe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	e008      	b.n	8007fbe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb8:	461a      	mov	r2, r3
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fca:	461a      	mov	r2, r3
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	613b      	str	r3, [r7, #16]
 8007fea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007fee:	461a      	mov	r2, r3
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d3b5      	bcc.n	8007f62 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008008:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008016:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008018:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800801c:	2b00      	cmp	r3, #0
 800801e:	d105      	bne.n	800802c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	f043 0210 	orr.w	r2, r3, #16
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699a      	ldr	r2, [r3, #24]
 8008030:	4b0f      	ldr	r3, [pc, #60]	@ (8008070 <USB_DevInit+0x2b4>)
 8008032:	4313      	orrs	r3, r2
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008038:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f043 0208 	orr.w	r2, r3, #8
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800804c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008050:	2b01      	cmp	r3, #1
 8008052:	d105      	bne.n	8008060 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699a      	ldr	r2, [r3, #24]
 8008058:	4b06      	ldr	r3, [pc, #24]	@ (8008074 <USB_DevInit+0x2b8>)
 800805a:	4313      	orrs	r3, r2
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008060:	7dfb      	ldrb	r3, [r7, #23]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800806c:	b004      	add	sp, #16
 800806e:	4770      	bx	lr
 8008070:	803c3800 	.word	0x803c3800
 8008074:	40000004 	.word	0x40000004

08008078 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008092:	d901      	bls.n	8008098 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e01b      	b.n	80080d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	daf2      	bge.n	8008086 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	019b      	lsls	r3, r3, #6
 80080a8:	f043 0220 	orr.w	r2, r3, #32
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3301      	adds	r3, #1
 80080b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080bc:	d901      	bls.n	80080c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e006      	b.n	80080d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d0f0      	beq.n	80080b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3301      	adds	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080f4:	d901      	bls.n	80080fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e018      	b.n	800812c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	daf2      	bge.n	80080e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2210      	movs	r2, #16
 800810a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3301      	adds	r3, #1
 8008110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008118:	d901      	bls.n	800811e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e006      	b.n	800812c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f003 0310 	and.w	r3, r3, #16
 8008126:	2b10      	cmp	r3, #16
 8008128:	d0f0      	beq.n	800810c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	68f9      	ldr	r1, [r7, #12]
 8008154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008158:	4313      	orrs	r3, r2
 800815a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800816a:	b480      	push	{r7}
 800816c:	b085      	sub	sp, #20
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008184:	f023 0303 	bic.w	r3, r3, #3
 8008188:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008198:	f043 0302 	orr.w	r3, r3, #2
 800819c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	f003 0301 	and.w	r3, r3, #1
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081e0:	d901      	bls.n	80081e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e01b      	b.n	800821e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	daf2      	bge.n	80081d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f043 0201 	orr.w	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800820a:	d901      	bls.n	8008210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e006      	b.n	800821e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b01      	cmp	r3, #1
 800821a:	d0f0      	beq.n	80081fe <USB_CoreReset+0x36>

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800822a:	b480      	push	{r7}
 800822c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800822e:	bf00      	nop
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800823e:	f3ef 8305 	mrs	r3, IPSR
 8008242:	60bb      	str	r3, [r7, #8]
  return(result);
 8008244:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10f      	bne.n	800826a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800824a:	f3ef 8310 	mrs	r3, PRIMASK
 800824e:	607b      	str	r3, [r7, #4]
  return(result);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008256:	f3ef 8311 	mrs	r3, BASEPRI
 800825a:	603b      	str	r3, [r7, #0]
  return(result);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <osKernelInitialize+0x3a>
 8008262:	4b0e      	ldr	r3, [pc, #56]	@ (800829c <osKernelInitialize+0x64>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d103      	bne.n	8008272 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800826a:	f06f 0305 	mvn.w	r3, #5
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	e00c      	b.n	800828c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008272:	4b0a      	ldr	r3, [pc, #40]	@ (800829c <osKernelInitialize+0x64>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d105      	bne.n	8008286 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800827a:	4b08      	ldr	r3, [pc, #32]	@ (800829c <osKernelInitialize+0x64>)
 800827c:	2201      	movs	r2, #1
 800827e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e002      	b.n	800828c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008286:	f04f 33ff 	mov.w	r3, #4294967295
 800828a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800828c:	68fb      	ldr	r3, [r7, #12]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	20000abc 	.word	0x20000abc

080082a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a6:	f3ef 8305 	mrs	r3, IPSR
 80082aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80082ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10f      	bne.n	80082d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b2:	f3ef 8310 	mrs	r3, PRIMASK
 80082b6:	607b      	str	r3, [r7, #4]
  return(result);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082be:	f3ef 8311 	mrs	r3, BASEPRI
 80082c2:	603b      	str	r3, [r7, #0]
  return(result);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <osKernelStart+0x3a>
 80082ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008308 <osKernelStart+0x68>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d103      	bne.n	80082da <osKernelStart+0x3a>
    stat = osErrorISR;
 80082d2:	f06f 0305 	mvn.w	r3, #5
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	e010      	b.n	80082fc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082da:	4b0b      	ldr	r3, [pc, #44]	@ (8008308 <osKernelStart+0x68>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d109      	bne.n	80082f6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082e2:	f7ff ffa2 	bl	800822a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082e6:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <osKernelStart+0x68>)
 80082e8:	2202      	movs	r2, #2
 80082ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082ec:	f001 f8ca 	bl	8009484 <vTaskStartScheduler>
      stat = osOK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	e002      	b.n	80082fc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295
 80082fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80082fc:	68fb      	ldr	r3, [r7, #12]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000abc 	.word	0x20000abc

0800830c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800830c:	b580      	push	{r7, lr}
 800830e:	b090      	sub	sp, #64	@ 0x40
 8008310:	af04      	add	r7, sp, #16
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008318:	2300      	movs	r3, #0
 800831a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800831c:	f3ef 8305 	mrs	r3, IPSR
 8008320:	61fb      	str	r3, [r7, #28]
  return(result);
 8008322:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008324:	2b00      	cmp	r3, #0
 8008326:	f040 808f 	bne.w	8008448 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800832a:	f3ef 8310 	mrs	r3, PRIMASK
 800832e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d105      	bne.n	8008342 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008336:	f3ef 8311 	mrs	r3, BASEPRI
 800833a:	617b      	str	r3, [r7, #20]
  return(result);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <osThreadNew+0x3e>
 8008342:	4b44      	ldr	r3, [pc, #272]	@ (8008454 <osThreadNew+0x148>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b02      	cmp	r3, #2
 8008348:	d07e      	beq.n	8008448 <osThreadNew+0x13c>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d07b      	beq.n	8008448 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008350:	2380      	movs	r3, #128	@ 0x80
 8008352:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008354:	2318      	movs	r3, #24
 8008356:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8008358:	2300      	movs	r3, #0
 800835a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800835c:	f04f 33ff 	mov.w	r3, #4294967295
 8008360:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d045      	beq.n	80083f4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <osThreadNew+0x6a>
        name = attr->name;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	2b00      	cmp	r3, #0
 8008388:	d008      	beq.n	800839c <osThreadNew+0x90>
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	2b38      	cmp	r3, #56	@ 0x38
 800838e:	d805      	bhi.n	800839c <osThreadNew+0x90>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <osThreadNew+0x94>
        return (NULL);
 800839c:	2300      	movs	r3, #0
 800839e:	e054      	b.n	800844a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	089b      	lsrs	r3, r3, #2
 80083ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00e      	beq.n	80083d6 <osThreadNew+0xca>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	2b5b      	cmp	r3, #91	@ 0x5b
 80083be:	d90a      	bls.n	80083d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d006      	beq.n	80083d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <osThreadNew+0xca>
        mem = 1;
 80083d0:	2301      	movs	r3, #1
 80083d2:	623b      	str	r3, [r7, #32]
 80083d4:	e010      	b.n	80083f8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10c      	bne.n	80083f8 <osThreadNew+0xec>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d108      	bne.n	80083f8 <osThreadNew+0xec>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d104      	bne.n	80083f8 <osThreadNew+0xec>
          mem = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	623b      	str	r3, [r7, #32]
 80083f2:	e001      	b.n	80083f8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d110      	bne.n	8008420 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008406:	9202      	str	r2, [sp, #8]
 8008408:	9301      	str	r3, [sp, #4]
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fe4f 	bl	80090b8 <xTaskCreateStatic>
 800841a:	4603      	mov	r3, r0
 800841c:	613b      	str	r3, [r7, #16]
 800841e:	e013      	b.n	8008448 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d110      	bne.n	8008448 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008428:	b29a      	uxth	r2, r3
 800842a:	f107 0310 	add.w	r3, r7, #16
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 fea3 	bl	8009184 <xTaskCreate>
 800843e:	4603      	mov	r3, r0
 8008440:	2b01      	cmp	r3, #1
 8008442:	d001      	beq.n	8008448 <osThreadNew+0x13c>
          hTask = NULL;
 8008444:	2300      	movs	r3, #0
 8008446:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008448:	693b      	ldr	r3, [r7, #16]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3730      	adds	r7, #48	@ 0x30
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000abc 	.word	0x20000abc

08008458 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008460:	f3ef 8305 	mrs	r3, IPSR
 8008464:	613b      	str	r3, [r7, #16]
  return(result);
 8008466:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10f      	bne.n	800848c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800846c:	f3ef 8310 	mrs	r3, PRIMASK
 8008470:	60fb      	str	r3, [r7, #12]
  return(result);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d105      	bne.n	8008484 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008478:	f3ef 8311 	mrs	r3, BASEPRI
 800847c:	60bb      	str	r3, [r7, #8]
  return(result);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <osDelay+0x3c>
 8008484:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <osDelay+0x58>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b02      	cmp	r3, #2
 800848a:	d103      	bne.n	8008494 <osDelay+0x3c>
    stat = osErrorISR;
 800848c:	f06f 0305 	mvn.w	r3, #5
 8008490:	617b      	str	r3, [r7, #20]
 8008492:	e007      	b.n	80084a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 ffb8 	bl	8009414 <vTaskDelay>
    }
  }

  return (stat);
 80084a4:	697b      	ldr	r3, [r7, #20]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000abc 	.word	0x20000abc

080084b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a07      	ldr	r2, [pc, #28]	@ (80084e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80084c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4a06      	ldr	r2, [pc, #24]	@ (80084e4 <vApplicationGetIdleTaskMemory+0x30>)
 80084ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2280      	movs	r2, #128	@ 0x80
 80084d0:	601a      	str	r2, [r3, #0]
}
 80084d2:	bf00      	nop
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	20000ac0 	.word	0x20000ac0
 80084e4:	20000b1c 	.word	0x20000b1c

080084e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4a07      	ldr	r2, [pc, #28]	@ (8008514 <vApplicationGetTimerTaskMemory+0x2c>)
 80084f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4a06      	ldr	r2, [pc, #24]	@ (8008518 <vApplicationGetTimerTaskMemory+0x30>)
 80084fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008506:	601a      	str	r2, [r3, #0]
}
 8008508:	bf00      	nop
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20000d1c 	.word	0x20000d1c
 8008518:	20000d78 	.word	0x20000d78

0800851c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f103 0208 	add.w	r2, r3, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f04f 32ff 	mov.w	r2, #4294967295
 8008534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f103 0208 	add.w	r2, r3, #8
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f103 0208 	add.w	r2, r3, #8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	601a      	str	r2, [r3, #0]
}
 80085b2:	bf00      	nop
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d103      	bne.n	80085de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e00c      	b.n	80085f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3308      	adds	r3, #8
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	e002      	b.n	80085ec <vListInsert+0x2e>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d2f6      	bcs.n	80085e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	601a      	str	r2, [r3, #0]
}
 8008624:	bf00      	nop
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6892      	ldr	r2, [r2, #8]
 8008646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6852      	ldr	r2, [r2, #4]
 8008650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d103      	bne.n	8008664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	1e5a      	subs	r2, r3, #1
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10d      	bne.n	80086b4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869c:	b672      	cpsid	i
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	b662      	cpsie	i
 80086ac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	e7fd      	b.n	80086b0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80086b4:	f002 f8aa 	bl	800a80c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c0:	68f9      	ldr	r1, [r7, #12]
 80086c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80086c4:	fb01 f303 	mul.w	r3, r1, r3
 80086c8:	441a      	add	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e4:	3b01      	subs	r3, #1
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80086ea:	fb01 f303 	mul.w	r3, r1, r3
 80086ee:	441a      	add	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	22ff      	movs	r2, #255	@ 0xff
 80086f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	22ff      	movs	r2, #255	@ 0xff
 8008700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d114      	bne.n	8008734 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d01a      	beq.n	8008748 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3310      	adds	r3, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f001 f950 	bl	80099bc <xTaskRemoveFromEventList>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d012      	beq.n	8008748 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008722:	4b0d      	ldr	r3, [pc, #52]	@ (8008758 <xQueueGenericReset+0xd4>)
 8008724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	e009      	b.n	8008748 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3310      	adds	r3, #16
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff feef 	bl	800851c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3324      	adds	r3, #36	@ 0x24
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff feea 	bl	800851c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008748:	f002 f896 	bl	800a878 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800874c:	2301      	movs	r3, #1
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08e      	sub	sp, #56	@ 0x38
 8008760:	af02      	add	r7, sp, #8
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10d      	bne.n	800878c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	b672      	cpsid	i
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	b662      	cpsie	i
 8008784:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10d      	bne.n	80087ae <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	e7fd      	b.n	80087aa <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <xQueueGenericCreateStatic+0x5e>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <xQueueGenericCreateStatic+0x62>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <xQueueGenericCreateStatic+0x64>
 80087be:	2300      	movs	r3, #0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10d      	bne.n	80087e0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c8:	b672      	cpsid	i
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	b662      	cpsie	i
 80087d8:	623b      	str	r3, [r7, #32]
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	e7fd      	b.n	80087dc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d102      	bne.n	80087ec <xQueueGenericCreateStatic+0x90>
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <xQueueGenericCreateStatic+0x94>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e000      	b.n	80087f2 <xQueueGenericCreateStatic+0x96>
 80087f0:	2300      	movs	r3, #0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10d      	bne.n	8008812 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fa:	b672      	cpsid	i
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	b662      	cpsie	i
 800880a:	61fb      	str	r3, [r7, #28]
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	e7fd      	b.n	800880e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008812:	2350      	movs	r3, #80	@ 0x50
 8008814:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b50      	cmp	r3, #80	@ 0x50
 800881a:	d00d      	beq.n	8008838 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008820:	b672      	cpsid	i
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	b662      	cpsie	i
 8008830:	61bb      	str	r3, [r7, #24]
}
 8008832:	bf00      	nop
 8008834:	bf00      	nop
 8008836:	e7fd      	b.n	8008834 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008838:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800883e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00d      	beq.n	8008860 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800884c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	4613      	mov	r3, r2
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f805 	bl	800886a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008862:	4618      	mov	r0, r3
 8008864:	3730      	adds	r7, #48	@ 0x30
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d103      	bne.n	8008886 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	e002      	b.n	800888c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008898:	2101      	movs	r1, #1
 800889a:	69b8      	ldr	r0, [r7, #24]
 800889c:	f7ff fef2 	bl	8008684 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088a8:	bf00      	nop
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08e      	sub	sp, #56	@ 0x38
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088be:	2300      	movs	r3, #0
 80088c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10d      	bne.n	80088e8 <xQueueGenericSend+0x38>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d0:	b672      	cpsid	i
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	b662      	cpsie	i
 80088e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	e7fd      	b.n	80088e4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d103      	bne.n	80088f6 <xQueueGenericSend+0x46>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <xQueueGenericSend+0x4a>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <xQueueGenericSend+0x4c>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10d      	bne.n	800891c <xQueueGenericSend+0x6c>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	b672      	cpsid	i
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	b662      	cpsie	i
 8008914:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008916:	bf00      	nop
 8008918:	bf00      	nop
 800891a:	e7fd      	b.n	8008918 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d103      	bne.n	800892a <xQueueGenericSend+0x7a>
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008926:	2b01      	cmp	r3, #1
 8008928:	d101      	bne.n	800892e <xQueueGenericSend+0x7e>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <xQueueGenericSend+0x80>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10d      	bne.n	8008950 <xQueueGenericSend+0xa0>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008938:	b672      	cpsid	i
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	b662      	cpsie	i
 8008948:	623b      	str	r3, [r7, #32]
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	e7fd      	b.n	800894c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008950:	f001 f9fc 	bl	8009d4c <xTaskGetSchedulerState>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d102      	bne.n	8008960 <xQueueGenericSend+0xb0>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <xQueueGenericSend+0xb4>
 8008960:	2301      	movs	r3, #1
 8008962:	e000      	b.n	8008966 <xQueueGenericSend+0xb6>
 8008964:	2300      	movs	r3, #0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10d      	bne.n	8008986 <xQueueGenericSend+0xd6>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896e:	b672      	cpsid	i
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	b662      	cpsie	i
 800897e:	61fb      	str	r3, [r7, #28]
}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	e7fd      	b.n	8008982 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008986:	f001 ff41 	bl	800a80c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800898e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008992:	429a      	cmp	r2, r3
 8008994:	d302      	bcc.n	800899c <xQueueGenericSend+0xec>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d129      	bne.n	80089f0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089a2:	f000 fa1b 	bl	8008ddc <prvCopyDataToQueue>
 80089a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d010      	beq.n	80089d2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b2:	3324      	adds	r3, #36	@ 0x24
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f801 	bl	80099bc <xTaskRemoveFromEventList>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d013      	beq.n	80089e8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089c0:	4b3f      	ldr	r3, [pc, #252]	@ (8008ac0 <xQueueGenericSend+0x210>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	e00a      	b.n	80089e8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089d8:	4b39      	ldr	r3, [pc, #228]	@ (8008ac0 <xQueueGenericSend+0x210>)
 80089da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089e8:	f001 ff46 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e063      	b.n	8008ab8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d103      	bne.n	80089fe <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089f6:	f001 ff3f 	bl	800a878 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e05c      	b.n	8008ab8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d106      	bne.n	8008a12 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a04:	f107 0314 	add.w	r3, r7, #20
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 f83d 	bl	8009a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a12:	f001 ff31 	bl	800a878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a16:	f000 fda1 	bl	800955c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a1a:	f001 fef7 	bl	800a80c <vPortEnterCritical>
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a24:	b25b      	sxtb	r3, r3
 8008a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2a:	d103      	bne.n	8008a34 <xQueueGenericSend+0x184>
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a3a:	b25b      	sxtb	r3, r3
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a40:	d103      	bne.n	8008a4a <xQueueGenericSend+0x19a>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a4a:	f001 ff15 	bl	800a878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a4e:	1d3a      	adds	r2, r7, #4
 8008a50:	f107 0314 	add.w	r3, r7, #20
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 f82c 	bl	8009ab4 <xTaskCheckForTimeOut>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d124      	bne.n	8008aac <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a64:	f000 fab2 	bl	8008fcc <prvIsQueueFull>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d018      	beq.n	8008aa0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a70:	3310      	adds	r3, #16
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	4611      	mov	r1, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 ff4a 	bl	8009910 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a7e:	f000 fa3d 	bl	8008efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a82:	f000 fd79 	bl	8009578 <xTaskResumeAll>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f47f af7c 	bne.w	8008986 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac0 <xQueueGenericSend+0x210>)
 8008a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	e772      	b.n	8008986 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008aa2:	f000 fa2b 	bl	8008efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aa6:	f000 fd67 	bl	8009578 <xTaskResumeAll>
 8008aaa:	e76c      	b.n	8008986 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008aae:	f000 fa25 	bl	8008efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ab2:	f000 fd61 	bl	8009578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ab6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3738      	adds	r7, #56	@ 0x38
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08e      	sub	sp, #56	@ 0x38
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10d      	bne.n	8008af8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae0:	b672      	cpsid	i
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	b662      	cpsie	i
 8008af0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008af2:	bf00      	nop
 8008af4:	bf00      	nop
 8008af6:	e7fd      	b.n	8008af4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d103      	bne.n	8008b06 <xQueueGenericSendFromISR+0x42>
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <xQueueGenericSendFromISR+0x46>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <xQueueGenericSendFromISR+0x48>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10d      	bne.n	8008b2c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	b672      	cpsid	i
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	b662      	cpsie	i
 8008b24:	623b      	str	r3, [r7, #32]
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d103      	bne.n	8008b3a <xQueueGenericSendFromISR+0x76>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <xQueueGenericSendFromISR+0x7a>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e000      	b.n	8008b40 <xQueueGenericSendFromISR+0x7c>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10d      	bne.n	8008b60 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b48:	b672      	cpsid	i
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	b662      	cpsie	i
 8008b58:	61fb      	str	r3, [r7, #28]
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b60:	f001 ff3c 	bl	800a9dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b64:	f3ef 8211 	mrs	r2, BASEPRI
 8008b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6c:	b672      	cpsid	i
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	b662      	cpsie	i
 8008b7c:	61ba      	str	r2, [r7, #24]
 8008b7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d302      	bcc.n	8008b96 <xQueueGenericSendFromISR+0xd2>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d12c      	bne.n	8008bf0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	68b9      	ldr	r1, [r7, #8]
 8008ba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ba6:	f000 f919 	bl	8008ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008baa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb2:	d112      	bne.n	8008bda <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d016      	beq.n	8008bea <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	3324      	adds	r3, #36	@ 0x24
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fefb 	bl	80099bc <xTaskRemoveFromEventList>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00e      	beq.n	8008bea <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00b      	beq.n	8008bea <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	e007      	b.n	8008bea <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bde:	3301      	adds	r3, #1
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	b25a      	sxtb	r2, r3
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008bea:	2301      	movs	r3, #1
 8008bec:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008bee:	e001      	b.n	8008bf4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3738      	adds	r7, #56	@ 0x38
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08c      	sub	sp, #48	@ 0x30
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10d      	bne.n	8008c42 <xQueueReceive+0x36>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2a:	b672      	cpsid	i
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	b662      	cpsie	i
 8008c3a:	623b      	str	r3, [r7, #32]
}
 8008c3c:	bf00      	nop
 8008c3e:	bf00      	nop
 8008c40:	e7fd      	b.n	8008c3e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <xQueueReceive+0x44>
 8008c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <xQueueReceive+0x48>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e000      	b.n	8008c56 <xQueueReceive+0x4a>
 8008c54:	2300      	movs	r3, #0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10d      	bne.n	8008c76 <xQueueReceive+0x6a>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5e:	b672      	cpsid	i
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	b662      	cpsie	i
 8008c6e:	61fb      	str	r3, [r7, #28]
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	e7fd      	b.n	8008c72 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c76:	f001 f869 	bl	8009d4c <xTaskGetSchedulerState>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d102      	bne.n	8008c86 <xQueueReceive+0x7a>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <xQueueReceive+0x7e>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <xQueueReceive+0x80>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10d      	bne.n	8008cac <xQueueReceive+0xa0>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	b672      	cpsid	i
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	b662      	cpsie	i
 8008ca4:	61bb      	str	r3, [r7, #24]
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	e7fd      	b.n	8008ca8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cac:	f001 fdae 	bl	800a80c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01f      	beq.n	8008cfc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cbc:	68b9      	ldr	r1, [r7, #8]
 8008cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cc0:	f000 f8f6 	bl	8008eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	1e5a      	subs	r2, r3, #1
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00f      	beq.n	8008cf4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd6:	3310      	adds	r3, #16
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fe6f 	bl	80099bc <xTaskRemoveFromEventList>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d007      	beq.n	8008cf4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8008dd8 <xQueueReceive+0x1cc>)
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cf4:	f001 fdc0 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e069      	b.n	8008dd0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d02:	f001 fdb9 	bl	800a878 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e062      	b.n	8008dd0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d106      	bne.n	8008d1e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d10:	f107 0310 	add.w	r3, r7, #16
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 feb7 	bl	8009a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d1e:	f001 fdab 	bl	800a878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d22:	f000 fc1b 	bl	800955c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d26:	f001 fd71 	bl	800a80c <vPortEnterCritical>
 8008d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d30:	b25b      	sxtb	r3, r3
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d36:	d103      	bne.n	8008d40 <xQueueReceive+0x134>
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d46:	b25b      	sxtb	r3, r3
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d103      	bne.n	8008d56 <xQueueReceive+0x14a>
 8008d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d56:	f001 fd8f 	bl	800a878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d5a:	1d3a      	adds	r2, r7, #4
 8008d5c:	f107 0310 	add.w	r3, r7, #16
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fea6 	bl	8009ab4 <xTaskCheckForTimeOut>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d123      	bne.n	8008db6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d70:	f000 f916 	bl	8008fa0 <prvIsQueueEmpty>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d017      	beq.n	8008daa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7c:	3324      	adds	r3, #36	@ 0x24
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4611      	mov	r1, r2
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fdc4 	bl	8009910 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d8a:	f000 f8b7 	bl	8008efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d8e:	f000 fbf3 	bl	8009578 <xTaskResumeAll>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d189      	bne.n	8008cac <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008d98:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd8 <xQueueReceive+0x1cc>)
 8008d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	e780      	b.n	8008cac <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dac:	f000 f8a6 	bl	8008efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008db0:	f000 fbe2 	bl	8009578 <xTaskResumeAll>
 8008db4:	e77a      	b.n	8008cac <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008db8:	f000 f8a0 	bl	8008efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dbc:	f000 fbdc 	bl	8009578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dc2:	f000 f8ed 	bl	8008fa0 <prvIsQueueEmpty>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f43f af6f 	beq.w	8008cac <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3730      	adds	r7, #48	@ 0x30
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10d      	bne.n	8008e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d14d      	bne.n	8008e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 ffbe 	bl	8009d88 <xTaskPriorityDisinherit>
 8008e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	609a      	str	r2, [r3, #8]
 8008e14:	e043      	b.n	8008e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d119      	bne.n	8008e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6858      	ldr	r0, [r3, #4]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e24:	461a      	mov	r2, r3
 8008e26:	68b9      	ldr	r1, [r7, #8]
 8008e28:	f002 f8d4 	bl	800afd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e34:	441a      	add	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d32b      	bcc.n	8008e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	605a      	str	r2, [r3, #4]
 8008e4e:	e026      	b.n	8008e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	68d8      	ldr	r0, [r3, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68b9      	ldr	r1, [r7, #8]
 8008e5c:	f002 f8ba 	bl	800afd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	68da      	ldr	r2, [r3, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e68:	425b      	negs	r3, r3
 8008e6a:	441a      	add	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	68da      	ldr	r2, [r3, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d207      	bcs.n	8008e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e84:	425b      	negs	r3, r3
 8008e86:	441a      	add	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d105      	bne.n	8008e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008ea6:	697b      	ldr	r3, [r7, #20]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d018      	beq.n	8008ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eca:	441a      	add	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d303      	bcc.n	8008ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68d9      	ldr	r1, [r3, #12]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eec:	461a      	mov	r2, r3
 8008eee:	6838      	ldr	r0, [r7, #0]
 8008ef0:	f002 f870 	bl	800afd4 <memcpy>
	}
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f04:	f001 fc82 	bl	800a80c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f10:	e011      	b.n	8008f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d012      	beq.n	8008f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3324      	adds	r3, #36	@ 0x24
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fd4c 	bl	80099bc <xTaskRemoveFromEventList>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f2a:	f000 fe2b 	bl	8009b84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dce9      	bgt.n	8008f12 <prvUnlockQueue+0x16>
 8008f3e:	e000      	b.n	8008f42 <prvUnlockQueue+0x46>
					break;
 8008f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	22ff      	movs	r2, #255	@ 0xff
 8008f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008f4a:	f001 fc95 	bl	800a878 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f4e:	f001 fc5d 	bl	800a80c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f5a:	e011      	b.n	8008f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d012      	beq.n	8008f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3310      	adds	r3, #16
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fd27 	bl	80099bc <xTaskRemoveFromEventList>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f74:	f000 fe06 	bl	8009b84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	dce9      	bgt.n	8008f5c <prvUnlockQueue+0x60>
 8008f88:	e000      	b.n	8008f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	22ff      	movs	r2, #255	@ 0xff
 8008f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008f94:	f001 fc70 	bl	800a878 <vPortExitCritical>
}
 8008f98:	bf00      	nop
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fa8:	f001 fc30 	bl	800a80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	e001      	b.n	8008fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fbe:	f001 fc5b 	bl	800a878 <vPortExitCritical>

	return xReturn;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fd4:	f001 fc1a 	bl	800a80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d102      	bne.n	8008fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e001      	b.n	8008fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fee:	f001 fc43 	bl	800a878 <vPortExitCritical>

	return xReturn;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009006:	2300      	movs	r3, #0
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	e014      	b.n	8009036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800900c:	4a0f      	ldr	r2, [pc, #60]	@ (800904c <vQueueAddToRegistry+0x50>)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10b      	bne.n	8009030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009018:	490c      	ldr	r1, [pc, #48]	@ (800904c <vQueueAddToRegistry+0x50>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	683a      	ldr	r2, [r7, #0]
 800901e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009022:	4a0a      	ldr	r2, [pc, #40]	@ (800904c <vQueueAddToRegistry+0x50>)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	4413      	add	r3, r2
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800902e:	e006      	b.n	800903e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3301      	adds	r3, #1
 8009034:	60fb      	str	r3, [r7, #12]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b07      	cmp	r3, #7
 800903a:	d9e7      	bls.n	800900c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	20001178 	.word	0x20001178

08009050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009060:	f001 fbd4 	bl	800a80c <vPortEnterCritical>
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800906a:	b25b      	sxtb	r3, r3
 800906c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009070:	d103      	bne.n	800907a <vQueueWaitForMessageRestricted+0x2a>
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009080:	b25b      	sxtb	r3, r3
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d103      	bne.n	8009090 <vQueueWaitForMessageRestricted+0x40>
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009090:	f001 fbf2 	bl	800a878 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009098:	2b00      	cmp	r3, #0
 800909a:	d106      	bne.n	80090aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	3324      	adds	r3, #36	@ 0x24
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 fc5b 	bl	8009960 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80090aa:	6978      	ldr	r0, [r7, #20]
 80090ac:	f7ff ff26 	bl	8008efc <prvUnlockQueue>
	}
 80090b0:	bf00      	nop
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	@ 0x38
 80090bc:	af04      	add	r7, sp, #16
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10d      	bne.n	80090e8 <xTaskCreateStatic+0x30>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d0:	b672      	cpsid	i
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	b662      	cpsie	i
 80090e0:	623b      	str	r3, [r7, #32]
}
 80090e2:	bf00      	nop
 80090e4:	bf00      	nop
 80090e6:	e7fd      	b.n	80090e4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80090e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10d      	bne.n	800910a <xTaskCreateStatic+0x52>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	b672      	cpsid	i
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	b662      	cpsie	i
 8009102:	61fb      	str	r3, [r7, #28]
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	e7fd      	b.n	8009106 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800910a:	235c      	movs	r3, #92	@ 0x5c
 800910c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b5c      	cmp	r3, #92	@ 0x5c
 8009112:	d00d      	beq.n	8009130 <xTaskCreateStatic+0x78>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	b672      	cpsid	i
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	b662      	cpsie	i
 8009128:	61bb      	str	r3, [r7, #24]
}
 800912a:	bf00      	nop
 800912c:	bf00      	nop
 800912e:	e7fd      	b.n	800912c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009130:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009134:	2b00      	cmp	r3, #0
 8009136:	d01e      	beq.n	8009176 <xTaskCreateStatic+0xbe>
 8009138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800913a:	2b00      	cmp	r3, #0
 800913c:	d01b      	beq.n	8009176 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800913e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009140:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009146:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	2202      	movs	r2, #2
 800914c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009150:	2300      	movs	r3, #0
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	9302      	str	r3, [sp, #8]
 8009158:	f107 0314 	add.w	r3, r7, #20
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 f850 	bl	800920e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800916e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009170:	f000 f8e0 	bl	8009334 <prvAddNewTaskToReadyList>
 8009174:	e001      	b.n	800917a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800917a:	697b      	ldr	r3, [r7, #20]
	}
 800917c:	4618      	mov	r0, r3
 800917e:	3728      	adds	r7, #40	@ 0x28
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b08c      	sub	sp, #48	@ 0x30
 8009188:	af04      	add	r7, sp, #16
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	603b      	str	r3, [r7, #0]
 8009190:	4613      	mov	r3, r2
 8009192:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009194:	88fb      	ldrh	r3, [r7, #6]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4618      	mov	r0, r3
 800919a:	f001 fc65 	bl	800aa68 <pvPortMalloc>
 800919e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00e      	beq.n	80091c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091a6:	205c      	movs	r0, #92	@ 0x5c
 80091a8:	f001 fc5e 	bl	800aa68 <pvPortMalloc>
 80091ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80091ba:	e005      	b.n	80091c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091bc:	6978      	ldr	r0, [r7, #20]
 80091be:	f001 fd21 	bl	800ac04 <vPortFree>
 80091c2:	e001      	b.n	80091c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80091c4:	2300      	movs	r3, #0
 80091c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d017      	beq.n	80091fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091d6:	88fa      	ldrh	r2, [r7, #6]
 80091d8:	2300      	movs	r3, #0
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	9302      	str	r3, [sp, #8]
 80091e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f80e 	bl	800920e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091f2:	69f8      	ldr	r0, [r7, #28]
 80091f4:	f000 f89e 	bl	8009334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091f8:	2301      	movs	r3, #1
 80091fa:	61bb      	str	r3, [r7, #24]
 80091fc:	e002      	b.n	8009204 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009202:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009204:	69bb      	ldr	r3, [r7, #24]
	}
 8009206:	4618      	mov	r0, r3
 8009208:	3720      	adds	r7, #32
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b088      	sub	sp, #32
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	607a      	str	r2, [r7, #4]
 800921a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800921c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	461a      	mov	r2, r3
 8009226:	21a5      	movs	r1, #165	@ 0xa5
 8009228:	f001 fe90 	bl	800af4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800922c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009236:	440b      	add	r3, r1
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	f023 0307 	bic.w	r3, r3, #7
 8009244:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00d      	beq.n	800926c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009254:	b672      	cpsid	i
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	b662      	cpsie	i
 8009264:	617b      	str	r3, [r7, #20]
}
 8009266:	bf00      	nop
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d01f      	beq.n	80092b2 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009272:	2300      	movs	r3, #0
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	e012      	b.n	800929e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	4413      	add	r3, r2
 800927e:	7819      	ldrb	r1, [r3, #0]
 8009280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	4413      	add	r3, r2
 8009286:	3334      	adds	r3, #52	@ 0x34
 8009288:	460a      	mov	r2, r1
 800928a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	4413      	add	r3, r2
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d006      	beq.n	80092a6 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	3301      	adds	r3, #1
 800929c:	61fb      	str	r3, [r7, #28]
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	2b0f      	cmp	r3, #15
 80092a2:	d9e9      	bls.n	8009278 <prvInitialiseNewTask+0x6a>
 80092a4:	e000      	b.n	80092a8 <prvInitialiseNewTask+0x9a>
			{
				break;
 80092a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092b0:	e003      	b.n	80092ba <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092bc:	2b37      	cmp	r3, #55	@ 0x37
 80092be:	d901      	bls.n	80092c4 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092c0:	2337      	movs	r3, #55	@ 0x37
 80092c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092ce:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	2200      	movs	r2, #0
 80092d4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	3304      	adds	r3, #4
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff f93e 	bl	800855c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	3318      	adds	r3, #24
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff f939 	bl	800855c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092fe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	2200      	movs	r2, #0
 8009304:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	68f9      	ldr	r1, [r7, #12]
 8009312:	69b8      	ldr	r0, [r7, #24]
 8009314:	f001 f968 	bl	800a5e8 <pxPortInitialiseStack>
 8009318:	4602      	mov	r2, r0
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800931e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800932a:	bf00      	nop
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800933c:	f001 fa66 	bl	800a80c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009340:	4b2d      	ldr	r3, [pc, #180]	@ (80093f8 <prvAddNewTaskToReadyList+0xc4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3301      	adds	r3, #1
 8009346:	4a2c      	ldr	r2, [pc, #176]	@ (80093f8 <prvAddNewTaskToReadyList+0xc4>)
 8009348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800934a:	4b2c      	ldr	r3, [pc, #176]	@ (80093fc <prvAddNewTaskToReadyList+0xc8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009352:	4a2a      	ldr	r2, [pc, #168]	@ (80093fc <prvAddNewTaskToReadyList+0xc8>)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009358:	4b27      	ldr	r3, [pc, #156]	@ (80093f8 <prvAddNewTaskToReadyList+0xc4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d110      	bne.n	8009382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009360:	f000 fc34 	bl	8009bcc <prvInitialiseTaskLists>
 8009364:	e00d      	b.n	8009382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009366:	4b26      	ldr	r3, [pc, #152]	@ (8009400 <prvAddNewTaskToReadyList+0xcc>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800936e:	4b23      	ldr	r3, [pc, #140]	@ (80093fc <prvAddNewTaskToReadyList+0xc8>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009378:	429a      	cmp	r2, r3
 800937a:	d802      	bhi.n	8009382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800937c:	4a1f      	ldr	r2, [pc, #124]	@ (80093fc <prvAddNewTaskToReadyList+0xc8>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009382:	4b20      	ldr	r3, [pc, #128]	@ (8009404 <prvAddNewTaskToReadyList+0xd0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3301      	adds	r3, #1
 8009388:	4a1e      	ldr	r2, [pc, #120]	@ (8009404 <prvAddNewTaskToReadyList+0xd0>)
 800938a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800938c:	4b1d      	ldr	r3, [pc, #116]	@ (8009404 <prvAddNewTaskToReadyList+0xd0>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009398:	4b1b      	ldr	r3, [pc, #108]	@ (8009408 <prvAddNewTaskToReadyList+0xd4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d903      	bls.n	80093a8 <prvAddNewTaskToReadyList+0x74>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a4:	4a18      	ldr	r2, [pc, #96]	@ (8009408 <prvAddNewTaskToReadyList+0xd4>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4a15      	ldr	r2, [pc, #84]	@ (800940c <prvAddNewTaskToReadyList+0xd8>)
 80093b6:	441a      	add	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f7ff f8d9 	bl	8008576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093c4:	f001 fa58 	bl	800a878 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009400 <prvAddNewTaskToReadyList+0xcc>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00e      	beq.n	80093ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093d0:	4b0a      	ldr	r3, [pc, #40]	@ (80093fc <prvAddNewTaskToReadyList+0xc8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093da:	429a      	cmp	r2, r3
 80093dc:	d207      	bcs.n	80093ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093de:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <prvAddNewTaskToReadyList+0xdc>)
 80093e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	2000168c 	.word	0x2000168c
 80093fc:	200011b8 	.word	0x200011b8
 8009400:	20001698 	.word	0x20001698
 8009404:	200016a8 	.word	0x200016a8
 8009408:	20001694 	.word	0x20001694
 800940c:	200011bc 	.word	0x200011bc
 8009410:	e000ed04 	.word	0xe000ed04

08009414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d01a      	beq.n	800945c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009426:	4b15      	ldr	r3, [pc, #84]	@ (800947c <vTaskDelay+0x68>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00d      	beq.n	800944a <vTaskDelay+0x36>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	b672      	cpsid	i
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	b662      	cpsie	i
 8009442:	60bb      	str	r3, [r7, #8]
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop
 8009448:	e7fd      	b.n	8009446 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800944a:	f000 f887 	bl	800955c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800944e:	2100      	movs	r1, #0
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fd0d 	bl	8009e70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009456:	f000 f88f 	bl	8009578 <xTaskResumeAll>
 800945a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d107      	bne.n	8009472 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009462:	4b07      	ldr	r3, [pc, #28]	@ (8009480 <vTaskDelay+0x6c>)
 8009464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	200016b4 	.word	0x200016b4
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08a      	sub	sp, #40	@ 0x28
 8009488:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800948a:	2300      	movs	r3, #0
 800948c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800948e:	2300      	movs	r3, #0
 8009490:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009492:	463a      	mov	r2, r7
 8009494:	1d39      	adds	r1, r7, #4
 8009496:	f107 0308 	add.w	r3, r7, #8
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff f80a 	bl	80084b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	9202      	str	r2, [sp, #8]
 80094a8:	9301      	str	r3, [sp, #4]
 80094aa:	2300      	movs	r3, #0
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	2300      	movs	r3, #0
 80094b0:	460a      	mov	r2, r1
 80094b2:	4924      	ldr	r1, [pc, #144]	@ (8009544 <vTaskStartScheduler+0xc0>)
 80094b4:	4824      	ldr	r0, [pc, #144]	@ (8009548 <vTaskStartScheduler+0xc4>)
 80094b6:	f7ff fdff 	bl	80090b8 <xTaskCreateStatic>
 80094ba:	4603      	mov	r3, r0
 80094bc:	4a23      	ldr	r2, [pc, #140]	@ (800954c <vTaskStartScheduler+0xc8>)
 80094be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80094c0:	4b22      	ldr	r3, [pc, #136]	@ (800954c <vTaskStartScheduler+0xc8>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094c8:	2301      	movs	r3, #1
 80094ca:	617b      	str	r3, [r7, #20]
 80094cc:	e001      	b.n	80094d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d102      	bne.n	80094de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80094d8:	f000 fd1e 	bl	8009f18 <xTimerCreateTimerTask>
 80094dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d118      	bne.n	8009516 <vTaskStartScheduler+0x92>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e8:	b672      	cpsid	i
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	b662      	cpsie	i
 80094f8:	613b      	str	r3, [r7, #16]
}
 80094fa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094fc:	4b14      	ldr	r3, [pc, #80]	@ (8009550 <vTaskStartScheduler+0xcc>)
 80094fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009502:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009504:	4b13      	ldr	r3, [pc, #76]	@ (8009554 <vTaskStartScheduler+0xd0>)
 8009506:	2201      	movs	r2, #1
 8009508:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800950a:	4b13      	ldr	r3, [pc, #76]	@ (8009558 <vTaskStartScheduler+0xd4>)
 800950c:	2200      	movs	r2, #0
 800950e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009510:	f001 f8fe 	bl	800a710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009514:	e011      	b.n	800953a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d10d      	bne.n	800953a <vTaskStartScheduler+0xb6>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009522:	b672      	cpsid	i
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	b662      	cpsie	i
 8009532:	60fb      	str	r3, [r7, #12]
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	e7fd      	b.n	8009536 <vTaskStartScheduler+0xb2>
}
 800953a:	bf00      	nop
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	0800b1bc 	.word	0x0800b1bc
 8009548:	08009b9d 	.word	0x08009b9d
 800954c:	200016b0 	.word	0x200016b0
 8009550:	200016ac 	.word	0x200016ac
 8009554:	20001698 	.word	0x20001698
 8009558:	20001690 	.word	0x20001690

0800955c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009560:	4b04      	ldr	r3, [pc, #16]	@ (8009574 <vTaskSuspendAll+0x18>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	4a03      	ldr	r2, [pc, #12]	@ (8009574 <vTaskSuspendAll+0x18>)
 8009568:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800956a:	bf00      	nop
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	200016b4 	.word	0x200016b4

08009578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009582:	2300      	movs	r3, #0
 8009584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009586:	4b43      	ldr	r3, [pc, #268]	@ (8009694 <xTaskResumeAll+0x11c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10d      	bne.n	80095aa <xTaskResumeAll+0x32>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009592:	b672      	cpsid	i
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	b662      	cpsie	i
 80095a2:	603b      	str	r3, [r7, #0]
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	e7fd      	b.n	80095a6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095aa:	f001 f92f 	bl	800a80c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095ae:	4b39      	ldr	r3, [pc, #228]	@ (8009694 <xTaskResumeAll+0x11c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	4a37      	ldr	r2, [pc, #220]	@ (8009694 <xTaskResumeAll+0x11c>)
 80095b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b8:	4b36      	ldr	r3, [pc, #216]	@ (8009694 <xTaskResumeAll+0x11c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d162      	bne.n	8009686 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095c0:	4b35      	ldr	r3, [pc, #212]	@ (8009698 <xTaskResumeAll+0x120>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d05e      	beq.n	8009686 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095c8:	e02f      	b.n	800962a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ca:	4b34      	ldr	r3, [pc, #208]	@ (800969c <xTaskResumeAll+0x124>)
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3318      	adds	r3, #24
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff f82a 	bl	8008630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3304      	adds	r3, #4
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7ff f825 	bl	8008630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ea:	4b2d      	ldr	r3, [pc, #180]	@ (80096a0 <xTaskResumeAll+0x128>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d903      	bls.n	80095fa <xTaskResumeAll+0x82>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f6:	4a2a      	ldr	r2, [pc, #168]	@ (80096a0 <xTaskResumeAll+0x128>)
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4a27      	ldr	r2, [pc, #156]	@ (80096a4 <xTaskResumeAll+0x12c>)
 8009608:	441a      	add	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7fe ffb0 	bl	8008576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800961a:	4b23      	ldr	r3, [pc, #140]	@ (80096a8 <xTaskResumeAll+0x130>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009620:	429a      	cmp	r2, r3
 8009622:	d302      	bcc.n	800962a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009624:	4b21      	ldr	r3, [pc, #132]	@ (80096ac <xTaskResumeAll+0x134>)
 8009626:	2201      	movs	r2, #1
 8009628:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800962a:	4b1c      	ldr	r3, [pc, #112]	@ (800969c <xTaskResumeAll+0x124>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1cb      	bne.n	80095ca <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009638:	f000 fb68 	bl	8009d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800963c:	4b1c      	ldr	r3, [pc, #112]	@ (80096b0 <xTaskResumeAll+0x138>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d010      	beq.n	800966a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009648:	f000 f846 	bl	80096d8 <xTaskIncrementTick>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d002      	beq.n	8009658 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009652:	4b16      	ldr	r3, [pc, #88]	@ (80096ac <xTaskResumeAll+0x134>)
 8009654:	2201      	movs	r2, #1
 8009656:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3b01      	subs	r3, #1
 800965c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1f1      	bne.n	8009648 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009664:	4b12      	ldr	r3, [pc, #72]	@ (80096b0 <xTaskResumeAll+0x138>)
 8009666:	2200      	movs	r2, #0
 8009668:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800966a:	4b10      	ldr	r3, [pc, #64]	@ (80096ac <xTaskResumeAll+0x134>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d009      	beq.n	8009686 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009672:	2301      	movs	r3, #1
 8009674:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009676:	4b0f      	ldr	r3, [pc, #60]	@ (80096b4 <xTaskResumeAll+0x13c>)
 8009678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009686:	f001 f8f7 	bl	800a878 <vPortExitCritical>

	return xAlreadyYielded;
 800968a:	68bb      	ldr	r3, [r7, #8]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	200016b4 	.word	0x200016b4
 8009698:	2000168c 	.word	0x2000168c
 800969c:	2000164c 	.word	0x2000164c
 80096a0:	20001694 	.word	0x20001694
 80096a4:	200011bc 	.word	0x200011bc
 80096a8:	200011b8 	.word	0x200011b8
 80096ac:	200016a0 	.word	0x200016a0
 80096b0:	2000169c 	.word	0x2000169c
 80096b4:	e000ed04 	.word	0xe000ed04

080096b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096be:	4b05      	ldr	r3, [pc, #20]	@ (80096d4 <xTaskGetTickCount+0x1c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096c4:	687b      	ldr	r3, [r7, #4]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20001690 	.word	0x20001690

080096d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096de:	2300      	movs	r3, #0
 80096e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e2:	4b50      	ldr	r3, [pc, #320]	@ (8009824 <xTaskIncrementTick+0x14c>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f040 808c 	bne.w	8009804 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096ec:	4b4e      	ldr	r3, [pc, #312]	@ (8009828 <xTaskIncrementTick+0x150>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3301      	adds	r3, #1
 80096f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096f4:	4a4c      	ldr	r2, [pc, #304]	@ (8009828 <xTaskIncrementTick+0x150>)
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d123      	bne.n	8009748 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009700:	4b4a      	ldr	r3, [pc, #296]	@ (800982c <xTaskIncrementTick+0x154>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00d      	beq.n	8009726 <xTaskIncrementTick+0x4e>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970e:	b672      	cpsid	i
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	b662      	cpsie	i
 800971e:	603b      	str	r3, [r7, #0]
}
 8009720:	bf00      	nop
 8009722:	bf00      	nop
 8009724:	e7fd      	b.n	8009722 <xTaskIncrementTick+0x4a>
 8009726:	4b41      	ldr	r3, [pc, #260]	@ (800982c <xTaskIncrementTick+0x154>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	4b40      	ldr	r3, [pc, #256]	@ (8009830 <xTaskIncrementTick+0x158>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a3e      	ldr	r2, [pc, #248]	@ (800982c <xTaskIncrementTick+0x154>)
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	4a3e      	ldr	r2, [pc, #248]	@ (8009830 <xTaskIncrementTick+0x158>)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	4b3e      	ldr	r3, [pc, #248]	@ (8009834 <xTaskIncrementTick+0x15c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3301      	adds	r3, #1
 8009740:	4a3c      	ldr	r2, [pc, #240]	@ (8009834 <xTaskIncrementTick+0x15c>)
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	f000 fae2 	bl	8009d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009748:	4b3b      	ldr	r3, [pc, #236]	@ (8009838 <xTaskIncrementTick+0x160>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	429a      	cmp	r2, r3
 8009750:	d349      	bcc.n	80097e6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009752:	4b36      	ldr	r3, [pc, #216]	@ (800982c <xTaskIncrementTick+0x154>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d104      	bne.n	8009766 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800975c:	4b36      	ldr	r3, [pc, #216]	@ (8009838 <xTaskIncrementTick+0x160>)
 800975e:	f04f 32ff 	mov.w	r2, #4294967295
 8009762:	601a      	str	r2, [r3, #0]
					break;
 8009764:	e03f      	b.n	80097e6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009766:	4b31      	ldr	r3, [pc, #196]	@ (800982c <xTaskIncrementTick+0x154>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	429a      	cmp	r2, r3
 800977c:	d203      	bcs.n	8009786 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800977e:	4a2e      	ldr	r2, [pc, #184]	@ (8009838 <xTaskIncrementTick+0x160>)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009784:	e02f      	b.n	80097e6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	3304      	adds	r3, #4
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe ff50 	bl	8008630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009794:	2b00      	cmp	r3, #0
 8009796:	d004      	beq.n	80097a2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	3318      	adds	r3, #24
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe ff47 	bl	8008630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a6:	4b25      	ldr	r3, [pc, #148]	@ (800983c <xTaskIncrementTick+0x164>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d903      	bls.n	80097b6 <xTaskIncrementTick+0xde>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b2:	4a22      	ldr	r2, [pc, #136]	@ (800983c <xTaskIncrementTick+0x164>)
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009840 <xTaskIncrementTick+0x168>)
 80097c4:	441a      	add	r2, r3
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	3304      	adds	r3, #4
 80097ca:	4619      	mov	r1, r3
 80097cc:	4610      	mov	r0, r2
 80097ce:	f7fe fed2 	bl	8008576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d6:	4b1b      	ldr	r3, [pc, #108]	@ (8009844 <xTaskIncrementTick+0x16c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097dc:	429a      	cmp	r2, r3
 80097de:	d3b8      	bcc.n	8009752 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80097e0:	2301      	movs	r3, #1
 80097e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097e4:	e7b5      	b.n	8009752 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097e6:	4b17      	ldr	r3, [pc, #92]	@ (8009844 <xTaskIncrementTick+0x16c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ec:	4914      	ldr	r1, [pc, #80]	@ (8009840 <xTaskIncrementTick+0x168>)
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d907      	bls.n	800980e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80097fe:	2301      	movs	r3, #1
 8009800:	617b      	str	r3, [r7, #20]
 8009802:	e004      	b.n	800980e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009804:	4b10      	ldr	r3, [pc, #64]	@ (8009848 <xTaskIncrementTick+0x170>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3301      	adds	r3, #1
 800980a:	4a0f      	ldr	r2, [pc, #60]	@ (8009848 <xTaskIncrementTick+0x170>)
 800980c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800980e:	4b0f      	ldr	r3, [pc, #60]	@ (800984c <xTaskIncrementTick+0x174>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009816:	2301      	movs	r3, #1
 8009818:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800981a:	697b      	ldr	r3, [r7, #20]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	200016b4 	.word	0x200016b4
 8009828:	20001690 	.word	0x20001690
 800982c:	20001644 	.word	0x20001644
 8009830:	20001648 	.word	0x20001648
 8009834:	200016a4 	.word	0x200016a4
 8009838:	200016ac 	.word	0x200016ac
 800983c:	20001694 	.word	0x20001694
 8009840:	200011bc 	.word	0x200011bc
 8009844:	200011b8 	.word	0x200011b8
 8009848:	2000169c 	.word	0x2000169c
 800984c:	200016a0 	.word	0x200016a0

08009850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009856:	4b29      	ldr	r3, [pc, #164]	@ (80098fc <vTaskSwitchContext+0xac>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800985e:	4b28      	ldr	r3, [pc, #160]	@ (8009900 <vTaskSwitchContext+0xb0>)
 8009860:	2201      	movs	r2, #1
 8009862:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009864:	e044      	b.n	80098f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009866:	4b26      	ldr	r3, [pc, #152]	@ (8009900 <vTaskSwitchContext+0xb0>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800986c:	4b25      	ldr	r3, [pc, #148]	@ (8009904 <vTaskSwitchContext+0xb4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60fb      	str	r3, [r7, #12]
 8009872:	e013      	b.n	800989c <vTaskSwitchContext+0x4c>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10d      	bne.n	8009896 <vTaskSwitchContext+0x46>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987e:	b672      	cpsid	i
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	b662      	cpsie	i
 800988e:	607b      	str	r3, [r7, #4]
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	e7fd      	b.n	8009892 <vTaskSwitchContext+0x42>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3b01      	subs	r3, #1
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	491a      	ldr	r1, [pc, #104]	@ (8009908 <vTaskSwitchContext+0xb8>)
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	440b      	add	r3, r1
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0e1      	beq.n	8009874 <vTaskSwitchContext+0x24>
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4a13      	ldr	r2, [pc, #76]	@ (8009908 <vTaskSwitchContext+0xb8>)
 80098bc:	4413      	add	r3, r2
 80098be:	60bb      	str	r3, [r7, #8]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	3308      	adds	r3, #8
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d104      	bne.n	80098e0 <vTaskSwitchContext+0x90>
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	605a      	str	r2, [r3, #4]
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	4a09      	ldr	r2, [pc, #36]	@ (800990c <vTaskSwitchContext+0xbc>)
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	4a06      	ldr	r2, [pc, #24]	@ (8009904 <vTaskSwitchContext+0xb4>)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6013      	str	r3, [r2, #0]
}
 80098f0:	bf00      	nop
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	200016b4 	.word	0x200016b4
 8009900:	200016a0 	.word	0x200016a0
 8009904:	20001694 	.word	0x20001694
 8009908:	200011bc 	.word	0x200011bc
 800990c:	200011b8 	.word	0x200011b8

08009910 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10d      	bne.n	800993c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009924:	b672      	cpsid	i
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	b662      	cpsie	i
 8009934:	60fb      	str	r3, [r7, #12]
}
 8009936:	bf00      	nop
 8009938:	bf00      	nop
 800993a:	e7fd      	b.n	8009938 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800993c:	4b07      	ldr	r3, [pc, #28]	@ (800995c <vTaskPlaceOnEventList+0x4c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3318      	adds	r3, #24
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7fe fe3a 	bl	80085be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800994a:	2101      	movs	r1, #1
 800994c:	6838      	ldr	r0, [r7, #0]
 800994e:	f000 fa8f 	bl	8009e70 <prvAddCurrentTaskToDelayedList>
}
 8009952:	bf00      	nop
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	200011b8 	.word	0x200011b8

08009960 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10d      	bne.n	800998e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009976:	b672      	cpsid	i
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	b662      	cpsie	i
 8009986:	617b      	str	r3, [r7, #20]
}
 8009988:	bf00      	nop
 800998a:	bf00      	nop
 800998c:	e7fd      	b.n	800998a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800998e:	4b0a      	ldr	r3, [pc, #40]	@ (80099b8 <vTaskPlaceOnEventListRestricted+0x58>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3318      	adds	r3, #24
 8009994:	4619      	mov	r1, r3
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f7fe fded 	bl	8008576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80099a2:	f04f 33ff 	mov.w	r3, #4294967295
 80099a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	68b8      	ldr	r0, [r7, #8]
 80099ac:	f000 fa60 	bl	8009e70 <prvAddCurrentTaskToDelayedList>
	}
 80099b0:	bf00      	nop
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	200011b8 	.word	0x200011b8

080099bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10d      	bne.n	80099ee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d6:	b672      	cpsid	i
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	b662      	cpsie	i
 80099e6:	60fb      	str	r3, [r7, #12]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	3318      	adds	r3, #24
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe fe1c 	bl	8008630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009a70 <xTaskRemoveFromEventList+0xb4>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d11d      	bne.n	8009a3c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	3304      	adds	r3, #4
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe fe13 	bl	8008630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0e:	4b19      	ldr	r3, [pc, #100]	@ (8009a74 <xTaskRemoveFromEventList+0xb8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d903      	bls.n	8009a1e <xTaskRemoveFromEventList+0x62>
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1a:	4a16      	ldr	r2, [pc, #88]	@ (8009a74 <xTaskRemoveFromEventList+0xb8>)
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a22:	4613      	mov	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4a13      	ldr	r2, [pc, #76]	@ (8009a78 <xTaskRemoveFromEventList+0xbc>)
 8009a2c:	441a      	add	r2, r3
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f7fe fd9e 	bl	8008576 <vListInsertEnd>
 8009a3a:	e005      	b.n	8009a48 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	3318      	adds	r3, #24
 8009a40:	4619      	mov	r1, r3
 8009a42:	480e      	ldr	r0, [pc, #56]	@ (8009a7c <xTaskRemoveFromEventList+0xc0>)
 8009a44:	f7fe fd97 	bl	8008576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a80 <xTaskRemoveFromEventList+0xc4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d905      	bls.n	8009a62 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a56:	2301      	movs	r3, #1
 8009a58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a84 <xTaskRemoveFromEventList+0xc8>)
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	e001      	b.n	8009a66 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009a62:	2300      	movs	r3, #0
 8009a64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a66:	697b      	ldr	r3, [r7, #20]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	200016b4 	.word	0x200016b4
 8009a74:	20001694 	.word	0x20001694
 8009a78:	200011bc 	.word	0x200011bc
 8009a7c:	2000164c 	.word	0x2000164c
 8009a80:	200011b8 	.word	0x200011b8
 8009a84:	200016a0 	.word	0x200016a0

08009a88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a90:	4b06      	ldr	r3, [pc, #24]	@ (8009aac <vTaskInternalSetTimeOutState+0x24>)
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a98:	4b05      	ldr	r3, [pc, #20]	@ (8009ab0 <vTaskInternalSetTimeOutState+0x28>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	605a      	str	r2, [r3, #4]
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	200016a4 	.word	0x200016a4
 8009ab0:	20001690 	.word	0x20001690

08009ab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10d      	bne.n	8009ae0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac8:	b672      	cpsid	i
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	b662      	cpsie	i
 8009ad8:	613b      	str	r3, [r7, #16]
}
 8009ada:	bf00      	nop
 8009adc:	bf00      	nop
 8009ade:	e7fd      	b.n	8009adc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10d      	bne.n	8009b02 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aea:	b672      	cpsid	i
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	b662      	cpsie	i
 8009afa:	60fb      	str	r3, [r7, #12]
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	e7fd      	b.n	8009afe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009b02:	f000 fe83 	bl	800a80c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b06:	4b1d      	ldr	r3, [pc, #116]	@ (8009b7c <xTaskCheckForTimeOut+0xc8>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1e:	d102      	bne.n	8009b26 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61fb      	str	r3, [r7, #28]
 8009b24:	e023      	b.n	8009b6e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	4b15      	ldr	r3, [pc, #84]	@ (8009b80 <xTaskCheckForTimeOut+0xcc>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d007      	beq.n	8009b42 <xTaskCheckForTimeOut+0x8e>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d302      	bcc.n	8009b42 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	61fb      	str	r3, [r7, #28]
 8009b40:	e015      	b.n	8009b6e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d20b      	bcs.n	8009b64 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	1ad2      	subs	r2, r2, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff ff95 	bl	8009a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	e004      	b.n	8009b6e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b6e:	f000 fe83 	bl	800a878 <vPortExitCritical>

	return xReturn;
 8009b72:	69fb      	ldr	r3, [r7, #28]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3720      	adds	r7, #32
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20001690 	.word	0x20001690
 8009b80:	200016a4 	.word	0x200016a4

08009b84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b88:	4b03      	ldr	r3, [pc, #12]	@ (8009b98 <vTaskMissedYield+0x14>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
}
 8009b8e:	bf00      	nop
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	200016a0 	.word	0x200016a0

08009b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ba4:	f000 f852 	bl	8009c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ba8:	4b06      	ldr	r3, [pc, #24]	@ (8009bc4 <prvIdleTask+0x28>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d9f9      	bls.n	8009ba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bb0:	4b05      	ldr	r3, [pc, #20]	@ (8009bc8 <prvIdleTask+0x2c>)
 8009bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bc0:	e7f0      	b.n	8009ba4 <prvIdleTask+0x8>
 8009bc2:	bf00      	nop
 8009bc4:	200011bc 	.word	0x200011bc
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	607b      	str	r3, [r7, #4]
 8009bd6:	e00c      	b.n	8009bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4a12      	ldr	r2, [pc, #72]	@ (8009c2c <prvInitialiseTaskLists+0x60>)
 8009be4:	4413      	add	r3, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fe fc98 	bl	800851c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	607b      	str	r3, [r7, #4]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b37      	cmp	r3, #55	@ 0x37
 8009bf6:	d9ef      	bls.n	8009bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009bf8:	480d      	ldr	r0, [pc, #52]	@ (8009c30 <prvInitialiseTaskLists+0x64>)
 8009bfa:	f7fe fc8f 	bl	800851c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009bfe:	480d      	ldr	r0, [pc, #52]	@ (8009c34 <prvInitialiseTaskLists+0x68>)
 8009c00:	f7fe fc8c 	bl	800851c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c04:	480c      	ldr	r0, [pc, #48]	@ (8009c38 <prvInitialiseTaskLists+0x6c>)
 8009c06:	f7fe fc89 	bl	800851c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c0a:	480c      	ldr	r0, [pc, #48]	@ (8009c3c <prvInitialiseTaskLists+0x70>)
 8009c0c:	f7fe fc86 	bl	800851c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c10:	480b      	ldr	r0, [pc, #44]	@ (8009c40 <prvInitialiseTaskLists+0x74>)
 8009c12:	f7fe fc83 	bl	800851c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c16:	4b0b      	ldr	r3, [pc, #44]	@ (8009c44 <prvInitialiseTaskLists+0x78>)
 8009c18:	4a05      	ldr	r2, [pc, #20]	@ (8009c30 <prvInitialiseTaskLists+0x64>)
 8009c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c48 <prvInitialiseTaskLists+0x7c>)
 8009c1e:	4a05      	ldr	r2, [pc, #20]	@ (8009c34 <prvInitialiseTaskLists+0x68>)
 8009c20:	601a      	str	r2, [r3, #0]
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	200011bc 	.word	0x200011bc
 8009c30:	2000161c 	.word	0x2000161c
 8009c34:	20001630 	.word	0x20001630
 8009c38:	2000164c 	.word	0x2000164c
 8009c3c:	20001660 	.word	0x20001660
 8009c40:	20001678 	.word	0x20001678
 8009c44:	20001644 	.word	0x20001644
 8009c48:	20001648 	.word	0x20001648

08009c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c52:	e019      	b.n	8009c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c54:	f000 fdda 	bl	800a80c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c58:	4b10      	ldr	r3, [pc, #64]	@ (8009c9c <prvCheckTasksWaitingTermination+0x50>)
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3304      	adds	r3, #4
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fe fce3 	bl	8008630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca0 <prvCheckTasksWaitingTermination+0x54>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	4a0b      	ldr	r2, [pc, #44]	@ (8009ca0 <prvCheckTasksWaitingTermination+0x54>)
 8009c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c74:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca4 <prvCheckTasksWaitingTermination+0x58>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca4 <prvCheckTasksWaitingTermination+0x58>)
 8009c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c7e:	f000 fdfb 	bl	800a878 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f810 	bl	8009ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c88:	4b06      	ldr	r3, [pc, #24]	@ (8009ca4 <prvCheckTasksWaitingTermination+0x58>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e1      	bne.n	8009c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20001660 	.word	0x20001660
 8009ca0:	2000168c 	.word	0x2000168c
 8009ca4:	20001674 	.word	0x20001674

08009ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d108      	bne.n	8009ccc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 ffa0 	bl	800ac04 <vPortFree>
				vPortFree( pxTCB );
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 ff9d 	bl	800ac04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cca:	e01b      	b.n	8009d04 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d103      	bne.n	8009cde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 ff94 	bl	800ac04 <vPortFree>
	}
 8009cdc:	e012      	b.n	8009d04 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d00d      	beq.n	8009d04 <prvDeleteTCB+0x5c>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cec:	b672      	cpsid	i
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	b662      	cpsie	i
 8009cfc:	60fb      	str	r3, [r7, #12]
}
 8009cfe:	bf00      	nop
 8009d00:	bf00      	nop
 8009d02:	e7fd      	b.n	8009d00 <prvDeleteTCB+0x58>
	}
 8009d04:	bf00      	nop
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d12:	4b0c      	ldr	r3, [pc, #48]	@ (8009d44 <prvResetNextTaskUnblockTime+0x38>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d48 <prvResetNextTaskUnblockTime+0x3c>)
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d24:	e008      	b.n	8009d38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d26:	4b07      	ldr	r3, [pc, #28]	@ (8009d44 <prvResetNextTaskUnblockTime+0x38>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	4a04      	ldr	r2, [pc, #16]	@ (8009d48 <prvResetNextTaskUnblockTime+0x3c>)
 8009d36:	6013      	str	r3, [r2, #0]
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	20001644 	.word	0x20001644
 8009d48:	200016ac 	.word	0x200016ac

08009d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d52:	4b0b      	ldr	r3, [pc, #44]	@ (8009d80 <xTaskGetSchedulerState+0x34>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d102      	bne.n	8009d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	607b      	str	r3, [r7, #4]
 8009d5e:	e008      	b.n	8009d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d60:	4b08      	ldr	r3, [pc, #32]	@ (8009d84 <xTaskGetSchedulerState+0x38>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d102      	bne.n	8009d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d68:	2302      	movs	r3, #2
 8009d6a:	607b      	str	r3, [r7, #4]
 8009d6c:	e001      	b.n	8009d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d72:	687b      	ldr	r3, [r7, #4]
	}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	20001698 	.word	0x20001698
 8009d84:	200016b4 	.word	0x200016b4

08009d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d94:	2300      	movs	r3, #0
 8009d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d05c      	beq.n	8009e58 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d9e:	4b31      	ldr	r3, [pc, #196]	@ (8009e64 <xTaskPriorityDisinherit+0xdc>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d00d      	beq.n	8009dc4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dac:	b672      	cpsid	i
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	b662      	cpsie	i
 8009dbc:	60fb      	str	r3, [r7, #12]
}
 8009dbe:	bf00      	nop
 8009dc0:	bf00      	nop
 8009dc2:	e7fd      	b.n	8009dc0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10d      	bne.n	8009de8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd0:	b672      	cpsid	i
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	b662      	cpsie	i
 8009de0:	60bb      	str	r3, [r7, #8]
}
 8009de2:	bf00      	nop
 8009de4:	bf00      	nop
 8009de6:	e7fd      	b.n	8009de4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dec:	1e5a      	subs	r2, r3, #1
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d02c      	beq.n	8009e58 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d128      	bne.n	8009e58 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	3304      	adds	r3, #4
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fc10 	bl	8008630 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e28:	4b0f      	ldr	r3, [pc, #60]	@ (8009e68 <xTaskPriorityDisinherit+0xe0>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d903      	bls.n	8009e38 <xTaskPriorityDisinherit+0xb0>
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e34:	4a0c      	ldr	r2, [pc, #48]	@ (8009e68 <xTaskPriorityDisinherit+0xe0>)
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4a09      	ldr	r2, [pc, #36]	@ (8009e6c <xTaskPriorityDisinherit+0xe4>)
 8009e46:	441a      	add	r2, r3
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f7fe fb91 	bl	8008576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e54:	2301      	movs	r3, #1
 8009e56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e58:	697b      	ldr	r3, [r7, #20]
	}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200011b8 	.word	0x200011b8
 8009e68:	20001694 	.word	0x20001694
 8009e6c:	200011bc 	.word	0x200011bc

08009e70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e7a:	4b21      	ldr	r3, [pc, #132]	@ (8009f00 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e80:	4b20      	ldr	r3, [pc, #128]	@ (8009f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3304      	adds	r3, #4
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe fbd2 	bl	8008630 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e92:	d10a      	bne.n	8009eaa <prvAddCurrentTaskToDelayedList+0x3a>
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d007      	beq.n	8009eaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8009f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4819      	ldr	r0, [pc, #100]	@ (8009f08 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ea4:	f7fe fb67 	bl	8008576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ea8:	e026      	b.n	8009ef8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4413      	add	r3, r2
 8009eb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009eb2:	4b14      	ldr	r3, [pc, #80]	@ (8009f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d209      	bcs.n	8009ed6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ec2:	4b12      	ldr	r3, [pc, #72]	@ (8009f0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8009f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	f7fe fb75 	bl	80085be <vListInsert>
}
 8009ed4:	e010      	b.n	8009ef8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8009f10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	4b0a      	ldr	r3, [pc, #40]	@ (8009f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f7fe fb6b 	bl	80085be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8009f14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d202      	bcs.n	8009ef8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ef2:	4a08      	ldr	r2, [pc, #32]	@ (8009f14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	6013      	str	r3, [r2, #0]
}
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20001690 	.word	0x20001690
 8009f04:	200011b8 	.word	0x200011b8
 8009f08:	20001678 	.word	0x20001678
 8009f0c:	20001648 	.word	0x20001648
 8009f10:	20001644 	.word	0x20001644
 8009f14:	200016ac 	.word	0x200016ac

08009f18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08a      	sub	sp, #40	@ 0x28
 8009f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f22:	f000 fb21 	bl	800a568 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f26:	4b1e      	ldr	r3, [pc, #120]	@ (8009fa0 <xTimerCreateTimerTask+0x88>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d021      	beq.n	8009f72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f36:	1d3a      	adds	r2, r7, #4
 8009f38:	f107 0108 	add.w	r1, r7, #8
 8009f3c:	f107 030c 	add.w	r3, r7, #12
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fe fad1 	bl	80084e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f46:	6879      	ldr	r1, [r7, #4]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	9202      	str	r2, [sp, #8]
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	2302      	movs	r3, #2
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	2300      	movs	r3, #0
 8009f56:	460a      	mov	r2, r1
 8009f58:	4912      	ldr	r1, [pc, #72]	@ (8009fa4 <xTimerCreateTimerTask+0x8c>)
 8009f5a:	4813      	ldr	r0, [pc, #76]	@ (8009fa8 <xTimerCreateTimerTask+0x90>)
 8009f5c:	f7ff f8ac 	bl	80090b8 <xTaskCreateStatic>
 8009f60:	4603      	mov	r3, r0
 8009f62:	4a12      	ldr	r2, [pc, #72]	@ (8009fac <xTimerCreateTimerTask+0x94>)
 8009f64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f66:	4b11      	ldr	r3, [pc, #68]	@ (8009fac <xTimerCreateTimerTask+0x94>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10d      	bne.n	8009f94 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7c:	b672      	cpsid	i
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	b662      	cpsie	i
 8009f8c:	613b      	str	r3, [r7, #16]
}
 8009f8e:	bf00      	nop
 8009f90:	bf00      	nop
 8009f92:	e7fd      	b.n	8009f90 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009f94:	697b      	ldr	r3, [r7, #20]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	200016e8 	.word	0x200016e8
 8009fa4:	0800b1c4 	.word	0x0800b1c4
 8009fa8:	0800a0f1 	.word	0x0800a0f1
 8009fac:	200016ec 	.word	0x200016ec

08009fb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	@ 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10d      	bne.n	8009fe4 <xTimerGenericCommand+0x34>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fcc:	b672      	cpsid	i
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	b662      	cpsie	i
 8009fdc:	623b      	str	r3, [r7, #32]
}
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
 8009fe2:	e7fd      	b.n	8009fe0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009fe4:	4b19      	ldr	r3, [pc, #100]	@ (800a04c <xTimerGenericCommand+0x9c>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02a      	beq.n	800a042 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b05      	cmp	r3, #5
 8009ffc:	dc18      	bgt.n	800a030 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ffe:	f7ff fea5 	bl	8009d4c <xTaskGetSchedulerState>
 800a002:	4603      	mov	r3, r0
 800a004:	2b02      	cmp	r3, #2
 800a006:	d109      	bne.n	800a01c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a008:	4b10      	ldr	r3, [pc, #64]	@ (800a04c <xTimerGenericCommand+0x9c>)
 800a00a:	6818      	ldr	r0, [r3, #0]
 800a00c:	f107 0110 	add.w	r1, r7, #16
 800a010:	2300      	movs	r3, #0
 800a012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a014:	f7fe fc4c 	bl	80088b0 <xQueueGenericSend>
 800a018:	6278      	str	r0, [r7, #36]	@ 0x24
 800a01a:	e012      	b.n	800a042 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a01c:	4b0b      	ldr	r3, [pc, #44]	@ (800a04c <xTimerGenericCommand+0x9c>)
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	f107 0110 	add.w	r1, r7, #16
 800a024:	2300      	movs	r3, #0
 800a026:	2200      	movs	r2, #0
 800a028:	f7fe fc42 	bl	80088b0 <xQueueGenericSend>
 800a02c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a02e:	e008      	b.n	800a042 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a030:	4b06      	ldr	r3, [pc, #24]	@ (800a04c <xTimerGenericCommand+0x9c>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	f107 0110 	add.w	r1, r7, #16
 800a038:	2300      	movs	r3, #0
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	f7fe fd42 	bl	8008ac4 <xQueueGenericSendFromISR>
 800a040:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a044:	4618      	mov	r0, r3
 800a046:	3728      	adds	r7, #40	@ 0x28
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	200016e8 	.word	0x200016e8

0800a050 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af02      	add	r7, sp, #8
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a05a:	4b24      	ldr	r3, [pc, #144]	@ (800a0ec <prvProcessExpiredTimer+0x9c>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3304      	adds	r3, #4
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe fae1 	bl	8008630 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d025      	beq.n	800a0c8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	699a      	ldr	r2, [r3, #24]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	18d1      	adds	r1, r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	6978      	ldr	r0, [r7, #20]
 800a08a:	f000 f8d7 	bl	800a23c <prvInsertTimerInActiveList>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d022      	beq.n	800a0da <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a094:	2300      	movs	r3, #0
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	2300      	movs	r3, #0
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	2100      	movs	r1, #0
 800a09e:	6978      	ldr	r0, [r7, #20]
 800a0a0:	f7ff ff86 	bl	8009fb0 <xTimerGenericCommand>
 800a0a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d116      	bne.n	800a0da <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b0:	b672      	cpsid	i
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	b662      	cpsie	i
 800a0c0:	60fb      	str	r3, [r7, #12]
}
 800a0c2:	bf00      	nop
 800a0c4:	bf00      	nop
 800a0c6:	e7fd      	b.n	800a0c4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0ce:	f023 0301 	bic.w	r3, r3, #1
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	6978      	ldr	r0, [r7, #20]
 800a0e0:	4798      	blx	r3
}
 800a0e2:	bf00      	nop
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	200016e0 	.word	0x200016e0

0800a0f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0f8:	f107 0308 	add.w	r3, r7, #8
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 f859 	bl	800a1b4 <prvGetNextExpireTime>
 800a102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	4619      	mov	r1, r3
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 f805 	bl	800a118 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a10e:	f000 f8d7 	bl	800a2c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a112:	bf00      	nop
 800a114:	e7f0      	b.n	800a0f8 <prvTimerTask+0x8>
	...

0800a118 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a122:	f7ff fa1b 	bl	800955c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a126:	f107 0308 	add.w	r3, r7, #8
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 f866 	bl	800a1fc <prvSampleTimeNow>
 800a130:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d130      	bne.n	800a19a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10a      	bne.n	800a154 <prvProcessTimerOrBlockTask+0x3c>
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	429a      	cmp	r2, r3
 800a144:	d806      	bhi.n	800a154 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a146:	f7ff fa17 	bl	8009578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a14a:	68f9      	ldr	r1, [r7, #12]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff ff7f 	bl	800a050 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a152:	e024      	b.n	800a19e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d008      	beq.n	800a16c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a15a:	4b13      	ldr	r3, [pc, #76]	@ (800a1a8 <prvProcessTimerOrBlockTask+0x90>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <prvProcessTimerOrBlockTask+0x50>
 800a164:	2301      	movs	r3, #1
 800a166:	e000      	b.n	800a16a <prvProcessTimerOrBlockTask+0x52>
 800a168:	2300      	movs	r3, #0
 800a16a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a16c:	4b0f      	ldr	r3, [pc, #60]	@ (800a1ac <prvProcessTimerOrBlockTask+0x94>)
 800a16e:	6818      	ldr	r0, [r3, #0]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	4619      	mov	r1, r3
 800a17a:	f7fe ff69 	bl	8009050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a17e:	f7ff f9fb 	bl	8009578 <xTaskResumeAll>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10a      	bne.n	800a19e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a188:	4b09      	ldr	r3, [pc, #36]	@ (800a1b0 <prvProcessTimerOrBlockTask+0x98>)
 800a18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	f3bf 8f6f 	isb	sy
}
 800a198:	e001      	b.n	800a19e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a19a:	f7ff f9ed 	bl	8009578 <xTaskResumeAll>
}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200016e4 	.word	0x200016e4
 800a1ac:	200016e8 	.word	0x200016e8
 800a1b0:	e000ed04 	.word	0xe000ed04

0800a1b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a1bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f8 <prvGetNextExpireTime+0x44>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <prvGetNextExpireTime+0x16>
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	e000      	b.n	800a1cc <prvGetNextExpireTime+0x18>
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d105      	bne.n	800a1e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1d8:	4b07      	ldr	r3, [pc, #28]	@ (800a1f8 <prvGetNextExpireTime+0x44>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	e001      	b.n	800a1e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	200016e0 	.word	0x200016e0

0800a1fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a204:	f7ff fa58 	bl	80096b8 <xTaskGetTickCount>
 800a208:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a20a:	4b0b      	ldr	r3, [pc, #44]	@ (800a238 <prvSampleTimeNow+0x3c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	429a      	cmp	r2, r3
 800a212:	d205      	bcs.n	800a220 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a214:	f000 f940 	bl	800a498 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	e002      	b.n	800a226 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a226:	4a04      	ldr	r2, [pc, #16]	@ (800a238 <prvSampleTimeNow+0x3c>)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a22c:	68fb      	ldr	r3, [r7, #12]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	200016f0 	.word	0x200016f0

0800a23c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d812      	bhi.n	800a288 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	1ad2      	subs	r2, r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d302      	bcc.n	800a276 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a270:	2301      	movs	r3, #1
 800a272:	617b      	str	r3, [r7, #20]
 800a274:	e01b      	b.n	800a2ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a276:	4b10      	ldr	r3, [pc, #64]	@ (800a2b8 <prvInsertTimerInActiveList+0x7c>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4619      	mov	r1, r3
 800a280:	4610      	mov	r0, r2
 800a282:	f7fe f99c 	bl	80085be <vListInsert>
 800a286:	e012      	b.n	800a2ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d206      	bcs.n	800a29e <prvInsertTimerInActiveList+0x62>
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	d302      	bcc.n	800a29e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a298:	2301      	movs	r3, #1
 800a29a:	617b      	str	r3, [r7, #20]
 800a29c:	e007      	b.n	800a2ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a29e:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <prvInsertTimerInActiveList+0x80>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	f7fe f988 	bl	80085be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2ae:	697b      	ldr	r3, [r7, #20]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	200016e4 	.word	0x200016e4
 800a2bc:	200016e0 	.word	0x200016e0

0800a2c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08e      	sub	sp, #56	@ 0x38
 800a2c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2c6:	e0d4      	b.n	800a472 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	da1b      	bge.n	800a306 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a2ce:	1d3b      	adds	r3, r7, #4
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10d      	bne.n	800a2f6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2de:	b672      	cpsid	i
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	b662      	cpsie	i
 800a2ee:	61fb      	str	r3, [r7, #28]
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	e7fd      	b.n	800a2f2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2fc:	6850      	ldr	r0, [r2, #4]
 800a2fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a300:	6892      	ldr	r2, [r2, #8]
 800a302:	4611      	mov	r1, r2
 800a304:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f2c0 80b2 	blt.w	800a472 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31c:	3304      	adds	r3, #4
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe f986 	bl	8008630 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a324:	463b      	mov	r3, r7
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff ff68 	bl	800a1fc <prvSampleTimeNow>
 800a32c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b09      	cmp	r3, #9
 800a332:	f200 809b 	bhi.w	800a46c <prvProcessReceivedCommands+0x1ac>
 800a336:	a201      	add	r2, pc, #4	@ (adr r2, 800a33c <prvProcessReceivedCommands+0x7c>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a365 	.word	0x0800a365
 800a340:	0800a365 	.word	0x0800a365
 800a344:	0800a365 	.word	0x0800a365
 800a348:	0800a3df 	.word	0x0800a3df
 800a34c:	0800a3f3 	.word	0x0800a3f3
 800a350:	0800a443 	.word	0x0800a443
 800a354:	0800a365 	.word	0x0800a365
 800a358:	0800a365 	.word	0x0800a365
 800a35c:	0800a3df 	.word	0x0800a3df
 800a360:	0800a3f3 	.word	0x0800a3f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a366:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a36a:	f043 0301 	orr.w	r3, r3, #1
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a372:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	18d1      	adds	r1, r2, r3
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a384:	f7ff ff5a 	bl	800a23c <prvInsertTimerInActiveList>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d070      	beq.n	800a470 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a394:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d065      	beq.n	800a470 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	441a      	add	r2, r3
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3b6:	f7ff fdfb 	bl	8009fb0 <xTimerGenericCommand>
 800a3ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d156      	bne.n	800a470 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c6:	b672      	cpsid	i
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	b662      	cpsie	i
 800a3d6:	61bb      	str	r3, [r7, #24]
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	e7fd      	b.n	800a3da <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3e4:	f023 0301 	bic.w	r3, r3, #1
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a3f0:	e03f      	b.n	800a472 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3f8:	f043 0301 	orr.w	r3, r3, #1
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a408:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10d      	bne.n	800a42e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a416:	b672      	cpsid	i
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	b662      	cpsie	i
 800a426:	617b      	str	r3, [r7, #20]
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	e7fd      	b.n	800a42a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a434:	18d1      	adds	r1, r2, r3
 800a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a43a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a43c:	f7ff fefe 	bl	800a23c <prvInsertTimerInActiveList>
					break;
 800a440:	e017      	b.n	800a472 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d103      	bne.n	800a458 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800a450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a452:	f000 fbd7 	bl	800ac04 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a456:	e00c      	b.n	800a472 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a45e:	f023 0301 	bic.w	r3, r3, #1
 800a462:	b2da      	uxtb	r2, r3
 800a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a46a:	e002      	b.n	800a472 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800a46c:	bf00      	nop
 800a46e:	e000      	b.n	800a472 <prvProcessReceivedCommands+0x1b2>
					break;
 800a470:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a472:	4b08      	ldr	r3, [pc, #32]	@ (800a494 <prvProcessReceivedCommands+0x1d4>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	1d39      	adds	r1, r7, #4
 800a478:	2200      	movs	r2, #0
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fe fbc6 	bl	8008c0c <xQueueReceive>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	f47f af20 	bne.w	800a2c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a488:	bf00      	nop
 800a48a:	bf00      	nop
 800a48c:	3730      	adds	r7, #48	@ 0x30
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200016e8 	.word	0x200016e8

0800a498 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a49e:	e04b      	b.n	800a538 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4a0:	4b2f      	ldr	r3, [pc, #188]	@ (800a560 <prvSwitchTimerLists+0xc8>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4aa:	4b2d      	ldr	r3, [pc, #180]	@ (800a560 <prvSwitchTimerLists+0xc8>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe f8b9 	bl	8008630 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6a1b      	ldr	r3, [r3, #32]
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d031      	beq.n	800a538 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	693a      	ldr	r2, [r7, #16]
 800a4da:	4413      	add	r3, r2
 800a4dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d90e      	bls.n	800a504 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a560 <prvSwitchTimerLists+0xc8>)
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	f7fe f85e 	bl	80085be <vListInsert>
 800a502:	e019      	b.n	800a538 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a504:	2300      	movs	r3, #0
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	2300      	movs	r3, #0
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	2100      	movs	r1, #0
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f7ff fd4e 	bl	8009fb0 <xTimerGenericCommand>
 800a514:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10d      	bne.n	800a538 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	b672      	cpsid	i
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	b662      	cpsie	i
 800a530:	603b      	str	r3, [r7, #0]
}
 800a532:	bf00      	nop
 800a534:	bf00      	nop
 800a536:	e7fd      	b.n	800a534 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a538:	4b09      	ldr	r3, [pc, #36]	@ (800a560 <prvSwitchTimerLists+0xc8>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1ae      	bne.n	800a4a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a542:	4b07      	ldr	r3, [pc, #28]	@ (800a560 <prvSwitchTimerLists+0xc8>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a548:	4b06      	ldr	r3, [pc, #24]	@ (800a564 <prvSwitchTimerLists+0xcc>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a04      	ldr	r2, [pc, #16]	@ (800a560 <prvSwitchTimerLists+0xc8>)
 800a54e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a550:	4a04      	ldr	r2, [pc, #16]	@ (800a564 <prvSwitchTimerLists+0xcc>)
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	6013      	str	r3, [r2, #0]
}
 800a556:	bf00      	nop
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	200016e0 	.word	0x200016e0
 800a564:	200016e4 	.word	0x200016e4

0800a568 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a56e:	f000 f94d 	bl	800a80c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a572:	4b15      	ldr	r3, [pc, #84]	@ (800a5c8 <prvCheckForValidListAndQueue+0x60>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d120      	bne.n	800a5bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a57a:	4814      	ldr	r0, [pc, #80]	@ (800a5cc <prvCheckForValidListAndQueue+0x64>)
 800a57c:	f7fd ffce 	bl	800851c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a580:	4813      	ldr	r0, [pc, #76]	@ (800a5d0 <prvCheckForValidListAndQueue+0x68>)
 800a582:	f7fd ffcb 	bl	800851c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a586:	4b13      	ldr	r3, [pc, #76]	@ (800a5d4 <prvCheckForValidListAndQueue+0x6c>)
 800a588:	4a10      	ldr	r2, [pc, #64]	@ (800a5cc <prvCheckForValidListAndQueue+0x64>)
 800a58a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a58c:	4b12      	ldr	r3, [pc, #72]	@ (800a5d8 <prvCheckForValidListAndQueue+0x70>)
 800a58e:	4a10      	ldr	r2, [pc, #64]	@ (800a5d0 <prvCheckForValidListAndQueue+0x68>)
 800a590:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a592:	2300      	movs	r3, #0
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	4b11      	ldr	r3, [pc, #68]	@ (800a5dc <prvCheckForValidListAndQueue+0x74>)
 800a598:	4a11      	ldr	r2, [pc, #68]	@ (800a5e0 <prvCheckForValidListAndQueue+0x78>)
 800a59a:	2110      	movs	r1, #16
 800a59c:	200a      	movs	r0, #10
 800a59e:	f7fe f8dd 	bl	800875c <xQueueGenericCreateStatic>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	4a08      	ldr	r2, [pc, #32]	@ (800a5c8 <prvCheckForValidListAndQueue+0x60>)
 800a5a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a5a8:	4b07      	ldr	r3, [pc, #28]	@ (800a5c8 <prvCheckForValidListAndQueue+0x60>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d005      	beq.n	800a5bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a5b0:	4b05      	ldr	r3, [pc, #20]	@ (800a5c8 <prvCheckForValidListAndQueue+0x60>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	490b      	ldr	r1, [pc, #44]	@ (800a5e4 <prvCheckForValidListAndQueue+0x7c>)
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe fd20 	bl	8008ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5bc:	f000 f95c 	bl	800a878 <vPortExitCritical>
}
 800a5c0:	bf00      	nop
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	200016e8 	.word	0x200016e8
 800a5cc:	200016b8 	.word	0x200016b8
 800a5d0:	200016cc 	.word	0x200016cc
 800a5d4:	200016e0 	.word	0x200016e0
 800a5d8:	200016e4 	.word	0x200016e4
 800a5dc:	20001794 	.word	0x20001794
 800a5e0:	200016f4 	.word	0x200016f4
 800a5e4:	0800b1cc 	.word	0x0800b1cc

0800a5e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3b04      	subs	r3, #4
 800a5f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3b04      	subs	r3, #4
 800a606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f023 0201 	bic.w	r2, r3, #1
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3b04      	subs	r3, #4
 800a616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a618:	4a0c      	ldr	r2, [pc, #48]	@ (800a64c <pxPortInitialiseStack+0x64>)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3b14      	subs	r3, #20
 800a622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3b04      	subs	r3, #4
 800a62e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f06f 0202 	mvn.w	r2, #2
 800a636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3b20      	subs	r3, #32
 800a63c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a63e:	68fb      	ldr	r3, [r7, #12]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	0800a651 	.word	0x0800a651

0800a650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a65a:	4b15      	ldr	r3, [pc, #84]	@ (800a6b0 <prvTaskExitError+0x60>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d00d      	beq.n	800a680 <prvTaskExitError+0x30>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a668:	b672      	cpsid	i
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	b662      	cpsie	i
 800a678:	60fb      	str	r3, [r7, #12]
}
 800a67a:	bf00      	nop
 800a67c:	bf00      	nop
 800a67e:	e7fd      	b.n	800a67c <prvTaskExitError+0x2c>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a684:	b672      	cpsid	i
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	b662      	cpsie	i
 800a694:	60bb      	str	r3, [r7, #8]
}
 800a696:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a698:	bf00      	nop
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d0fc      	beq.n	800a69a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	2000000c 	.word	0x2000000c
	...

0800a6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6c0:	4b07      	ldr	r3, [pc, #28]	@ (800a6e0 <pxCurrentTCBConst2>)
 800a6c2:	6819      	ldr	r1, [r3, #0]
 800a6c4:	6808      	ldr	r0, [r1, #0]
 800a6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	f380 8809 	msr	PSP, r0
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f380 8811 	msr	BASEPRI, r0
 800a6da:	4770      	bx	lr
 800a6dc:	f3af 8000 	nop.w

0800a6e0 <pxCurrentTCBConst2>:
 800a6e0:	200011b8 	.word	0x200011b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop

0800a6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6e8:	4808      	ldr	r0, [pc, #32]	@ (800a70c <prvPortStartFirstTask+0x24>)
 800a6ea:	6800      	ldr	r0, [r0, #0]
 800a6ec:	6800      	ldr	r0, [r0, #0]
 800a6ee:	f380 8808 	msr	MSP, r0
 800a6f2:	f04f 0000 	mov.w	r0, #0
 800a6f6:	f380 8814 	msr	CONTROL, r0
 800a6fa:	b662      	cpsie	i
 800a6fc:	b661      	cpsie	f
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	df00      	svc	0
 800a708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a70a:	bf00      	nop
 800a70c:	e000ed08 	.word	0xe000ed08

0800a710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a716:	4b37      	ldr	r3, [pc, #220]	@ (800a7f4 <xPortStartScheduler+0xe4>)
 800a718:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	22ff      	movs	r2, #255	@ 0xff
 800a726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	4b2f      	ldr	r3, [pc, #188]	@ (800a7f8 <xPortStartScheduler+0xe8>)
 800a73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a73e:	4b2f      	ldr	r3, [pc, #188]	@ (800a7fc <xPortStartScheduler+0xec>)
 800a740:	2207      	movs	r2, #7
 800a742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a744:	e009      	b.n	800a75a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a746:	4b2d      	ldr	r3, [pc, #180]	@ (800a7fc <xPortStartScheduler+0xec>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	4a2b      	ldr	r2, [pc, #172]	@ (800a7fc <xPortStartScheduler+0xec>)
 800a74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a750:	78fb      	ldrb	r3, [r7, #3]
 800a752:	b2db      	uxtb	r3, r3
 800a754:	005b      	lsls	r3, r3, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a75a:	78fb      	ldrb	r3, [r7, #3]
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a762:	2b80      	cmp	r3, #128	@ 0x80
 800a764:	d0ef      	beq.n	800a746 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a766:	4b25      	ldr	r3, [pc, #148]	@ (800a7fc <xPortStartScheduler+0xec>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f1c3 0307 	rsb	r3, r3, #7
 800a76e:	2b04      	cmp	r3, #4
 800a770:	d00d      	beq.n	800a78e <xPortStartScheduler+0x7e>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a776:	b672      	cpsid	i
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	b662      	cpsie	i
 800a786:	60bb      	str	r3, [r7, #8]
}
 800a788:	bf00      	nop
 800a78a:	bf00      	nop
 800a78c:	e7fd      	b.n	800a78a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a78e:	4b1b      	ldr	r3, [pc, #108]	@ (800a7fc <xPortStartScheduler+0xec>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	4a19      	ldr	r2, [pc, #100]	@ (800a7fc <xPortStartScheduler+0xec>)
 800a796:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a798:	4b18      	ldr	r3, [pc, #96]	@ (800a7fc <xPortStartScheduler+0xec>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a7a0:	4a16      	ldr	r2, [pc, #88]	@ (800a7fc <xPortStartScheduler+0xec>)
 800a7a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7ac:	4b14      	ldr	r3, [pc, #80]	@ (800a800 <xPortStartScheduler+0xf0>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a13      	ldr	r2, [pc, #76]	@ (800a800 <xPortStartScheduler+0xf0>)
 800a7b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a7b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7b8:	4b11      	ldr	r3, [pc, #68]	@ (800a800 <xPortStartScheduler+0xf0>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a10      	ldr	r2, [pc, #64]	@ (800a800 <xPortStartScheduler+0xf0>)
 800a7be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a7c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7c4:	f000 f8dc 	bl	800a980 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a804 <xPortStartScheduler+0xf4>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7ce:	f000 f8fb 	bl	800a9c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a808 <xPortStartScheduler+0xf8>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a808 <xPortStartScheduler+0xf8>)
 800a7d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a7dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7de:	f7ff ff83 	bl	800a6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7e2:	f7ff f835 	bl	8009850 <vTaskSwitchContext>
	prvTaskExitError();
 800a7e6:	f7ff ff33 	bl	800a650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	e000e400 	.word	0xe000e400
 800a7f8:	200017e4 	.word	0x200017e4
 800a7fc:	200017e8 	.word	0x200017e8
 800a800:	e000ed20 	.word	0xe000ed20
 800a804:	2000000c 	.word	0x2000000c
 800a808:	e000ef34 	.word	0xe000ef34

0800a80c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a816:	b672      	cpsid	i
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	b662      	cpsie	i
 800a826:	607b      	str	r3, [r7, #4]
}
 800a828:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a82a:	4b11      	ldr	r3, [pc, #68]	@ (800a870 <vPortEnterCritical+0x64>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3301      	adds	r3, #1
 800a830:	4a0f      	ldr	r2, [pc, #60]	@ (800a870 <vPortEnterCritical+0x64>)
 800a832:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a834:	4b0e      	ldr	r3, [pc, #56]	@ (800a870 <vPortEnterCritical+0x64>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d112      	bne.n	800a862 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a83c:	4b0d      	ldr	r3, [pc, #52]	@ (800a874 <vPortEnterCritical+0x68>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00d      	beq.n	800a862 <vPortEnterCritical+0x56>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84a:	b672      	cpsid	i
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	b662      	cpsie	i
 800a85a:	603b      	str	r3, [r7, #0]
}
 800a85c:	bf00      	nop
 800a85e:	bf00      	nop
 800a860:	e7fd      	b.n	800a85e <vPortEnterCritical+0x52>
	}
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	2000000c 	.word	0x2000000c
 800a874:	e000ed04 	.word	0xe000ed04

0800a878 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a87e:	4b13      	ldr	r3, [pc, #76]	@ (800a8cc <vPortExitCritical+0x54>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10d      	bne.n	800a8a2 <vPortExitCritical+0x2a>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	b672      	cpsid	i
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	b662      	cpsie	i
 800a89a:	607b      	str	r3, [r7, #4]
}
 800a89c:	bf00      	nop
 800a89e:	bf00      	nop
 800a8a0:	e7fd      	b.n	800a89e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a8a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a8cc <vPortExitCritical+0x54>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	4a08      	ldr	r2, [pc, #32]	@ (800a8cc <vPortExitCritical+0x54>)
 800a8aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8ac:	4b07      	ldr	r3, [pc, #28]	@ (800a8cc <vPortExitCritical+0x54>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <vPortExitCritical+0x48>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	f383 8811 	msr	BASEPRI, r3
}
 800a8be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	2000000c 	.word	0x2000000c

0800a8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8d0:	f3ef 8009 	mrs	r0, PSP
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	4b15      	ldr	r3, [pc, #84]	@ (800a930 <pxCurrentTCBConst>)
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	f01e 0f10 	tst.w	lr, #16
 800a8e0:	bf08      	it	eq
 800a8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ea:	6010      	str	r0, [r2, #0]
 800a8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a8f4:	b672      	cpsid	i
 800a8f6:	f380 8811 	msr	BASEPRI, r0
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	b662      	cpsie	i
 800a904:	f7fe ffa4 	bl	8009850 <vTaskSwitchContext>
 800a908:	f04f 0000 	mov.w	r0, #0
 800a90c:	f380 8811 	msr	BASEPRI, r0
 800a910:	bc09      	pop	{r0, r3}
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	6808      	ldr	r0, [r1, #0]
 800a916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	f01e 0f10 	tst.w	lr, #16
 800a91e:	bf08      	it	eq
 800a920:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a924:	f380 8809 	msr	PSP, r0
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop

0800a930 <pxCurrentTCBConst>:
 800a930:	200011b8 	.word	0x200011b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop

0800a938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	b672      	cpsid	i
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	b662      	cpsie	i
 800a952:	607b      	str	r3, [r7, #4]
}
 800a954:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a956:	f7fe febf 	bl	80096d8 <xTaskIncrementTick>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d003      	beq.n	800a968 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a960:	4b06      	ldr	r3, [pc, #24]	@ (800a97c <xPortSysTickHandler+0x44>)
 800a962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a966:	601a      	str	r2, [r3, #0]
 800a968:	2300      	movs	r3, #0
 800a96a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	f383 8811 	msr	BASEPRI, r3
}
 800a972:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	e000ed04 	.word	0xe000ed04

0800a980 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a980:	b480      	push	{r7}
 800a982:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a984:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b4 <vPortSetupTimerInterrupt+0x34>)
 800a986:	2200      	movs	r2, #0
 800a988:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a98a:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b8 <vPortSetupTimerInterrupt+0x38>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a990:	4b0a      	ldr	r3, [pc, #40]	@ (800a9bc <vPortSetupTimerInterrupt+0x3c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a0a      	ldr	r2, [pc, #40]	@ (800a9c0 <vPortSetupTimerInterrupt+0x40>)
 800a996:	fba2 2303 	umull	r2, r3, r2, r3
 800a99a:	099b      	lsrs	r3, r3, #6
 800a99c:	4a09      	ldr	r2, [pc, #36]	@ (800a9c4 <vPortSetupTimerInterrupt+0x44>)
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9a2:	4b04      	ldr	r3, [pc, #16]	@ (800a9b4 <vPortSetupTimerInterrupt+0x34>)
 800a9a4:	2207      	movs	r2, #7
 800a9a6:	601a      	str	r2, [r3, #0]
}
 800a9a8:	bf00      	nop
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	e000e010 	.word	0xe000e010
 800a9b8:	e000e018 	.word	0xe000e018
 800a9bc:	20000000 	.word	0x20000000
 800a9c0:	10624dd3 	.word	0x10624dd3
 800a9c4:	e000e014 	.word	0xe000e014

0800a9c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a9d8 <vPortEnableVFP+0x10>
 800a9cc:	6801      	ldr	r1, [r0, #0]
 800a9ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a9d2:	6001      	str	r1, [r0, #0]
 800a9d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9d6:	bf00      	nop
 800a9d8:	e000ed88 	.word	0xe000ed88

0800a9dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9e2:	f3ef 8305 	mrs	r3, IPSR
 800a9e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b0f      	cmp	r3, #15
 800a9ec:	d917      	bls.n	800aa1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9ee:	4a1a      	ldr	r2, [pc, #104]	@ (800aa58 <vPortValidateInterruptPriority+0x7c>)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9f8:	4b18      	ldr	r3, [pc, #96]	@ (800aa5c <vPortValidateInterruptPriority+0x80>)
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	7afa      	ldrb	r2, [r7, #11]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d20d      	bcs.n	800aa1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa06:	b672      	cpsid	i
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	b662      	cpsie	i
 800aa16:	607b      	str	r3, [r7, #4]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa1e:	4b10      	ldr	r3, [pc, #64]	@ (800aa60 <vPortValidateInterruptPriority+0x84>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aa26:	4b0f      	ldr	r3, [pc, #60]	@ (800aa64 <vPortValidateInterruptPriority+0x88>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d90d      	bls.n	800aa4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa32:	b672      	cpsid	i
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	b662      	cpsie	i
 800aa42:	603b      	str	r3, [r7, #0]
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	e7fd      	b.n	800aa46 <vPortValidateInterruptPriority+0x6a>
	}
 800aa4a:	bf00      	nop
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	e000e3f0 	.word	0xe000e3f0
 800aa5c:	200017e4 	.word	0x200017e4
 800aa60:	e000ed0c 	.word	0xe000ed0c
 800aa64:	200017e8 	.word	0x200017e8

0800aa68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08a      	sub	sp, #40	@ 0x28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa70:	2300      	movs	r3, #0
 800aa72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa74:	f7fe fd72 	bl	800955c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa78:	4b5d      	ldr	r3, [pc, #372]	@ (800abf0 <pvPortMalloc+0x188>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa80:	f000 f920 	bl	800acc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa84:	4b5b      	ldr	r3, [pc, #364]	@ (800abf4 <pvPortMalloc+0x18c>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f040 8094 	bne.w	800abba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d020      	beq.n	800aada <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800aa98:	2208      	movs	r2, #8
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d017      	beq.n	800aada <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f023 0307 	bic.w	r3, r3, #7
 800aab0:	3308      	adds	r3, #8
 800aab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f003 0307 	and.w	r3, r3, #7
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00d      	beq.n	800aada <pvPortMalloc+0x72>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	b672      	cpsid	i
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	b662      	cpsie	i
 800aad2:	617b      	str	r3, [r7, #20]
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop
 800aad8:	e7fd      	b.n	800aad6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d06c      	beq.n	800abba <pvPortMalloc+0x152>
 800aae0:	4b45      	ldr	r3, [pc, #276]	@ (800abf8 <pvPortMalloc+0x190>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d867      	bhi.n	800abba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aaea:	4b44      	ldr	r3, [pc, #272]	@ (800abfc <pvPortMalloc+0x194>)
 800aaec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aaee:	4b43      	ldr	r3, [pc, #268]	@ (800abfc <pvPortMalloc+0x194>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaf4:	e004      	b.n	800ab00 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d903      	bls.n	800ab12 <pvPortMalloc+0xaa>
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f1      	bne.n	800aaf6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab12:	4b37      	ldr	r3, [pc, #220]	@ (800abf0 <pvPortMalloc+0x188>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d04e      	beq.n	800abba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2208      	movs	r2, #8
 800ab22:	4413      	add	r3, r2
 800ab24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	1ad2      	subs	r2, r2, r3
 800ab36:	2308      	movs	r3, #8
 800ab38:	005b      	lsls	r3, r3, #1
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d922      	bls.n	800ab84 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4413      	add	r3, r2
 800ab44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	f003 0307 	and.w	r3, r3, #7
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00d      	beq.n	800ab6c <pvPortMalloc+0x104>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab54:	b672      	cpsid	i
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	b662      	cpsie	i
 800ab64:	613b      	str	r3, [r7, #16]
}
 800ab66:	bf00      	nop
 800ab68:	bf00      	nop
 800ab6a:	e7fd      	b.n	800ab68 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	1ad2      	subs	r2, r2, r3
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab7e:	69b8      	ldr	r0, [r7, #24]
 800ab80:	f000 f902 	bl	800ad88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab84:	4b1c      	ldr	r3, [pc, #112]	@ (800abf8 <pvPortMalloc+0x190>)
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	4a1a      	ldr	r2, [pc, #104]	@ (800abf8 <pvPortMalloc+0x190>)
 800ab90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab92:	4b19      	ldr	r3, [pc, #100]	@ (800abf8 <pvPortMalloc+0x190>)
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	4b1a      	ldr	r3, [pc, #104]	@ (800ac00 <pvPortMalloc+0x198>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d203      	bcs.n	800aba6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab9e:	4b16      	ldr	r3, [pc, #88]	@ (800abf8 <pvPortMalloc+0x190>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a17      	ldr	r2, [pc, #92]	@ (800ac00 <pvPortMalloc+0x198>)
 800aba4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	4b12      	ldr	r3, [pc, #72]	@ (800abf4 <pvPortMalloc+0x18c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	431a      	orrs	r2, r3
 800abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800abb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800abba:	f7fe fcdd 	bl	8009578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	f003 0307 	and.w	r3, r3, #7
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00d      	beq.n	800abe4 <pvPortMalloc+0x17c>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abcc:	b672      	cpsid	i
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	b662      	cpsie	i
 800abdc:	60fb      	str	r3, [r7, #12]
}
 800abde:	bf00      	nop
 800abe0:	bf00      	nop
 800abe2:	e7fd      	b.n	800abe0 <pvPortMalloc+0x178>
	return pvReturn;
 800abe4:	69fb      	ldr	r3, [r7, #28]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3728      	adds	r7, #40	@ 0x28
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	200053f4 	.word	0x200053f4
 800abf4:	20005400 	.word	0x20005400
 800abf8:	200053f8 	.word	0x200053f8
 800abfc:	200053ec 	.word	0x200053ec
 800ac00:	200053fc 	.word	0x200053fc

0800ac04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d04e      	beq.n	800acb4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac16:	2308      	movs	r3, #8
 800ac18:	425b      	negs	r3, r3
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	4b24      	ldr	r3, [pc, #144]	@ (800acbc <vPortFree+0xb8>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4013      	ands	r3, r2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10d      	bne.n	800ac4e <vPortFree+0x4a>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac36:	b672      	cpsid	i
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	b662      	cpsie	i
 800ac46:	60fb      	str	r3, [r7, #12]
}
 800ac48:	bf00      	nop
 800ac4a:	bf00      	nop
 800ac4c:	e7fd      	b.n	800ac4a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00d      	beq.n	800ac72 <vPortFree+0x6e>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5a:	b672      	cpsid	i
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	b662      	cpsie	i
 800ac6a:	60bb      	str	r3, [r7, #8]
}
 800ac6c:	bf00      	nop
 800ac6e:	bf00      	nop
 800ac70:	e7fd      	b.n	800ac6e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	4b11      	ldr	r3, [pc, #68]	@ (800acbc <vPortFree+0xb8>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d019      	beq.n	800acb4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d115      	bne.n	800acb4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	4b0b      	ldr	r3, [pc, #44]	@ (800acbc <vPortFree+0xb8>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	43db      	mvns	r3, r3
 800ac92:	401a      	ands	r2, r3
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac98:	f7fe fc60 	bl	800955c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	4b07      	ldr	r3, [pc, #28]	@ (800acc0 <vPortFree+0xbc>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4413      	add	r3, r2
 800aca6:	4a06      	ldr	r2, [pc, #24]	@ (800acc0 <vPortFree+0xbc>)
 800aca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acaa:	6938      	ldr	r0, [r7, #16]
 800acac:	f000 f86c 	bl	800ad88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800acb0:	f7fe fc62 	bl	8009578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800acb4:	bf00      	nop
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	20005400 	.word	0x20005400
 800acc0:	200053f8 	.word	0x200053f8

0800acc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800acce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800acd0:	4b27      	ldr	r3, [pc, #156]	@ (800ad70 <prvHeapInit+0xac>)
 800acd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00c      	beq.n	800acf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3307      	adds	r3, #7
 800ace2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f023 0307 	bic.w	r3, r3, #7
 800acea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	4a1f      	ldr	r2, [pc, #124]	@ (800ad70 <prvHeapInit+0xac>)
 800acf4:	4413      	add	r3, r2
 800acf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acfc:	4a1d      	ldr	r2, [pc, #116]	@ (800ad74 <prvHeapInit+0xb0>)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad02:	4b1c      	ldr	r3, [pc, #112]	@ (800ad74 <prvHeapInit+0xb0>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad10:	2208      	movs	r2, #8
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0307 	bic.w	r3, r3, #7
 800ad1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4a15      	ldr	r2, [pc, #84]	@ (800ad78 <prvHeapInit+0xb4>)
 800ad24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad26:	4b14      	ldr	r3, [pc, #80]	@ (800ad78 <prvHeapInit+0xb4>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad2e:	4b12      	ldr	r3, [pc, #72]	@ (800ad78 <prvHeapInit+0xb4>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2200      	movs	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	1ad2      	subs	r2, r2, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad44:	4b0c      	ldr	r3, [pc, #48]	@ (800ad78 <prvHeapInit+0xb4>)
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	4a0a      	ldr	r2, [pc, #40]	@ (800ad7c <prvHeapInit+0xb8>)
 800ad52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	4a09      	ldr	r2, [pc, #36]	@ (800ad80 <prvHeapInit+0xbc>)
 800ad5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad5c:	4b09      	ldr	r3, [pc, #36]	@ (800ad84 <prvHeapInit+0xc0>)
 800ad5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ad62:	601a      	str	r2, [r3, #0]
}
 800ad64:	bf00      	nop
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	200017ec 	.word	0x200017ec
 800ad74:	200053ec 	.word	0x200053ec
 800ad78:	200053f4 	.word	0x200053f4
 800ad7c:	200053fc 	.word	0x200053fc
 800ad80:	200053f8 	.word	0x200053f8
 800ad84:	20005400 	.word	0x20005400

0800ad88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad90:	4b28      	ldr	r3, [pc, #160]	@ (800ae34 <prvInsertBlockIntoFreeList+0xac>)
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	e002      	b.n	800ad9c <prvInsertBlockIntoFreeList+0x14>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d8f7      	bhi.n	800ad96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	4413      	add	r3, r2
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d108      	bne.n	800adca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	441a      	add	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	441a      	add	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	d118      	bne.n	800ae10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	4b15      	ldr	r3, [pc, #84]	@ (800ae38 <prvInsertBlockIntoFreeList+0xb0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d00d      	beq.n	800ae06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	441a      	add	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	e008      	b.n	800ae18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae06:	4b0c      	ldr	r3, [pc, #48]	@ (800ae38 <prvInsertBlockIntoFreeList+0xb0>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	e003      	b.n	800ae18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d002      	beq.n	800ae26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	200053ec 	.word	0x200053ec
 800ae38:	200053f4 	.word	0x200053f4

0800ae3c <atoi>:
 800ae3c:	220a      	movs	r2, #10
 800ae3e:	2100      	movs	r1, #0
 800ae40:	f000 b87a 	b.w	800af38 <strtol>

0800ae44 <_strtol_l.constprop.0>:
 800ae44:	2b24      	cmp	r3, #36	@ 0x24
 800ae46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4a:	4686      	mov	lr, r0
 800ae4c:	4690      	mov	r8, r2
 800ae4e:	d801      	bhi.n	800ae54 <_strtol_l.constprop.0+0x10>
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d106      	bne.n	800ae62 <_strtol_l.constprop.0+0x1e>
 800ae54:	f000 f894 	bl	800af80 <__errno>
 800ae58:	2316      	movs	r3, #22
 800ae5a:	6003      	str	r3, [r0, #0]
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae62:	4834      	ldr	r0, [pc, #208]	@ (800af34 <_strtol_l.constprop.0+0xf0>)
 800ae64:	460d      	mov	r5, r1
 800ae66:	462a      	mov	r2, r5
 800ae68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae6c:	5d06      	ldrb	r6, [r0, r4]
 800ae6e:	f016 0608 	ands.w	r6, r6, #8
 800ae72:	d1f8      	bne.n	800ae66 <_strtol_l.constprop.0+0x22>
 800ae74:	2c2d      	cmp	r4, #45	@ 0x2d
 800ae76:	d12d      	bne.n	800aed4 <_strtol_l.constprop.0+0x90>
 800ae78:	782c      	ldrb	r4, [r5, #0]
 800ae7a:	2601      	movs	r6, #1
 800ae7c:	1c95      	adds	r5, r2, #2
 800ae7e:	f033 0210 	bics.w	r2, r3, #16
 800ae82:	d109      	bne.n	800ae98 <_strtol_l.constprop.0+0x54>
 800ae84:	2c30      	cmp	r4, #48	@ 0x30
 800ae86:	d12a      	bne.n	800aede <_strtol_l.constprop.0+0x9a>
 800ae88:	782a      	ldrb	r2, [r5, #0]
 800ae8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ae8e:	2a58      	cmp	r2, #88	@ 0x58
 800ae90:	d125      	bne.n	800aede <_strtol_l.constprop.0+0x9a>
 800ae92:	786c      	ldrb	r4, [r5, #1]
 800ae94:	2310      	movs	r3, #16
 800ae96:	3502      	adds	r5, #2
 800ae98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ae9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aea0:	2200      	movs	r2, #0
 800aea2:	fbbc f9f3 	udiv	r9, ip, r3
 800aea6:	4610      	mov	r0, r2
 800aea8:	fb03 ca19 	mls	sl, r3, r9, ip
 800aeac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aeb0:	2f09      	cmp	r7, #9
 800aeb2:	d81b      	bhi.n	800aeec <_strtol_l.constprop.0+0xa8>
 800aeb4:	463c      	mov	r4, r7
 800aeb6:	42a3      	cmp	r3, r4
 800aeb8:	dd27      	ble.n	800af0a <_strtol_l.constprop.0+0xc6>
 800aeba:	1c57      	adds	r7, r2, #1
 800aebc:	d007      	beq.n	800aece <_strtol_l.constprop.0+0x8a>
 800aebe:	4581      	cmp	r9, r0
 800aec0:	d320      	bcc.n	800af04 <_strtol_l.constprop.0+0xc0>
 800aec2:	d101      	bne.n	800aec8 <_strtol_l.constprop.0+0x84>
 800aec4:	45a2      	cmp	sl, r4
 800aec6:	db1d      	blt.n	800af04 <_strtol_l.constprop.0+0xc0>
 800aec8:	fb00 4003 	mla	r0, r0, r3, r4
 800aecc:	2201      	movs	r2, #1
 800aece:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aed2:	e7eb      	b.n	800aeac <_strtol_l.constprop.0+0x68>
 800aed4:	2c2b      	cmp	r4, #43	@ 0x2b
 800aed6:	bf04      	itt	eq
 800aed8:	782c      	ldrbeq	r4, [r5, #0]
 800aeda:	1c95      	addeq	r5, r2, #2
 800aedc:	e7cf      	b.n	800ae7e <_strtol_l.constprop.0+0x3a>
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1da      	bne.n	800ae98 <_strtol_l.constprop.0+0x54>
 800aee2:	2c30      	cmp	r4, #48	@ 0x30
 800aee4:	bf0c      	ite	eq
 800aee6:	2308      	moveq	r3, #8
 800aee8:	230a      	movne	r3, #10
 800aeea:	e7d5      	b.n	800ae98 <_strtol_l.constprop.0+0x54>
 800aeec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aef0:	2f19      	cmp	r7, #25
 800aef2:	d801      	bhi.n	800aef8 <_strtol_l.constprop.0+0xb4>
 800aef4:	3c37      	subs	r4, #55	@ 0x37
 800aef6:	e7de      	b.n	800aeb6 <_strtol_l.constprop.0+0x72>
 800aef8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aefc:	2f19      	cmp	r7, #25
 800aefe:	d804      	bhi.n	800af0a <_strtol_l.constprop.0+0xc6>
 800af00:	3c57      	subs	r4, #87	@ 0x57
 800af02:	e7d8      	b.n	800aeb6 <_strtol_l.constprop.0+0x72>
 800af04:	f04f 32ff 	mov.w	r2, #4294967295
 800af08:	e7e1      	b.n	800aece <_strtol_l.constprop.0+0x8a>
 800af0a:	1c53      	adds	r3, r2, #1
 800af0c:	d108      	bne.n	800af20 <_strtol_l.constprop.0+0xdc>
 800af0e:	2322      	movs	r3, #34	@ 0x22
 800af10:	f8ce 3000 	str.w	r3, [lr]
 800af14:	4660      	mov	r0, ip
 800af16:	f1b8 0f00 	cmp.w	r8, #0
 800af1a:	d0a0      	beq.n	800ae5e <_strtol_l.constprop.0+0x1a>
 800af1c:	1e69      	subs	r1, r5, #1
 800af1e:	e006      	b.n	800af2e <_strtol_l.constprop.0+0xea>
 800af20:	b106      	cbz	r6, 800af24 <_strtol_l.constprop.0+0xe0>
 800af22:	4240      	negs	r0, r0
 800af24:	f1b8 0f00 	cmp.w	r8, #0
 800af28:	d099      	beq.n	800ae5e <_strtol_l.constprop.0+0x1a>
 800af2a:	2a00      	cmp	r2, #0
 800af2c:	d1f6      	bne.n	800af1c <_strtol_l.constprop.0+0xd8>
 800af2e:	f8c8 1000 	str.w	r1, [r8]
 800af32:	e794      	b.n	800ae5e <_strtol_l.constprop.0+0x1a>
 800af34:	0800b23d 	.word	0x0800b23d

0800af38 <strtol>:
 800af38:	4613      	mov	r3, r2
 800af3a:	460a      	mov	r2, r1
 800af3c:	4601      	mov	r1, r0
 800af3e:	4802      	ldr	r0, [pc, #8]	@ (800af48 <strtol+0x10>)
 800af40:	6800      	ldr	r0, [r0, #0]
 800af42:	f7ff bf7f 	b.w	800ae44 <_strtol_l.constprop.0>
 800af46:	bf00      	nop
 800af48:	20000010 	.word	0x20000010

0800af4c <memset>:
 800af4c:	4402      	add	r2, r0
 800af4e:	4603      	mov	r3, r0
 800af50:	4293      	cmp	r3, r2
 800af52:	d100      	bne.n	800af56 <memset+0xa>
 800af54:	4770      	bx	lr
 800af56:	f803 1b01 	strb.w	r1, [r3], #1
 800af5a:	e7f9      	b.n	800af50 <memset+0x4>

0800af5c <strncmp>:
 800af5c:	b510      	push	{r4, lr}
 800af5e:	b16a      	cbz	r2, 800af7c <strncmp+0x20>
 800af60:	3901      	subs	r1, #1
 800af62:	1884      	adds	r4, r0, r2
 800af64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d103      	bne.n	800af78 <strncmp+0x1c>
 800af70:	42a0      	cmp	r0, r4
 800af72:	d001      	beq.n	800af78 <strncmp+0x1c>
 800af74:	2a00      	cmp	r2, #0
 800af76:	d1f5      	bne.n	800af64 <strncmp+0x8>
 800af78:	1ad0      	subs	r0, r2, r3
 800af7a:	bd10      	pop	{r4, pc}
 800af7c:	4610      	mov	r0, r2
 800af7e:	e7fc      	b.n	800af7a <strncmp+0x1e>

0800af80 <__errno>:
 800af80:	4b01      	ldr	r3, [pc, #4]	@ (800af88 <__errno+0x8>)
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	20000010 	.word	0x20000010

0800af8c <__libc_init_array>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	4d0d      	ldr	r5, [pc, #52]	@ (800afc4 <__libc_init_array+0x38>)
 800af90:	4c0d      	ldr	r4, [pc, #52]	@ (800afc8 <__libc_init_array+0x3c>)
 800af92:	1b64      	subs	r4, r4, r5
 800af94:	10a4      	asrs	r4, r4, #2
 800af96:	2600      	movs	r6, #0
 800af98:	42a6      	cmp	r6, r4
 800af9a:	d109      	bne.n	800afb0 <__libc_init_array+0x24>
 800af9c:	4d0b      	ldr	r5, [pc, #44]	@ (800afcc <__libc_init_array+0x40>)
 800af9e:	4c0c      	ldr	r4, [pc, #48]	@ (800afd0 <__libc_init_array+0x44>)
 800afa0:	f000 f826 	bl	800aff0 <_init>
 800afa4:	1b64      	subs	r4, r4, r5
 800afa6:	10a4      	asrs	r4, r4, #2
 800afa8:	2600      	movs	r6, #0
 800afaa:	42a6      	cmp	r6, r4
 800afac:	d105      	bne.n	800afba <__libc_init_array+0x2e>
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb4:	4798      	blx	r3
 800afb6:	3601      	adds	r6, #1
 800afb8:	e7ee      	b.n	800af98 <__libc_init_array+0xc>
 800afba:	f855 3b04 	ldr.w	r3, [r5], #4
 800afbe:	4798      	blx	r3
 800afc0:	3601      	adds	r6, #1
 800afc2:	e7f2      	b.n	800afaa <__libc_init_array+0x1e>
 800afc4:	0800b348 	.word	0x0800b348
 800afc8:	0800b348 	.word	0x0800b348
 800afcc:	0800b348 	.word	0x0800b348
 800afd0:	0800b34c 	.word	0x0800b34c

0800afd4 <memcpy>:
 800afd4:	440a      	add	r2, r1
 800afd6:	4291      	cmp	r1, r2
 800afd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800afdc:	d100      	bne.n	800afe0 <memcpy+0xc>
 800afde:	4770      	bx	lr
 800afe0:	b510      	push	{r4, lr}
 800afe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afea:	4291      	cmp	r1, r2
 800afec:	d1f9      	bne.n	800afe2 <memcpy+0xe>
 800afee:	bd10      	pop	{r4, pc}

0800aff0 <_init>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr

0800affc <_fini>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	bf00      	nop
 800b000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b002:	bc08      	pop	{r3}
 800b004:	469e      	mov	lr, r3
 800b006:	4770      	bx	lr
