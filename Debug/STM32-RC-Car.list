
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a980  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  0800ab80  0800ab80  0000bb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae6c  0800ae6c  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae6c  0800ae6c  0000be6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae74  0800ae74  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae74  0800ae74  0000be74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae78  0800ae78  0000be78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800ae7c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005470  20000060  0800aedc  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054d0  0800aedc  0000c4d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223e7  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d4a  00000000  00000000  0002e475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000159c  00000000  00000000  00034d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bed8  00000000  00000000  00036334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023121  00000000  00000000  0006220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001092ff  00000000  00000000  0008532d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e62c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000766c  00000000  00000000  0018e670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00195cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ab68 	.word	0x0800ab68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800ab68 	.word	0x0800ab68

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <MX_DMA_Init+0x48>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a0f      	ldr	r2, [pc, #60]	@ (800059c <MX_DMA_Init+0x48>)
 8000560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <MX_DMA_Init+0x48>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2010      	movs	r0, #16
 8000578:	f001 ff25 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800057c:	2010      	movs	r0, #16
 800057e:	f001 ff3e 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	2011      	movs	r0, #17
 8000588:	f001 ff1d 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800058c:	2011      	movs	r0, #17
 800058e:	f001 ff36 	bl	80023fe <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	//defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <MX_FREERTOS_Init+0x18>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4804      	ldr	r0, [pc, #16]	@ (80005bc <MX_FREERTOS_Init+0x1c>)
 80005aa:	f007 fc0d 	bl	8007dc8 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a03      	ldr	r2, [pc, #12]	@ (80005c0 <MX_FREERTOS_Init+0x20>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	0800ad24 	.word	0x0800ad24
 80005bc:	08000e09 	.word	0x08000e09
 80005c0:	2000007c 	.word	0x2000007c

080005c4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	@ 0x30
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b77      	ldr	r3, [pc, #476]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a76      	ldr	r2, [pc, #472]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b74      	ldr	r3, [pc, #464]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	61bb      	str	r3, [r7, #24]
 80005f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	4b71      	ldr	r3, [pc, #452]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a70      	ldr	r2, [pc, #448]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b6e      	ldr	r3, [pc, #440]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b6b      	ldr	r3, [pc, #428]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a6a      	ldr	r2, [pc, #424]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b68      	ldr	r3, [pc, #416]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b65      	ldr	r3, [pc, #404]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a64      	ldr	r2, [pc, #400]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b62      	ldr	r3, [pc, #392]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063a:	4b5f      	ldr	r3, [pc, #380]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a5e      	ldr	r2, [pc, #376]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b5c      	ldr	r3, [pc, #368]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b59      	ldr	r3, [pc, #356]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a58      	ldr	r2, [pc, #352]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b56      	ldr	r3, [pc, #344]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b53      	ldr	r3, [pc, #332]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a52      	ldr	r2, [pc, #328]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b50      	ldr	r3, [pc, #320]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000688:	484c      	ldr	r0, [pc, #304]	@ (80007bc <MX_GPIO_Init+0x1f8>)
 800068a:	f002 fc95 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2141      	movs	r1, #65	@ 0x41
 8000692:	484b      	ldr	r0, [pc, #300]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 8000694:	f002 fc90 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4849      	ldr	r0, [pc, #292]	@ (80007c4 <MX_GPIO_Init+0x200>)
 800069e:	f002 fc8b 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4843      	ldr	r0, [pc, #268]	@ (80007c8 <MX_GPIO_Init+0x204>)
 80006ba:	f002 fad1 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006be:	2332      	movs	r3, #50	@ 0x32
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ce:	230b      	movs	r3, #11
 80006d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	483b      	ldr	r0, [pc, #236]	@ (80007c8 <MX_GPIO_Init+0x204>)
 80006da:	f002 fac1 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006de:	2386      	movs	r3, #134	@ 0x86
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ee:	230b      	movs	r3, #11
 80006f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4834      	ldr	r0, [pc, #208]	@ (80007cc <MX_GPIO_Init+0x208>)
 80006fa:	f002 fab1 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006fe:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4829      	ldr	r0, [pc, #164]	@ (80007bc <MX_GPIO_Init+0x1f8>)
 8000718:	f002 faa2 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 800071c:	2341      	movs	r3, #65	@ 0x41
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4823      	ldr	r0, [pc, #140]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 8000734:	f002 fa94 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074a:	230b      	movs	r3, #11
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4819      	ldr	r0, [pc, #100]	@ (80007bc <MX_GPIO_Init+0x1f8>)
 8000756:	f002 fa83 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4814      	ldr	r0, [pc, #80]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 800076e:	f002 fa77 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000772:	2310      	movs	r3, #16
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <MX_GPIO_Init+0x200>)
 800078a:	f002 fa69 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800078e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 80007ac:	f002 fa58 	bl	8002c60 <HAL_GPIO_Init>

}
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	@ 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020400 	.word	0x40020400
 80007c0:	40021800 	.word	0x40021800
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40020000 	.word	0x40020000

080007d0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <HAL_UARTEx_RxEventCallback+0x28>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d104      	bne.n	80007f0 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&HC05, Size);
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	@ (80007fc <HAL_UARTEx_RxEventCallback+0x2c>)
 80007ec:	f00a f87e 	bl	800a8ec <ATC_IdleLineCallback>
	}
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40004400 	.word	0x40004400
 80007fc:	20000080 	.word	0x20000080

08000800 <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8000800:	b480      	push	{r7}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6178      	str	r0, [r7, #20]
 8000808:	ed87 0a04 	vstr	s0, [r7, #16]
 800080c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000810:	ed87 1a02 	vstr	s2, [r7, #8]
 8000814:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	68ba      	ldr	r2, [r7, #8]
 8000832:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	615a      	str	r2, [r3, #20]
}
 800083a:	bf00      	nop
 800083c:	371c      	adds	r7, #28
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <pid_reset>:

void pid_reset(PID *pid_data)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 8000866:	b480      	push	{r7}
 8000868:	b089      	sub	sp, #36	@ 0x24
 800086a:	af00      	add	r7, sp, #0
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	441a      	add	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	ed93 7a02 	vldr	s14, [r3, #8]
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	ee07 3a90 	vmov	s15, r3
 8000892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800089a:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008b4:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d2:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	ee07 3a90 	vmov	s15, r3
 80008de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80008e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ee:	db08      	blt.n	8000902 <pid_calculate+0x9c>
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fc:	edc7 7a07 	vstr	s15, [r7, #28]
 8000900:	e016      	b.n	8000930 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	425b      	negs	r3, r3
 8000908:	ee07 3a90 	vmov	s15, r3
 800090c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000910:	ed97 7a07 	vldr	s14, [r7, #28]
 8000914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091c:	d808      	bhi.n	8000930 <pid_calculate+0xca>
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	425b      	negs	r3, r3
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092c:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8000936:	ed97 7a05 	vldr	s14, [r7, #20]
 800093a:	edd7 7a07 	vldr	s15, [r7, #28]
 800093e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000942:	edd7 7a04 	vldr	s15, [r7, #16]
 8000946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800094a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800094e:	ee17 3a90 	vmov	r3, s15
}
 8000952:	4618      	mov	r0, r3
 8000954:	3724      	adds	r7, #36	@ 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000974:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 f82a 	bl	80009fc <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80009b0:	fb02 f303 	mul.w	r3, r2, r3
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	8892      	ldrh	r2, [r2, #4]
 80009b8:	fb93 f2f2 	sdiv	r2, r3, r2
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f103 0018 	add.w	r0, r3, #24
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6919      	ldr	r1, [r3, #16]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	461a      	mov	r2, r3
 80009d0:	f7ff ff49 	bl	8000866 <pid_calculate>
 80009d4:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	441a      	add	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db04      	blt.n	80009f4 <motor_calculate_speed+0x5a>
	{
		drv8835_set_motorA_speed(m->actual_PWM);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f832 	bl	8000a58 <drv8835_set_motorA_speed>

	}

}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d004      	beq.n	8000a48 <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3318      	adds	r3, #24
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff feff 	bl	8000846 <pid_reset>

	m->set_speed = set_speed;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	611a      	str	r2, [r3, #16]
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000a62:	88fa      	ldrh	r2, [r7, #6]
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <drv8835_set_motorA_speed+0x34>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d303      	bcc.n	8000a76 <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <drv8835_set_motorA_speed+0x34>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a74:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <drv8835_set_motorA_speed+0x34>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	88fa      	ldrh	r2, [r7, #6]
 8000a7c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000188 	.word	0x20000188

08000a90 <drv8835_init>:

void drv8835_init()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	drv8835_set_motorA_speed(0);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff ffdf 	bl	8000a58 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <drv8835_init+0x18>)
 8000a9e:	f003 feab 	bl	80047f8 <HAL_TIM_PWM_Start>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000188 	.word	0x20000188

08000aac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d102      	bne.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000abe:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ac0:	f7ff ff6b 	bl	800099a <motor_calculate_speed>
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40001000 	.word	0x40001000
 8000ad0:	20000104 	.word	0x20000104

08000ad4 <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d104      	bne.n	8000aec <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4812      	ldr	r0, [pc, #72]	@ (8000b30 <Set_PWM_Frequency+0x5c>)
 8000ae6:	f003 ff81 	bl	80049ec <HAL_TIM_PWM_Stop>
        return;
 8000aea:	e01e      	b.n	8000b2a <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <Set_PWM_Frequency+0x60>)
 8000aee:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <Set_PWM_Frequency+0x5c>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	3301      	adds	r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	3b01      	subs	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <Set_PWM_Frequency+0x64>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b12:	4a09      	ldr	r2, [pc, #36]	@ (8000b38 <Set_PWM_Frequency+0x64>)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <Set_PWM_Frequency+0x5c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	0852      	lsrs	r2, r2, #1
 8000b20:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000b22:	2104      	movs	r1, #4
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <Set_PWM_Frequency+0x5c>)
 8000b26:	f003 fe67 	bl	80047f8 <HAL_TIM_PWM_Start>
}
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000350 	.word	0x20000350
 8000b34:	05b8d800 	.word	0x05b8d800
 8000b38:	20000188 	.word	0x20000188

08000b3c <ProcessCommand>:
}

int hornOn = 0;
int engineOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

		if (strcmp((char*)cmd, "CMD0") == 0) {
 8000b44:	4992      	ldr	r1, [pc, #584]	@ (8000d90 <ProcessCommand+0x254>)
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff fb7a 	bl	8000240 <strcmp>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d150      	bne.n	8000bf4 <ProcessCommand+0xb8>
			if (!engineOn) {
 8000b52:	4b90      	ldr	r3, [pc, #576]	@ (8000d94 <ProcessCommand+0x258>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d122      	bne.n	8000ba0 <ProcessCommand+0x64>
				HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000b5a:	213c      	movs	r1, #60	@ 0x3c
 8000b5c:	488e      	ldr	r0, [pc, #568]	@ (8000d98 <ProcessCommand+0x25c>)
 8000b5e:	f004 f86b 	bl	8004c38 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b62:	213c      	movs	r1, #60	@ 0x3c
 8000b64:	488d      	ldr	r0, [pc, #564]	@ (8000d9c <ProcessCommand+0x260>)
 8000b66:	f004 f867 	bl	8004c38 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000b6a:	213c      	movs	r1, #60	@ 0x3c
 8000b6c:	488c      	ldr	r0, [pc, #560]	@ (8000da0 <ProcessCommand+0x264>)
 8000b6e:	f004 f863 	bl	8004c38 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000b72:	213c      	movs	r1, #60	@ 0x3c
 8000b74:	488b      	ldr	r0, [pc, #556]	@ (8000da4 <ProcessCommand+0x268>)
 8000b76:	f004 f85f 	bl	8004c38 <HAL_TIM_Encoder_Start>

				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	488a      	ldr	r0, [pc, #552]	@ (8000da8 <ProcessCommand+0x26c>)
 8000b7e:	f003 fe3b 	bl	80047f8 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b82:	210c      	movs	r1, #12
 8000b84:	4888      	ldr	r0, [pc, #544]	@ (8000da8 <ProcessCommand+0x26c>)
 8000b86:	f003 fe37 	bl	80047f8 <HAL_TIM_PWM_Start>

				HAL_TIM_Base_Start_IT(&htim6);
 8000b8a:	4888      	ldr	r0, [pc, #544]	@ (8000dac <ProcessCommand+0x270>)
 8000b8c:	f003 fd36 	bl	80045fc <HAL_TIM_Base_Start_IT>

				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000b90:	2104      	movs	r1, #4
 8000b92:	4887      	ldr	r0, [pc, #540]	@ (8000db0 <ProcessCommand+0x274>)
 8000b94:	f003 fe30 	bl	80047f8 <HAL_TIM_PWM_Start>
				engineOn = 1;
 8000b98:	4b7e      	ldr	r3, [pc, #504]	@ (8000d94 <ProcessCommand+0x258>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	e021      	b.n	8000be4 <ProcessCommand+0xa8>
			}
			else {
				HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8000ba0:	213c      	movs	r1, #60	@ 0x3c
 8000ba2:	487d      	ldr	r0, [pc, #500]	@ (8000d98 <ProcessCommand+0x25c>)
 8000ba4:	f004 f8d6 	bl	8004d54 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8000ba8:	213c      	movs	r1, #60	@ 0x3c
 8000baa:	487c      	ldr	r0, [pc, #496]	@ (8000d9c <ProcessCommand+0x260>)
 8000bac:	f004 f8d2 	bl	8004d54 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8000bb0:	213c      	movs	r1, #60	@ 0x3c
 8000bb2:	487b      	ldr	r0, [pc, #492]	@ (8000da0 <ProcessCommand+0x264>)
 8000bb4:	f004 f8ce 	bl	8004d54 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim8, TIM_CHANNEL_ALL);
 8000bb8:	213c      	movs	r1, #60	@ 0x3c
 8000bba:	487a      	ldr	r0, [pc, #488]	@ (8000da4 <ProcessCommand+0x268>)
 8000bbc:	f004 f8ca 	bl	8004d54 <HAL_TIM_Encoder_Stop>

				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4879      	ldr	r0, [pc, #484]	@ (8000da8 <ProcessCommand+0x26c>)
 8000bc4:	f003 ff12 	bl	80049ec <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000bc8:	210c      	movs	r1, #12
 8000bca:	4877      	ldr	r0, [pc, #476]	@ (8000da8 <ProcessCommand+0x26c>)
 8000bcc:	f003 ff0e 	bl	80049ec <HAL_TIM_PWM_Stop>

				HAL_TIM_Base_Stop_IT(&htim6);
 8000bd0:	4876      	ldr	r0, [pc, #472]	@ (8000dac <ProcessCommand+0x270>)
 8000bd2:	f003 fd8b 	bl	80046ec <HAL_TIM_Base_Stop_IT>

				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4875      	ldr	r0, [pc, #468]	@ (8000db0 <ProcessCommand+0x274>)
 8000bda:	f003 ff07 	bl	80049ec <HAL_TIM_PWM_Stop>
				engineOn = 0;
 8000bde:	4b6d      	ldr	r3, [pc, #436]	@ (8000d94 <ProcessCommand+0x258>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
			}


			HAL_UART_Transmit(&huart3, (uint8_t*)"ENGINE RUNNING\r\n", 16, HAL_MAX_DELAY);
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	2210      	movs	r2, #16
 8000bea:	4972      	ldr	r1, [pc, #456]	@ (8000db4 <ProcessCommand+0x278>)
 8000bec:	4872      	ldr	r0, [pc, #456]	@ (8000db8 <ProcessCommand+0x27c>)
 8000bee:	f004 ffc5 	bl	8005b7c <HAL_UART_Transmit>
	    }

	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000bf2:	e0c9      	b.n	8000d88 <ProcessCommand+0x24c>
		else if (strcmp((char*)cmd, "CMDA") == 0) {
 8000bf4:	4971      	ldr	r1, [pc, #452]	@ (8000dbc <ProcessCommand+0x280>)
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fb22 	bl	8000240 <strcmp>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10b      	bne.n	8000c1a <ProcessCommand+0xde>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8000c02:	2101      	movs	r1, #1
 8000c04:	486e      	ldr	r0, [pc, #440]	@ (8000dc0 <ProcessCommand+0x284>)
 8000c06:	f002 f9f0 	bl	8002fea <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart3, (uint8_t*)"LIGHTS RUNNING\r\n", 16, HAL_MAX_DELAY);
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	2210      	movs	r2, #16
 8000c10:	496c      	ldr	r1, [pc, #432]	@ (8000dc4 <ProcessCommand+0x288>)
 8000c12:	4869      	ldr	r0, [pc, #420]	@ (8000db8 <ProcessCommand+0x27c>)
 8000c14:	f004 ffb2 	bl	8005b7c <HAL_UART_Transmit>
}
 8000c18:	e0b6      	b.n	8000d88 <ProcessCommand+0x24c>
	    else if (strcmp((char*)cmd, "CMDB") == 0) {
 8000c1a:	496b      	ldr	r1, [pc, #428]	@ (8000dc8 <ProcessCommand+0x28c>)
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fb0f 	bl	8000240 <strcmp>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d119      	bne.n	8000c5c <ProcessCommand+0x120>
	    	if (!hornOn) {
 8000c28:	4b68      	ldr	r3, [pc, #416]	@ (8000dcc <ProcessCommand+0x290>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d107      	bne.n	8000c40 <ProcessCommand+0x104>
		    	Set_PWM_Frequency(1000);
 8000c30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c34:	f7ff ff4e 	bl	8000ad4 <Set_PWM_Frequency>
		    	hornOn = 1;
 8000c38:	4b64      	ldr	r3, [pc, #400]	@ (8000dcc <ProcessCommand+0x290>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e005      	b.n	8000c4c <ProcessCommand+0x110>
	    		Set_PWM_Frequency(0);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff ff47 	bl	8000ad4 <Set_PWM_Frequency>
	    		hornOn = 0;
 8000c46:	4b61      	ldr	r3, [pc, #388]	@ (8000dcc <ProcessCommand+0x290>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"HORN RUNNING\r\n", 14, HAL_MAX_DELAY);
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	220e      	movs	r2, #14
 8000c52:	495f      	ldr	r1, [pc, #380]	@ (8000dd0 <ProcessCommand+0x294>)
 8000c54:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <ProcessCommand+0x27c>)
 8000c56:	f004 ff91 	bl	8005b7c <HAL_UART_Transmit>
}
 8000c5a:	e095      	b.n	8000d88 <ProcessCommand+0x24c>
	    else if (strncmp((char*)cmd, "CMD", 3) == 0) {
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	495d      	ldr	r1, [pc, #372]	@ (8000dd4 <ProcessCommand+0x298>)
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f009 ff37 	bl	800aad4 <strncmp>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f040 8086 	bne.w	8000d7a <ProcessCommand+0x23e>
	        char* modeStr = (char*)cmd + 3;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3303      	adds	r3, #3
 8000c72:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f009 fe9d 	bl	800a9b4 <atoi>
 8000c7a:	60b8      	str	r0, [r7, #8]
	        if (mode >= 1 && mode <= 9) {
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dd73      	ble.n	8000d6a <ProcessCommand+0x22e>
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b09      	cmp	r3, #9
 8000c86:	dc70      	bgt.n	8000d6a <ProcessCommand+0x22e>
	            switch (mode) {
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	2b08      	cmp	r3, #8
 8000c8e:	d869      	bhi.n	8000d64 <ProcessCommand+0x228>
 8000c90:	a201      	add	r2, pc, #4	@ (adr r2, 8000c98 <ProcessCommand+0x15c>)
 8000c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c96:	bf00      	nop
 8000c98:	08000cbd 	.word	0x08000cbd
 8000c9c:	08000cd5 	.word	0x08000cd5
 8000ca0:	08000ced 	.word	0x08000ced
 8000ca4:	08000d05 	.word	0x08000d05
 8000ca8:	08000d15 	.word	0x08000d15
 8000cac:	08000d25 	.word	0x08000d25
 8000cb0:	08000d35 	.word	0x08000d35
 8000cb4:	08000d45 	.word	0x08000d45
 8000cb8:	08000d55 	.word	0x08000d55
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	2212      	movs	r2, #18
 8000cc2:	4945      	ldr	r1, [pc, #276]	@ (8000dd8 <ProcessCommand+0x29c>)
 8000cc4:	483c      	ldr	r0, [pc, #240]	@ (8000db8 <ProcessCommand+0x27c>)
 8000cc6:	f004 ff59 	bl	8005b7c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4843      	ldr	r0, [pc, #268]	@ (8000ddc <ProcessCommand+0x2a0>)
 8000cce:	f7ff feac 	bl	8000a2a <motor_set_speed>
	                    break;
 8000cd2:	e048      	b.n	8000d66 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	2212      	movs	r2, #18
 8000cda:	4941      	ldr	r1, [pc, #260]	@ (8000de0 <ProcessCommand+0x2a4>)
 8000cdc:	4836      	ldr	r0, [pc, #216]	@ (8000db8 <ProcessCommand+0x27c>)
 8000cde:	f004 ff4d 	bl	8005b7c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 100);
 8000ce2:	2164      	movs	r1, #100	@ 0x64
 8000ce4:	483d      	ldr	r0, [pc, #244]	@ (8000ddc <ProcessCommand+0x2a0>)
 8000ce6:	f7ff fea0 	bl	8000a2a <motor_set_speed>
	                    break;
 8000cea:	e03c      	b.n	8000d66 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	2212      	movs	r2, #18
 8000cf2:	493c      	ldr	r1, [pc, #240]	@ (8000de4 <ProcessCommand+0x2a8>)
 8000cf4:	4830      	ldr	r0, [pc, #192]	@ (8000db8 <ProcessCommand+0x27c>)
 8000cf6:	f004 ff41 	bl	8005b7c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 75);
 8000cfa:	214b      	movs	r1, #75	@ 0x4b
 8000cfc:	4837      	ldr	r0, [pc, #220]	@ (8000ddc <ProcessCommand+0x2a0>)
 8000cfe:	f7ff fe94 	bl	8000a2a <motor_set_speed>
	                    break;
 8000d02:	e030      	b.n	8000d66 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	2212      	movs	r2, #18
 8000d0a:	4937      	ldr	r1, [pc, #220]	@ (8000de8 <ProcessCommand+0x2ac>)
 8000d0c:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <ProcessCommand+0x27c>)
 8000d0e:	f004 ff35 	bl	8005b7c <HAL_UART_Transmit>
	                    break;
 8000d12:	e028      	b.n	8000d66 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	2212      	movs	r2, #18
 8000d1a:	4934      	ldr	r1, [pc, #208]	@ (8000dec <ProcessCommand+0x2b0>)
 8000d1c:	4826      	ldr	r0, [pc, #152]	@ (8000db8 <ProcessCommand+0x27c>)
 8000d1e:	f004 ff2d 	bl	8005b7c <HAL_UART_Transmit>
	                    break;
 8000d22:	e020      	b.n	8000d66 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	2212      	movs	r2, #18
 8000d2a:	4931      	ldr	r1, [pc, #196]	@ (8000df0 <ProcessCommand+0x2b4>)
 8000d2c:	4822      	ldr	r0, [pc, #136]	@ (8000db8 <ProcessCommand+0x27c>)
 8000d2e:	f004 ff25 	bl	8005b7c <HAL_UART_Transmit>
	                    break;
 8000d32:	e018      	b.n	8000d66 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	2212      	movs	r2, #18
 8000d3a:	492e      	ldr	r1, [pc, #184]	@ (8000df4 <ProcessCommand+0x2b8>)
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <ProcessCommand+0x27c>)
 8000d3e:	f004 ff1d 	bl	8005b7c <HAL_UART_Transmit>
	                    break;
 8000d42:	e010      	b.n	8000d66 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
 8000d48:	2212      	movs	r2, #18
 8000d4a:	492b      	ldr	r1, [pc, #172]	@ (8000df8 <ProcessCommand+0x2bc>)
 8000d4c:	481a      	ldr	r0, [pc, #104]	@ (8000db8 <ProcessCommand+0x27c>)
 8000d4e:	f004 ff15 	bl	8005b7c <HAL_UART_Transmit>
	                    break;
 8000d52:	e008      	b.n	8000d66 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	2212      	movs	r2, #18
 8000d5a:	4928      	ldr	r1, [pc, #160]	@ (8000dfc <ProcessCommand+0x2c0>)
 8000d5c:	4816      	ldr	r0, [pc, #88]	@ (8000db8 <ProcessCommand+0x27c>)
 8000d5e:	f004 ff0d 	bl	8005b7c <HAL_UART_Transmit>
	                    break;
 8000d62:	e000      	b.n	8000d66 <ProcessCommand+0x22a>
	                    break;
 8000d64:	bf00      	nop
	            switch (mode) {
 8000d66:	bf00      	nop
}
 8000d68:	e00e      	b.n	8000d88 <ProcessCommand+0x24c>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	2215      	movs	r2, #21
 8000d70:	4923      	ldr	r1, [pc, #140]	@ (8000e00 <ProcessCommand+0x2c4>)
 8000d72:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <ProcessCommand+0x27c>)
 8000d74:	f004 ff02 	bl	8005b7c <HAL_UART_Transmit>
}
 8000d78:	e006      	b.n	8000d88 <ProcessCommand+0x24c>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	2211      	movs	r2, #17
 8000d80:	4920      	ldr	r1, [pc, #128]	@ (8000e04 <ProcessCommand+0x2c8>)
 8000d82:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <ProcessCommand+0x27c>)
 8000d84:	f004 fefa 	bl	8005b7c <HAL_UART_Transmit>
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	0800abac 	.word	0x0800abac
 8000d94:	20000138 	.word	0x20000138
 8000d98:	2000013c 	.word	0x2000013c
 8000d9c:	200001d4 	.word	0x200001d4
 8000da0:	20000220 	.word	0x20000220
 8000da4:	20000304 	.word	0x20000304
 8000da8:	20000188 	.word	0x20000188
 8000dac:	200002b8 	.word	0x200002b8
 8000db0:	20000350 	.word	0x20000350
 8000db4:	0800abb4 	.word	0x0800abb4
 8000db8:	20000424 	.word	0x20000424
 8000dbc:	0800abc8 	.word	0x0800abc8
 8000dc0:	40021800 	.word	0x40021800
 8000dc4:	0800abd0 	.word	0x0800abd0
 8000dc8:	0800abe4 	.word	0x0800abe4
 8000dcc:	20000134 	.word	0x20000134
 8000dd0:	0800abec 	.word	0x0800abec
 8000dd4:	0800abfc 	.word	0x0800abfc
 8000dd8:	0800ac00 	.word	0x0800ac00
 8000ddc:	20000104 	.word	0x20000104
 8000de0:	0800ac14 	.word	0x0800ac14
 8000de4:	0800ac28 	.word	0x0800ac28
 8000de8:	0800ac3c 	.word	0x0800ac3c
 8000dec:	0800ac50 	.word	0x0800ac50
 8000df0:	0800ac64 	.word	0x0800ac64
 8000df4:	0800ac78 	.word	0x0800ac78
 8000df8:	0800ac8c 	.word	0x0800ac8c
 8000dfc:	0800aca0 	.word	0x0800aca0
 8000e00:	0800acb4 	.word	0x0800acb4
 8000e04:	0800accc 	.word	0x0800accc

08000e08 <ProcessHeartBeat>:
	        ATC_Loop(&HC05);
	        osDelay(50);
	    }
}

void ProcessHeartBeat(void* argument) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	@ 0x38
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
    char heartbeatMessage[32];
    const uint8_t channel = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    const int timeout = 5000;
 8000e16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    int lastSpeed = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            printf("Błąd komendy AT+CIPSEND\n");
        }

        ATC_Loop(&HC05);*/

        osDelay(500);
 8000e20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e24:	f007 f876 	bl	8007f14 <osDelay>
 8000e28:	e7fa      	b.n	8000e20 <ProcessHeartBeat+0x18>
	...

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e32:	f001 f96c 	bl	800210e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e36:	f000 f855 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3a:	f7ff fbc3 	bl	80005c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e3e:	f7ff fb89 	bl	8000554 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e42:	f000 ff4b 	bl	8001cdc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e46:	f001 f891 	bl	8001f6c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000e4a:	f000 ff17 	bl	8001c7c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e4e:	f000 fa03 	bl	8001258 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e52:	f000 fabf 	bl	80013d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e56:	f000 fb13 	bl	8001480 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e5a:	f000 fc05 	bl	8001668 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000e5e:	f000 fa55 	bl	800130c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e62:	f000 fbc9 	bl	80015f8 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000e66:	f000 fb61 	bl	800152c <MX_TIM5_Init>
  MX_TIM12_Init();
 8000e6a:	f000 fc57 	bl	800171c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <main+0x98>)
 8000e70:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff f9ee 	bl	8000254 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4811      	ldr	r0, [pc, #68]	@ (8000ec8 <main+0x9c>)
 8000e84:	f004 fe7a 	bl	8005b7c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4910      	ldr	r1, [pc, #64]	@ (8000ecc <main+0xa0>)
 8000e8c:	4810      	ldr	r0, [pc, #64]	@ (8000ed0 <main+0xa4>)
 8000e8e:	f004 fefe 	bl	8005c8e <HAL_UART_Receive_IT>

  drv8835_init();
 8000e92:	f7ff fdfd 	bl	8000a90 <drv8835_init>
  motor_init(&motorA, &htim4);
 8000e96:	490f      	ldr	r1, [pc, #60]	@ (8000ed4 <main+0xa8>)
 8000e98:	480f      	ldr	r0, [pc, #60]	@ (8000ed8 <main+0xac>)
 8000e9a:	f7ff fd60 	bl	800095e <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000edc <main+0xb0>
 8000ea4:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000edc <main+0xb0>
 8000ea8:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <main+0xb4>)
 8000eae:	f7ff fca7 	bl	8000800 <pid_init>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eb2:	f006 ff1f 	bl	8007cf4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000eb6:	f7ff fb73 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000eba:	f006 ff4f 	bl	8007d5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ebe:	bf00      	nop
 8000ec0:	e7fd      	b.n	8000ebe <main+0x92>
 8000ec2:	bf00      	nop
 8000ec4:	0800ace0 	.word	0x0800ace0
 8000ec8:	20000424 	.word	0x20000424
 8000ecc:	200000bc 	.word	0x200000bc
 8000ed0:	2000039c 	.word	0x2000039c
 8000ed4:	20000220 	.word	0x20000220
 8000ed8:	20000104 	.word	0x20000104
 8000edc:	3d4ccccd 	.word	0x3d4ccccd
 8000ee0:	2000011c 	.word	0x2000011c

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b094      	sub	sp, #80	@ 0x50
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2234      	movs	r2, #52	@ 0x34
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f009 fde6 	bl	800aac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f08:	f002 f9c4 	bl	8003294 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <SystemClock_Config+0xdc>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <SystemClock_Config+0xdc>)
 8000f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f18:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <SystemClock_Config+0xdc>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f24:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <SystemClock_Config+0xe0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f2c:	4a25      	ldr	r2, [pc, #148]	@ (8000fc4 <SystemClock_Config+0xe0>)
 8000f2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <SystemClock_Config+0xe0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f44:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f54:	2304      	movs	r3, #4
 8000f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f58:	2360      	movs	r3, #96	@ 0x60
 8000f5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f60:	2304      	movs	r3, #4
 8000f62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 f9f1 	bl	8003354 <HAL_RCC_OscConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f78:	f000 f858 	bl	800102c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f7c:	f002 f99a 	bl	80032b4 <HAL_PWREx_EnableOverDrive>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f86:	f000 f851 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	2103      	movs	r1, #3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 fc82 	bl	80038b0 <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000fb2:	f000 f83b 	bl	800102c <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3750      	adds	r7, #80	@ 0x50
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40007000 	.word	0x40007000

08000fc8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <HAL_UART_RxCpltCallback+0x50>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d119      	bne.n	800100e <HAL_UART_RxCpltCallback+0x46>
		//HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	490f      	ldr	r1, [pc, #60]	@ (800101c <HAL_UART_RxCpltCallback+0x54>)
 8000fde:	4810      	ldr	r0, [pc, #64]	@ (8001020 <HAL_UART_RxCpltCallback+0x58>)
 8000fe0:	f004 fe55 	bl	8005c8e <HAL_UART_Receive_IT>
		rxBuff[rxIdx++] = rxData[0];
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_UART_RxCpltCallback+0x5c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	b2d1      	uxtb	r1, r2
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <HAL_UART_RxCpltCallback+0x5c>)
 8000fee:	7011      	strb	r1, [r2, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_UART_RxCpltCallback+0x54>)
 8000ff4:	7819      	ldrb	r1, [r3, #0]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <HAL_UART_RxCpltCallback+0x60>)
 8000ff8:	5499      	strb	r1, [r3, r2]

		if (rxIdx == 4) {
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_UART_RxCpltCallback+0x5c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d105      	bne.n	800100e <HAL_UART_RxCpltCallback+0x46>
			//HAL_UART_Transmit(&huart3, rxBuff, rxIdx, HAL_MAX_DELAY);
			ProcessCommand(rxBuff);
 8001002:	4809      	ldr	r0, [pc, #36]	@ (8001028 <HAL_UART_RxCpltCallback+0x60>)
 8001004:	f7ff fd9a 	bl	8000b3c <ProcessCommand>
			rxIdx = 0;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_UART_RxCpltCallback+0x5c>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40004400 	.word	0x40004400
 800101c:	200000bc 	.word	0x200000bc
 8001020:	2000039c 	.word	0x2000039c
 8001024:	20000100 	.word	0x20000100
 8001028:	200000c0 	.word	0x200000c0

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <Error_Handler+0x8>

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a10      	ldr	r2, [pc, #64]	@ (8001084 <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_MspInit+0x4c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	6453      	str	r3, [r2, #68]	@ 0x44
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	210f      	movs	r1, #15
 8001072:	f06f 0001 	mvn.w	r0, #1
 8001076:	f001 f9a6 	bl	80023c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <NMI_Handler+0x4>

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <MemManage_Handler+0x4>

080010a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <UsageFault_Handler+0x4>

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c2:	f001 f861 	bl	8002188 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010c6:	f008 fb9f 	bl	8009808 <xTaskGetSchedulerState>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d001      	beq.n	80010d4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010d0:	f009 f98a 	bl	800a3e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <DMA1_Stream5_IRQHandler+0x10>)
 80010de:	f001 fb49 	bl	8002774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200004ac 	.word	0x200004ac

080010ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <DMA1_Stream6_IRQHandler+0x10>)
 80010f2:	f001 fb3f 	bl	8002774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000050c 	.word	0x2000050c

08001100 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001106:	f003 fecc 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000013c 	.word	0x2000013c

08001114 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800111a:	f003 fec2 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000013c 	.word	0x2000013c

08001128 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800112e:	f003 feb8 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000013c 	.word	0x2000013c

0800113c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <TIM1_CC_IRQHandler+0x10>)
 8001142:	f003 feae 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000013c 	.word	0x2000013c

08001150 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <TIM2_IRQHandler+0x10>)
 8001156:	f003 fea4 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000188 	.word	0x20000188

08001164 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <TIM3_IRQHandler+0x10>)
 800116a:	f003 fe9a 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001d4 	.word	0x200001d4

08001178 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <TIM4_IRQHandler+0x10>)
 800117e:	f003 fe90 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000220 	.word	0x20000220

0800118c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <USART2_IRQHandler+0x10>)
 8001192:	f004 fe6f 	bl	8005e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000039c 	.word	0x2000039c

080011a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <USART3_IRQHandler+0x10>)
 80011a6:	f004 fe65 	bl	8005e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000424 	.word	0x20000424

080011b4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80011ba:	f003 fe72 	bl	8004ea2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80011c0:	f003 fe6f 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000304 	.word	0x20000304
 80011cc:	20000350 	.word	0x20000350

080011d0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80011d6:	f003 fe64 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000304 	.word	0x20000304

080011e4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80011ea:	f003 fe5a 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000304 	.word	0x20000304

080011f8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <TIM8_CC_IRQHandler+0x10>)
 80011fe:	f003 fe50 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000304 	.word	0x20000304

0800120c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM5_IRQHandler+0x10>)
 8001212:	f003 fe46 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000026c 	.word	0x2000026c

08001220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <TIM6_DAC_IRQHandler+0x10>)
 8001226:	f003 fe3c 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200002b8 	.word	0x200002b8

08001234 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	@ 0x30
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2224      	movs	r2, #36	@ 0x24
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f009 fc2c 	bl	800aac4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001276:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <MX_TIM1_Init+0xac>)
 8001278:	4a23      	ldr	r2, [pc, #140]	@ (8001308 <MX_TIM1_Init+0xb0>)
 800127a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800127c:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <MX_TIM1_Init+0xac>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <MX_TIM1_Init+0xac>)
 8001284:	2210      	movs	r2, #16
 8001286:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001288:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <MX_TIM1_Init+0xac>)
 800128a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <MX_TIM1_Init+0xac>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001296:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <MX_TIM1_Init+0xac>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <MX_TIM1_Init+0xac>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a2:	2303      	movs	r3, #3
 80012a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012aa:	2301      	movs	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80012b2:	230f      	movs	r3, #15
 80012b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ba:	2301      	movs	r3, #1
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80012c2:	230f      	movs	r3, #15
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	480d      	ldr	r0, [pc, #52]	@ (8001304 <MX_TIM1_Init+0xac>)
 80012ce:	f003 fc0d 	bl	8004aec <HAL_TIM_Encoder_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012d8:	f7ff fea8 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_TIM1_Init+0xac>)
 80012ee:	f004 fb4b 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012f8:	f7ff fe98 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3730      	adds	r7, #48	@ 0x30
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000013c 	.word	0x2000013c
 8001308:	40010000 	.word	0x40010000

0800130c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001330:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 8001332:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001338:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 800133a:	222f      	movs	r2, #47	@ 0x2f
 800133c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001344:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 8001346:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800134a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001358:	481d      	ldr	r0, [pc, #116]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 800135a:	f003 f9f6 	bl	800474a <HAL_TIM_PWM_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001364:	f7ff fe62 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4816      	ldr	r0, [pc, #88]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 8001378:	f004 fb06 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001382:	f7ff fe53 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001386:	2360      	movs	r3, #96	@ 0x60
 8001388:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 800139e:	f003 fe87 	bl	80050b0 <HAL_TIM_PWM_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80013a8:	f7ff fe40 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	220c      	movs	r2, #12
 80013b0:	4619      	mov	r1, r3
 80013b2:	4807      	ldr	r0, [pc, #28]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 80013b4:	f003 fe7c 	bl	80050b0 <HAL_TIM_PWM_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80013be:	f7ff fe35 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013c2:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <MX_TIM2_Init+0xc4>)
 80013c4:	f000 fbbc 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	@ 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000188 	.word	0x20000188

080013d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2224      	movs	r2, #36	@ 0x24
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f009 fb6e 	bl	800aac4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_TIM3_Init+0xa4>)
 80013f4:	4a21      	ldr	r2, [pc, #132]	@ (800147c <MX_TIM3_Init+0xa8>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_TIM3_Init+0xa4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_TIM3_Init+0xa4>)
 8001400:	2210      	movs	r2, #16
 8001402:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_TIM3_Init+0xa4>)
 8001406:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800140a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_TIM3_Init+0xa4>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_TIM3_Init+0xa4>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001418:	2303      	movs	r3, #3
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001420:	2301      	movs	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001428:	230f      	movs	r3, #15
 800142a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001438:	230f      	movs	r3, #15
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_TIM3_Init+0xa4>)
 8001444:	f003 fb52 	bl	8004aec <HAL_TIM_Encoder_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800144e:	f7ff fded 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	@ (8001478 <MX_TIM3_Init+0xa4>)
 8001460:	f004 fa92 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800146a:	f7ff fddf 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	@ 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001d4 	.word	0x200001d4
 800147c:	40000400 	.word	0x40000400

08001480 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	2224      	movs	r2, #36	@ 0x24
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f009 fb18 	bl	800aac4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_TIM4_Init+0xa4>)
 80014a0:	4a21      	ldr	r2, [pc, #132]	@ (8001528 <MX_TIM4_Init+0xa8>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_TIM4_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <MX_TIM4_Init+0xa4>)
 80014ac:	2210      	movs	r2, #16
 80014ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_TIM4_Init+0xa4>)
 80014b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_TIM4_Init+0xa4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_TIM4_Init+0xa4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014c4:	2303      	movs	r3, #3
 80014c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80014d4:	230f      	movs	r3, #15
 80014d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014dc:	2301      	movs	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80014e4:	230f      	movs	r3, #15
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_TIM4_Init+0xa4>)
 80014f0:	f003 fafc 	bl	8004aec <HAL_TIM_Encoder_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80014fa:	f7ff fd97 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	@ (8001524 <MX_TIM4_Init+0xa4>)
 800150c:	f004 fa3c 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001516:	f7ff fd89 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	@ 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000220 	.word	0x20000220
 8001528:	40000800 	.word	0x40000800

0800152c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001550:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 8001552:	4a28      	ldr	r2, [pc, #160]	@ (80015f4 <MX_TIM5_Init+0xc8>)
 8001554:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001556:	4b26      	ldr	r3, [pc, #152]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 8001558:	222f      	movs	r2, #47	@ 0x2f
 800155a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001562:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 8001564:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001568:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001576:	481e      	ldr	r0, [pc, #120]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 8001578:	f003 f8e7 	bl	800474a <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001582:	f7ff fd53 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4816      	ldr	r0, [pc, #88]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 8001596:	f004 f9f7 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80015a0:	f7ff fd44 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a4:	2360      	movs	r3, #96	@ 0x60
 80015a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 80015bc:	f003 fd78 	bl	80050b0 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80015c6:	f7ff fd31 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ca:	463b      	mov	r3, r7
 80015cc:	220c      	movs	r2, #12
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 80015d2:	f003 fd6d 	bl	80050b0 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80015dc:	f7ff fd26 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <MX_TIM5_Init+0xc4>)
 80015e2:	f000 faad 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000026c 	.word	0x2000026c
 80015f4:	40000c00 	.word	0x40000c00

080015f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <MX_TIM6_Init+0x68>)
 800160a:	4a16      	ldr	r2, [pc, #88]	@ (8001664 <MX_TIM6_Init+0x6c>)
 800160c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_TIM6_Init+0x68>)
 8001610:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001614:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_TIM6_Init+0x68>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800161c:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <MX_TIM6_Init+0x68>)
 800161e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001622:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_TIM6_Init+0x68>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800162a:	480d      	ldr	r0, [pc, #52]	@ (8001660 <MX_TIM6_Init+0x68>)
 800162c:	f002 ff8e 	bl	800454c <HAL_TIM_Base_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001636:	f7ff fcf9 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	@ (8001660 <MX_TIM6_Init+0x68>)
 8001648:	f004 f99e 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001652:	f7ff fceb 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200002b8 	.word	0x200002b8
 8001664:	40001000 	.word	0x40001000

08001668 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	@ 0x30
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	2224      	movs	r2, #36	@ 0x24
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f009 fa24 	bl	800aac4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001686:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <MX_TIM8_Init+0xac>)
 8001688:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <MX_TIM8_Init+0xb0>)
 800168a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800168c:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <MX_TIM8_Init+0xac>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <MX_TIM8_Init+0xac>)
 8001694:	2210      	movs	r2, #16
 8001696:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001698:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <MX_TIM8_Init+0xac>)
 800169a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800169e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <MX_TIM8_Init+0xac>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <MX_TIM8_Init+0xac>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <MX_TIM8_Init+0xac>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016b2:	2303      	movs	r3, #3
 80016b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ba:	2301      	movs	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80016c2:	230f      	movs	r3, #15
 80016c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ca:	2301      	movs	r3, #1
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80016d2:	230f      	movs	r3, #15
 80016d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	4619      	mov	r1, r3
 80016dc:	480d      	ldr	r0, [pc, #52]	@ (8001714 <MX_TIM8_Init+0xac>)
 80016de:	f003 fa05 	bl	8004aec <HAL_TIM_Encoder_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80016e8:	f7ff fca0 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_TIM8_Init+0xac>)
 80016fe:	f004 f943 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001708:	f7ff fc90 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	@ 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000304 	.word	0x20000304
 8001718:	40010400 	.word	0x40010400

0800171c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_TIM12_Init+0x84>)
 8001736:	4a1b      	ldr	r2, [pc, #108]	@ (80017a4 <MX_TIM12_Init+0x88>)
 8001738:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <MX_TIM12_Init+0x84>)
 800173c:	225f      	movs	r2, #95	@ 0x5f
 800173e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <MX_TIM12_Init+0x84>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_TIM12_Init+0x84>)
 8001748:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800174c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_TIM12_Init+0x84>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <MX_TIM12_Init+0x84>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800175a:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <MX_TIM12_Init+0x84>)
 800175c:	f002 fff5 	bl	800474a <HAL_TIM_PWM_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001766:	f7ff fc61 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176a:	2360      	movs	r3, #96	@ 0x60
 800176c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2204      	movs	r2, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <MX_TIM12_Init+0x84>)
 8001782:	f003 fc95 	bl	80050b0 <HAL_TIM_PWM_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800178c:	f7ff fc4e 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <MX_TIM12_Init+0x84>)
 8001792:	f000 f9d5 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000350 	.word	0x20000350
 80017a4:	40001800 	.word	0x40001800

080017a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b090      	sub	sp, #64	@ 0x40
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a93      	ldr	r2, [pc, #588]	@ (8001a14 <HAL_TIM_Encoder_MspInit+0x26c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d149      	bne.n	800185e <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ca:	4b93      	ldr	r3, [pc, #588]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a92      	ldr	r2, [pc, #584]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b90      	ldr	r3, [pc, #576]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e2:	4b8d      	ldr	r3, [pc, #564]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a8c      	ldr	r2, [pc, #560]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b8a      	ldr	r3, [pc, #552]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 80017fa:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800180c:	2301      	movs	r3, #1
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001810:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	4881      	ldr	r0, [pc, #516]	@ (8001a1c <HAL_TIM_Encoder_MspInit+0x274>)
 8001818:	f001 fa22 	bl	8002c60 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2105      	movs	r1, #5
 8001820:	2018      	movs	r0, #24
 8001822:	f000 fdd0 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001826:	2018      	movs	r0, #24
 8001828:	f000 fde9 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2105      	movs	r1, #5
 8001830:	2019      	movs	r0, #25
 8001832:	f000 fdc8 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001836:	2019      	movs	r0, #25
 8001838:	f000 fde1 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2105      	movs	r1, #5
 8001840:	201a      	movs	r0, #26
 8001842:	f000 fdc0 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001846:	201a      	movs	r0, #26
 8001848:	f000 fdd9 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2105      	movs	r1, #5
 8001850:	201b      	movs	r0, #27
 8001852:	f000 fdb8 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001856:	201b      	movs	r0, #27
 8001858:	f000 fdd1 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800185c:	e0d5      	b.n	8001a0a <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6f      	ldr	r2, [pc, #444]	@ (8001a20 <HAL_TIM_Encoder_MspInit+0x278>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d14c      	bne.n	8001902 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001868:	4b6b      	ldr	r3, [pc, #428]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	4a6a      	ldr	r2, [pc, #424]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	6413      	str	r3, [r2, #64]	@ 0x40
 8001874:	4b68      	ldr	r3, [pc, #416]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b65      	ldr	r3, [pc, #404]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	4a64      	ldr	r2, [pc, #400]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6313      	str	r3, [r2, #48]	@ 0x30
 800188c:	4b62      	ldr	r3, [pc, #392]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	4b5f      	ldr	r3, [pc, #380]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	4a5e      	ldr	r2, [pc, #376]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 80018b0:	2340      	movs	r3, #64	@ 0x40
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018c0:	2302      	movs	r3, #2
 80018c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4856      	ldr	r0, [pc, #344]	@ (8001a24 <HAL_TIM_Encoder_MspInit+0x27c>)
 80018cc:	f001 f9c8 	bl	8002c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 80018d0:	2320      	movs	r3, #32
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e0:	2302      	movs	r3, #2
 80018e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e8:	4619      	mov	r1, r3
 80018ea:	484f      	ldr	r0, [pc, #316]	@ (8001a28 <HAL_TIM_Encoder_MspInit+0x280>)
 80018ec:	f001 f9b8 	bl	8002c60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2105      	movs	r1, #5
 80018f4:	201d      	movs	r0, #29
 80018f6:	f000 fd66 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018fa:	201d      	movs	r0, #29
 80018fc:	f000 fd7f 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001900:	e083      	b.n	8001a0a <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a49      	ldr	r2, [pc, #292]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0x284>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d131      	bne.n	8001970 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800190c:	4b42      	ldr	r3, [pc, #264]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	4a41      	ldr	r2, [pc, #260]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6413      	str	r3, [r2, #64]	@ 0x40
 8001918:	4b3f      	ldr	r3, [pc, #252]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001924:	4b3c      	ldr	r3, [pc, #240]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001928:	4a3b      	ldr	r2, [pc, #236]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001930:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 800193c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800194e:	2302      	movs	r3, #2
 8001950:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001952:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001956:	4619      	mov	r1, r3
 8001958:	4835      	ldr	r0, [pc, #212]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x288>)
 800195a:	f001 f981 	bl	8002c60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2105      	movs	r1, #5
 8001962:	201e      	movs	r0, #30
 8001964:	f000 fd2f 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001968:	201e      	movs	r0, #30
 800196a:	f000 fd48 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 800196e:	e04c      	b.n	8001a0a <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a2f      	ldr	r2, [pc, #188]	@ (8001a34 <HAL_TIM_Encoder_MspInit+0x28c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d147      	bne.n	8001a0a <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800197a:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	4a26      	ldr	r2, [pc, #152]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6453      	str	r3, [r2, #68]	@ 0x44
 8001986:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a20      	ldr	r2, [pc, #128]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <HAL_TIM_Encoder_MspInit+0x270>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 80019aa:	23c0      	movs	r3, #192	@ 0xc0
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019ba:	2303      	movs	r3, #3
 80019bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019c2:	4619      	mov	r1, r3
 80019c4:	481c      	ldr	r0, [pc, #112]	@ (8001a38 <HAL_TIM_Encoder_MspInit+0x290>)
 80019c6:	f001 f94b 	bl	8002c60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	202b      	movs	r0, #43	@ 0x2b
 80019d0:	f000 fcf9 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80019d4:	202b      	movs	r0, #43	@ 0x2b
 80019d6:	f000 fd12 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2105      	movs	r1, #5
 80019de:	202c      	movs	r0, #44	@ 0x2c
 80019e0:	f000 fcf1 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80019e4:	202c      	movs	r0, #44	@ 0x2c
 80019e6:	f000 fd0a 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2105      	movs	r1, #5
 80019ee:	202d      	movs	r0, #45	@ 0x2d
 80019f0:	f000 fce9 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80019f4:	202d      	movs	r0, #45	@ 0x2d
 80019f6:	f000 fd02 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2105      	movs	r1, #5
 80019fe:	202e      	movs	r0, #46	@ 0x2e
 8001a00:	f000 fce1 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001a04:	202e      	movs	r0, #46	@ 0x2e
 8001a06:	f000 fcfa 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3740      	adds	r7, #64	@ 0x40
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40000400 	.word	0x40000400
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40000800 	.word	0x40000800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40010400 	.word	0x40010400
 8001a38:	40020800 	.word	0x40020800

08001a3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a4c:	d114      	bne.n	8001a78 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0xac>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	4a25      	ldr	r2, [pc, #148]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0xac>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0xac>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2105      	movs	r1, #5
 8001a6a:	201c      	movs	r0, #28
 8001a6c:	f000 fcab 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a70:	201c      	movs	r0, #28
 8001a72:	f000 fcc4 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001a76:	e032      	b.n	8001ade <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001aec <HAL_TIM_PWM_MspInit+0xb0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d114      	bne.n	8001aac <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0xac>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0xac>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0xac>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	2032      	movs	r0, #50	@ 0x32
 8001aa0:	f000 fc91 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001aa4:	2032      	movs	r0, #50	@ 0x32
 8001aa6:	f000 fcaa 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001aaa:	e018      	b.n	8001ade <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d113      	bne.n	8001ade <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0xac>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0xac>)
 8001abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0xac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	202b      	movs	r0, #43	@ 0x2b
 8001ad4:	f000 fc77 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ad8:	202b      	movs	r0, #43	@ 0x2b
 8001ada:	f000 fc90 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40000c00 	.word	0x40000c00
 8001af0:	40001800 	.word	0x40001800

08001af4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <HAL_TIM_Base_MspInit+0x44>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d113      	bne.n	8001b2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_TIM_Base_MspInit+0x48>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b3c <HAL_TIM_Base_MspInit+0x48>)
 8001b0c:	f043 0310 	orr.w	r3, r3, #16
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_TIM_Base_MspInit+0x48>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2105      	movs	r1, #5
 8001b22:	2036      	movs	r0, #54	@ 0x36
 8001b24:	f000 fc4f 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b28:	2036      	movs	r0, #54	@ 0x36
 8001b2a:	f000 fc68 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40001000 	.word	0x40001000
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	@ 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b60:	d139      	bne.n	8001bd6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b41      	ldr	r3, [pc, #260]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a40      	ldr	r2, [pc, #256]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b38      	ldr	r3, [pc, #224]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8001b92:	2320      	movs	r3, #32
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	482f      	ldr	r0, [pc, #188]	@ (8001c6c <HAL_TIM_MspPostInit+0x12c>)
 8001bae:	f001 f857 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 8001bb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4828      	ldr	r0, [pc, #160]	@ (8001c70 <HAL_TIM_MspPostInit+0x130>)
 8001bd0:	f001 f846 	bl	8002c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001bd4:	e043      	b.n	8001c5e <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a26      	ldr	r2, [pc, #152]	@ (8001c74 <HAL_TIM_MspPostInit+0x134>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d11c      	bne.n	8001c1a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	4a20      	ldr	r2, [pc, #128]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bec:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	4816      	ldr	r0, [pc, #88]	@ (8001c6c <HAL_TIM_MspPostInit+0x12c>)
 8001c14:	f001 f824 	bl	8002c60 <HAL_GPIO_Init>
}
 8001c18:	e021      	b.n	8001c5e <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <HAL_TIM_MspPostInit+0x138>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d11c      	bne.n	8001c5e <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	4a0f      	ldr	r2, [pc, #60]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <HAL_TIM_MspPostInit+0x128>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001c3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001c4e:	2309      	movs	r3, #9
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <HAL_TIM_MspPostInit+0x130>)
 8001c5a:	f001 f801 	bl	8002c60 <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	3730      	adds	r7, #48	@ 0x30
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	40001800 	.word	0x40001800

08001c7c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c80:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c82:	4a15      	ldr	r2, [pc, #84]	@ (8001cd8 <MX_USART2_UART_Init+0x5c>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001cc0:	f003 ff0e 	bl	8005ae0 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cca:	f7ff f9af 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000039c 	.word	0x2000039c
 8001cd8:	40004400 	.word	0x40004400

08001cdc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001ce2:	4a15      	ldr	r2, [pc, #84]	@ (8001d38 <MX_USART3_UART_Init+0x5c>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d20:	f003 fede 	bl	8005ae0 <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d2a:	f7ff f97f 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000424 	.word	0x20000424
 8001d38:	40004800 	.word	0x40004800

08001d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0b0      	sub	sp, #192	@ 0xc0
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	2290      	movs	r2, #144	@ 0x90
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f008 feb1 	bl	800aac4 <memset>
  if(uartHandle->Instance==USART2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a79      	ldr	r2, [pc, #484]	@ (8001f4c <HAL_UART_MspInit+0x210>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	f040 80a0 	bne.w	8001eae <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 ffbe 	bl	8003cfc <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d86:	f7ff f951 	bl	800102c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d8a:	4b71      	ldr	r3, [pc, #452]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	4a70      	ldr	r2, [pc, #448]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d96:	4b6e      	ldr	r3, [pc, #440]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da2:	4b6b      	ldr	r3, [pc, #428]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a6a      	ldr	r2, [pc, #424]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b68      	ldr	r3, [pc, #416]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001dba:	2360      	movs	r3, #96	@ 0x60
 8001dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ddc:	4619      	mov	r1, r3
 8001dde:	485d      	ldr	r0, [pc, #372]	@ (8001f54 <HAL_UART_MspInit+0x218>)
 8001de0:	f000 ff3e 	bl	8002c60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001de4:	4b5c      	ldr	r3, [pc, #368]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001de6:	4a5d      	ldr	r2, [pc, #372]	@ (8001f5c <HAL_UART_MspInit+0x220>)
 8001de8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001dea:	4b5b      	ldr	r3, [pc, #364]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001dec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001df0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df2:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df8:	4b57      	ldr	r3, [pc, #348]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dfe:	4b56      	ldr	r3, [pc, #344]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001e00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e04:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e06:	4b54      	ldr	r3, [pc, #336]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0c:	4b52      	ldr	r3, [pc, #328]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e12:	4b51      	ldr	r3, [pc, #324]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e18:	4b4f      	ldr	r3, [pc, #316]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e24:	484c      	ldr	r0, [pc, #304]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001e26:	f000 fb05 	bl	8002434 <HAL_DMA_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001e30:	f7ff f8fc 	bl	800102c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a48      	ldr	r2, [pc, #288]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001e38:	675a      	str	r2, [r3, #116]	@ 0x74
 8001e3a:	4a47      	ldr	r2, [pc, #284]	@ (8001f58 <HAL_UART_MspInit+0x21c>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e40:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e42:	4a48      	ldr	r2, [pc, #288]	@ (8001f64 <HAL_UART_MspInit+0x228>)
 8001e44:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e46:	4b46      	ldr	r3, [pc, #280]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e48:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e4e:	4b44      	ldr	r3, [pc, #272]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e50:	2240      	movs	r2, #64	@ 0x40
 8001e52:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e54:	4b42      	ldr	r3, [pc, #264]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e60:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e62:	4b3f      	ldr	r3, [pc, #252]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e68:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e74:	4b3a      	ldr	r3, [pc, #232]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e7a:	4b39      	ldr	r3, [pc, #228]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e80:	4837      	ldr	r0, [pc, #220]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e82:	f000 fad7 	bl	8002434 <HAL_DMA_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001e8c:	f7ff f8ce 	bl	800102c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a33      	ldr	r2, [pc, #204]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e94:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e96:	4a32      	ldr	r2, [pc, #200]	@ (8001f60 <HAL_UART_MspInit+0x224>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2105      	movs	r1, #5
 8001ea0:	2026      	movs	r0, #38	@ 0x26
 8001ea2:	f000 fa90 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ea6:	2026      	movs	r0, #38	@ 0x26
 8001ea8:	f000 faa9 	bl	80023fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001eac:	e049      	b.n	8001f42 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f68 <HAL_UART_MspInit+0x22c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d144      	bne.n	8001f42 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ebc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 ff18 	bl	8003cfc <HAL_RCCEx_PeriphCLKConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001ed2:	f7ff f8ab 	bl	800102c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	4a1d      	ldr	r2, [pc, #116]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_UART_MspInit+0x214>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f20:	2307      	movs	r3, #7
 8001f22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f26:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <HAL_UART_MspInit+0x218>)
 8001f2e:	f000 fe97 	bl	8002c60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2105      	movs	r1, #5
 8001f36:	2027      	movs	r0, #39	@ 0x27
 8001f38:	f000 fa45 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f3c:	2027      	movs	r0, #39	@ 0x27
 8001f3e:	f000 fa5e 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001f42:	bf00      	nop
 8001f44:	37c0      	adds	r7, #192	@ 0xc0
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40004400 	.word	0x40004400
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020c00 	.word	0x40020c00
 8001f58:	200004ac 	.word	0x200004ac
 8001f5c:	40026088 	.word	0x40026088
 8001f60:	2000050c 	.word	0x2000050c
 8001f64:	400260a0 	.word	0x400260a0
 8001f68:	40004800 	.word	0x40004800

08001f6c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f78:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7a:	2206      	movs	r2, #6
 8001f7c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f80:	2202      	movs	r2, #2
 8001f82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fb0:	f001 f835 	bl	800301e <HAL_PCD_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001fba:	f7ff f837 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000056c 	.word	0x2000056c

08001fc8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0ae      	sub	sp, #184	@ 0xb8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2290      	movs	r2, #144	@ 0x90
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f008 fd6b 	bl	800aac4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ff6:	d159      	bne.n	80020ac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ff8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ffc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4618      	mov	r0, r3
 800200a:	f001 fe77 	bl	8003cfc <HAL_RCCEx_PeriphCLKConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002014:	f7ff f80a 	bl	800102c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <HAL_PCD_MspInit+0xec>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	4a25      	ldr	r2, [pc, #148]	@ (80020b4 <HAL_PCD_MspInit+0xec>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6313      	str	r3, [r2, #48]	@ 0x30
 8002024:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <HAL_PCD_MspInit+0xec>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002030:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002034:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800204a:	230a      	movs	r3, #10
 800204c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002054:	4619      	mov	r1, r3
 8002056:	4818      	ldr	r0, [pc, #96]	@ (80020b8 <HAL_PCD_MspInit+0xf0>)
 8002058:	f000 fe02 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800205c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002074:	4619      	mov	r1, r3
 8002076:	4810      	ldr	r0, [pc, #64]	@ (80020b8 <HAL_PCD_MspInit+0xf0>)
 8002078:	f000 fdf2 	bl	8002c60 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800207c:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <HAL_PCD_MspInit+0xec>)
 800207e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002080:	4a0c      	ldr	r2, [pc, #48]	@ (80020b4 <HAL_PCD_MspInit+0xec>)
 8002082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002086:	6353      	str	r3, [r2, #52]	@ 0x34
 8002088:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <HAL_PCD_MspInit+0xec>)
 800208a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <HAL_PCD_MspInit+0xec>)
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <HAL_PCD_MspInit+0xec>)
 800209a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800209e:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <HAL_PCD_MspInit+0xec>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80020ac:	bf00      	nop
 80020ae:	37b8      	adds	r7, #184	@ 0xb8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000

080020bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020c0:	f7ff f8b8 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c4:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c6:	490d      	ldr	r1, [pc, #52]	@ (80020fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f008 fd0b 	bl	800ab04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ee:	f7fe fe9d 	bl	8000e2c <main>
  bx  lr    
 80020f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002100:	0800ae7c 	.word	0x0800ae7c
  ldr r2, =_sbss
 8002104:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002108:	200054d0 	.word	0x200054d0

0800210c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC_IRQHandler>

0800210e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002112:	2003      	movs	r0, #3
 8002114:	f000 f94c 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002118:	200f      	movs	r0, #15
 800211a:	f000 f805 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800211e:	f7fe ff8b 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f967 	bl	800241a <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f000 f92f 	bl	80023c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002168:	4a06      	ldr	r2, [pc, #24]	@ (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000000 	.word	0x20000000
 8002180:	20000008 	.word	0x20000008
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000a4c 	.word	0x20000a4c

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000a4c 	.word	0x20000a4c

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d005      	beq.n	80021ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <HAL_Delay+0x44>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ee:	bf00      	nop
 80021f0:	f7ff ffde 	bl	80021b0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8f7      	bhi.n	80021f0 <HAL_Delay+0x28>
  {
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000008 	.word	0x20000008

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <__NVIC_SetPriorityGrouping+0x40>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	4313      	orrs	r3, r2
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <__NVIC_SetPriorityGrouping+0x40>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00
 8002254:	05fa0000 	.word	0x05fa0000

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	@ (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	@ (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	@ (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	@ 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff29 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff3e 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff8e 	bl	8002304 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff31 	bl	8002274 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff feb6 	bl	80021b0 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e099      	b.n	8002584 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002470:	e00f      	b.n	8002492 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002472:	f7ff fe9d 	bl	80021b0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b05      	cmp	r3, #5
 800247e:	d908      	bls.n	8002492 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e078      	b.n	8002584 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e8      	bne.n	8002472 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4b38      	ldr	r3, [pc, #224]	@ (800258c <HAL_DMA_Init+0x158>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d107      	bne.n	80024fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	4313      	orrs	r3, r2
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f023 0307 	bic.w	r3, r3, #7
 8002512:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	2b04      	cmp	r3, #4
 8002524:	d117      	bne.n	8002556 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fb15 	bl	8002b68 <DMA_CheckFifoParam>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2240      	movs	r2, #64	@ 0x40
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002552:	2301      	movs	r3, #1
 8002554:	e016      	b.n	8002584 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 facc 	bl	8002afc <DMA_CalcBaseAndBitshift>
 8002564:	4603      	mov	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	223f      	movs	r2, #63	@ 0x3f
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	e010803f 	.word	0xe010803f

08002590 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA_Start_IT+0x26>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e048      	b.n	8002648 <HAL_DMA_Start_IT+0xb8>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d137      	bne.n	800263a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fa5e 	bl	8002aa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e8:	223f      	movs	r2, #63	@ 0x3f
 80025ea:	409a      	lsls	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0216 	orr.w	r2, r2, #22
 80025fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800260e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0208 	orr.w	r2, r2, #8
 8002626:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e005      	b.n	8002646 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002642:	2302      	movs	r3, #2
 8002644:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002646:	7dfb      	ldrb	r3, [r7, #23]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800265e:	f7ff fda7 	bl	80021b0 <HAL_GetTick>
 8002662:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d008      	beq.n	8002682 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2280      	movs	r2, #128	@ 0x80
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e052      	b.n	8002728 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0216 	bic.w	r2, r2, #22
 8002690:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <HAL_DMA_Abort+0x62>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0208 	bic.w	r2, r2, #8
 80026c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d2:	e013      	b.n	80026fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d4:	f7ff fd6c 	bl	80021b0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d90c      	bls.n	80026fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2203      	movs	r2, #3
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e015      	b.n	8002728 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e4      	bne.n	80026d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	223f      	movs	r2, #63	@ 0x3f
 8002710:	409a      	lsls	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d004      	beq.n	800274e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2280      	movs	r2, #128	@ 0x80
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e00c      	b.n	8002768 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2205      	movs	r2, #5
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002780:	4b8e      	ldr	r3, [pc, #568]	@ (80029bc <HAL_DMA_IRQHandler+0x248>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a8e      	ldr	r2, [pc, #568]	@ (80029c0 <HAL_DMA_IRQHandler+0x24c>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	0a9b      	lsrs	r3, r3, #10
 800278c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	2208      	movs	r2, #8
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01a      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0204 	bic.w	r2, r2, #4
 80027c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	2208      	movs	r2, #8
 80027ce:	409a      	lsls	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	2201      	movs	r2, #1
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d012      	beq.n	8002816 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	2201      	movs	r2, #1
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280e:	f043 0202 	orr.w	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	2204      	movs	r2, #4
 800281c:	409a      	lsls	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	2204      	movs	r2, #4
 800283a:	409a      	lsls	r2, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	f043 0204 	orr.w	r2, r3, #4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002850:	2210      	movs	r2, #16
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d043      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d03c      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	2210      	movs	r2, #16
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d018      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d108      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d024      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
 80028a2:	e01f      	b.n	80028e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01b      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
 80028b4:	e016      	b.n	80028e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d107      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0208 	bic.w	r2, r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e8:	2220      	movs	r2, #32
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 808f 	beq.w	8002a14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8087 	beq.w	8002a14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	2220      	movs	r2, #32
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b05      	cmp	r3, #5
 800291c:	d136      	bne.n	800298c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0216 	bic.w	r2, r2, #22
 800292c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800293c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_DMA_IRQHandler+0x1da>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0208 	bic.w	r2, r2, #8
 800295c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	223f      	movs	r2, #63	@ 0x3f
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800297e:	2b00      	cmp	r3, #0
 8002980:	d07e      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
        }
        return;
 800298a:	e079      	b.n	8002a80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01d      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10d      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d031      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
 80029b8:	e02c      	b.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
 80029ba:	bf00      	nop
 80029bc:	20000000 	.word	0x20000000
 80029c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d023      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
 80029d4:	e01e      	b.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10f      	bne.n	8002a04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0210 	bic.w	r2, r2, #16
 80029f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d032      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2205      	movs	r2, #5
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	3301      	adds	r3, #1
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d307      	bcc.n	8002a5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f2      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x2cc>
 8002a5a:	e000      	b.n	8002a5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
 8002a7e:	e000      	b.n	8002a82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a80:	bf00      	nop
    }
  }
}
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002abc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b40      	cmp	r3, #64	@ 0x40
 8002acc:	d108      	bne.n	8002ae0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ade:	e007      	b.n	8002af0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3b10      	subs	r3, #16
 8002b0c:	4a13      	ldr	r2, [pc, #76]	@ (8002b5c <DMA_CalcBaseAndBitshift+0x60>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b16:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <DMA_CalcBaseAndBitshift+0x64>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d908      	bls.n	8002b3c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <DMA_CalcBaseAndBitshift+0x68>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	1d1a      	adds	r2, r3, #4
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b3a:	e006      	b.n	8002b4a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <DMA_CalcBaseAndBitshift+0x68>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	aaaaaaab 	.word	0xaaaaaaab
 8002b60:	0800ad60 	.word	0x0800ad60
 8002b64:	fffffc00 	.word	0xfffffc00

08002b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11f      	bne.n	8002bc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d856      	bhi.n	8002c36 <DMA_CheckFifoParam+0xce>
 8002b88:	a201      	add	r2, pc, #4	@ (adr r2, 8002b90 <DMA_CheckFifoParam+0x28>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002ba1 	.word	0x08002ba1
 8002b94:	08002bb3 	.word	0x08002bb3
 8002b98:	08002ba1 	.word	0x08002ba1
 8002b9c:	08002c37 	.word	0x08002c37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d046      	beq.n	8002c3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e043      	b.n	8002c3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bba:	d140      	bne.n	8002c3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc0:	e03d      	b.n	8002c3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bca:	d121      	bne.n	8002c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d837      	bhi.n	8002c42 <DMA_CheckFifoParam+0xda>
 8002bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <DMA_CheckFifoParam+0x70>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bef 	.word	0x08002bef
 8002be0:	08002be9 	.word	0x08002be9
 8002be4:	08002c01 	.word	0x08002c01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      break;
 8002bec:	e030      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d025      	beq.n	8002c46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfe:	e022      	b.n	8002c46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c08:	d11f      	bne.n	8002c4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c0e:	e01c      	b.n	8002c4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d903      	bls.n	8002c1e <DMA_CheckFifoParam+0xb6>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d003      	beq.n	8002c24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c1c:	e018      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      break;
 8002c22:	e015      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e00b      	b.n	8002c4e <DMA_CheckFifoParam+0xe6>
      break;
 8002c36:	bf00      	nop
 8002c38:	e00a      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e008      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e006      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e004      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	@ 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e175      	b.n	8002f6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f040 8164 	bne.w	8002f66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_GPIO_Init+0x56>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d130      	bne.n	8002d18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 0201 	and.w	r2, r3, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d017      	beq.n	8002d54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d123      	bne.n	8002da8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	220f      	movs	r2, #15
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	69b9      	ldr	r1, [r7, #24]
 8002da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0203 	and.w	r2, r3, #3
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80be 	beq.w	8002f66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	4b66      	ldr	r3, [pc, #408]	@ (8002f84 <HAL_GPIO_Init+0x324>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	4a65      	ldr	r2, [pc, #404]	@ (8002f84 <HAL_GPIO_Init+0x324>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df6:	4b63      	ldr	r3, [pc, #396]	@ (8002f84 <HAL_GPIO_Init+0x324>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e02:	4a61      	ldr	r2, [pc, #388]	@ (8002f88 <HAL_GPIO_Init+0x328>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a58      	ldr	r2, [pc, #352]	@ (8002f8c <HAL_GPIO_Init+0x32c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d037      	beq.n	8002e9e <HAL_GPIO_Init+0x23e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a57      	ldr	r2, [pc, #348]	@ (8002f90 <HAL_GPIO_Init+0x330>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d031      	beq.n	8002e9a <HAL_GPIO_Init+0x23a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a56      	ldr	r2, [pc, #344]	@ (8002f94 <HAL_GPIO_Init+0x334>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02b      	beq.n	8002e96 <HAL_GPIO_Init+0x236>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a55      	ldr	r2, [pc, #340]	@ (8002f98 <HAL_GPIO_Init+0x338>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d025      	beq.n	8002e92 <HAL_GPIO_Init+0x232>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a54      	ldr	r2, [pc, #336]	@ (8002f9c <HAL_GPIO_Init+0x33c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01f      	beq.n	8002e8e <HAL_GPIO_Init+0x22e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a53      	ldr	r2, [pc, #332]	@ (8002fa0 <HAL_GPIO_Init+0x340>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d019      	beq.n	8002e8a <HAL_GPIO_Init+0x22a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a52      	ldr	r2, [pc, #328]	@ (8002fa4 <HAL_GPIO_Init+0x344>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_GPIO_Init+0x226>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a51      	ldr	r2, [pc, #324]	@ (8002fa8 <HAL_GPIO_Init+0x348>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00d      	beq.n	8002e82 <HAL_GPIO_Init+0x222>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a50      	ldr	r2, [pc, #320]	@ (8002fac <HAL_GPIO_Init+0x34c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <HAL_GPIO_Init+0x21e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb0 <HAL_GPIO_Init+0x350>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_GPIO_Init+0x21a>
 8002e76:	2309      	movs	r3, #9
 8002e78:	e012      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	e010      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	e00e      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e82:	2307      	movs	r3, #7
 8002e84:	e00c      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e86:	2306      	movs	r3, #6
 8002e88:	e00a      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e8a:	2305      	movs	r3, #5
 8002e8c:	e008      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e8e:	2304      	movs	r3, #4
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e004      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e002      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f002 0203 	and.w	r2, r2, #3
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	4093      	lsls	r3, r2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002eb0:	4935      	ldr	r1, [pc, #212]	@ (8002f88 <HAL_GPIO_Init+0x328>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb4 <HAL_GPIO_Init+0x354>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee2:	4a34      	ldr	r2, [pc, #208]	@ (8002fb4 <HAL_GPIO_Init+0x354>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee8:	4b32      	ldr	r3, [pc, #200]	@ (8002fb4 <HAL_GPIO_Init+0x354>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f0c:	4a29      	ldr	r2, [pc, #164]	@ (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f12:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f36:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f60:	4a14      	ldr	r2, [pc, #80]	@ (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	f67f ae86 	bls.w	8002c80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3724      	adds	r7, #36	@ 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40021400 	.word	0x40021400
 8002fa4:	40021800 	.word	0x40021800
 8002fa8:	40021c00 	.word	0x40021c00
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	40022400 	.word	0x40022400
 8002fb4:	40013c00 	.word	0x40013c00

08002fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fc8:	787b      	ldrb	r3, [r7, #1]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fce:	887a      	ldrh	r2, [r7, #2]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fd4:	e003      	b.n	8002fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	041a      	lsls	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	619a      	str	r2, [r3, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ffc:	887a      	ldrh	r2, [r7, #2]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4013      	ands	r3, r2
 8003002:	041a      	lsls	r2, r3, #16
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43d9      	mvns	r1, r3
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	400b      	ands	r3, r1
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	619a      	str	r2, [r3, #24]
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af02      	add	r7, sp, #8
 8003024:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e108      	b.n	8003242 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe ffbc 	bl	8001fc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2203      	movs	r2, #3
 8003054:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800305e:	d102      	bne.n	8003066 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fba6 	bl	80077bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7c1a      	ldrb	r2, [r3, #16]
 8003078:	f88d 2000 	strb.w	r2, [sp]
 800307c:	3304      	adds	r3, #4
 800307e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003080:	f004 fb42 	bl	8007708 <USB_CoreInit>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0d5      	b.n	8003242 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f004 fb9e 	bl	80077de <USB_SetCurrentMode>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0c6      	b.n	8003242 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e04a      	b.n	8003150 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3315      	adds	r3, #21
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3314      	adds	r3, #20
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	b298      	uxth	r0, r3
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	332e      	adds	r3, #46	@ 0x2e
 80030f6:	4602      	mov	r2, r0
 80030f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3318      	adds	r3, #24
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	331c      	adds	r3, #28
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3320      	adds	r3, #32
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3324      	adds	r3, #36	@ 0x24
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	3301      	adds	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	791b      	ldrb	r3, [r3, #4]
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	429a      	cmp	r2, r3
 8003158:	d3af      	bcc.n	80030ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e044      	b.n	80031ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	3301      	adds	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	791b      	ldrb	r3, [r3, #4]
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3b5      	bcc.n	8003160 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	7c1a      	ldrb	r2, [r3, #16]
 80031fc:	f88d 2000 	strb.w	r2, [sp]
 8003200:	3304      	adds	r3, #4
 8003202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003204:	f004 fb38 	bl	8007878 <USB_DevInit>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e013      	b.n	8003242 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7b1b      	ldrb	r3, [r3, #12]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d102      	bne.n	8003236 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f80b 	bl	800324c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f004 fcf3 	bl	8007c26 <USB_DevDisconnect>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800327a:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_PCDEx_ActivateLPM+0x44>)
 800327c:	4313      	orrs	r3, r2
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	10000003 	.word	0x10000003

08003294 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a04      	ldr	r2, [pc, #16]	@ (80032b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40007000 	.word	0x40007000

080032b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	4b23      	ldr	r3, [pc, #140]	@ (800334c <HAL_PWREx_EnableOverDrive+0x98>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	4a22      	ldr	r2, [pc, #136]	@ (800334c <HAL_PWREx_EnableOverDrive+0x98>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_PWREx_EnableOverDrive+0x98>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1d      	ldr	r2, [pc, #116]	@ (8003350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e2:	f7fe ff65 	bl	80021b0 <HAL_GetTick>
 80032e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032e8:	e009      	b.n	80032fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032ea:	f7fe ff61 	bl	80021b0 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032f8:	d901      	bls.n	80032fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e022      	b.n	8003344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032fe:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800330a:	d1ee      	bne.n	80032ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800330c:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_PWREx_EnableOverDrive+0x9c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a0f      	ldr	r2, [pc, #60]	@ (8003350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003316:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003318:	f7fe ff4a 	bl	80021b0 <HAL_GetTick>
 800331c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800331e:	e009      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003320:	f7fe ff46 	bl	80021b0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800332e:	d901      	bls.n	8003334 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e007      	b.n	8003344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003334:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003340:	d1ee      	bne.n	8003320 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800
 8003350:	40007000 	.word	0x40007000

08003354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800335c:	2300      	movs	r3, #0
 800335e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e29b      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8087 	beq.w	8003486 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003378:	4b96      	ldr	r3, [pc, #600]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b04      	cmp	r3, #4
 8003382:	d00c      	beq.n	800339e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003384:	4b93      	ldr	r3, [pc, #588]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d112      	bne.n	80033b6 <HAL_RCC_OscConfig+0x62>
 8003390:	4b90      	ldr	r3, [pc, #576]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800339c:	d10b      	bne.n	80033b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339e:	4b8d      	ldr	r3, [pc, #564]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d06c      	beq.n	8003484 <HAL_RCC_OscConfig+0x130>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d168      	bne.n	8003484 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e275      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x7a>
 80033c0:	4b84      	ldr	r3, [pc, #528]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a83      	ldr	r2, [pc, #524]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e02e      	b.n	800342c <HAL_RCC_OscConfig+0xd8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x9c>
 80033d6:	4b7f      	ldr	r3, [pc, #508]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7e      	ldr	r2, [pc, #504]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b7c      	ldr	r3, [pc, #496]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7b      	ldr	r2, [pc, #492]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80033e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e01d      	b.n	800342c <HAL_RCC_OscConfig+0xd8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0xc0>
 80033fa:	4b76      	ldr	r3, [pc, #472]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a75      	ldr	r2, [pc, #468]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b73      	ldr	r3, [pc, #460]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a72      	ldr	r2, [pc, #456]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0xd8>
 8003414:	4b6f      	ldr	r3, [pc, #444]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6e      	ldr	r2, [pc, #440]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b6c      	ldr	r3, [pc, #432]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6b      	ldr	r2, [pc, #428]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe febc 	bl	80021b0 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe feb8 	bl	80021b0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e229      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b61      	ldr	r3, [pc, #388]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0xe8>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fea8 	bl	80021b0 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fea4 	bl	80021b0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	@ 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e215      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	4b57      	ldr	r3, [pc, #348]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x110>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d069      	beq.n	8003566 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003492:	4b50      	ldr	r3, [pc, #320]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b4d      	ldr	r3, [pc, #308]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d11c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x190>
 80034aa:	4b4a      	ldr	r3, [pc, #296]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d116      	bne.n	80034e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	4b47      	ldr	r3, [pc, #284]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_RCC_OscConfig+0x17a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e1e9      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ce:	4b41      	ldr	r3, [pc, #260]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	493d      	ldr	r1, [pc, #244]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	e040      	b.n	8003566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d023      	beq.n	8003534 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ec:	4b39      	ldr	r3, [pc, #228]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a38      	ldr	r2, [pc, #224]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fe5a 	bl	80021b0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003500:	f7fe fe56 	bl	80021b0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1c7      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003512:	4b30      	ldr	r3, [pc, #192]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351e:	4b2d      	ldr	r3, [pc, #180]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4929      	ldr	r1, [pc, #164]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
 8003532:	e018      	b.n	8003566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003534:	4b27      	ldr	r3, [pc, #156]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a26      	ldr	r2, [pc, #152]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe fe36 	bl	80021b0 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003548:	f7fe fe32 	bl	80021b0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1a3      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d038      	beq.n	80035e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d019      	beq.n	80035ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357a:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357e:	4a15      	ldr	r2, [pc, #84]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fe fe13 	bl	80021b0 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358e:	f7fe fe0f 	bl	80021b0 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e180      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80035a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x23a>
 80035ac:	e01a      	b.n	80035e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ae:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80035b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b2:	4a08      	ldr	r2, [pc, #32]	@ (80035d4 <HAL_RCC_OscConfig+0x280>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe fdf9 	bl	80021b0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fe fdf5 	bl	80021b0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d903      	bls.n	80035d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e166      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
 80035d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b92      	ldr	r3, [pc, #584]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ee      	bne.n	80035c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80a4 	beq.w	800373a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b8c      	ldr	r3, [pc, #560]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10d      	bne.n	800361a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	4b89      	ldr	r3, [pc, #548]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	4a88      	ldr	r2, [pc, #544]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003608:	6413      	str	r3, [r2, #64]	@ 0x40
 800360a:	4b86      	ldr	r3, [pc, #536]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361a:	4b83      	ldr	r3, [pc, #524]	@ (8003828 <HAL_RCC_OscConfig+0x4d4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d118      	bne.n	8003658 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003626:	4b80      	ldr	r3, [pc, #512]	@ (8003828 <HAL_RCC_OscConfig+0x4d4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7f      	ldr	r2, [pc, #508]	@ (8003828 <HAL_RCC_OscConfig+0x4d4>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003632:	f7fe fdbd 	bl	80021b0 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fe fdb9 	bl	80021b0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	@ 0x64
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e12a      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364c:	4b76      	ldr	r3, [pc, #472]	@ (8003828 <HAL_RCC_OscConfig+0x4d4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x31a>
 8003660:	4b70      	ldr	r3, [pc, #448]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	4a6f      	ldr	r2, [pc, #444]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	@ 0x70
 800366c:	e02d      	b.n	80036ca <HAL_RCC_OscConfig+0x376>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x33c>
 8003676:	4b6b      	ldr	r3, [pc, #428]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	4a6a      	ldr	r2, [pc, #424]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	@ 0x70
 8003682:	4b68      	ldr	r3, [pc, #416]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003686:	4a67      	ldr	r2, [pc, #412]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6713      	str	r3, [r2, #112]	@ 0x70
 800368e:	e01c      	b.n	80036ca <HAL_RCC_OscConfig+0x376>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x35e>
 8003698:	4b62      	ldr	r3, [pc, #392]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369c:	4a61      	ldr	r2, [pc, #388]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b0:	e00b      	b.n	80036ca <HAL_RCC_OscConfig+0x376>
 80036b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036be:	4b59      	ldr	r3, [pc, #356]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	4a58      	ldr	r2, [pc, #352]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d2:	f7fe fd6d 	bl	80021b0 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe fd69 	bl	80021b0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0d8      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCC_OscConfig+0x386>
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fe fd57 	bl	80021b0 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fd53 	bl	80021b0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0c2      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	4b41      	ldr	r3, [pc, #260]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b3d      	ldr	r3, [pc, #244]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	4a3c      	ldr	r2, [pc, #240]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003738:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80ae 	beq.w	80038a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003744:	4b37      	ldr	r3, [pc, #220]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d06d      	beq.n	800382c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d14b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b32      	ldr	r3, [pc, #200]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a31      	ldr	r2, [pc, #196]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 800375e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe fd24 	bl	80021b0 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fd20 	bl	80021b0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e091      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b29      	ldr	r3, [pc, #164]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	019b      	lsls	r3, r3, #6
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	3b01      	subs	r3, #1
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	071b      	lsls	r3, r3, #28
 80037b6:	491b      	ldr	r1, [pc, #108]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037bc:	4b19      	ldr	r3, [pc, #100]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a18      	ldr	r2, [pc, #96]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80037c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fe fcf2 	bl	80021b0 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe fcee 	bl	80021b0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e05f      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b10      	ldr	r3, [pc, #64]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x47c>
 80037ee:	e057      	b.n	80038a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 80037f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe fcd8 	bl	80021b0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe fcd4 	bl	80021b0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e045      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	4b03      	ldr	r3, [pc, #12]	@ (8003824 <HAL_RCC_OscConfig+0x4d0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x4b0>
 8003822:	e03d      	b.n	80038a0 <HAL_RCC_OscConfig+0x54c>
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800382c:	4b1f      	ldr	r3, [pc, #124]	@ (80038ac <HAL_RCC_OscConfig+0x558>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d030      	beq.n	800389c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d129      	bne.n	800389c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d122      	bne.n	800389c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003862:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003864:	4293      	cmp	r3, r2
 8003866:	d119      	bne.n	800389c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	3b01      	subs	r3, #1
 8003876:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d10f      	bne.n	800389c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003886:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d107      	bne.n	800389c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800

080038b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0d0      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b67      	ldr	r3, [pc, #412]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 020f 	bic.w	r2, r3, #15
 80038de:	4965      	ldr	r1, [pc, #404]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a58      	ldr	r2, [pc, #352]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800391a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a52      	ldr	r2, [pc, #328]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 800392e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003932:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d040      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e073      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3d      	ldr	r3, [pc, #244]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b39      	ldr	r3, [pc, #228]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4936      	ldr	r1, [pc, #216]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a4:	f7fe fc04 	bl	80021b0 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fe fc00 	bl	80021b0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e053      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d210      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b24      	ldr	r3, [pc, #144]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 020f 	bic.w	r2, r3, #15
 80039ea:	4922      	ldr	r1, [pc, #136]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	490a      	ldr	r1, [pc, #40]	@ (8003a7c <HAL_RCC_ClockConfig+0x1cc>)
 8003a54:	5ccb      	ldrb	r3, [r1, r3]
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	@ (8003a80 <HAL_RCC_ClockConfig+0x1d0>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <HAL_RCC_ClockConfig+0x1d4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fb60 	bl	8002128 <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023c00 	.word	0x40023c00
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	0800ad48 	.word	0x0800ad48
 8003a80:	20000000 	.word	0x20000000
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a8c:	b094      	sub	sp, #80	@ 0x50
 8003a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a94:	2300      	movs	r3, #0
 8003a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a98:	2300      	movs	r3, #0
 8003a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa0:	4b79      	ldr	r3, [pc, #484]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	f200 80e1 	bhi.w	8003c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x34>
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aba:	e0db      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b73      	ldr	r3, [pc, #460]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003abe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac0:	e0db      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac2:	4b73      	ldr	r3, [pc, #460]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac6:	e0d8      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d063      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ade:	4b6a      	ldr	r3, [pc, #424]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ae8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af2:	2300      	movs	r3, #0
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003afa:	4622      	mov	r2, r4
 8003afc:	462b      	mov	r3, r5
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	0159      	lsls	r1, r3, #5
 8003b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0c:	0150      	lsls	r0, r2, #5
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4621      	mov	r1, r4
 8003b14:	1a51      	subs	r1, r2, r1
 8003b16:	6139      	str	r1, [r7, #16]
 8003b18:	4629      	mov	r1, r5
 8003b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b2c:	4659      	mov	r1, fp
 8003b2e:	018b      	lsls	r3, r1, #6
 8003b30:	4651      	mov	r1, sl
 8003b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b36:	4651      	mov	r1, sl
 8003b38:	018a      	lsls	r2, r1, #6
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8003b40:	4659      	mov	r1, fp
 8003b42:	eb63 0901 	sbc.w	r9, r3, r1
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b5a:	4690      	mov	r8, r2
 8003b5c:	4699      	mov	r9, r3
 8003b5e:	4623      	mov	r3, r4
 8003b60:	eb18 0303 	adds.w	r3, r8, r3
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	462b      	mov	r3, r5
 8003b68:	eb49 0303 	adc.w	r3, r9, r3
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	024b      	lsls	r3, r1, #9
 8003b7e:	4621      	mov	r1, r4
 8003b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b84:	4621      	mov	r1, r4
 8003b86:	024a      	lsls	r2, r1, #9
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b8e:	2200      	movs	r2, #0
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b98:	f7fc fb64 	bl	8000264 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba4:	e058      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba6:	4b38      	ldr	r3, [pc, #224]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	2200      	movs	r2, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bb6:	623b      	str	r3, [r7, #32]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	f04f 0000 	mov.w	r0, #0
 8003bc8:	f04f 0100 	mov.w	r1, #0
 8003bcc:	0159      	lsls	r1, r3, #5
 8003bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd2:	0150      	lsls	r0, r2, #5
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4641      	mov	r1, r8
 8003bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bde:	4649      	mov	r1, r9
 8003be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	00eb      	lsls	r3, r5, #3
 8003c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0e:	00e2      	lsls	r2, r4, #3
 8003c10:	4614      	mov	r4, r2
 8003c12:	461d      	mov	r5, r3
 8003c14:	4643      	mov	r3, r8
 8003c16:	18e3      	adds	r3, r4, r3
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	eb45 0303 	adc.w	r3, r5, r3
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c2e:	4629      	mov	r1, r5
 8003c30:	028b      	lsls	r3, r1, #10
 8003c32:	4621      	mov	r1, r4
 8003c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c38:	4621      	mov	r1, r4
 8003c3a:	028a      	lsls	r2, r1, #10
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c42:	2200      	movs	r2, #0
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	61fa      	str	r2, [r7, #28]
 8003c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c4c:	f7fc fb0a 	bl	8000264 <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4613      	mov	r3, r2
 8003c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	3301      	adds	r3, #1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c72:	e002      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3750      	adds	r7, #80	@ 0x50
 8003c80:	46bd      	mov	sp, r7
 8003c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	00f42400 	.word	0x00f42400
 8003c90:	007a1200 	.word	0x007a1200

08003c94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c98:	4b03      	ldr	r3, [pc, #12]	@ (8003ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000000 	.word	0x20000000

08003cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cb0:	f7ff fff0 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0a9b      	lsrs	r3, r3, #10
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4903      	ldr	r1, [pc, #12]	@ (8003cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	0800ad58 	.word	0x0800ad58

08003cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cd8:	f7ff ffdc 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0b5b      	lsrs	r3, r3, #13
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4903      	ldr	r1, [pc, #12]	@ (8003cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	0800ad58 	.word	0x0800ad58

08003cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d012      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d24:	4b69      	ldr	r3, [pc, #420]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a68      	ldr	r2, [pc, #416]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d2e:	6093      	str	r3, [r2, #8]
 8003d30:	4b66      	ldr	r3, [pc, #408]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d38:	4964      	ldr	r1, [pc, #400]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d017      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d56:	4b5d      	ldr	r3, [pc, #372]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	4959      	ldr	r1, [pc, #356]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d74:	d101      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d82:	2301      	movs	r3, #1
 8003d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d017      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d92:	4b4e      	ldr	r3, [pc, #312]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	494a      	ldr	r1, [pc, #296]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003db0:	d101      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 808b 	beq.w	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	4b3a      	ldr	r3, [pc, #232]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	4a39      	ldr	r2, [pc, #228]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dec:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003df8:	4b35      	ldr	r3, [pc, #212]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a34      	ldr	r2, [pc, #208]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e04:	f7fe f9d4 	bl	80021b0 <HAL_GetTick>
 8003e08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0c:	f7fe f9d0 	bl	80021b0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e38f      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e2a:	4b28      	ldr	r3, [pc, #160]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d035      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d02e      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e48:	4b20      	ldr	r3, [pc, #128]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e62:	4a1a      	ldr	r2, [pc, #104]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e70:	4b16      	ldr	r3, [pc, #88]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d114      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe f998 	bl	80021b0 <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e82:	e00a      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e84:	f7fe f994 	bl	80021b0 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e351      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0ee      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003eb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ec0:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ec2:	400b      	ands	r3, r1
 8003ec4:	4901      	ldr	r1, [pc, #4]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
 8003eca:	e00b      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	0ffffcff 	.word	0x0ffffcff
 8003ed8:	4bac      	ldr	r3, [pc, #688]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4aab      	ldr	r2, [pc, #684]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ede:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ee2:	6093      	str	r3, [r2, #8]
 8003ee4:	4ba9      	ldr	r3, [pc, #676]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef0:	49a6      	ldr	r1, [pc, #664]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d010      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f02:	4ba2      	ldr	r3, [pc, #648]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f08:	4aa0      	ldr	r2, [pc, #640]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f12:	4b9e      	ldr	r3, [pc, #632]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f14:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1c:	499b      	ldr	r1, [pc, #620]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f30:	4b96      	ldr	r3, [pc, #600]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f3e:	4993      	ldr	r1, [pc, #588]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f52:	4b8e      	ldr	r3, [pc, #568]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f60:	498a      	ldr	r1, [pc, #552]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f74:	4b85      	ldr	r3, [pc, #532]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f82:	4982      	ldr	r1, [pc, #520]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f96:	4b7d      	ldr	r3, [pc, #500]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa4:	4979      	ldr	r1, [pc, #484]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb8:	4b74      	ldr	r3, [pc, #464]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fbe:	f023 0203 	bic.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	4971      	ldr	r1, [pc, #452]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fda:	4b6c      	ldr	r3, [pc, #432]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe0:	f023 020c 	bic.w	r2, r3, #12
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe8:	4968      	ldr	r1, [pc, #416]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ffc:	4b63      	ldr	r3, [pc, #396]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004002:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400a:	4960      	ldr	r1, [pc, #384]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800401e:	4b5b      	ldr	r3, [pc, #364]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004024:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	4957      	ldr	r1, [pc, #348]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004040:	4b52      	ldr	r3, [pc, #328]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404e:	494f      	ldr	r1, [pc, #316]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004062:	4b4a      	ldr	r3, [pc, #296]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004068:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004070:	4946      	ldr	r1, [pc, #280]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004084:	4b41      	ldr	r3, [pc, #260]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004092:	493e      	ldr	r1, [pc, #248]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040a6:	4b39      	ldr	r3, [pc, #228]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b4:	4935      	ldr	r1, [pc, #212]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040c8:	4b30      	ldr	r3, [pc, #192]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040d6:	492d      	ldr	r1, [pc, #180]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d011      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040ea:	4b28      	ldr	r3, [pc, #160]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040f8:	4924      	ldr	r1, [pc, #144]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004108:	d101      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800410a:	2301      	movs	r3, #1
 800410c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800411a:	2301      	movs	r3, #1
 800411c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800412a:	4b18      	ldr	r3, [pc, #96]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004130:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004138:	4914      	ldr	r1, [pc, #80]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800414c:	4b0f      	ldr	r3, [pc, #60]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800415c:	490b      	ldr	r1, [pc, #44]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00f      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004176:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004180:	4902      	ldr	r1, [pc, #8]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004188:	e002      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00b      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800419c:	4b8a      	ldr	r3, [pc, #552]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ac:	4986      	ldr	r1, [pc, #536]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041c0:	4b81      	ldr	r3, [pc, #516]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041c6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041d0:	497d      	ldr	r1, [pc, #500]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d006      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80d6 	beq.w	8004398 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041ec:	4b76      	ldr	r3, [pc, #472]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a75      	ldr	r2, [pc, #468]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fd ffda 	bl	80021b0 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004200:	f7fd ffd6 	bl	80021b0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	@ 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e195      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004212:	4b6d      	ldr	r3, [pc, #436]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d021      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11d      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004232:	4b65      	ldr	r3, [pc, #404]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004240:	4b61      	ldr	r3, [pc, #388]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004246:	0e1b      	lsrs	r3, r3, #24
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	019a      	lsls	r2, r3, #6
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	4958      	ldr	r1, [pc, #352]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02e      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004298:	d129      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800429a:	4b4b      	ldr	r3, [pc, #300]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042a8:	4b47      	ldr	r3, [pc, #284]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ae:	0f1b      	lsrs	r3, r3, #28
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	019a      	lsls	r2, r3, #6
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	061b      	lsls	r3, r3, #24
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	071b      	lsls	r3, r3, #28
 80042ce:	493e      	ldr	r1, [pc, #248]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042d6:	4b3c      	ldr	r3, [pc, #240]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042dc:	f023 021f 	bic.w	r2, r3, #31
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	3b01      	subs	r3, #1
 80042e6:	4938      	ldr	r1, [pc, #224]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01d      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042fa:	4b33      	ldr	r3, [pc, #204]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004300:	0e1b      	lsrs	r3, r3, #24
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004308:	4b2f      	ldr	r3, [pc, #188]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800430e:	0f1b      	lsrs	r3, r3, #28
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	019a      	lsls	r2, r3, #6
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	431a      	orrs	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	061b      	lsls	r3, r3, #24
 8004328:	431a      	orrs	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	071b      	lsls	r3, r3, #28
 800432e:	4926      	ldr	r1, [pc, #152]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	019a      	lsls	r2, r3, #6
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	071b      	lsls	r3, r3, #28
 800435e:	491a      	ldr	r1, [pc, #104]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004366:	4b18      	ldr	r3, [pc, #96]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a17      	ldr	r2, [pc, #92]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004372:	f7fd ff1d 	bl	80021b0 <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800437a:	f7fd ff19 	bl	80021b0 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b64      	cmp	r3, #100	@ 0x64
 8004386:	d901      	bls.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e0d8      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800438c:	4b0e      	ldr	r3, [pc, #56]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b01      	cmp	r3, #1
 800439c:	f040 80ce 	bne.w	800453c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043a0:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a08      	ldr	r2, [pc, #32]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ac:	f7fd ff00 	bl	80021b0 <HAL_GetTick>
 80043b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043b2:	e00b      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043b4:	f7fd fefc 	bl	80021b0 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	@ 0x64
 80043c0:	d904      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0bb      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043d8:	d0ec      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d02e      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d12a      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004402:	4b51      	ldr	r3, [pc, #324]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004410:	4b4d      	ldr	r3, [pc, #308]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	0f1b      	lsrs	r3, r3, #28
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	019a      	lsls	r2, r3, #6
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	041b      	lsls	r3, r3, #16
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	061b      	lsls	r3, r3, #24
 8004430:	431a      	orrs	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	071b      	lsls	r3, r3, #28
 8004436:	4944      	ldr	r1, [pc, #272]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800443e:	4b42      	ldr	r3, [pc, #264]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004444:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	3b01      	subs	r3, #1
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	493d      	ldr	r1, [pc, #244]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d022      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800446c:	d11d      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800446e:	4b36      	ldr	r3, [pc, #216]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	0e1b      	lsrs	r3, r3, #24
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800447c:	4b32      	ldr	r3, [pc, #200]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004482:	0f1b      	lsrs	r3, r3, #28
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	019a      	lsls	r2, r3, #6
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	431a      	orrs	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	061b      	lsls	r3, r3, #24
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	071b      	lsls	r3, r3, #28
 80044a2:	4929      	ldr	r1, [pc, #164]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d028      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044b6:	4b24      	ldr	r3, [pc, #144]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044bc:	0e1b      	lsrs	r3, r3, #24
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044c4:	4b20      	ldr	r3, [pc, #128]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	019a      	lsls	r2, r3, #6
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	071b      	lsls	r3, r3, #28
 80044ea:	4917      	ldr	r1, [pc, #92]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044f2:	4b15      	ldr	r3, [pc, #84]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	4911      	ldr	r1, [pc, #68]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004508:	4b0f      	ldr	r3, [pc, #60]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a0e      	ldr	r2, [pc, #56]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004514:	f7fd fe4c 	bl	80021b0 <HAL_GetTick>
 8004518:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800451c:	f7fd fe48 	bl	80021b0 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	@ 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e007      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800452e:	4b06      	ldr	r3, [pc, #24]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800453a:	d1ef      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023800 	.word	0x40023800

0800454c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e049      	b.n	80045f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd fabe 	bl	8001af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	4619      	mov	r1, r3
 800458a:	4610      	mov	r0, r2
 800458c:	f000 fecc 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d001      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e054      	b.n	80046be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a26      	ldr	r2, [pc, #152]	@ (80046cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d022      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463e:	d01d      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a22      	ldr	r2, [pc, #136]	@ (80046d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d018      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a21      	ldr	r2, [pc, #132]	@ (80046d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1f      	ldr	r2, [pc, #124]	@ (80046d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00e      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1e      	ldr	r2, [pc, #120]	@ (80046dc <HAL_TIM_Base_Start_IT+0xe0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x80>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1b      	ldr	r2, [pc, #108]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d115      	bne.n	80046a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_TIM_Base_Start_IT+0xec>)
 8004684:	4013      	ands	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b06      	cmp	r3, #6
 800468c:	d015      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0xbe>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004694:	d011      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a6:	e008      	b.n	80046ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e000      	b.n	80046bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40001800 	.word	0x40001800
 80046e8:	00010007 	.word	0x00010007

080046ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6a1a      	ldr	r2, [r3, #32]
 800470a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10f      	bne.n	8004734 <HAL_TIM_Base_Stop_IT+0x48>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6a1a      	ldr	r2, [r3, #32]
 800471a:	f240 4344 	movw	r3, #1092	@ 0x444
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <HAL_TIM_Base_Stop_IT+0x48>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e049      	b.n	80047f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fd f963 	bl	8001a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 fdcd 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_TIM_PWM_Start+0x24>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e03c      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b04      	cmp	r3, #4
 8004820:	d109      	bne.n	8004836 <HAL_TIM_PWM_Start+0x3e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	e02f      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d109      	bne.n	8004850 <HAL_TIM_PWM_Start+0x58>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e022      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d109      	bne.n	800486a <HAL_TIM_PWM_Start+0x72>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	e015      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b10      	cmp	r3, #16
 800486e:	d109      	bne.n	8004884 <HAL_TIM_PWM_Start+0x8c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e008      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf14      	ite	ne
 8004890:	2301      	movne	r3, #1
 8004892:	2300      	moveq	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e092      	b.n	80049c4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_PWM_Start+0xb6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048ac:	e023      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start+0xc6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048bc:	e01b      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start+0xd6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048cc:	e013      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0xe6>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048dc:	e00b      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_PWM_Start+0xf6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048ec:	e003      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 f81c 	bl	800593c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a30      	ldr	r2, [pc, #192]	@ (80049cc <HAL_TIM_PWM_Start+0x1d4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_TIM_PWM_Start+0x120>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a2f      	ldr	r2, [pc, #188]	@ (80049d0 <HAL_TIM_PWM_Start+0x1d8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_TIM_PWM_Start+0x124>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_TIM_PWM_Start+0x126>
 800491c:	2300      	movs	r3, #0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004930:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a25      	ldr	r2, [pc, #148]	@ (80049cc <HAL_TIM_PWM_Start+0x1d4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d022      	beq.n	8004982 <HAL_TIM_PWM_Start+0x18a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004944:	d01d      	beq.n	8004982 <HAL_TIM_PWM_Start+0x18a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a22      	ldr	r2, [pc, #136]	@ (80049d4 <HAL_TIM_PWM_Start+0x1dc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d018      	beq.n	8004982 <HAL_TIM_PWM_Start+0x18a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a20      	ldr	r2, [pc, #128]	@ (80049d8 <HAL_TIM_PWM_Start+0x1e0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_TIM_PWM_Start+0x18a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <HAL_TIM_PWM_Start+0x1e4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_TIM_PWM_Start+0x18a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a19      	ldr	r2, [pc, #100]	@ (80049d0 <HAL_TIM_PWM_Start+0x1d8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_TIM_PWM_Start+0x18a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1b      	ldr	r2, [pc, #108]	@ (80049e0 <HAL_TIM_PWM_Start+0x1e8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_TIM_PWM_Start+0x18a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a19      	ldr	r2, [pc, #100]	@ (80049e4 <HAL_TIM_PWM_Start+0x1ec>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d115      	bne.n	80049ae <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	4b17      	ldr	r3, [pc, #92]	@ (80049e8 <HAL_TIM_PWM_Start+0x1f0>)
 800498a:	4013      	ands	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b06      	cmp	r3, #6
 8004992:	d015      	beq.n	80049c0 <HAL_TIM_PWM_Start+0x1c8>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499a:	d011      	beq.n	80049c0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	e008      	b.n	80049c0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e000      	b.n	80049c2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40010400 	.word	0x40010400
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40001800 	.word	0x40001800
 80049e8:	00010007 	.word	0x00010007

080049ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 ff9c 	bl	800593c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a36      	ldr	r2, [pc, #216]	@ (8004ae4 <HAL_TIM_PWM_Stop+0xf8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <HAL_TIM_PWM_Stop+0x2c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a35      	ldr	r2, [pc, #212]	@ (8004ae8 <HAL_TIM_PWM_Stop+0xfc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d101      	bne.n	8004a1c <HAL_TIM_PWM_Stop+0x30>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <HAL_TIM_PWM_Stop+0x32>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d017      	beq.n	8004a52 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <HAL_TIM_PWM_Stop+0x66>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a1a      	ldr	r2, [r3, #32]
 8004a38:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d107      	bne.n	8004a52 <HAL_TIM_PWM_Stop+0x66>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10f      	bne.n	8004a82 <HAL_TIM_PWM_Stop+0x96>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6a1a      	ldr	r2, [r3, #32]
 8004a68:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d107      	bne.n	8004a82 <HAL_TIM_PWM_Stop+0x96>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Stop+0xa6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a90:	e023      	b.n	8004ada <HAL_TIM_PWM_Stop+0xee>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Stop+0xb6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aa0:	e01b      	b.n	8004ada <HAL_TIM_PWM_Stop+0xee>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Stop+0xc6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab0:	e013      	b.n	8004ada <HAL_TIM_PWM_Stop+0xee>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Stop+0xd6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ac0:	e00b      	b.n	8004ada <HAL_TIM_PWM_Stop+0xee>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_PWM_Stop+0xe6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad0:	e003      	b.n	8004ada <HAL_TIM_PWM_Stop+0xee>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40010400 	.word	0x40010400

08004aec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e08f      	b.n	8004c20 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fc fe47 	bl	80017a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c28 <HAL_TIM_Encoder_Init+0x13c>)
 8004b2e:	400b      	ands	r3, r1
 8004b30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f000 fbf3 	bl	8005328 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4b31      	ldr	r3, [pc, #196]	@ (8004c2c <HAL_TIM_Encoder_Init+0x140>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	4313      	orrs	r3, r2
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4b2b      	ldr	r3, [pc, #172]	@ (8004c30 <HAL_TIM_Encoder_Init+0x144>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4b2a      	ldr	r3, [pc, #168]	@ (8004c34 <HAL_TIM_Encoder_Init+0x148>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	011a      	lsls	r2, r3, #4
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	031b      	lsls	r3, r3, #12
 8004bac:	4313      	orrs	r3, r2
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004bc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	fffebff8 	.word	0xfffebff8
 8004c2c:	fffffcfc 	.word	0xfffffcfc
 8004c30:	fffff3f3 	.word	0xfffff3f3
 8004c34:	ffff0f0f 	.word	0xffff0f0f

08004c38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d110      	bne.n	8004c8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d102      	bne.n	8004c74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c6e:	7b7b      	ldrb	r3, [r7, #13]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d001      	beq.n	8004c78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e069      	b.n	8004d4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c88:	e031      	b.n	8004cee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d110      	bne.n	8004cb2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c90:	7bbb      	ldrb	r3, [r7, #14]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d102      	bne.n	8004c9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c96:	7b3b      	ldrb	r3, [r7, #12]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d001      	beq.n	8004ca0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e055      	b.n	8004d4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cb0:	e01d      	b.n	8004cee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d108      	bne.n	8004cca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb8:	7bbb      	ldrb	r3, [r7, #14]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d105      	bne.n	8004cca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cbe:	7b7b      	ldrb	r3, [r7, #13]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d102      	bne.n	8004cca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cc4:	7b3b      	ldrb	r3, [r7, #12]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d001      	beq.n	8004cce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e03e      	b.n	8004d4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_TIM_Encoder_Start+0xc4>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d008      	beq.n	8004d0c <HAL_TIM_Encoder_Start+0xd4>
 8004cfa:	e00f      	b.n	8004d1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2201      	movs	r2, #1
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fe19 	bl	800593c <TIM_CCxChannelCmd>
      break;
 8004d0a:	e016      	b.n	8004d3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2201      	movs	r2, #1
 8004d12:	2104      	movs	r1, #4
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fe11 	bl	800593c <TIM_CCxChannelCmd>
      break;
 8004d1a:	e00e      	b.n	8004d3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fe09 	bl	800593c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	2104      	movs	r1, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fe02 	bl	800593c <TIM_CCxChannelCmd>
      break;
 8004d38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_TIM_Encoder_Stop+0x18>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d008      	beq.n	8004d7c <HAL_TIM_Encoder_Stop+0x28>
 8004d6a:	e00f      	b.n	8004d8c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fde1 	bl	800593c <TIM_CCxChannelCmd>
      break;
 8004d7a:	e016      	b.n	8004daa <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	2104      	movs	r1, #4
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fdd9 	bl	800593c <TIM_CCxChannelCmd>
      break;
 8004d8a:	e00e      	b.n	8004daa <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fdd1 	bl	800593c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2104      	movs	r1, #4
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fdca 	bl	800593c <TIM_CCxChannelCmd>
      break;
 8004da8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10f      	bne.n	8004dda <HAL_TIM_Encoder_Stop+0x86>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d107      	bne.n	8004dda <HAL_TIM_Encoder_Stop+0x86>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_TIM_Encoder_Stop+0x92>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d148      	bne.n	8004e78 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_Encoder_Stop+0xa2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df4:	e023      	b.n	8004e3e <HAL_TIM_Encoder_Stop+0xea>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_Encoder_Stop+0xb2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e04:	e01b      	b.n	8004e3e <HAL_TIM_Encoder_Stop+0xea>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_Encoder_Stop+0xc2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e14:	e013      	b.n	8004e3e <HAL_TIM_Encoder_Stop+0xea>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_Encoder_Stop+0xd2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e24:	e00b      	b.n	8004e3e <HAL_TIM_Encoder_Stop+0xea>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_Encoder_Stop+0xe2>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e34:	e003      	b.n	8004e3e <HAL_TIM_Encoder_Stop+0xea>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_Encoder_Stop+0xfa>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e4c:	e024      	b.n	8004e98 <HAL_TIM_Encoder_Stop+0x144>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_Encoder_Stop+0x10a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e5c:	e01c      	b.n	8004e98 <HAL_TIM_Encoder_Stop+0x144>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_Encoder_Stop+0x11a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e6c:	e014      	b.n	8004e98 <HAL_TIM_Encoder_Stop+0x144>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004e76:	e00f      	b.n	8004e98 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d020      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01b      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f06f 0202 	mvn.w	r2, #2
 8004ed6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f9fd 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004ef2:	e005      	b.n	8004f00 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f9ef 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa00 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d020      	beq.n	8004f52 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01b      	beq.n	8004f52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0204 	mvn.w	r2, #4
 8004f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f9d7 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004f3e:	e005      	b.n	8004f4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f9c9 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f9da 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d020      	beq.n	8004f9e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01b      	beq.n	8004f9e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0208 	mvn.w	r2, #8
 8004f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2204      	movs	r2, #4
 8004f74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f9b1 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004f8a:	e005      	b.n	8004f98 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f9a3 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f9b4 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d020      	beq.n	8004fea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01b      	beq.n	8004fea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f06f 0210 	mvn.w	r2, #16
 8004fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f98b 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004fd6:	e005      	b.n	8004fe4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f97d 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f98e 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00c      	beq.n	800500e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f06f 0201 	mvn.w	r2, #1
 8005006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fb fd4f 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fd3e 	bl	8005ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fd36 	bl	8005acc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f948 	bl	8005314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00c      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0220 	mvn.w	r2, #32
 80050a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fcfe 	bl	8005aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e0ff      	b.n	80052ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b14      	cmp	r3, #20
 80050da:	f200 80f0 	bhi.w	80052be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050de:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005139 	.word	0x08005139
 80050e8:	080052bf 	.word	0x080052bf
 80050ec:	080052bf 	.word	0x080052bf
 80050f0:	080052bf 	.word	0x080052bf
 80050f4:	08005179 	.word	0x08005179
 80050f8:	080052bf 	.word	0x080052bf
 80050fc:	080052bf 	.word	0x080052bf
 8005100:	080052bf 	.word	0x080052bf
 8005104:	080051bb 	.word	0x080051bb
 8005108:	080052bf 	.word	0x080052bf
 800510c:	080052bf 	.word	0x080052bf
 8005110:	080052bf 	.word	0x080052bf
 8005114:	080051fb 	.word	0x080051fb
 8005118:	080052bf 	.word	0x080052bf
 800511c:	080052bf 	.word	0x080052bf
 8005120:	080052bf 	.word	0x080052bf
 8005124:	0800523d 	.word	0x0800523d
 8005128:	080052bf 	.word	0x080052bf
 800512c:	080052bf 	.word	0x080052bf
 8005130:	080052bf 	.word	0x080052bf
 8005134:	0800527d 	.word	0x0800527d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f99e 	bl	8005480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0208 	orr.w	r2, r2, #8
 8005152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0204 	bic.w	r2, r2, #4
 8005162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6999      	ldr	r1, [r3, #24]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	619a      	str	r2, [r3, #24]
      break;
 8005176:	e0a5      	b.n	80052c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f9f0 	bl	8005564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6999      	ldr	r1, [r3, #24]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	021a      	lsls	r2, r3, #8
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	619a      	str	r2, [r3, #24]
      break;
 80051b8:	e084      	b.n	80052c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fa47 	bl	8005654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0208 	orr.w	r2, r2, #8
 80051d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0204 	bic.w	r2, r2, #4
 80051e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69d9      	ldr	r1, [r3, #28]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	61da      	str	r2, [r3, #28]
      break;
 80051f8:	e064      	b.n	80052c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fa9d 	bl	8005740 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69d9      	ldr	r1, [r3, #28]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	021a      	lsls	r2, r3, #8
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	61da      	str	r2, [r3, #28]
      break;
 800523a:	e043      	b.n	80052c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fad4 	bl	80057f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0208 	orr.w	r2, r2, #8
 8005256:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0204 	bic.w	r2, r2, #4
 8005266:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800527a:	e023      	b.n	80052c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fb06 	bl	8005894 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	021a      	lsls	r2, r3, #8
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052bc:	e002      	b.n	80052c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	75fb      	strb	r3, [r7, #23]
      break;
 80052c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop

080052d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a46      	ldr	r2, [pc, #280]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d00f      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a43      	ldr	r2, [pc, #268]	@ (8005458 <TIM_Base_SetConfig+0x130>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a42      	ldr	r2, [pc, #264]	@ (800545c <TIM_Base_SetConfig+0x134>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a41      	ldr	r2, [pc, #260]	@ (8005460 <TIM_Base_SetConfig+0x138>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a40      	ldr	r2, [pc, #256]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d108      	bne.n	800537a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a35      	ldr	r2, [pc, #212]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005388:	d027      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a32      	ldr	r2, [pc, #200]	@ (8005458 <TIM_Base_SetConfig+0x130>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d023      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a31      	ldr	r2, [pc, #196]	@ (800545c <TIM_Base_SetConfig+0x134>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01f      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a30      	ldr	r2, [pc, #192]	@ (8005460 <TIM_Base_SetConfig+0x138>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d017      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005468 <TIM_Base_SetConfig+0x140>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2d      	ldr	r2, [pc, #180]	@ (800546c <TIM_Base_SetConfig+0x144>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005470 <TIM_Base_SetConfig+0x148>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005474 <TIM_Base_SetConfig+0x14c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005478 <TIM_Base_SetConfig+0x150>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a29      	ldr	r2, [pc, #164]	@ (800547c <TIM_Base_SetConfig+0x154>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a10      	ldr	r2, [pc, #64]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0xf8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a12      	ldr	r2, [pc, #72]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d103      	bne.n	8005428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]
  }
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40010400 	.word	0x40010400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800
 8005474:	40001800 	.word	0x40001800
 8005478:	40001c00 	.word	0x40001c00
 800547c:	40002000 	.word	0x40002000

08005480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 0201 	bic.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005558 <TIM_OC1_SetConfig+0xd8>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0302 	bic.w	r3, r3, #2
 80054c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a21      	ldr	r2, [pc, #132]	@ (800555c <TIM_OC1_SetConfig+0xdc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC1_SetConfig+0x64>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a20      	ldr	r2, [pc, #128]	@ (8005560 <TIM_OC1_SetConfig+0xe0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10c      	bne.n	80054fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0308 	bic.w	r3, r3, #8
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 0304 	bic.w	r3, r3, #4
 80054fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a16      	ldr	r2, [pc, #88]	@ (800555c <TIM_OC1_SetConfig+0xdc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_OC1_SetConfig+0x8e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a15      	ldr	r2, [pc, #84]	@ (8005560 <TIM_OC1_SetConfig+0xe0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800551c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	fffeff8f 	.word	0xfffeff8f
 800555c:	40010000 	.word	0x40010000
 8005560:	40010400 	.word	0x40010400

08005564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f023 0210 	bic.w	r2, r3, #16
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4b2e      	ldr	r3, [pc, #184]	@ (8005648 <TIM_OC2_SetConfig+0xe4>)
 8005590:	4013      	ands	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800559a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0320 	bic.w	r3, r3, #32
 80055ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a23      	ldr	r2, [pc, #140]	@ (800564c <TIM_OC2_SetConfig+0xe8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_OC2_SetConfig+0x68>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a22      	ldr	r2, [pc, #136]	@ (8005650 <TIM_OC2_SetConfig+0xec>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10d      	bne.n	80055e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a18      	ldr	r2, [pc, #96]	@ (800564c <TIM_OC2_SetConfig+0xe8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_OC2_SetConfig+0x94>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a17      	ldr	r2, [pc, #92]	@ (8005650 <TIM_OC2_SetConfig+0xec>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d113      	bne.n	8005620 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	feff8fff 	.word	0xfeff8fff
 800564c:	40010000 	.word	0x40010000
 8005650:	40010400 	.word	0x40010400

08005654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4b2d      	ldr	r3, [pc, #180]	@ (8005734 <TIM_OC3_SetConfig+0xe0>)
 8005680:	4013      	ands	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800569c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a22      	ldr	r2, [pc, #136]	@ (8005738 <TIM_OC3_SetConfig+0xe4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC3_SetConfig+0x66>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a21      	ldr	r2, [pc, #132]	@ (800573c <TIM_OC3_SetConfig+0xe8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d10d      	bne.n	80056d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a17      	ldr	r2, [pc, #92]	@ (8005738 <TIM_OC3_SetConfig+0xe4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_OC3_SetConfig+0x92>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a16      	ldr	r2, [pc, #88]	@ (800573c <TIM_OC3_SetConfig+0xe8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d113      	bne.n	800570e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	fffeff8f 	.word	0xfffeff8f
 8005738:	40010000 	.word	0x40010000
 800573c:	40010400 	.word	0x40010400

08005740 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4b1e      	ldr	r3, [pc, #120]	@ (80057e4 <TIM_OC4_SetConfig+0xa4>)
 800576c:	4013      	ands	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800578a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	031b      	lsls	r3, r3, #12
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a13      	ldr	r2, [pc, #76]	@ (80057e8 <TIM_OC4_SetConfig+0xa8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC4_SetConfig+0x68>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a12      	ldr	r2, [pc, #72]	@ (80057ec <TIM_OC4_SetConfig+0xac>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d109      	bne.n	80057bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	019b      	lsls	r3, r3, #6
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	feff8fff 	.word	0xfeff8fff
 80057e8:	40010000 	.word	0x40010000
 80057ec:	40010400 	.word	0x40010400

080057f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4b1b      	ldr	r3, [pc, #108]	@ (8005888 <TIM_OC5_SetConfig+0x98>)
 800581c:	4013      	ands	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005830:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a12      	ldr	r2, [pc, #72]	@ (800588c <TIM_OC5_SetConfig+0x9c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_OC5_SetConfig+0x5e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a11      	ldr	r2, [pc, #68]	@ (8005890 <TIM_OC5_SetConfig+0xa0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d109      	bne.n	8005862 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005854:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	fffeff8f 	.word	0xfffeff8f
 800588c:	40010000 	.word	0x40010000
 8005890:	40010400 	.word	0x40010400

08005894 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <TIM_OC6_SetConfig+0x9c>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	051b      	lsls	r3, r3, #20
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a13      	ldr	r2, [pc, #76]	@ (8005934 <TIM_OC6_SetConfig+0xa0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_OC6_SetConfig+0x60>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a12      	ldr	r2, [pc, #72]	@ (8005938 <TIM_OC6_SetConfig+0xa4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d109      	bne.n	8005908 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	029b      	lsls	r3, r3, #10
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	feff8fff 	.word	0xfeff8fff
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400

0800593c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2201      	movs	r2, #1
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e06d      	b.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a30      	ldr	r2, [pc, #192]	@ (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d004      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2f      	ldr	r2, [pc, #188]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d108      	bne.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a20      	ldr	r2, [pc, #128]	@ (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d022      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a12:	d01d      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1d      	ldr	r2, [pc, #116]	@ (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d018      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1c      	ldr	r2, [pc, #112]	@ (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a16      	ldr	r2, [pc, #88]	@ (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a15      	ldr	r2, [pc, #84]	@ (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10c      	bne.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40001800 	.word	0x40001800

08005aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e040      	b.n	8005b74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc f91a 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2224      	movs	r2, #36	@ 0x24
 8005b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 ff18 	bl	800695c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fcb1 	bl	8006494 <UART_SetConfig>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e01b      	b.n	8005b74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 ff97 	bl	8006aa0 <UART_CheckIdleState>
 8005b72:	4603      	mov	r3, r0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	@ 0x28
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d177      	bne.n	8005c84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_UART_Transmit+0x24>
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e070      	b.n	8005c86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2221      	movs	r2, #33	@ 0x21
 8005bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bb2:	f7fc fafd 	bl	80021b0 <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd0:	d108      	bne.n	8005be4 <HAL_UART_Transmit+0x68>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d104      	bne.n	8005be4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e003      	b.n	8005bec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bec:	e02f      	b.n	8005c4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2180      	movs	r1, #128	@ 0x80
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fff9 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e03b      	b.n	8005c86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	3302      	adds	r3, #2
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e007      	b.n	8005c3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	781a      	ldrb	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1c9      	bne.n	8005bee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2200      	movs	r2, #0
 8005c62:	2140      	movs	r1, #64	@ 0x40
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 ffc3 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e005      	b.n	8005c86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e000      	b.n	8005c86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b08a      	sub	sp, #40	@ 0x28
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d132      	bne.n	8005d0c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_UART_Receive_IT+0x24>
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e02b      	b.n	8005d0e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	623b      	str	r3, [r7, #32]
 8005cea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	69f9      	ldr	r1, [r7, #28]
 8005cee:	6a3a      	ldr	r2, [r7, #32]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 ffe2 	bl	8006ccc <UART_Start_Receive_IT>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3728      	adds	r7, #40	@ 0x28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b09a      	sub	sp, #104	@ 0x68
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d32:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d3e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e6      	bne.n	8005d1e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d70:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e5      	bne.n	8005d50 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d118      	bne.n	8005dbe <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	f023 0310 	bic.w	r3, r3, #16
 8005da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e6      	bne.n	8005d8c <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc8:	2b40      	cmp	r3, #64	@ 0x40
 8005dca:	d137      	bne.n	8005e3c <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005de2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dec:	61ba      	str	r2, [r7, #24]
 8005dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6979      	ldr	r1, [r7, #20]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d019      	beq.n	8005e3c <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fc fc1b 	bl	8002650 <HAL_DMA_Abort>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fc fe2f 	bl	8002a88 <HAL_DMA_GetError>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d105      	bne.n	8005e3c <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2210      	movs	r2, #16
 8005e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e017      	b.n	8005e6c <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	220f      	movs	r2, #15
 8005e4a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0208 	orr.w	r2, r2, #8
 8005e5a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3768      	adds	r7, #104	@ 0x68
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b0ba      	sub	sp, #232	@ 0xe8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e9e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d115      	bne.n	8005edc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00f      	beq.n	8005edc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 82ac 	beq.w	800642a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	4798      	blx	r3
      }
      return;
 8005eda:	e2a6      	b.n	800642a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8117 	beq.w	8006114 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ef2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ef6:	4b85      	ldr	r3, [pc, #532]	@ (800610c <HAL_UART_IRQHandler+0x298>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 810a 	beq.w	8006114 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d011      	beq.n	8005f30 <HAL_UART_IRQHandler+0xbc>
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f26:	f043 0201 	orr.w	r2, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d011      	beq.n	8005f60 <HAL_UART_IRQHandler+0xec>
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d011      	beq.n	8005f90 <HAL_UART_IRQHandler+0x11c>
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f86:	f043 0202 	orr.w	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d017      	beq.n	8005fcc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d105      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2208      	movs	r2, #8
 8005fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fc2:	f043 0208 	orr.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d012      	beq.n	8005ffe <HAL_UART_IRQHandler+0x18a>
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00c      	beq.n	8005ffe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff4:	f043 0220 	orr.w	r2, r3, #32
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8212 	beq.w	800642e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00d      	beq.n	8006032 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006038:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d005      	beq.n	8006056 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800604a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800604e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006052:	2b00      	cmp	r3, #0
 8006054:	d04f      	beq.n	80060f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 ffc4 	bl	8006fe4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006066:	2b40      	cmp	r3, #64	@ 0x40
 8006068:	d141      	bne.n	80060ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006080:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006096:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800609a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1d9      	bne.n	800606a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d013      	beq.n	80060e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c2:	4a13      	ldr	r2, [pc, #76]	@ (8006110 <HAL_UART_IRQHandler+0x29c>)
 80060c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fc fb30 	bl	8002730 <HAL_DMA_Abort_IT>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d017      	beq.n	8006106 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060e0:	4610      	mov	r0, r2
 80060e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	e00f      	b.n	8006106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9c0 	bl	800646c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	e00b      	b.n	8006106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f9bc 	bl	800646c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	e007      	b.n	8006106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9b8 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006104:	e193      	b.n	800642e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006106:	bf00      	nop
    return;
 8006108:	e191      	b.n	800642e <HAL_UART_IRQHandler+0x5ba>
 800610a:	bf00      	nop
 800610c:	04000120 	.word	0x04000120
 8006110:	08007291 	.word	0x08007291

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006118:	2b01      	cmp	r3, #1
 800611a:	f040 814c 	bne.w	80063b6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8145 	beq.w	80063b6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 813e 	beq.w	80063b6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2210      	movs	r2, #16
 8006140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614c:	2b40      	cmp	r3, #64	@ 0x40
 800614e:	f040 80b6 	bne.w	80062be <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800615e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8165 	beq.w	8006432 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800616e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006172:	429a      	cmp	r2, r3
 8006174:	f080 815d 	bcs.w	8006432 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800617e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800618c:	f000 8086 	beq.w	800629c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1da      	bne.n	8006190 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006202:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006206:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e1      	bne.n	80061da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3308      	adds	r3, #8
 800621c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800622c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800623a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800623c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006240:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800626a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800626c:	f023 0310 	bic.w	r3, r3, #16
 8006270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800627e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006280:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800628c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e4      	bne.n	800625c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006296:	4618      	mov	r0, r3
 8006298:	f7fc f9da 	bl	8002650 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fa fa8a 	bl	80007d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062bc:	e0b9      	b.n	8006432 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80ab 	beq.w	8006436 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80062e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80a6 	beq.w	8006436 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800630c:	647b      	str	r3, [r7, #68]	@ 0x44
 800630e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800631a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e4      	bne.n	80062ea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3308      	adds	r3, #8
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	623b      	str	r3, [r7, #32]
   return(result);
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006344:	633a      	str	r2, [r7, #48]	@ 0x30
 8006346:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800634a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e3      	bne.n	8006320 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	60fb      	str	r3, [r7, #12]
   return(result);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 0310 	bic.w	r3, r3, #16
 8006380:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	69b9      	ldr	r1, [r7, #24]
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	617b      	str	r3, [r7, #20]
   return(result);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e4      	bne.n	800636c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fa fa0e 	bl	80007d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063b4:	e03f      	b.n	8006436 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <HAL_UART_IRQHandler+0x56c>
 80063c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80063d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f851 	bl	8006480 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063de:	e02d      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00e      	beq.n	800640a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01c      	beq.n	800643a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
    }
    return;
 8006408:	e017      	b.n	800643a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d012      	beq.n	800643c <HAL_UART_IRQHandler+0x5c8>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 ff4a 	bl	80072bc <UART_EndTransmit_IT>
    return;
 8006428:	e008      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
      return;
 800642a:	bf00      	nop
 800642c:	e006      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
    return;
 800642e:	bf00      	nop
 8006430:	e004      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006432:	bf00      	nop
 8006434:	e002      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
    return;
 800643a:	bf00      	nop
  }

}
 800643c:	37e8      	adds	r7, #232	@ 0xe8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop

08006444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4ba6      	ldr	r3, [pc, #664]	@ (8006758 <UART_SetConfig+0x2c4>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	6979      	ldr	r1, [r7, #20]
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	430a      	orrs	r2, r1
 8006504:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a94      	ldr	r2, [pc, #592]	@ (800675c <UART_SetConfig+0x2c8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d120      	bne.n	8006552 <UART_SetConfig+0xbe>
 8006510:	4b93      	ldr	r3, [pc, #588]	@ (8006760 <UART_SetConfig+0x2cc>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b03      	cmp	r3, #3
 800651c:	d816      	bhi.n	800654c <UART_SetConfig+0xb8>
 800651e:	a201      	add	r2, pc, #4	@ (adr r2, 8006524 <UART_SetConfig+0x90>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006535 	.word	0x08006535
 8006528:	08006541 	.word	0x08006541
 800652c:	0800653b 	.word	0x0800653b
 8006530:	08006547 	.word	0x08006547
 8006534:	2301      	movs	r3, #1
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e150      	b.n	80067dc <UART_SetConfig+0x348>
 800653a:	2302      	movs	r3, #2
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e14d      	b.n	80067dc <UART_SetConfig+0x348>
 8006540:	2304      	movs	r3, #4
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e14a      	b.n	80067dc <UART_SetConfig+0x348>
 8006546:	2308      	movs	r3, #8
 8006548:	77fb      	strb	r3, [r7, #31]
 800654a:	e147      	b.n	80067dc <UART_SetConfig+0x348>
 800654c:	2310      	movs	r3, #16
 800654e:	77fb      	strb	r3, [r7, #31]
 8006550:	e144      	b.n	80067dc <UART_SetConfig+0x348>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a83      	ldr	r2, [pc, #524]	@ (8006764 <UART_SetConfig+0x2d0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d132      	bne.n	80065c2 <UART_SetConfig+0x12e>
 800655c:	4b80      	ldr	r3, [pc, #512]	@ (8006760 <UART_SetConfig+0x2cc>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	2b0c      	cmp	r3, #12
 8006568:	d828      	bhi.n	80065bc <UART_SetConfig+0x128>
 800656a:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <UART_SetConfig+0xdc>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080065bd 	.word	0x080065bd
 8006578:	080065bd 	.word	0x080065bd
 800657c:	080065bd 	.word	0x080065bd
 8006580:	080065b1 	.word	0x080065b1
 8006584:	080065bd 	.word	0x080065bd
 8006588:	080065bd 	.word	0x080065bd
 800658c:	080065bd 	.word	0x080065bd
 8006590:	080065ab 	.word	0x080065ab
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065bd 	.word	0x080065bd
 80065a0:	080065b7 	.word	0x080065b7
 80065a4:	2300      	movs	r3, #0
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e118      	b.n	80067dc <UART_SetConfig+0x348>
 80065aa:	2302      	movs	r3, #2
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e115      	b.n	80067dc <UART_SetConfig+0x348>
 80065b0:	2304      	movs	r3, #4
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e112      	b.n	80067dc <UART_SetConfig+0x348>
 80065b6:	2308      	movs	r3, #8
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e10f      	b.n	80067dc <UART_SetConfig+0x348>
 80065bc:	2310      	movs	r3, #16
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e10c      	b.n	80067dc <UART_SetConfig+0x348>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a68      	ldr	r2, [pc, #416]	@ (8006768 <UART_SetConfig+0x2d4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d120      	bne.n	800660e <UART_SetConfig+0x17a>
 80065cc:	4b64      	ldr	r3, [pc, #400]	@ (8006760 <UART_SetConfig+0x2cc>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065d6:	2b30      	cmp	r3, #48	@ 0x30
 80065d8:	d013      	beq.n	8006602 <UART_SetConfig+0x16e>
 80065da:	2b30      	cmp	r3, #48	@ 0x30
 80065dc:	d814      	bhi.n	8006608 <UART_SetConfig+0x174>
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d009      	beq.n	80065f6 <UART_SetConfig+0x162>
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d810      	bhi.n	8006608 <UART_SetConfig+0x174>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <UART_SetConfig+0x15c>
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d006      	beq.n	80065fc <UART_SetConfig+0x168>
 80065ee:	e00b      	b.n	8006608 <UART_SetConfig+0x174>
 80065f0:	2300      	movs	r3, #0
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e0f2      	b.n	80067dc <UART_SetConfig+0x348>
 80065f6:	2302      	movs	r3, #2
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e0ef      	b.n	80067dc <UART_SetConfig+0x348>
 80065fc:	2304      	movs	r3, #4
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e0ec      	b.n	80067dc <UART_SetConfig+0x348>
 8006602:	2308      	movs	r3, #8
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e0e9      	b.n	80067dc <UART_SetConfig+0x348>
 8006608:	2310      	movs	r3, #16
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e0e6      	b.n	80067dc <UART_SetConfig+0x348>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a56      	ldr	r2, [pc, #344]	@ (800676c <UART_SetConfig+0x2d8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d120      	bne.n	800665a <UART_SetConfig+0x1c6>
 8006618:	4b51      	ldr	r3, [pc, #324]	@ (8006760 <UART_SetConfig+0x2cc>)
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006622:	2bc0      	cmp	r3, #192	@ 0xc0
 8006624:	d013      	beq.n	800664e <UART_SetConfig+0x1ba>
 8006626:	2bc0      	cmp	r3, #192	@ 0xc0
 8006628:	d814      	bhi.n	8006654 <UART_SetConfig+0x1c0>
 800662a:	2b80      	cmp	r3, #128	@ 0x80
 800662c:	d009      	beq.n	8006642 <UART_SetConfig+0x1ae>
 800662e:	2b80      	cmp	r3, #128	@ 0x80
 8006630:	d810      	bhi.n	8006654 <UART_SetConfig+0x1c0>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <UART_SetConfig+0x1a8>
 8006636:	2b40      	cmp	r3, #64	@ 0x40
 8006638:	d006      	beq.n	8006648 <UART_SetConfig+0x1b4>
 800663a:	e00b      	b.n	8006654 <UART_SetConfig+0x1c0>
 800663c:	2300      	movs	r3, #0
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e0cc      	b.n	80067dc <UART_SetConfig+0x348>
 8006642:	2302      	movs	r3, #2
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e0c9      	b.n	80067dc <UART_SetConfig+0x348>
 8006648:	2304      	movs	r3, #4
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e0c6      	b.n	80067dc <UART_SetConfig+0x348>
 800664e:	2308      	movs	r3, #8
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e0c3      	b.n	80067dc <UART_SetConfig+0x348>
 8006654:	2310      	movs	r3, #16
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e0c0      	b.n	80067dc <UART_SetConfig+0x348>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a44      	ldr	r2, [pc, #272]	@ (8006770 <UART_SetConfig+0x2dc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d125      	bne.n	80066b0 <UART_SetConfig+0x21c>
 8006664:	4b3e      	ldr	r3, [pc, #248]	@ (8006760 <UART_SetConfig+0x2cc>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800666e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006672:	d017      	beq.n	80066a4 <UART_SetConfig+0x210>
 8006674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006678:	d817      	bhi.n	80066aa <UART_SetConfig+0x216>
 800667a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800667e:	d00b      	beq.n	8006698 <UART_SetConfig+0x204>
 8006680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006684:	d811      	bhi.n	80066aa <UART_SetConfig+0x216>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <UART_SetConfig+0x1fe>
 800668a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800668e:	d006      	beq.n	800669e <UART_SetConfig+0x20a>
 8006690:	e00b      	b.n	80066aa <UART_SetConfig+0x216>
 8006692:	2300      	movs	r3, #0
 8006694:	77fb      	strb	r3, [r7, #31]
 8006696:	e0a1      	b.n	80067dc <UART_SetConfig+0x348>
 8006698:	2302      	movs	r3, #2
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e09e      	b.n	80067dc <UART_SetConfig+0x348>
 800669e:	2304      	movs	r3, #4
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e09b      	b.n	80067dc <UART_SetConfig+0x348>
 80066a4:	2308      	movs	r3, #8
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e098      	b.n	80067dc <UART_SetConfig+0x348>
 80066aa:	2310      	movs	r3, #16
 80066ac:	77fb      	strb	r3, [r7, #31]
 80066ae:	e095      	b.n	80067dc <UART_SetConfig+0x348>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006774 <UART_SetConfig+0x2e0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d125      	bne.n	8006706 <UART_SetConfig+0x272>
 80066ba:	4b29      	ldr	r3, [pc, #164]	@ (8006760 <UART_SetConfig+0x2cc>)
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c8:	d017      	beq.n	80066fa <UART_SetConfig+0x266>
 80066ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ce:	d817      	bhi.n	8006700 <UART_SetConfig+0x26c>
 80066d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d4:	d00b      	beq.n	80066ee <UART_SetConfig+0x25a>
 80066d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066da:	d811      	bhi.n	8006700 <UART_SetConfig+0x26c>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <UART_SetConfig+0x254>
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e4:	d006      	beq.n	80066f4 <UART_SetConfig+0x260>
 80066e6:	e00b      	b.n	8006700 <UART_SetConfig+0x26c>
 80066e8:	2301      	movs	r3, #1
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e076      	b.n	80067dc <UART_SetConfig+0x348>
 80066ee:	2302      	movs	r3, #2
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e073      	b.n	80067dc <UART_SetConfig+0x348>
 80066f4:	2304      	movs	r3, #4
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e070      	b.n	80067dc <UART_SetConfig+0x348>
 80066fa:	2308      	movs	r3, #8
 80066fc:	77fb      	strb	r3, [r7, #31]
 80066fe:	e06d      	b.n	80067dc <UART_SetConfig+0x348>
 8006700:	2310      	movs	r3, #16
 8006702:	77fb      	strb	r3, [r7, #31]
 8006704:	e06a      	b.n	80067dc <UART_SetConfig+0x348>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1b      	ldr	r2, [pc, #108]	@ (8006778 <UART_SetConfig+0x2e4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d138      	bne.n	8006782 <UART_SetConfig+0x2ee>
 8006710:	4b13      	ldr	r3, [pc, #76]	@ (8006760 <UART_SetConfig+0x2cc>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006716:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800671a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800671e:	d017      	beq.n	8006750 <UART_SetConfig+0x2bc>
 8006720:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006724:	d82a      	bhi.n	800677c <UART_SetConfig+0x2e8>
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800672a:	d00b      	beq.n	8006744 <UART_SetConfig+0x2b0>
 800672c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006730:	d824      	bhi.n	800677c <UART_SetConfig+0x2e8>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <UART_SetConfig+0x2aa>
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800673a:	d006      	beq.n	800674a <UART_SetConfig+0x2b6>
 800673c:	e01e      	b.n	800677c <UART_SetConfig+0x2e8>
 800673e:	2300      	movs	r3, #0
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e04b      	b.n	80067dc <UART_SetConfig+0x348>
 8006744:	2302      	movs	r3, #2
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e048      	b.n	80067dc <UART_SetConfig+0x348>
 800674a:	2304      	movs	r3, #4
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e045      	b.n	80067dc <UART_SetConfig+0x348>
 8006750:	2308      	movs	r3, #8
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e042      	b.n	80067dc <UART_SetConfig+0x348>
 8006756:	bf00      	nop
 8006758:	efff69f3 	.word	0xefff69f3
 800675c:	40011000 	.word	0x40011000
 8006760:	40023800 	.word	0x40023800
 8006764:	40004400 	.word	0x40004400
 8006768:	40004800 	.word	0x40004800
 800676c:	40004c00 	.word	0x40004c00
 8006770:	40005000 	.word	0x40005000
 8006774:	40011400 	.word	0x40011400
 8006778:	40007800 	.word	0x40007800
 800677c:	2310      	movs	r3, #16
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e02c      	b.n	80067dc <UART_SetConfig+0x348>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a72      	ldr	r2, [pc, #456]	@ (8006950 <UART_SetConfig+0x4bc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d125      	bne.n	80067d8 <UART_SetConfig+0x344>
 800678c:	4b71      	ldr	r3, [pc, #452]	@ (8006954 <UART_SetConfig+0x4c0>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006792:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006796:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800679a:	d017      	beq.n	80067cc <UART_SetConfig+0x338>
 800679c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067a0:	d817      	bhi.n	80067d2 <UART_SetConfig+0x33e>
 80067a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a6:	d00b      	beq.n	80067c0 <UART_SetConfig+0x32c>
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ac:	d811      	bhi.n	80067d2 <UART_SetConfig+0x33e>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <UART_SetConfig+0x326>
 80067b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067b6:	d006      	beq.n	80067c6 <UART_SetConfig+0x332>
 80067b8:	e00b      	b.n	80067d2 <UART_SetConfig+0x33e>
 80067ba:	2300      	movs	r3, #0
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e00d      	b.n	80067dc <UART_SetConfig+0x348>
 80067c0:	2302      	movs	r3, #2
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e00a      	b.n	80067dc <UART_SetConfig+0x348>
 80067c6:	2304      	movs	r3, #4
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e007      	b.n	80067dc <UART_SetConfig+0x348>
 80067cc:	2308      	movs	r3, #8
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e004      	b.n	80067dc <UART_SetConfig+0x348>
 80067d2:	2310      	movs	r3, #16
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e001      	b.n	80067dc <UART_SetConfig+0x348>
 80067d8:	2310      	movs	r3, #16
 80067da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e4:	d15b      	bne.n	800689e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067e6:	7ffb      	ldrb	r3, [r7, #31]
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d828      	bhi.n	800683e <UART_SetConfig+0x3aa>
 80067ec:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <UART_SetConfig+0x360>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006819 	.word	0x08006819
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006829 	.word	0x08006829
 8006800:	0800683f 	.word	0x0800683f
 8006804:	0800682f 	.word	0x0800682f
 8006808:	0800683f 	.word	0x0800683f
 800680c:	0800683f 	.word	0x0800683f
 8006810:	0800683f 	.word	0x0800683f
 8006814:	08006837 	.word	0x08006837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fd fa48 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 800681c:	61b8      	str	r0, [r7, #24]
        break;
 800681e:	e013      	b.n	8006848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006820:	f7fd fa58 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 8006824:	61b8      	str	r0, [r7, #24]
        break;
 8006826:	e00f      	b.n	8006848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006828:	4b4b      	ldr	r3, [pc, #300]	@ (8006958 <UART_SetConfig+0x4c4>)
 800682a:	61bb      	str	r3, [r7, #24]
        break;
 800682c:	e00c      	b.n	8006848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800682e:	f7fd f92b 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8006832:	61b8      	str	r0, [r7, #24]
        break;
 8006834:	e008      	b.n	8006848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800683a:	61bb      	str	r3, [r7, #24]
        break;
 800683c:	e004      	b.n	8006848 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	77bb      	strb	r3, [r7, #30]
        break;
 8006846:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d074      	beq.n	8006938 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	005a      	lsls	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	441a      	add	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b0f      	cmp	r3, #15
 8006868:	d916      	bls.n	8006898 <UART_SetConfig+0x404>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006870:	d212      	bcs.n	8006898 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f023 030f 	bic.w	r3, r3, #15
 800687a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	b29b      	uxth	r3, r3
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	b29a      	uxth	r2, r3
 8006888:	89fb      	ldrh	r3, [r7, #14]
 800688a:	4313      	orrs	r3, r2
 800688c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	89fa      	ldrh	r2, [r7, #14]
 8006894:	60da      	str	r2, [r3, #12]
 8006896:	e04f      	b.n	8006938 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	77bb      	strb	r3, [r7, #30]
 800689c:	e04c      	b.n	8006938 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800689e:	7ffb      	ldrb	r3, [r7, #31]
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d828      	bhi.n	80068f6 <UART_SetConfig+0x462>
 80068a4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ac <UART_SetConfig+0x418>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	080068d9 	.word	0x080068d9
 80068b4:	080068e1 	.word	0x080068e1
 80068b8:	080068f7 	.word	0x080068f7
 80068bc:	080068e7 	.word	0x080068e7
 80068c0:	080068f7 	.word	0x080068f7
 80068c4:	080068f7 	.word	0x080068f7
 80068c8:	080068f7 	.word	0x080068f7
 80068cc:	080068ef 	.word	0x080068ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7fd f9ec 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 80068d4:	61b8      	str	r0, [r7, #24]
        break;
 80068d6:	e013      	b.n	8006900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d8:	f7fd f9fc 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 80068dc:	61b8      	str	r0, [r7, #24]
        break;
 80068de:	e00f      	b.n	8006900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <UART_SetConfig+0x4c4>)
 80068e2:	61bb      	str	r3, [r7, #24]
        break;
 80068e4:	e00c      	b.n	8006900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e6:	f7fd f8cf 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 80068ea:	61b8      	str	r0, [r7, #24]
        break;
 80068ec:	e008      	b.n	8006900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068f2:	61bb      	str	r3, [r7, #24]
        break;
 80068f4:	e004      	b.n	8006900 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	77bb      	strb	r3, [r7, #30]
        break;
 80068fe:	bf00      	nop
    }

    if (pclk != 0U)
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d018      	beq.n	8006938 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	085a      	lsrs	r2, r3, #1
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	441a      	add	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	fbb2 f3f3 	udiv	r3, r2, r3
 8006918:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b0f      	cmp	r3, #15
 800691e:	d909      	bls.n	8006934 <UART_SetConfig+0x4a0>
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006926:	d205      	bcs.n	8006934 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	b29a      	uxth	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60da      	str	r2, [r3, #12]
 8006932:	e001      	b.n	8006938 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006944:	7fbb      	ldrb	r3, [r7, #30]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40007c00 	.word	0x40007c00
 8006954:	40023800 	.word	0x40023800
 8006958:	00f42400 	.word	0x00f42400

0800695c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01a      	beq.n	8006a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a5a:	d10a      	bne.n	8006a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
  }
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b098      	sub	sp, #96	@ 0x60
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ab0:	f7fb fb7e 	bl	80021b0 <HAL_GetTick>
 8006ab4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d12e      	bne.n	8006b22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006acc:	2200      	movs	r2, #0
 8006ace:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f88c 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d021      	beq.n	8006b22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006afc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006afe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e6      	bne.n	8006ade <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e062      	b.n	8006be8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d149      	bne.n	8006bc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f856 	bl	8006bf0 <UART_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d03c      	beq.n	8006bc4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	623b      	str	r3, [r7, #32]
   return(result);
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0301 	bic.w	r3, r3, #1
 8006b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b9c:	61fa      	str	r2, [r7, #28]
 8006b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	69b9      	ldr	r1, [r7, #24]
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e5      	bne.n	8006b7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e011      	b.n	8006be8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3758      	adds	r7, #88	@ 0x58
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c00:	e04f      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d04b      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0a:	f7fb fad1 	bl	80021b0 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d302      	bcc.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e04e      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d037      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b80      	cmp	r3, #128	@ 0x80
 8006c36:	d034      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b40      	cmp	r3, #64	@ 0x40
 8006c3c:	d031      	beq.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d110      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2208      	movs	r2, #8
 8006c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f9c5 	bl	8006fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e029      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7c:	d111      	bne.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f9ab 	bl	8006fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e00f      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4013      	ands	r3, r2
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	bf0c      	ite	eq
 8006cb2:	2301      	moveq	r3, #1
 8006cb4:	2300      	movne	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d0a0      	beq.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b097      	sub	sp, #92	@ 0x5c
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	88fa      	ldrh	r2, [r7, #6]
 8006cec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cfe:	d10e      	bne.n	8006d1e <UART_Start_Receive_IT+0x52>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d105      	bne.n	8006d14 <UART_Start_Receive_IT+0x48>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d12:	e02d      	b.n	8006d70 <UART_Start_Receive_IT+0xa4>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	22ff      	movs	r2, #255	@ 0xff
 8006d18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d1c:	e028      	b.n	8006d70 <UART_Start_Receive_IT+0xa4>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10d      	bne.n	8006d42 <UART_Start_Receive_IT+0x76>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <UART_Start_Receive_IT+0x6c>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	22ff      	movs	r2, #255	@ 0xff
 8006d32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d36:	e01b      	b.n	8006d70 <UART_Start_Receive_IT+0xa4>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	227f      	movs	r2, #127	@ 0x7f
 8006d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d40:	e016      	b.n	8006d70 <UART_Start_Receive_IT+0xa4>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d4a:	d10d      	bne.n	8006d68 <UART_Start_Receive_IT+0x9c>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d104      	bne.n	8006d5e <UART_Start_Receive_IT+0x92>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	227f      	movs	r2, #127	@ 0x7f
 8006d58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d5c:	e008      	b.n	8006d70 <UART_Start_Receive_IT+0xa4>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	223f      	movs	r2, #63	@ 0x3f
 8006d62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d66:	e003      	b.n	8006d70 <UART_Start_Receive_IT+0xa4>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2222      	movs	r2, #34	@ 0x22
 8006d7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3308      	adds	r3, #8
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006da0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006da2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e5      	bne.n	8006d80 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dbc:	d107      	bne.n	8006dce <UART_Start_Receive_IT+0x102>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a21      	ldr	r2, [pc, #132]	@ (8006e50 <UART_Start_Receive_IT+0x184>)
 8006dca:	669a      	str	r2, [r3, #104]	@ 0x68
 8006dcc:	e002      	b.n	8006dd4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a20      	ldr	r2, [pc, #128]	@ (8006e54 <UART_Start_Receive_IT+0x188>)
 8006dd2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d019      	beq.n	8006e10 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e6      	bne.n	8006ddc <UART_Start_Receive_IT+0x110>
 8006e0e:	e018      	b.n	8006e42 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f043 0320 	orr.w	r3, r3, #32
 8006e24:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e2e:	623b      	str	r3, [r7, #32]
 8006e30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	69f9      	ldr	r1, [r7, #28]
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e6      	bne.n	8006e10 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	375c      	adds	r7, #92	@ 0x5c
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	080074b9 	.word	0x080074b9
 8006e54:	08007311 	.word	0x08007311

08006e58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b096      	sub	sp, #88	@ 0x58
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	88fa      	ldrh	r2, [r7, #6]
 8006e70:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2222      	movs	r2, #34	@ 0x22
 8006e80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d028      	beq.n	8006ede <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e90:	4a3e      	ldr	r2, [pc, #248]	@ (8006f8c <UART_Start_Receive_DMA+0x134>)
 8006e92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e98:	4a3d      	ldr	r2, [pc, #244]	@ (8006f90 <UART_Start_Receive_DMA+0x138>)
 8006e9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8006f94 <UART_Start_Receive_DMA+0x13c>)
 8006ea2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3324      	adds	r3, #36	@ 0x24
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	f7fb fb66 	bl	8002590 <HAL_DMA_Start_IT>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d009      	beq.n	8006ede <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2210      	movs	r2, #16
 8006ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e051      	b.n	8006f82 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d018      	beq.n	8006f18 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006efa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f06:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e6      	bne.n	8006ee6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	f043 0301 	orr.w	r3, r3, #1
 8006f2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f38:	637a      	str	r2, [r7, #52]	@ 0x34
 8006f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e5      	bne.n	8006f18 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3308      	adds	r3, #8
 8006f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f6c:	623a      	str	r2, [r7, #32]
 8006f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	69f9      	ldr	r1, [r7, #28]
 8006f72:	6a3a      	ldr	r2, [r7, #32]
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e5      	bne.n	8006f4c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3758      	adds	r7, #88	@ 0x58
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	080070ad 	.word	0x080070ad
 8006f90:	080071d5 	.word	0x080071d5
 8006f94:	08007213 	.word	0x08007213

08006f98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b089      	sub	sp, #36	@ 0x24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006fb4:	61fb      	str	r3, [r7, #28]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	6979      	ldr	r1, [r7, #20]
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	613b      	str	r3, [r7, #16]
   return(result);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e6      	bne.n	8006fa0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006fd8:	bf00      	nop
 8006fda:	3724      	adds	r7, #36	@ 0x24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b095      	sub	sp, #84	@ 0x54
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800700a:	643b      	str	r3, [r7, #64]	@ 0x40
 800700c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e6      	bne.n	8006fec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	61fb      	str	r3, [r7, #28]
   return(result);
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3308      	adds	r3, #8
 800703c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800703e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007040:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e5      	bne.n	800701e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007056:	2b01      	cmp	r3, #1
 8007058:	d118      	bne.n	800708c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	60bb      	str	r3, [r7, #8]
   return(result);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f023 0310 	bic.w	r3, r3, #16
 800706e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6979      	ldr	r1, [r7, #20]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	613b      	str	r3, [r7, #16]
   return(result);
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e6      	bne.n	800705a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070a0:	bf00      	nop
 80070a2:	3754      	adds	r7, #84	@ 0x54
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b09c      	sub	sp, #112	@ 0x70
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070c2:	d071      	beq.n	80071a8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80070c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e6      	bne.n	80070cc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800710e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	667b      	str	r3, [r7, #100]	@ 0x64
 8007116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3308      	adds	r3, #8
 800711c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800711e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007120:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007124:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800712c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e5      	bne.n	80070fe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	623b      	str	r3, [r7, #32]
   return(result);
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007148:	663b      	str	r3, [r7, #96]	@ 0x60
 800714a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007152:	633a      	str	r2, [r7, #48]	@ 0x30
 8007154:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e5      	bne.n	8007132 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007172:	2b01      	cmp	r3, #1
 8007174:	d118      	bne.n	80071a8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	60fb      	str	r3, [r7, #12]
   return(result);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0310 	bic.w	r3, r3, #16
 800718a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800718c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007194:	61fb      	str	r3, [r7, #28]
 8007196:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	69b9      	ldr	r1, [r7, #24]
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	617b      	str	r3, [r7, #20]
   return(result);
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e6      	bne.n	8007176 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071aa:	2200      	movs	r2, #0
 80071ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d107      	bne.n	80071c6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80071bc:	4619      	mov	r1, r3
 80071be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071c0:	f7f9 fb06 	bl	80007d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071c4:	e002      	b.n	80071cc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80071c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071c8:	f7f9 fefe 	bl	8000fc8 <HAL_UART_RxCpltCallback>
}
 80071cc:	bf00      	nop
 80071ce:	3770      	adds	r7, #112	@ 0x70
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d109      	bne.n	8007204 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7f9 fae7 	bl	80007d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007202:	e002      	b.n	800720a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7ff f927 	bl	8006458 <HAL_UART_RxHalfCpltCallback>
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007224:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800722c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007238:	2b80      	cmp	r3, #128	@ 0x80
 800723a:	d109      	bne.n	8007250 <UART_DMAError+0x3e>
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b21      	cmp	r3, #33	@ 0x21
 8007240:	d106      	bne.n	8007250 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800724a:	6978      	ldr	r0, [r7, #20]
 800724c:	f7ff fea4 	bl	8006f98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800725a:	2b40      	cmp	r3, #64	@ 0x40
 800725c:	d109      	bne.n	8007272 <UART_DMAError+0x60>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b22      	cmp	r3, #34	@ 0x22
 8007262:	d106      	bne.n	8007272 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2200      	movs	r2, #0
 8007268:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800726c:	6978      	ldr	r0, [r7, #20]
 800726e:	f7ff feb9 	bl	8006fe4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007278:	f043 0210 	orr.w	r2, r3, #16
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007282:	6978      	ldr	r0, [r7, #20]
 8007284:	f7ff f8f2 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007288:	bf00      	nop
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff f8dc 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072d8:	61fb      	str	r3, [r7, #28]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6979      	ldr	r1, [r7, #20]
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	613b      	str	r3, [r7, #16]
   return(result);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e6      	bne.n	80072c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff f89e 	bl	8006444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007308:	bf00      	nop
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b09c      	sub	sp, #112	@ 0x70
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800731e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007328:	2b22      	cmp	r3, #34	@ 0x22
 800732a:	f040 80b9 	bne.w	80074a0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007334:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007338:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800733c:	b2d9      	uxtb	r1, r3
 800733e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007342:	b2da      	uxtb	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007348:	400a      	ands	r2, r1
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	b29a      	uxth	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	f040 809c 	bne.w	80074b0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800738c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007396:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007398:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800739c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e6      	bne.n	8007378 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80073ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80073cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d018      	beq.n	8007432 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	623b      	str	r3, [r7, #32]
   return(result);
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007414:	663b      	str	r3, [r7, #96]	@ 0x60
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800741e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007420:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e6      	bne.n	8007400 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007436:	2b01      	cmp	r3, #1
 8007438:	d12e      	bne.n	8007498 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	60fb      	str	r3, [r7, #12]
   return(result);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f023 0310 	bic.w	r3, r3, #16
 8007454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800745e:	61fb      	str	r3, [r7, #28]
 8007460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	69b9      	ldr	r1, [r7, #24]
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	617b      	str	r3, [r7, #20]
   return(result);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e6      	bne.n	8007440 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2b10      	cmp	r3, #16
 800747e:	d103      	bne.n	8007488 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2210      	movs	r2, #16
 8007486:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7f9 f99d 	bl	80007d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007496:	e00b      	b.n	80074b0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7f9 fd95 	bl	8000fc8 <HAL_UART_RxCpltCallback>
}
 800749e:	e007      	b.n	80074b0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0208 	orr.w	r2, r2, #8
 80074ae:	619a      	str	r2, [r3, #24]
}
 80074b0:	bf00      	nop
 80074b2:	3770      	adds	r7, #112	@ 0x70
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b09c      	sub	sp, #112	@ 0x70
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074d0:	2b22      	cmp	r3, #34	@ 0x22
 80074d2:	f040 80b9 	bne.w	8007648 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80074e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80074ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80074ee:	4013      	ands	r3, r2
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fa:	1c9a      	adds	r2, r3, #2
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	f040 809c 	bne.w	8007658 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800752e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007534:	667b      	str	r3, [r7, #100]	@ 0x64
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800753e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007540:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007544:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800754c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e6      	bne.n	8007520 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	663b      	str	r3, [r7, #96]	@ 0x60
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3308      	adds	r3, #8
 8007570:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007572:	643a      	str	r2, [r7, #64]	@ 0x40
 8007574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007578:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e5      	bne.n	8007552 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2220      	movs	r2, #32
 800758a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d018      	beq.n	80075da <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e6      	bne.n	80075a8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d12e      	bne.n	8007640 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f023 0310 	bic.w	r3, r3, #16
 80075fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007606:	61bb      	str	r3, [r7, #24]
 8007608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6979      	ldr	r1, [r7, #20]
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	613b      	str	r3, [r7, #16]
   return(result);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e6      	bne.n	80075e8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b10      	cmp	r3, #16
 8007626:	d103      	bne.n	8007630 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2210      	movs	r2, #16
 800762e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7f9 f8c9 	bl	80007d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800763e:	e00b      	b.n	8007658 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7f9 fcc1 	bl	8000fc8 <HAL_UART_RxCpltCallback>
}
 8007646:	e007      	b.n	8007658 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0208 	orr.w	r2, r2, #8
 8007656:	619a      	str	r2, [r3, #24]
}
 8007658:	bf00      	nop
 800765a:	3770      	adds	r7, #112	@ 0x70
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08c      	sub	sp, #48	@ 0x30
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007674:	2b20      	cmp	r3, #32
 8007676:	d142      	bne.n	80076fe <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e03b      	b.n	8007700 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	461a      	mov	r2, r3
 8007698:	68b9      	ldr	r1, [r7, #8]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff fbdc 	bl	8006e58 <UART_Start_Receive_DMA>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80076a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d124      	bne.n	80076f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d11d      	bne.n	80076f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2210      	movs	r2, #16
 80076bc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	617b      	str	r3, [r7, #20]
   return(result);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f043 0310 	orr.w	r3, r3, #16
 80076d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80076de:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6a39      	ldr	r1, [r7, #32]
 80076e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e6      	bne.n	80076be <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80076f0:	e002      	b.n	80076f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80076f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076fc:	e000      	b.n	8007700 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80076fe:	2302      	movs	r3, #2
  }
}
 8007700:	4618      	mov	r0, r3
 8007702:	3730      	adds	r7, #48	@ 0x30
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007708:	b084      	sub	sp, #16
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	f107 001c 	add.w	r0, r7, #28
 8007716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800771a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800771e:	2b01      	cmp	r3, #1
 8007720:	d121      	bne.n	8007766 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007726:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	4b21      	ldr	r3, [pc, #132]	@ (80077b8 <USB_CoreInit+0xb0>)
 8007734:	4013      	ands	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800774a:	2b01      	cmp	r3, #1
 800774c:	d105      	bne.n	800775a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa92 	bl	8007c84 <USB_CoreReset>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]
 8007764:	e010      	b.n	8007788 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa86 	bl	8007c84 <USB_CoreReset>
 8007778:	4603      	mov	r3, r0
 800777a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007780:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007788:	7fbb      	ldrb	r3, [r7, #30]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d10b      	bne.n	80077a6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f043 0206 	orr.w	r2, r3, #6
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f043 0220 	orr.w	r2, r3, #32
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077b2:	b004      	add	sp, #16
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	ffbdffbf 	.word	0xffbdffbf

080077bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f023 0201 	bic.w	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d115      	bne.n	800782c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800780c:	200a      	movs	r0, #10
 800780e:	f7fa fcdb 	bl	80021c8 <HAL_Delay>
      ms += 10U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	330a      	adds	r3, #10
 8007816:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fa25 	bl	8007c68 <USB_GetMode>
 800781e:	4603      	mov	r3, r0
 8007820:	2b01      	cmp	r3, #1
 8007822:	d01e      	beq.n	8007862 <USB_SetCurrentMode+0x84>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2bc7      	cmp	r3, #199	@ 0xc7
 8007828:	d9f0      	bls.n	800780c <USB_SetCurrentMode+0x2e>
 800782a:	e01a      	b.n	8007862 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d115      	bne.n	800785e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800783e:	200a      	movs	r0, #10
 8007840:	f7fa fcc2 	bl	80021c8 <HAL_Delay>
      ms += 10U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	330a      	adds	r3, #10
 8007848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa0c 	bl	8007c68 <USB_GetMode>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <USB_SetCurrentMode+0x84>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2bc7      	cmp	r3, #199	@ 0xc7
 800785a:	d9f0      	bls.n	800783e <USB_SetCurrentMode+0x60>
 800785c:	e001      	b.n	8007862 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e005      	b.n	800786e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2bc8      	cmp	r3, #200	@ 0xc8
 8007866:	d101      	bne.n	800786c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007878:	b084      	sub	sp, #16
 800787a:	b580      	push	{r7, lr}
 800787c:	b086      	sub	sp, #24
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007892:	2300      	movs	r3, #0
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	e009      	b.n	80078ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	3340      	adds	r3, #64	@ 0x40
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	2200      	movs	r2, #0
 80078a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3301      	adds	r3, #1
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b0e      	cmp	r3, #14
 80078b0:	d9f2      	bls.n	8007898 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d11c      	bne.n	80078f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078c8:	f043 0302 	orr.w	r3, r3, #2
 80078cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e005      	b.n	8007900 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007906:	461a      	mov	r2, r3
 8007908:	2300      	movs	r3, #0
 800790a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800790c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007910:	2b01      	cmp	r3, #1
 8007912:	d10d      	bne.n	8007930 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800791c:	2100      	movs	r1, #0
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f968 	bl	8007bf4 <USB_SetDevSpeed>
 8007924:	e008      	b.n	8007938 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007926:	2101      	movs	r1, #1
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f963 	bl	8007bf4 <USB_SetDevSpeed>
 800792e:	e003      	b.n	8007938 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007930:	2103      	movs	r1, #3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f95e 	bl	8007bf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007938:	2110      	movs	r1, #16
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f8fa 	bl	8007b34 <USB_FlushTxFifo>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f924 	bl	8007b98 <USB_FlushRxFifo>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007960:	461a      	mov	r2, r3
 8007962:	2300      	movs	r3, #0
 8007964:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800796c:	461a      	mov	r2, r3
 800796e:	2300      	movs	r3, #0
 8007970:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007978:	461a      	mov	r2, r3
 800797a:	2300      	movs	r3, #0
 800797c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800797e:	2300      	movs	r3, #0
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	e043      	b.n	8007a0c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007996:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800799a:	d118      	bne.n	80079ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ae:	461a      	mov	r2, r3
 80079b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	e013      	b.n	80079e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c4:	461a      	mov	r2, r3
 80079c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	e008      	b.n	80079e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079da:	461a      	mov	r2, r3
 80079dc:	2300      	movs	r3, #0
 80079de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ec:	461a      	mov	r2, r3
 80079ee:	2300      	movs	r3, #0
 80079f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079fe:	461a      	mov	r2, r3
 8007a00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a10:	461a      	mov	r2, r3
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d3b5      	bcc.n	8007984 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	e043      	b.n	8007aa6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a34:	d118      	bne.n	8007a68 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	e013      	b.n	8007a7a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	e008      	b.n	8007a7a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a74:	461a      	mov	r2, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a86:	461a      	mov	r2, r3
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	613b      	str	r3, [r7, #16]
 8007aa6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007aaa:	461a      	mov	r2, r3
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d3b5      	bcc.n	8007a1e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ac4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007ad2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d105      	bne.n	8007ae8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f043 0210 	orr.w	r2, r3, #16
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	4b0f      	ldr	r3, [pc, #60]	@ (8007b2c <USB_DevInit+0x2b4>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007af4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	f043 0208 	orr.w	r2, r3, #8
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d105      	bne.n	8007b1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	4b06      	ldr	r3, [pc, #24]	@ (8007b30 <USB_DevInit+0x2b8>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b28:	b004      	add	sp, #16
 8007b2a:	4770      	bx	lr
 8007b2c:	803c3800 	.word	0x803c3800
 8007b30:	40000004 	.word	0x40000004

08007b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3301      	adds	r3, #1
 8007b46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b4e:	d901      	bls.n	8007b54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e01b      	b.n	8007b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	daf2      	bge.n	8007b42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	019b      	lsls	r3, r3, #6
 8007b64:	f043 0220 	orr.w	r2, r3, #32
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b78:	d901      	bls.n	8007b7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e006      	b.n	8007b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b20      	cmp	r3, #32
 8007b88:	d0f0      	beq.n	8007b6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bb0:	d901      	bls.n	8007bb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e018      	b.n	8007be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	daf2      	bge.n	8007ba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2210      	movs	r2, #16
 8007bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bd4:	d901      	bls.n	8007bda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e006      	b.n	8007be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	2b10      	cmp	r3, #16
 8007be4:	d0f0      	beq.n	8007bc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	68f9      	ldr	r1, [r7, #12]
 8007c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c14:	4313      	orrs	r3, r2
 8007c16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b085      	sub	sp, #20
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c40:	f023 0303 	bic.w	r3, r3, #3
 8007c44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c54:	f043 0302 	orr.w	r3, r3, #2
 8007c58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f003 0301 	and.w	r3, r3, #1
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c9c:	d901      	bls.n	8007ca2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e01b      	b.n	8007cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	daf2      	bge.n	8007c90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f043 0201 	orr.w	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cc6:	d901      	bls.n	8007ccc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e006      	b.n	8007cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d0f0      	beq.n	8007cba <USB_CoreReset+0x36>

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ce6:	b480      	push	{r7}
 8007ce8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007cea:	bf00      	nop
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cfa:	f3ef 8305 	mrs	r3, IPSR
 8007cfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10f      	bne.n	8007d26 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d06:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0a:	607b      	str	r3, [r7, #4]
  return(result);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d12:	f3ef 8311 	mrs	r3, BASEPRI
 8007d16:	603b      	str	r3, [r7, #0]
  return(result);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <osKernelInitialize+0x3a>
 8007d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d58 <osKernelInitialize+0x64>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d103      	bne.n	8007d2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007d26:	f06f 0305 	mvn.w	r3, #5
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	e00c      	b.n	8007d48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <osKernelInitialize+0x64>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d105      	bne.n	8007d42 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d36:	4b08      	ldr	r3, [pc, #32]	@ (8007d58 <osKernelInitialize+0x64>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	e002      	b.n	8007d48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007d42:	f04f 33ff 	mov.w	r3, #4294967295
 8007d46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20000a50 	.word	0x20000a50

08007d5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d62:	f3ef 8305 	mrs	r3, IPSR
 8007d66:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10f      	bne.n	8007d8e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d72:	607b      	str	r3, [r7, #4]
  return(result);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d7e:	603b      	str	r3, [r7, #0]
  return(result);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <osKernelStart+0x3a>
 8007d86:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc4 <osKernelStart+0x68>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d103      	bne.n	8007d96 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007d8e:	f06f 0305 	mvn.w	r3, #5
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	e010      	b.n	8007db8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d96:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc4 <osKernelStart+0x68>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d109      	bne.n	8007db2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d9e:	f7ff ffa2 	bl	8007ce6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007da2:	4b08      	ldr	r3, [pc, #32]	@ (8007dc4 <osKernelStart+0x68>)
 8007da4:	2202      	movs	r2, #2
 8007da6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007da8:	f001 f8ca 	bl	8008f40 <vTaskStartScheduler>
      stat = osOK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	e002      	b.n	8007db8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007db2:	f04f 33ff 	mov.w	r3, #4294967295
 8007db6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007db8:	68fb      	ldr	r3, [r7, #12]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000a50 	.word	0x20000a50

08007dc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b090      	sub	sp, #64	@ 0x40
 8007dcc:	af04      	add	r7, sp, #16
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd8:	f3ef 8305 	mrs	r3, IPSR
 8007ddc:	61fb      	str	r3, [r7, #28]
  return(result);
 8007dde:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 808f 	bne.w	8007f04 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dea:	61bb      	str	r3, [r7, #24]
  return(result);
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d105      	bne.n	8007dfe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007df2:	f3ef 8311 	mrs	r3, BASEPRI
 8007df6:	617b      	str	r3, [r7, #20]
  return(result);
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <osThreadNew+0x3e>
 8007dfe:	4b44      	ldr	r3, [pc, #272]	@ (8007f10 <osThreadNew+0x148>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d07e      	beq.n	8007f04 <osThreadNew+0x13c>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d07b      	beq.n	8007f04 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007e0c:	2380      	movs	r3, #128	@ 0x80
 8007e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007e10:	2318      	movs	r3, #24
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007e14:	2300      	movs	r3, #0
 8007e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d045      	beq.n	8007eb0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <osThreadNew+0x6a>
        name = attr->name;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d008      	beq.n	8007e58 <osThreadNew+0x90>
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	2b38      	cmp	r3, #56	@ 0x38
 8007e4a:	d805      	bhi.n	8007e58 <osThreadNew+0x90>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <osThreadNew+0x94>
        return (NULL);
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e054      	b.n	8007f06 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	089b      	lsrs	r3, r3, #2
 8007e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00e      	beq.n	8007e92 <osThreadNew+0xca>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	2b5b      	cmp	r3, #91	@ 0x5b
 8007e7a:	d90a      	bls.n	8007e92 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d006      	beq.n	8007e92 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <osThreadNew+0xca>
        mem = 1;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	623b      	str	r3, [r7, #32]
 8007e90:	e010      	b.n	8007eb4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10c      	bne.n	8007eb4 <osThreadNew+0xec>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d108      	bne.n	8007eb4 <osThreadNew+0xec>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <osThreadNew+0xec>
          mem = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	623b      	str	r3, [r7, #32]
 8007eae:	e001      	b.n	8007eb4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d110      	bne.n	8007edc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ec2:	9202      	str	r2, [sp, #8]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fe4f 	bl	8008b74 <xTaskCreateStatic>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	e013      	b.n	8007f04 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d110      	bne.n	8007f04 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	f107 0310 	add.w	r3, r7, #16
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fea3 	bl	8008c40 <xTaskCreate>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d001      	beq.n	8007f04 <osThreadNew+0x13c>
          hTask = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f04:	693b      	ldr	r3, [r7, #16]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3730      	adds	r7, #48	@ 0x30
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000a50 	.word	0x20000a50

08007f14 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f1c:	f3ef 8305 	mrs	r3, IPSR
 8007f20:	613b      	str	r3, [r7, #16]
  return(result);
 8007f22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10f      	bne.n	8007f48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f28:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d105      	bne.n	8007f40 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f34:	f3ef 8311 	mrs	r3, BASEPRI
 8007f38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <osDelay+0x3c>
 8007f40:	4b0a      	ldr	r3, [pc, #40]	@ (8007f6c <osDelay+0x58>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d103      	bne.n	8007f50 <osDelay+0x3c>
    stat = osErrorISR;
 8007f48:	f06f 0305 	mvn.w	r3, #5
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e007      	b.n	8007f60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 ffb8 	bl	8008ed0 <vTaskDelay>
    }
  }

  return (stat);
 8007f60:	697b      	ldr	r3, [r7, #20]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000a50 	.word	0x20000a50

08007f70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4a07      	ldr	r2, [pc, #28]	@ (8007f9c <vApplicationGetIdleTaskMemory+0x2c>)
 8007f80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4a06      	ldr	r2, [pc, #24]	@ (8007fa0 <vApplicationGetIdleTaskMemory+0x30>)
 8007f86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2280      	movs	r2, #128	@ 0x80
 8007f8c:	601a      	str	r2, [r3, #0]
}
 8007f8e:	bf00      	nop
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20000a54 	.word	0x20000a54
 8007fa0:	20000ab0 	.word	0x20000ab0

08007fa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a07      	ldr	r2, [pc, #28]	@ (8007fd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007fb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	4a06      	ldr	r2, [pc, #24]	@ (8007fd4 <vApplicationGetTimerTaskMemory+0x30>)
 8007fba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000cb0 	.word	0x20000cb0
 8007fd4:	20000d0c 	.word	0x20000d0c

08007fd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f103 0208 	add.w	r2, r3, #8
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f103 0208 	add.w	r2, r3, #8
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f103 0208 	add.w	r2, r3, #8
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	601a      	str	r2, [r3, #0]
}
 800806e:	bf00      	nop
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d103      	bne.n	800809a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	e00c      	b.n	80080b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3308      	adds	r3, #8
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	e002      	b.n	80080a8 <vListInsert+0x2e>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d2f6      	bcs.n	80080a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	601a      	str	r2, [r3, #0]
}
 80080e0:	bf00      	nop
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6892      	ldr	r2, [r2, #8]
 8008102:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6852      	ldr	r2, [r2, #4]
 800810c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d103      	bne.n	8008120 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	1e5a      	subs	r2, r3, #1
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10d      	bne.n	8008170 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008158:	b672      	cpsid	i
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	b662      	cpsie	i
 8008168:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800816a:	bf00      	nop
 800816c:	bf00      	nop
 800816e:	e7fd      	b.n	800816c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008170:	f002 f8a4 	bl	800a2bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800817c:	68f9      	ldr	r1, [r7, #12]
 800817e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008180:	fb01 f303 	mul.w	r3, r1, r3
 8008184:	441a      	add	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a0:	3b01      	subs	r3, #1
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081a6:	fb01 f303 	mul.w	r3, r1, r3
 80081aa:	441a      	add	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	22ff      	movs	r2, #255	@ 0xff
 80081b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	22ff      	movs	r2, #255	@ 0xff
 80081bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d114      	bne.n	80081f0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d01a      	beq.n	8008204 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3310      	adds	r3, #16
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 f950 	bl	8009478 <xTaskRemoveFromEventList>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d012      	beq.n	8008204 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081de:	4b0d      	ldr	r3, [pc, #52]	@ (8008214 <xQueueGenericReset+0xd4>)
 80081e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	e009      	b.n	8008204 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3310      	adds	r3, #16
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff feef 	bl	8007fd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3324      	adds	r3, #36	@ 0x24
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff feea 	bl	8007fd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008204:	f002 f890 	bl	800a328 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008208:	2301      	movs	r3, #1
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	e000ed04 	.word	0xe000ed04

08008218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08e      	sub	sp, #56	@ 0x38
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10d      	bne.n	8008248 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008230:	b672      	cpsid	i
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	b662      	cpsie	i
 8008240:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	e7fd      	b.n	8008244 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10d      	bne.n	800826a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	b672      	cpsid	i
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	b662      	cpsie	i
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	e7fd      	b.n	8008266 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <xQueueGenericCreateStatic+0x5e>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <xQueueGenericCreateStatic+0x62>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <xQueueGenericCreateStatic+0x64>
 800827a:	2300      	movs	r3, #0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10d      	bne.n	800829c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	b672      	cpsid	i
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	b662      	cpsie	i
 8008294:	623b      	str	r3, [r7, #32]
}
 8008296:	bf00      	nop
 8008298:	bf00      	nop
 800829a:	e7fd      	b.n	8008298 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d102      	bne.n	80082a8 <xQueueGenericCreateStatic+0x90>
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <xQueueGenericCreateStatic+0x94>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <xQueueGenericCreateStatic+0x96>
 80082ac:	2300      	movs	r3, #0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10d      	bne.n	80082ce <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b6:	b672      	cpsid	i
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	b662      	cpsie	i
 80082c6:	61fb      	str	r3, [r7, #28]
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	e7fd      	b.n	80082ca <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082ce:	2350      	movs	r3, #80	@ 0x50
 80082d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b50      	cmp	r3, #80	@ 0x50
 80082d6:	d00d      	beq.n	80082f4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082dc:	b672      	cpsid	i
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	b662      	cpsie	i
 80082ec:	61bb      	str	r3, [r7, #24]
}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	e7fd      	b.n	80082f0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80082fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00d      	beq.n	800831c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008308:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f805 	bl	8008326 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800831c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800831e:	4618      	mov	r0, r3
 8008320:	3730      	adds	r7, #48	@ 0x30
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d103      	bne.n	8008342 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	e002      	b.n	8008348 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008354:	2101      	movs	r1, #1
 8008356:	69b8      	ldr	r0, [r7, #24]
 8008358:	f7ff fef2 	bl	8008140 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008364:	bf00      	nop
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08e      	sub	sp, #56	@ 0x38
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10d      	bne.n	80083a4 <xQueueGenericSend+0x38>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	b672      	cpsid	i
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	b662      	cpsie	i
 800839c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	e7fd      	b.n	80083a0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d103      	bne.n	80083b2 <xQueueGenericSend+0x46>
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <xQueueGenericSend+0x4a>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <xQueueGenericSend+0x4c>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10d      	bne.n	80083d8 <xQueueGenericSend+0x6c>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c0:	b672      	cpsid	i
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	b662      	cpsie	i
 80083d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	e7fd      	b.n	80083d4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d103      	bne.n	80083e6 <xQueueGenericSend+0x7a>
 80083de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d101      	bne.n	80083ea <xQueueGenericSend+0x7e>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e000      	b.n	80083ec <xQueueGenericSend+0x80>
 80083ea:	2300      	movs	r3, #0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10d      	bne.n	800840c <xQueueGenericSend+0xa0>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f4:	b672      	cpsid	i
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	b662      	cpsie	i
 8008404:	623b      	str	r3, [r7, #32]
}
 8008406:	bf00      	nop
 8008408:	bf00      	nop
 800840a:	e7fd      	b.n	8008408 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800840c:	f001 f9fc 	bl	8009808 <xTaskGetSchedulerState>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d102      	bne.n	800841c <xQueueGenericSend+0xb0>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <xQueueGenericSend+0xb4>
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <xQueueGenericSend+0xb6>
 8008420:	2300      	movs	r3, #0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <xQueueGenericSend+0xd6>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	b672      	cpsid	i
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	b662      	cpsie	i
 800843a:	61fb      	str	r3, [r7, #28]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008442:	f001 ff3b 	bl	800a2bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844e:	429a      	cmp	r2, r3
 8008450:	d302      	bcc.n	8008458 <xQueueGenericSend+0xec>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d129      	bne.n	80084ac <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800845e:	f000 fa1b 	bl	8008898 <prvCopyDataToQueue>
 8008462:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	d010      	beq.n	800848e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800846c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846e:	3324      	adds	r3, #36	@ 0x24
 8008470:	4618      	mov	r0, r3
 8008472:	f001 f801 	bl	8009478 <xTaskRemoveFromEventList>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d013      	beq.n	80084a4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800847c:	4b3f      	ldr	r3, [pc, #252]	@ (800857c <xQueueGenericSend+0x210>)
 800847e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	e00a      	b.n	80084a4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800848e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008494:	4b39      	ldr	r3, [pc, #228]	@ (800857c <xQueueGenericSend+0x210>)
 8008496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084a4:	f001 ff40 	bl	800a328 <vPortExitCritical>
				return pdPASS;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e063      	b.n	8008574 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d103      	bne.n	80084ba <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084b2:	f001 ff39 	bl	800a328 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e05c      	b.n	8008574 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d106      	bne.n	80084ce <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084c0:	f107 0314 	add.w	r3, r7, #20
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 f83d 	bl	8009544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084ca:	2301      	movs	r3, #1
 80084cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084ce:	f001 ff2b 	bl	800a328 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084d2:	f000 fda1 	bl	8009018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084d6:	f001 fef1 	bl	800a2bc <vPortEnterCritical>
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084e0:	b25b      	sxtb	r3, r3
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e6:	d103      	bne.n	80084f0 <xQueueGenericSend+0x184>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084f6:	b25b      	sxtb	r3, r3
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fc:	d103      	bne.n	8008506 <xQueueGenericSend+0x19a>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008506:	f001 ff0f 	bl	800a328 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800850a:	1d3a      	adds	r2, r7, #4
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f001 f82c 	bl	8009570 <xTaskCheckForTimeOut>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d124      	bne.n	8008568 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800851e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008520:	f000 fab2 	bl	8008a88 <prvIsQueueFull>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d018      	beq.n	800855c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	3310      	adds	r3, #16
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f000 ff4a 	bl	80093cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800853a:	f000 fa3d 	bl	80089b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800853e:	f000 fd79 	bl	8009034 <xTaskResumeAll>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	f47f af7c 	bne.w	8008442 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800854a:	4b0c      	ldr	r3, [pc, #48]	@ (800857c <xQueueGenericSend+0x210>)
 800854c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	e772      	b.n	8008442 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800855c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800855e:	f000 fa2b 	bl	80089b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008562:	f000 fd67 	bl	8009034 <xTaskResumeAll>
 8008566:	e76c      	b.n	8008442 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800856a:	f000 fa25 	bl	80089b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800856e:	f000 fd61 	bl	8009034 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008574:	4618      	mov	r0, r3
 8008576:	3738      	adds	r7, #56	@ 0x38
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08e      	sub	sp, #56	@ 0x38
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10d      	bne.n	80085b4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859c:	b672      	cpsid	i
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	b662      	cpsie	i
 80085ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	e7fd      	b.n	80085b0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d103      	bne.n	80085c2 <xQueueGenericSendFromISR+0x42>
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <xQueueGenericSendFromISR+0x46>
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <xQueueGenericSendFromISR+0x48>
 80085c6:	2300      	movs	r3, #0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10d      	bne.n	80085e8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d0:	b672      	cpsid	i
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	b662      	cpsie	i
 80085e0:	623b      	str	r3, [r7, #32]
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	e7fd      	b.n	80085e4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d103      	bne.n	80085f6 <xQueueGenericSendFromISR+0x76>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <xQueueGenericSendFromISR+0x7a>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e000      	b.n	80085fc <xQueueGenericSendFromISR+0x7c>
 80085fa:	2300      	movs	r3, #0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10d      	bne.n	800861c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008604:	b672      	cpsid	i
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	b662      	cpsie	i
 8008614:	61fb      	str	r3, [r7, #28]
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800861c:	f001 ff36 	bl	800a48c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008620:	f3ef 8211 	mrs	r2, BASEPRI
 8008624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008628:	b672      	cpsid	i
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	b662      	cpsie	i
 8008638:	61ba      	str	r2, [r7, #24]
 800863a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800863c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800863e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008648:	429a      	cmp	r2, r3
 800864a:	d302      	bcc.n	8008652 <xQueueGenericSendFromISR+0xd2>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d12c      	bne.n	80086ac <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008658:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008662:	f000 f919 	bl	8008898 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008666:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800866a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866e:	d112      	bne.n	8008696 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d016      	beq.n	80086a6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867a:	3324      	adds	r3, #36	@ 0x24
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fefb 	bl	8009478 <xTaskRemoveFromEventList>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00e      	beq.n	80086a6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00b      	beq.n	80086a6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	e007      	b.n	80086a6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008696:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800869a:	3301      	adds	r3, #1
 800869c:	b2db      	uxtb	r3, r3
 800869e:	b25a      	sxtb	r2, r3
 80086a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80086a6:	2301      	movs	r3, #1
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80086aa:	e001      	b.n	80086b0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3738      	adds	r7, #56	@ 0x38
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08c      	sub	sp, #48	@ 0x30
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086d4:	2300      	movs	r3, #0
 80086d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10d      	bne.n	80086fe <xQueueReceive+0x36>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e6:	b672      	cpsid	i
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	b662      	cpsie	i
 80086f6:	623b      	str	r3, [r7, #32]
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	e7fd      	b.n	80086fa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d103      	bne.n	800870c <xQueueReceive+0x44>
 8008704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <xQueueReceive+0x48>
 800870c:	2301      	movs	r3, #1
 800870e:	e000      	b.n	8008712 <xQueueReceive+0x4a>
 8008710:	2300      	movs	r3, #0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10d      	bne.n	8008732 <xQueueReceive+0x6a>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871a:	b672      	cpsid	i
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	b662      	cpsie	i
 800872a:	61fb      	str	r3, [r7, #28]
}
 800872c:	bf00      	nop
 800872e:	bf00      	nop
 8008730:	e7fd      	b.n	800872e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008732:	f001 f869 	bl	8009808 <xTaskGetSchedulerState>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <xQueueReceive+0x7a>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <xQueueReceive+0x7e>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <xQueueReceive+0x80>
 8008746:	2300      	movs	r3, #0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10d      	bne.n	8008768 <xQueueReceive+0xa0>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008750:	b672      	cpsid	i
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	b662      	cpsie	i
 8008760:	61bb      	str	r3, [r7, #24]
}
 8008762:	bf00      	nop
 8008764:	bf00      	nop
 8008766:	e7fd      	b.n	8008764 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008768:	f001 fda8 	bl	800a2bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800876c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01f      	beq.n	80087b8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800877c:	f000 f8f6 	bl	800896c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008782:	1e5a      	subs	r2, r3, #1
 8008784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008786:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00f      	beq.n	80087b0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	3310      	adds	r3, #16
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fe6f 	bl	8009478 <xTaskRemoveFromEventList>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087a0:	4b3c      	ldr	r3, [pc, #240]	@ (8008894 <xQueueReceive+0x1cc>)
 80087a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087b0:	f001 fdba 	bl	800a328 <vPortExitCritical>
				return pdPASS;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e069      	b.n	800888c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d103      	bne.n	80087c6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087be:	f001 fdb3 	bl	800a328 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e062      	b.n	800888c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d106      	bne.n	80087da <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087cc:	f107 0310 	add.w	r3, r7, #16
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 feb7 	bl	8009544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087d6:	2301      	movs	r3, #1
 80087d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087da:	f001 fda5 	bl	800a328 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087de:	f000 fc1b 	bl	8009018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087e2:	f001 fd6b 	bl	800a2bc <vPortEnterCritical>
 80087e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087ec:	b25b      	sxtb	r3, r3
 80087ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f2:	d103      	bne.n	80087fc <xQueueReceive+0x134>
 80087f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008802:	b25b      	sxtb	r3, r3
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d103      	bne.n	8008812 <xQueueReceive+0x14a>
 800880a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008812:	f001 fd89 	bl	800a328 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008816:	1d3a      	adds	r2, r7, #4
 8008818:	f107 0310 	add.w	r3, r7, #16
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fea6 	bl	8009570 <xTaskCheckForTimeOut>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d123      	bne.n	8008872 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800882a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800882c:	f000 f916 	bl	8008a5c <prvIsQueueEmpty>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d017      	beq.n	8008866 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008838:	3324      	adds	r3, #36	@ 0x24
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fdc4 	bl	80093cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008846:	f000 f8b7 	bl	80089b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800884a:	f000 fbf3 	bl	8009034 <xTaskResumeAll>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d189      	bne.n	8008768 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008854:	4b0f      	ldr	r3, [pc, #60]	@ (8008894 <xQueueReceive+0x1cc>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	e780      	b.n	8008768 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008868:	f000 f8a6 	bl	80089b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800886c:	f000 fbe2 	bl	8009034 <xTaskResumeAll>
 8008870:	e77a      	b.n	8008768 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008874:	f000 f8a0 	bl	80089b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008878:	f000 fbdc 	bl	8009034 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800887c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800887e:	f000 f8ed 	bl	8008a5c <prvIsQueueEmpty>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	f43f af6f 	beq.w	8008768 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800888a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800888c:	4618      	mov	r0, r3
 800888e:	3730      	adds	r7, #48	@ 0x30
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10d      	bne.n	80088d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d14d      	bne.n	800895a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 ffbe 	bl	8009844 <xTaskPriorityDisinherit>
 80088c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	609a      	str	r2, [r3, #8]
 80088d0:	e043      	b.n	800895a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d119      	bne.n	800890c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6858      	ldr	r0, [r3, #4]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e0:	461a      	mov	r2, r3
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	f002 f932 	bl	800ab4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f0:	441a      	add	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d32b      	bcc.n	800895a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	e026      	b.n	800895a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	68d8      	ldr	r0, [r3, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008914:	461a      	mov	r2, r3
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	f002 f918 	bl	800ab4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008924:	425b      	negs	r3, r3
 8008926:	441a      	add	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68da      	ldr	r2, [r3, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d207      	bcs.n	8008948 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008940:	425b      	negs	r3, r3
 8008942:	441a      	add	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d105      	bne.n	800895a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	3b01      	subs	r3, #1
 8008958:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008962:	697b      	ldr	r3, [r7, #20]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897a:	2b00      	cmp	r3, #0
 800897c:	d018      	beq.n	80089b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008986:	441a      	add	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	429a      	cmp	r2, r3
 8008996:	d303      	bcc.n	80089a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68d9      	ldr	r1, [r3, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a8:	461a      	mov	r2, r3
 80089aa:	6838      	ldr	r0, [r7, #0]
 80089ac:	f002 f8ce 	bl	800ab4c <memcpy>
	}
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089c0:	f001 fc7c 	bl	800a2bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089cc:	e011      	b.n	80089f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d012      	beq.n	80089fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3324      	adds	r3, #36	@ 0x24
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fd4c 	bl	8009478 <xTaskRemoveFromEventList>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089e6:	f000 fe2b 	bl	8009640 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dce9      	bgt.n	80089ce <prvUnlockQueue+0x16>
 80089fa:	e000      	b.n	80089fe <prvUnlockQueue+0x46>
					break;
 80089fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	22ff      	movs	r2, #255	@ 0xff
 8008a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008a06:	f001 fc8f 	bl	800a328 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a0a:	f001 fc57 	bl	800a2bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a16:	e011      	b.n	8008a3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d012      	beq.n	8008a46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3310      	adds	r3, #16
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fd27 	bl	8009478 <xTaskRemoveFromEventList>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a30:	f000 fe06 	bl	8009640 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dce9      	bgt.n	8008a18 <prvUnlockQueue+0x60>
 8008a44:	e000      	b.n	8008a48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	22ff      	movs	r2, #255	@ 0xff
 8008a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a50:	f001 fc6a 	bl	800a328 <vPortExitCritical>
}
 8008a54:	bf00      	nop
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a64:	f001 fc2a 	bl	800a2bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d102      	bne.n	8008a76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a70:	2301      	movs	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e001      	b.n	8008a7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a7a:	f001 fc55 	bl	800a328 <vPortExitCritical>

	return xReturn;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a90:	f001 fc14 	bl	800a2bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d102      	bne.n	8008aa6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e001      	b.n	8008aaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008aaa:	f001 fc3d 	bl	800a328 <vPortExitCritical>

	return xReturn;
 8008aae:	68fb      	ldr	r3, [r7, #12]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	e014      	b.n	8008af2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8008b08 <vQueueAddToRegistry+0x50>)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10b      	bne.n	8008aec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ad4:	490c      	ldr	r1, [pc, #48]	@ (8008b08 <vQueueAddToRegistry+0x50>)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ade:	4a0a      	ldr	r2, [pc, #40]	@ (8008b08 <vQueueAddToRegistry+0x50>)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008aea:	e006      	b.n	8008afa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3301      	adds	r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b07      	cmp	r3, #7
 8008af6:	d9e7      	bls.n	8008ac8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	2000110c 	.word	0x2000110c

08008b0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b1c:	f001 fbce 	bl	800a2bc <vPortEnterCritical>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b26:	b25b      	sxtb	r3, r3
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2c:	d103      	bne.n	8008b36 <vQueueWaitForMessageRestricted+0x2a>
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b3c:	b25b      	sxtb	r3, r3
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b42:	d103      	bne.n	8008b4c <vQueueWaitForMessageRestricted+0x40>
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b4c:	f001 fbec 	bl	800a328 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	3324      	adds	r3, #36	@ 0x24
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	68b9      	ldr	r1, [r7, #8]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fc5b 	bl	800941c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b66:	6978      	ldr	r0, [r7, #20]
 8008b68:	f7ff ff26 	bl	80089b8 <prvUnlockQueue>
	}
 8008b6c:	bf00      	nop
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08e      	sub	sp, #56	@ 0x38
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10d      	bne.n	8008ba4 <xTaskCreateStatic+0x30>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	b672      	cpsid	i
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	b662      	cpsie	i
 8008b9c:	623b      	str	r3, [r7, #32]
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	e7fd      	b.n	8008ba0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10d      	bne.n	8008bc6 <xTaskCreateStatic+0x52>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bae:	b672      	cpsid	i
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	b662      	cpsie	i
 8008bbe:	61fb      	str	r3, [r7, #28]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bc6:	235c      	movs	r3, #92	@ 0x5c
 8008bc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2b5c      	cmp	r3, #92	@ 0x5c
 8008bce:	d00d      	beq.n	8008bec <xTaskCreateStatic+0x78>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd4:	b672      	cpsid	i
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	b662      	cpsie	i
 8008be4:	61bb      	str	r3, [r7, #24]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d01e      	beq.n	8008c32 <xTaskCreateStatic+0xbe>
 8008bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01b      	beq.n	8008c32 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	2202      	movs	r2, #2
 8008c08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9303      	str	r3, [sp, #12]
 8008c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	f107 0314 	add.w	r3, r7, #20
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	68b9      	ldr	r1, [r7, #8]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 f850 	bl	8008cca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c2c:	f000 f8e0 	bl	8008df0 <prvAddNewTaskToReadyList>
 8008c30:	e001      	b.n	8008c36 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c36:	697b      	ldr	r3, [r7, #20]
	}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3728      	adds	r7, #40	@ 0x28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08c      	sub	sp, #48	@ 0x30
 8008c44:	af04      	add	r7, sp, #16
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 fc5f 	bl	800a518 <pvPortMalloc>
 8008c5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00e      	beq.n	8008c80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c62:	205c      	movs	r0, #92	@ 0x5c
 8008c64:	f001 fc58 	bl	800a518 <pvPortMalloc>
 8008c68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c76:	e005      	b.n	8008c84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c78:	6978      	ldr	r0, [r7, #20]
 8008c7a:	f001 fd1b 	bl	800a6b4 <vPortFree>
 8008c7e:	e001      	b.n	8008c84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d017      	beq.n	8008cba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	2300      	movs	r3, #0
 8008c96:	9303      	str	r3, [sp, #12]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	9302      	str	r3, [sp, #8]
 8008c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	68b9      	ldr	r1, [r7, #8]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f80e 	bl	8008cca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cae:	69f8      	ldr	r0, [r7, #28]
 8008cb0:	f000 f89e 	bl	8008df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	e002      	b.n	8008cc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cba:	f04f 33ff 	mov.w	r3, #4294967295
 8008cbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
	}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3720      	adds	r7, #32
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b088      	sub	sp, #32
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]
 8008cd6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cda:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	21a5      	movs	r1, #165	@ 0xa5
 8008ce4:	f001 feee 	bl	800aac4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008cf2:	440b      	add	r3, r1
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	f023 0307 	bic.w	r3, r3, #7
 8008d00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00d      	beq.n	8008d28 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d10:	b672      	cpsid	i
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	b662      	cpsie	i
 8008d20:	617b      	str	r3, [r7, #20]
}
 8008d22:	bf00      	nop
 8008d24:	bf00      	nop
 8008d26:	e7fd      	b.n	8008d24 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01f      	beq.n	8008d6e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e012      	b.n	8008d5a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	4413      	add	r3, r2
 8008d3a:	7819      	ldrb	r1, [r3, #0]
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	3334      	adds	r3, #52	@ 0x34
 8008d44:	460a      	mov	r2, r1
 8008d46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d006      	beq.n	8008d62 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	3301      	adds	r3, #1
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	2b0f      	cmp	r3, #15
 8008d5e:	d9e9      	bls.n	8008d34 <prvInitialiseNewTask+0x6a>
 8008d60:	e000      	b.n	8008d64 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008d62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d6c:	e003      	b.n	8008d76 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d78:	2b37      	cmp	r3, #55	@ 0x37
 8008d7a:	d901      	bls.n	8008d80 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d7c:	2337      	movs	r3, #55	@ 0x37
 8008d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d84:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d8a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8e:	2200      	movs	r2, #0
 8008d90:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	3304      	adds	r3, #4
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff f93e 	bl	8008018 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	3318      	adds	r3, #24
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7ff f939 	bl	8008018 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008daa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	68f9      	ldr	r1, [r7, #12]
 8008dce:	69b8      	ldr	r0, [r7, #24]
 8008dd0:	f001 f968 	bl	800a0a4 <pxPortInitialiseStack>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008de6:	bf00      	nop
 8008de8:	3720      	adds	r7, #32
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008df8:	f001 fa60 	bl	800a2bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8008eb4 <prvAddNewTaskToReadyList+0xc4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3301      	adds	r3, #1
 8008e02:	4a2c      	ldr	r2, [pc, #176]	@ (8008eb4 <prvAddNewTaskToReadyList+0xc4>)
 8008e04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e06:	4b2c      	ldr	r3, [pc, #176]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d109      	bne.n	8008e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e14:	4b27      	ldr	r3, [pc, #156]	@ (8008eb4 <prvAddNewTaskToReadyList+0xc4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d110      	bne.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e1c:	f000 fc34 	bl	8009688 <prvInitialiseTaskLists>
 8008e20:	e00d      	b.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e22:	4b26      	ldr	r3, [pc, #152]	@ (8008ebc <prvAddNewTaskToReadyList+0xcc>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e2a:	4b23      	ldr	r3, [pc, #140]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d802      	bhi.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e38:	4a1f      	ldr	r2, [pc, #124]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e3e:	4b20      	ldr	r3, [pc, #128]	@ (8008ec0 <prvAddNewTaskToReadyList+0xd0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	4a1e      	ldr	r2, [pc, #120]	@ (8008ec0 <prvAddNewTaskToReadyList+0xd0>)
 8008e46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e48:	4b1d      	ldr	r3, [pc, #116]	@ (8008ec0 <prvAddNewTaskToReadyList+0xd0>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e54:	4b1b      	ldr	r3, [pc, #108]	@ (8008ec4 <prvAddNewTaskToReadyList+0xd4>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d903      	bls.n	8008e64 <prvAddNewTaskToReadyList+0x74>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e60:	4a18      	ldr	r2, [pc, #96]	@ (8008ec4 <prvAddNewTaskToReadyList+0xd4>)
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4a15      	ldr	r2, [pc, #84]	@ (8008ec8 <prvAddNewTaskToReadyList+0xd8>)
 8008e72:	441a      	add	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7ff f8d9 	bl	8008032 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e80:	f001 fa52 	bl	800a328 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e84:	4b0d      	ldr	r3, [pc, #52]	@ (8008ebc <prvAddNewTaskToReadyList+0xcc>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00e      	beq.n	8008eaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d207      	bcs.n	8008eaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008ecc <prvAddNewTaskToReadyList+0xdc>)
 8008e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eaa:	bf00      	nop
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20001620 	.word	0x20001620
 8008eb8:	2000114c 	.word	0x2000114c
 8008ebc:	2000162c 	.word	0x2000162c
 8008ec0:	2000163c 	.word	0x2000163c
 8008ec4:	20001628 	.word	0x20001628
 8008ec8:	20001150 	.word	0x20001150
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d01a      	beq.n	8008f18 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ee2:	4b15      	ldr	r3, [pc, #84]	@ (8008f38 <vTaskDelay+0x68>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00d      	beq.n	8008f06 <vTaskDelay+0x36>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eee:	b672      	cpsid	i
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	b662      	cpsie	i
 8008efe:	60bb      	str	r3, [r7, #8]
}
 8008f00:	bf00      	nop
 8008f02:	bf00      	nop
 8008f04:	e7fd      	b.n	8008f02 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008f06:	f000 f887 	bl	8009018 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fd0d 	bl	800992c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f12:	f000 f88f 	bl	8009034 <xTaskResumeAll>
 8008f16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d107      	bne.n	8008f2e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008f1e:	4b07      	ldr	r3, [pc, #28]	@ (8008f3c <vTaskDelay+0x6c>)
 8008f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20001648 	.word	0x20001648
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	@ 0x28
 8008f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f4e:	463a      	mov	r2, r7
 8008f50:	1d39      	adds	r1, r7, #4
 8008f52:	f107 0308 	add.w	r3, r7, #8
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff f80a 	bl	8007f70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	9202      	str	r2, [sp, #8]
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	2300      	movs	r3, #0
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	460a      	mov	r2, r1
 8008f6e:	4924      	ldr	r1, [pc, #144]	@ (8009000 <vTaskStartScheduler+0xc0>)
 8008f70:	4824      	ldr	r0, [pc, #144]	@ (8009004 <vTaskStartScheduler+0xc4>)
 8008f72:	f7ff fdff 	bl	8008b74 <xTaskCreateStatic>
 8008f76:	4603      	mov	r3, r0
 8008f78:	4a23      	ldr	r2, [pc, #140]	@ (8009008 <vTaskStartScheduler+0xc8>)
 8008f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f7c:	4b22      	ldr	r3, [pc, #136]	@ (8009008 <vTaskStartScheduler+0xc8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f84:	2301      	movs	r3, #1
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	e001      	b.n	8008f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d102      	bne.n	8008f9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f94:	f000 fd1e 	bl	80099d4 <xTimerCreateTimerTask>
 8008f98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d118      	bne.n	8008fd2 <vTaskStartScheduler+0x92>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa4:	b672      	cpsid	i
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	b662      	cpsie	i
 8008fb4:	613b      	str	r3, [r7, #16]
}
 8008fb6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fb8:	4b14      	ldr	r3, [pc, #80]	@ (800900c <vTaskStartScheduler+0xcc>)
 8008fba:	f04f 32ff 	mov.w	r2, #4294967295
 8008fbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fc0:	4b13      	ldr	r3, [pc, #76]	@ (8009010 <vTaskStartScheduler+0xd0>)
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fc6:	4b13      	ldr	r3, [pc, #76]	@ (8009014 <vTaskStartScheduler+0xd4>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fcc:	f001 f8f8 	bl	800a1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fd0:	e011      	b.n	8008ff6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd8:	d10d      	bne.n	8008ff6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fde:	b672      	cpsid	i
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	b662      	cpsie	i
 8008fee:	60fb      	str	r3, [r7, #12]
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	e7fd      	b.n	8008ff2 <vTaskStartScheduler+0xb2>
}
 8008ff6:	bf00      	nop
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	0800ad0c 	.word	0x0800ad0c
 8009004:	08009659 	.word	0x08009659
 8009008:	20001644 	.word	0x20001644
 800900c:	20001640 	.word	0x20001640
 8009010:	2000162c 	.word	0x2000162c
 8009014:	20001624 	.word	0x20001624

08009018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800901c:	4b04      	ldr	r3, [pc, #16]	@ (8009030 <vTaskSuspendAll+0x18>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3301      	adds	r3, #1
 8009022:	4a03      	ldr	r2, [pc, #12]	@ (8009030 <vTaskSuspendAll+0x18>)
 8009024:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009026:	bf00      	nop
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	20001648 	.word	0x20001648

08009034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800903e:	2300      	movs	r3, #0
 8009040:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009042:	4b43      	ldr	r3, [pc, #268]	@ (8009150 <xTaskResumeAll+0x11c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10d      	bne.n	8009066 <xTaskResumeAll+0x32>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904e:	b672      	cpsid	i
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	b662      	cpsie	i
 800905e:	603b      	str	r3, [r7, #0]
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	e7fd      	b.n	8009062 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009066:	f001 f929 	bl	800a2bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800906a:	4b39      	ldr	r3, [pc, #228]	@ (8009150 <xTaskResumeAll+0x11c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3b01      	subs	r3, #1
 8009070:	4a37      	ldr	r2, [pc, #220]	@ (8009150 <xTaskResumeAll+0x11c>)
 8009072:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009074:	4b36      	ldr	r3, [pc, #216]	@ (8009150 <xTaskResumeAll+0x11c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d162      	bne.n	8009142 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800907c:	4b35      	ldr	r3, [pc, #212]	@ (8009154 <xTaskResumeAll+0x120>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d05e      	beq.n	8009142 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009084:	e02f      	b.n	80090e6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009086:	4b34      	ldr	r3, [pc, #208]	@ (8009158 <xTaskResumeAll+0x124>)
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3318      	adds	r3, #24
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff f82a 	bl	80080ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3304      	adds	r3, #4
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff f825 	bl	80080ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a6:	4b2d      	ldr	r3, [pc, #180]	@ (800915c <xTaskResumeAll+0x128>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d903      	bls.n	80090b6 <xTaskResumeAll+0x82>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b2:	4a2a      	ldr	r2, [pc, #168]	@ (800915c <xTaskResumeAll+0x128>)
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4a27      	ldr	r2, [pc, #156]	@ (8009160 <xTaskResumeAll+0x12c>)
 80090c4:	441a      	add	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3304      	adds	r3, #4
 80090ca:	4619      	mov	r1, r3
 80090cc:	4610      	mov	r0, r2
 80090ce:	f7fe ffb0 	bl	8008032 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d6:	4b23      	ldr	r3, [pc, #140]	@ (8009164 <xTaskResumeAll+0x130>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090dc:	429a      	cmp	r2, r3
 80090de:	d302      	bcc.n	80090e6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80090e0:	4b21      	ldr	r3, [pc, #132]	@ (8009168 <xTaskResumeAll+0x134>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009158 <xTaskResumeAll+0x124>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1cb      	bne.n	8009086 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090f4:	f000 fb68 	bl	80097c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80090f8:	4b1c      	ldr	r3, [pc, #112]	@ (800916c <xTaskResumeAll+0x138>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d010      	beq.n	8009126 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009104:	f000 f846 	bl	8009194 <xTaskIncrementTick>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800910e:	4b16      	ldr	r3, [pc, #88]	@ (8009168 <xTaskResumeAll+0x134>)
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	3b01      	subs	r3, #1
 8009118:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1f1      	bne.n	8009104 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009120:	4b12      	ldr	r3, [pc, #72]	@ (800916c <xTaskResumeAll+0x138>)
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009126:	4b10      	ldr	r3, [pc, #64]	@ (8009168 <xTaskResumeAll+0x134>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800912e:	2301      	movs	r3, #1
 8009130:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009132:	4b0f      	ldr	r3, [pc, #60]	@ (8009170 <xTaskResumeAll+0x13c>)
 8009134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009142:	f001 f8f1 	bl	800a328 <vPortExitCritical>

	return xAlreadyYielded;
 8009146:	68bb      	ldr	r3, [r7, #8]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20001648 	.word	0x20001648
 8009154:	20001620 	.word	0x20001620
 8009158:	200015e0 	.word	0x200015e0
 800915c:	20001628 	.word	0x20001628
 8009160:	20001150 	.word	0x20001150
 8009164:	2000114c 	.word	0x2000114c
 8009168:	20001634 	.word	0x20001634
 800916c:	20001630 	.word	0x20001630
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800917a:	4b05      	ldr	r3, [pc, #20]	@ (8009190 <xTaskGetTickCount+0x1c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009180:	687b      	ldr	r3, [r7, #4]
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	20001624 	.word	0x20001624

08009194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800919a:	2300      	movs	r3, #0
 800919c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800919e:	4b50      	ldr	r3, [pc, #320]	@ (80092e0 <xTaskIncrementTick+0x14c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f040 808c 	bne.w	80092c0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091a8:	4b4e      	ldr	r3, [pc, #312]	@ (80092e4 <xTaskIncrementTick+0x150>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091b0:	4a4c      	ldr	r2, [pc, #304]	@ (80092e4 <xTaskIncrementTick+0x150>)
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d123      	bne.n	8009204 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80091bc:	4b4a      	ldr	r3, [pc, #296]	@ (80092e8 <xTaskIncrementTick+0x154>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00d      	beq.n	80091e2 <xTaskIncrementTick+0x4e>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	b672      	cpsid	i
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	b662      	cpsie	i
 80091da:	603b      	str	r3, [r7, #0]
}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	e7fd      	b.n	80091de <xTaskIncrementTick+0x4a>
 80091e2:	4b41      	ldr	r3, [pc, #260]	@ (80092e8 <xTaskIncrementTick+0x154>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	4b40      	ldr	r3, [pc, #256]	@ (80092ec <xTaskIncrementTick+0x158>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a3e      	ldr	r2, [pc, #248]	@ (80092e8 <xTaskIncrementTick+0x154>)
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	4a3e      	ldr	r2, [pc, #248]	@ (80092ec <xTaskIncrementTick+0x158>)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	4b3e      	ldr	r3, [pc, #248]	@ (80092f0 <xTaskIncrementTick+0x15c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3301      	adds	r3, #1
 80091fc:	4a3c      	ldr	r2, [pc, #240]	@ (80092f0 <xTaskIncrementTick+0x15c>)
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	f000 fae2 	bl	80097c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009204:	4b3b      	ldr	r3, [pc, #236]	@ (80092f4 <xTaskIncrementTick+0x160>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	429a      	cmp	r2, r3
 800920c:	d349      	bcc.n	80092a2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800920e:	4b36      	ldr	r3, [pc, #216]	@ (80092e8 <xTaskIncrementTick+0x154>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d104      	bne.n	8009222 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009218:	4b36      	ldr	r3, [pc, #216]	@ (80092f4 <xTaskIncrementTick+0x160>)
 800921a:	f04f 32ff 	mov.w	r2, #4294967295
 800921e:	601a      	str	r2, [r3, #0]
					break;
 8009220:	e03f      	b.n	80092a2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009222:	4b31      	ldr	r3, [pc, #196]	@ (80092e8 <xTaskIncrementTick+0x154>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	429a      	cmp	r2, r3
 8009238:	d203      	bcs.n	8009242 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800923a:	4a2e      	ldr	r2, [pc, #184]	@ (80092f4 <xTaskIncrementTick+0x160>)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009240:	e02f      	b.n	80092a2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	3304      	adds	r3, #4
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe ff50 	bl	80080ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009250:	2b00      	cmp	r3, #0
 8009252:	d004      	beq.n	800925e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	3318      	adds	r3, #24
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe ff47 	bl	80080ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009262:	4b25      	ldr	r3, [pc, #148]	@ (80092f8 <xTaskIncrementTick+0x164>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d903      	bls.n	8009272 <xTaskIncrementTick+0xde>
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926e:	4a22      	ldr	r2, [pc, #136]	@ (80092f8 <xTaskIncrementTick+0x164>)
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4a1f      	ldr	r2, [pc, #124]	@ (80092fc <xTaskIncrementTick+0x168>)
 8009280:	441a      	add	r2, r3
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	3304      	adds	r3, #4
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f7fe fed2 	bl	8008032 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009292:	4b1b      	ldr	r3, [pc, #108]	@ (8009300 <xTaskIncrementTick+0x16c>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009298:	429a      	cmp	r2, r3
 800929a:	d3b8      	bcc.n	800920e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a0:	e7b5      	b.n	800920e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092a2:	4b17      	ldr	r3, [pc, #92]	@ (8009300 <xTaskIncrementTick+0x16c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a8:	4914      	ldr	r1, [pc, #80]	@ (80092fc <xTaskIncrementTick+0x168>)
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d907      	bls.n	80092ca <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80092ba:	2301      	movs	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]
 80092be:	e004      	b.n	80092ca <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80092c0:	4b10      	ldr	r3, [pc, #64]	@ (8009304 <xTaskIncrementTick+0x170>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3301      	adds	r3, #1
 80092c6:	4a0f      	ldr	r2, [pc, #60]	@ (8009304 <xTaskIncrementTick+0x170>)
 80092c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80092ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009308 <xTaskIncrementTick+0x174>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80092d2:	2301      	movs	r3, #1
 80092d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80092d6:	697b      	ldr	r3, [r7, #20]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20001648 	.word	0x20001648
 80092e4:	20001624 	.word	0x20001624
 80092e8:	200015d8 	.word	0x200015d8
 80092ec:	200015dc 	.word	0x200015dc
 80092f0:	20001638 	.word	0x20001638
 80092f4:	20001640 	.word	0x20001640
 80092f8:	20001628 	.word	0x20001628
 80092fc:	20001150 	.word	0x20001150
 8009300:	2000114c 	.word	0x2000114c
 8009304:	20001630 	.word	0x20001630
 8009308:	20001634 	.word	0x20001634

0800930c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009312:	4b29      	ldr	r3, [pc, #164]	@ (80093b8 <vTaskSwitchContext+0xac>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800931a:	4b28      	ldr	r3, [pc, #160]	@ (80093bc <vTaskSwitchContext+0xb0>)
 800931c:	2201      	movs	r2, #1
 800931e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009320:	e044      	b.n	80093ac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009322:	4b26      	ldr	r3, [pc, #152]	@ (80093bc <vTaskSwitchContext+0xb0>)
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009328:	4b25      	ldr	r3, [pc, #148]	@ (80093c0 <vTaskSwitchContext+0xb4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	e013      	b.n	8009358 <vTaskSwitchContext+0x4c>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10d      	bne.n	8009352 <vTaskSwitchContext+0x46>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933a:	b672      	cpsid	i
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	b662      	cpsie	i
 800934a:	607b      	str	r3, [r7, #4]
}
 800934c:	bf00      	nop
 800934e:	bf00      	nop
 8009350:	e7fd      	b.n	800934e <vTaskSwitchContext+0x42>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3b01      	subs	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	491a      	ldr	r1, [pc, #104]	@ (80093c4 <vTaskSwitchContext+0xb8>)
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0e1      	beq.n	8009330 <vTaskSwitchContext+0x24>
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4a13      	ldr	r2, [pc, #76]	@ (80093c4 <vTaskSwitchContext+0xb8>)
 8009378:	4413      	add	r3, r2
 800937a:	60bb      	str	r3, [r7, #8]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	605a      	str	r2, [r3, #4]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3308      	adds	r3, #8
 800938e:	429a      	cmp	r2, r3
 8009390:	d104      	bne.n	800939c <vTaskSwitchContext+0x90>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	605a      	str	r2, [r3, #4]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	4a09      	ldr	r2, [pc, #36]	@ (80093c8 <vTaskSwitchContext+0xbc>)
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	4a06      	ldr	r2, [pc, #24]	@ (80093c0 <vTaskSwitchContext+0xb4>)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6013      	str	r3, [r2, #0]
}
 80093ac:	bf00      	nop
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20001648 	.word	0x20001648
 80093bc:	20001634 	.word	0x20001634
 80093c0:	20001628 	.word	0x20001628
 80093c4:	20001150 	.word	0x20001150
 80093c8:	2000114c 	.word	0x2000114c

080093cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10d      	bne.n	80093f8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e0:	b672      	cpsid	i
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	b662      	cpsie	i
 80093f0:	60fb      	str	r3, [r7, #12]
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	e7fd      	b.n	80093f4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093f8:	4b07      	ldr	r3, [pc, #28]	@ (8009418 <vTaskPlaceOnEventList+0x4c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3318      	adds	r3, #24
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7fe fe3a 	bl	800807a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009406:	2101      	movs	r1, #1
 8009408:	6838      	ldr	r0, [r7, #0]
 800940a:	f000 fa8f 	bl	800992c <prvAddCurrentTaskToDelayedList>
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	2000114c 	.word	0x2000114c

0800941c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10d      	bne.n	800944a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	b672      	cpsid	i
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	b662      	cpsie	i
 8009442:	617b      	str	r3, [r7, #20]
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop
 8009448:	e7fd      	b.n	8009446 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800944a:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <vTaskPlaceOnEventListRestricted+0x58>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3318      	adds	r3, #24
 8009450:	4619      	mov	r1, r3
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f7fe fded 	bl	8008032 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800945e:	f04f 33ff 	mov.w	r3, #4294967295
 8009462:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	68b8      	ldr	r0, [r7, #8]
 8009468:	f000 fa60 	bl	800992c <prvAddCurrentTaskToDelayedList>
	}
 800946c:	bf00      	nop
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	2000114c 	.word	0x2000114c

08009478 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10d      	bne.n	80094aa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009492:	b672      	cpsid	i
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	b662      	cpsie	i
 80094a2:	60fb      	str	r3, [r7, #12]
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	e7fd      	b.n	80094a6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	3318      	adds	r3, #24
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fe1c 	bl	80080ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094b4:	4b1d      	ldr	r3, [pc, #116]	@ (800952c <xTaskRemoveFromEventList+0xb4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d11d      	bne.n	80094f8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	3304      	adds	r3, #4
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fe fe13 	bl	80080ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ca:	4b19      	ldr	r3, [pc, #100]	@ (8009530 <xTaskRemoveFromEventList+0xb8>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d903      	bls.n	80094da <xTaskRemoveFromEventList+0x62>
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d6:	4a16      	ldr	r2, [pc, #88]	@ (8009530 <xTaskRemoveFromEventList+0xb8>)
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094de:	4613      	mov	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4a13      	ldr	r2, [pc, #76]	@ (8009534 <xTaskRemoveFromEventList+0xbc>)
 80094e8:	441a      	add	r2, r3
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	3304      	adds	r3, #4
 80094ee:	4619      	mov	r1, r3
 80094f0:	4610      	mov	r0, r2
 80094f2:	f7fe fd9e 	bl	8008032 <vListInsertEnd>
 80094f6:	e005      	b.n	8009504 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	3318      	adds	r3, #24
 80094fc:	4619      	mov	r1, r3
 80094fe:	480e      	ldr	r0, [pc, #56]	@ (8009538 <xTaskRemoveFromEventList+0xc0>)
 8009500:	f7fe fd97 	bl	8008032 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009508:	4b0c      	ldr	r3, [pc, #48]	@ (800953c <xTaskRemoveFromEventList+0xc4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950e:	429a      	cmp	r2, r3
 8009510:	d905      	bls.n	800951e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009512:	2301      	movs	r3, #1
 8009514:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009516:	4b0a      	ldr	r3, [pc, #40]	@ (8009540 <xTaskRemoveFromEventList+0xc8>)
 8009518:	2201      	movs	r2, #1
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	e001      	b.n	8009522 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009522:	697b      	ldr	r3, [r7, #20]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20001648 	.word	0x20001648
 8009530:	20001628 	.word	0x20001628
 8009534:	20001150 	.word	0x20001150
 8009538:	200015e0 	.word	0x200015e0
 800953c:	2000114c 	.word	0x2000114c
 8009540:	20001634 	.word	0x20001634

08009544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800954c:	4b06      	ldr	r3, [pc, #24]	@ (8009568 <vTaskInternalSetTimeOutState+0x24>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009554:	4b05      	ldr	r3, [pc, #20]	@ (800956c <vTaskInternalSetTimeOutState+0x28>)
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	605a      	str	r2, [r3, #4]
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	20001638 	.word	0x20001638
 800956c:	20001624 	.word	0x20001624

08009570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10d      	bne.n	800959c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009584:	b672      	cpsid	i
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	b662      	cpsie	i
 8009594:	613b      	str	r3, [r7, #16]
}
 8009596:	bf00      	nop
 8009598:	bf00      	nop
 800959a:	e7fd      	b.n	8009598 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10d      	bne.n	80095be <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	b672      	cpsid	i
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	b662      	cpsie	i
 80095b6:	60fb      	str	r3, [r7, #12]
}
 80095b8:	bf00      	nop
 80095ba:	bf00      	nop
 80095bc:	e7fd      	b.n	80095ba <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80095be:	f000 fe7d 	bl	800a2bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009638 <xTaskCheckForTimeOut+0xc8>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095da:	d102      	bne.n	80095e2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095dc:	2300      	movs	r3, #0
 80095de:	61fb      	str	r3, [r7, #28]
 80095e0:	e023      	b.n	800962a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	4b15      	ldr	r3, [pc, #84]	@ (800963c <xTaskCheckForTimeOut+0xcc>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d007      	beq.n	80095fe <xTaskCheckForTimeOut+0x8e>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d302      	bcc.n	80095fe <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095f8:	2301      	movs	r3, #1
 80095fa:	61fb      	str	r3, [r7, #28]
 80095fc:	e015      	b.n	800962a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	429a      	cmp	r2, r3
 8009606:	d20b      	bcs.n	8009620 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff ff95 	bl	8009544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
 800961e:	e004      	b.n	800962a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009626:	2301      	movs	r3, #1
 8009628:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800962a:	f000 fe7d 	bl	800a328 <vPortExitCritical>

	return xReturn;
 800962e:	69fb      	ldr	r3, [r7, #28]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3720      	adds	r7, #32
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20001624 	.word	0x20001624
 800963c:	20001638 	.word	0x20001638

08009640 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009640:	b480      	push	{r7}
 8009642:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009644:	4b03      	ldr	r3, [pc, #12]	@ (8009654 <vTaskMissedYield+0x14>)
 8009646:	2201      	movs	r2, #1
 8009648:	601a      	str	r2, [r3, #0]
}
 800964a:	bf00      	nop
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	20001634 	.word	0x20001634

08009658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009660:	f000 f852 	bl	8009708 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009664:	4b06      	ldr	r3, [pc, #24]	@ (8009680 <prvIdleTask+0x28>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d9f9      	bls.n	8009660 <prvIdleTask+0x8>
			{
				taskYIELD();
 800966c:	4b05      	ldr	r3, [pc, #20]	@ (8009684 <prvIdleTask+0x2c>)
 800966e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800967c:	e7f0      	b.n	8009660 <prvIdleTask+0x8>
 800967e:	bf00      	nop
 8009680:	20001150 	.word	0x20001150
 8009684:	e000ed04 	.word	0xe000ed04

08009688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800968e:	2300      	movs	r3, #0
 8009690:	607b      	str	r3, [r7, #4]
 8009692:	e00c      	b.n	80096ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4a12      	ldr	r2, [pc, #72]	@ (80096e8 <prvInitialiseTaskLists+0x60>)
 80096a0:	4413      	add	r3, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe fc98 	bl	8007fd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3301      	adds	r3, #1
 80096ac:	607b      	str	r3, [r7, #4]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b37      	cmp	r3, #55	@ 0x37
 80096b2:	d9ef      	bls.n	8009694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096b4:	480d      	ldr	r0, [pc, #52]	@ (80096ec <prvInitialiseTaskLists+0x64>)
 80096b6:	f7fe fc8f 	bl	8007fd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096ba:	480d      	ldr	r0, [pc, #52]	@ (80096f0 <prvInitialiseTaskLists+0x68>)
 80096bc:	f7fe fc8c 	bl	8007fd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096c0:	480c      	ldr	r0, [pc, #48]	@ (80096f4 <prvInitialiseTaskLists+0x6c>)
 80096c2:	f7fe fc89 	bl	8007fd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096c6:	480c      	ldr	r0, [pc, #48]	@ (80096f8 <prvInitialiseTaskLists+0x70>)
 80096c8:	f7fe fc86 	bl	8007fd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096cc:	480b      	ldr	r0, [pc, #44]	@ (80096fc <prvInitialiseTaskLists+0x74>)
 80096ce:	f7fe fc83 	bl	8007fd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009700 <prvInitialiseTaskLists+0x78>)
 80096d4:	4a05      	ldr	r2, [pc, #20]	@ (80096ec <prvInitialiseTaskLists+0x64>)
 80096d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009704 <prvInitialiseTaskLists+0x7c>)
 80096da:	4a05      	ldr	r2, [pc, #20]	@ (80096f0 <prvInitialiseTaskLists+0x68>)
 80096dc:	601a      	str	r2, [r3, #0]
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20001150 	.word	0x20001150
 80096ec:	200015b0 	.word	0x200015b0
 80096f0:	200015c4 	.word	0x200015c4
 80096f4:	200015e0 	.word	0x200015e0
 80096f8:	200015f4 	.word	0x200015f4
 80096fc:	2000160c 	.word	0x2000160c
 8009700:	200015d8 	.word	0x200015d8
 8009704:	200015dc 	.word	0x200015dc

08009708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800970e:	e019      	b.n	8009744 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009710:	f000 fdd4 	bl	800a2bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009714:	4b10      	ldr	r3, [pc, #64]	@ (8009758 <prvCheckTasksWaitingTermination+0x50>)
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3304      	adds	r3, #4
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe fce3 	bl	80080ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009726:	4b0d      	ldr	r3, [pc, #52]	@ (800975c <prvCheckTasksWaitingTermination+0x54>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3b01      	subs	r3, #1
 800972c:	4a0b      	ldr	r2, [pc, #44]	@ (800975c <prvCheckTasksWaitingTermination+0x54>)
 800972e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009730:	4b0b      	ldr	r3, [pc, #44]	@ (8009760 <prvCheckTasksWaitingTermination+0x58>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3b01      	subs	r3, #1
 8009736:	4a0a      	ldr	r2, [pc, #40]	@ (8009760 <prvCheckTasksWaitingTermination+0x58>)
 8009738:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800973a:	f000 fdf5 	bl	800a328 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f810 	bl	8009764 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009744:	4b06      	ldr	r3, [pc, #24]	@ (8009760 <prvCheckTasksWaitingTermination+0x58>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e1      	bne.n	8009710 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	200015f4 	.word	0x200015f4
 800975c:	20001620 	.word	0x20001620
 8009760:	20001608 	.word	0x20001608

08009764 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009772:	2b00      	cmp	r3, #0
 8009774:	d108      	bne.n	8009788 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977a:	4618      	mov	r0, r3
 800977c:	f000 ff9a 	bl	800a6b4 <vPortFree>
				vPortFree( pxTCB );
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 ff97 	bl	800a6b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009786:	e01b      	b.n	80097c0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800978e:	2b01      	cmp	r3, #1
 8009790:	d103      	bne.n	800979a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 ff8e 	bl	800a6b4 <vPortFree>
	}
 8009798:	e012      	b.n	80097c0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d00d      	beq.n	80097c0 <prvDeleteTCB+0x5c>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a8:	b672      	cpsid	i
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	b662      	cpsie	i
 80097b8:	60fb      	str	r3, [r7, #12]
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	e7fd      	b.n	80097bc <prvDeleteTCB+0x58>
	}
 80097c0:	bf00      	nop
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009800 <prvResetNextTaskUnblockTime+0x38>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d104      	bne.n	80097e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009804 <prvResetNextTaskUnblockTime+0x3c>)
 80097da:	f04f 32ff 	mov.w	r2, #4294967295
 80097de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097e0:	e008      	b.n	80097f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e2:	4b07      	ldr	r3, [pc, #28]	@ (8009800 <prvResetNextTaskUnblockTime+0x38>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	4a04      	ldr	r2, [pc, #16]	@ (8009804 <prvResetNextTaskUnblockTime+0x3c>)
 80097f2:	6013      	str	r3, [r2, #0]
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	200015d8 	.word	0x200015d8
 8009804:	20001640 	.word	0x20001640

08009808 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800980e:	4b0b      	ldr	r3, [pc, #44]	@ (800983c <xTaskGetSchedulerState+0x34>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009816:	2301      	movs	r3, #1
 8009818:	607b      	str	r3, [r7, #4]
 800981a:	e008      	b.n	800982e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800981c:	4b08      	ldr	r3, [pc, #32]	@ (8009840 <xTaskGetSchedulerState+0x38>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009824:	2302      	movs	r3, #2
 8009826:	607b      	str	r3, [r7, #4]
 8009828:	e001      	b.n	800982e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800982a:	2300      	movs	r3, #0
 800982c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800982e:	687b      	ldr	r3, [r7, #4]
	}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	2000162c 	.word	0x2000162c
 8009840:	20001648 	.word	0x20001648

08009844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d05c      	beq.n	8009914 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800985a:	4b31      	ldr	r3, [pc, #196]	@ (8009920 <xTaskPriorityDisinherit+0xdc>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	429a      	cmp	r2, r3
 8009862:	d00d      	beq.n	8009880 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009868:	b672      	cpsid	i
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	b662      	cpsie	i
 8009878:	60fb      	str	r3, [r7, #12]
}
 800987a:	bf00      	nop
 800987c:	bf00      	nop
 800987e:	e7fd      	b.n	800987c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10d      	bne.n	80098a4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988c:	b672      	cpsid	i
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	b662      	cpsie	i
 800989c:	60bb      	str	r3, [r7, #8]
}
 800989e:	bf00      	nop
 80098a0:	bf00      	nop
 80098a2:	e7fd      	b.n	80098a0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a8:	1e5a      	subs	r2, r3, #1
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d02c      	beq.n	8009914 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d128      	bne.n	8009914 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	3304      	adds	r3, #4
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe fc10 	bl	80080ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009924 <xTaskPriorityDisinherit+0xe0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d903      	bls.n	80098f4 <xTaskPriorityDisinherit+0xb0>
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f0:	4a0c      	ldr	r2, [pc, #48]	@ (8009924 <xTaskPriorityDisinherit+0xe0>)
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4a09      	ldr	r2, [pc, #36]	@ (8009928 <xTaskPriorityDisinherit+0xe4>)
 8009902:	441a      	add	r2, r3
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	3304      	adds	r3, #4
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f7fe fb91 	bl	8008032 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009910:	2301      	movs	r3, #1
 8009912:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009914:	697b      	ldr	r3, [r7, #20]
	}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	2000114c 	.word	0x2000114c
 8009924:	20001628 	.word	0x20001628
 8009928:	20001150 	.word	0x20001150

0800992c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009936:	4b21      	ldr	r3, [pc, #132]	@ (80099bc <prvAddCurrentTaskToDelayedList+0x90>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800993c:	4b20      	ldr	r3, [pc, #128]	@ (80099c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3304      	adds	r3, #4
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fbd2 	bl	80080ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994e:	d10a      	bne.n	8009966 <prvAddCurrentTaskToDelayedList+0x3a>
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d007      	beq.n	8009966 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009956:	4b1a      	ldr	r3, [pc, #104]	@ (80099c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3304      	adds	r3, #4
 800995c:	4619      	mov	r1, r3
 800995e:	4819      	ldr	r0, [pc, #100]	@ (80099c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009960:	f7fe fb67 	bl	8008032 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009964:	e026      	b.n	80099b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4413      	add	r3, r2
 800996c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800996e:	4b14      	ldr	r3, [pc, #80]	@ (80099c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	429a      	cmp	r2, r3
 800997c:	d209      	bcs.n	8009992 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800997e:	4b12      	ldr	r3, [pc, #72]	@ (80099c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	4b0f      	ldr	r3, [pc, #60]	@ (80099c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f7fe fb75 	bl	800807a <vListInsert>
}
 8009990:	e010      	b.n	80099b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009992:	4b0e      	ldr	r3, [pc, #56]	@ (80099cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	4b0a      	ldr	r3, [pc, #40]	@ (80099c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3304      	adds	r3, #4
 800999c:	4619      	mov	r1, r3
 800999e:	4610      	mov	r0, r2
 80099a0:	f7fe fb6b 	bl	800807a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099a4:	4b0a      	ldr	r3, [pc, #40]	@ (80099d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d202      	bcs.n	80099b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099ae:	4a08      	ldr	r2, [pc, #32]	@ (80099d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	6013      	str	r3, [r2, #0]
}
 80099b4:	bf00      	nop
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	20001624 	.word	0x20001624
 80099c0:	2000114c 	.word	0x2000114c
 80099c4:	2000160c 	.word	0x2000160c
 80099c8:	200015dc 	.word	0x200015dc
 80099cc:	200015d8 	.word	0x200015d8
 80099d0:	20001640 	.word	0x20001640

080099d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	@ 0x28
 80099d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099da:	2300      	movs	r3, #0
 80099dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099de:	f000 fb21 	bl	800a024 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099e2:	4b1e      	ldr	r3, [pc, #120]	@ (8009a5c <xTimerCreateTimerTask+0x88>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d021      	beq.n	8009a2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099f2:	1d3a      	adds	r2, r7, #4
 80099f4:	f107 0108 	add.w	r1, r7, #8
 80099f8:	f107 030c 	add.w	r3, r7, #12
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe fad1 	bl	8007fa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	9202      	str	r2, [sp, #8]
 8009a0a:	9301      	str	r3, [sp, #4]
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	2300      	movs	r3, #0
 8009a12:	460a      	mov	r2, r1
 8009a14:	4912      	ldr	r1, [pc, #72]	@ (8009a60 <xTimerCreateTimerTask+0x8c>)
 8009a16:	4813      	ldr	r0, [pc, #76]	@ (8009a64 <xTimerCreateTimerTask+0x90>)
 8009a18:	f7ff f8ac 	bl	8008b74 <xTaskCreateStatic>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4a12      	ldr	r2, [pc, #72]	@ (8009a68 <xTimerCreateTimerTask+0x94>)
 8009a20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a22:	4b11      	ldr	r3, [pc, #68]	@ (8009a68 <xTimerCreateTimerTask+0x94>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10d      	bne.n	8009a50 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a38:	b672      	cpsid	i
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	b662      	cpsie	i
 8009a48:	613b      	str	r3, [r7, #16]
}
 8009a4a:	bf00      	nop
 8009a4c:	bf00      	nop
 8009a4e:	e7fd      	b.n	8009a4c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009a50:	697b      	ldr	r3, [r7, #20]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	2000167c 	.word	0x2000167c
 8009a60:	0800ad14 	.word	0x0800ad14
 8009a64:	08009bad 	.word	0x08009bad
 8009a68:	20001680 	.word	0x20001680

08009a6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	@ 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10d      	bne.n	8009aa0 <xTimerGenericCommand+0x34>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a88:	b672      	cpsid	i
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	b662      	cpsie	i
 8009a98:	623b      	str	r3, [r7, #32]
}
 8009a9a:	bf00      	nop
 8009a9c:	bf00      	nop
 8009a9e:	e7fd      	b.n	8009a9c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009aa0:	4b19      	ldr	r3, [pc, #100]	@ (8009b08 <xTimerGenericCommand+0x9c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d02a      	beq.n	8009afe <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	dc18      	bgt.n	8009aec <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009aba:	f7ff fea5 	bl	8009808 <xTaskGetSchedulerState>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d109      	bne.n	8009ad8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ac4:	4b10      	ldr	r3, [pc, #64]	@ (8009b08 <xTimerGenericCommand+0x9c>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	f107 0110 	add.w	r1, r7, #16
 8009acc:	2300      	movs	r3, #0
 8009ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ad0:	f7fe fc4c 	bl	800836c <xQueueGenericSend>
 8009ad4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ad6:	e012      	b.n	8009afe <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8009b08 <xTimerGenericCommand+0x9c>)
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	f107 0110 	add.w	r1, r7, #16
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f7fe fc42 	bl	800836c <xQueueGenericSend>
 8009ae8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009aea:	e008      	b.n	8009afe <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009aec:	4b06      	ldr	r3, [pc, #24]	@ (8009b08 <xTimerGenericCommand+0x9c>)
 8009aee:	6818      	ldr	r0, [r3, #0]
 8009af0:	f107 0110 	add.w	r1, r7, #16
 8009af4:	2300      	movs	r3, #0
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	f7fe fd42 	bl	8008580 <xQueueGenericSendFromISR>
 8009afc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3728      	adds	r7, #40	@ 0x28
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	2000167c 	.word	0x2000167c

08009b0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b16:	4b24      	ldr	r3, [pc, #144]	@ (8009ba8 <prvProcessExpiredTimer+0x9c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe fae1 	bl	80080ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b30:	f003 0304 	and.w	r3, r3, #4
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d025      	beq.n	8009b84 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	699a      	ldr	r2, [r3, #24]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	18d1      	adds	r1, r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	6978      	ldr	r0, [r7, #20]
 8009b46:	f000 f8d7 	bl	8009cf8 <prvInsertTimerInActiveList>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d022      	beq.n	8009b96 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b50:	2300      	movs	r3, #0
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	2300      	movs	r3, #0
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	2100      	movs	r1, #0
 8009b5a:	6978      	ldr	r0, [r7, #20]
 8009b5c:	f7ff ff86 	bl	8009a6c <xTimerGenericCommand>
 8009b60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d116      	bne.n	8009b96 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6c:	b672      	cpsid	i
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	b662      	cpsie	i
 8009b7c:	60fb      	str	r3, [r7, #12]
}
 8009b7e:	bf00      	nop
 8009b80:	bf00      	nop
 8009b82:	e7fd      	b.n	8009b80 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b8a:	f023 0301 	bic.w	r3, r3, #1
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	6978      	ldr	r0, [r7, #20]
 8009b9c:	4798      	blx	r3
}
 8009b9e:	bf00      	nop
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20001674 	.word	0x20001674

08009bac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bb4:	f107 0308 	add.w	r3, r7, #8
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 f859 	bl	8009c70 <prvGetNextExpireTime>
 8009bbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 f805 	bl	8009bd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bca:	f000 f8d7 	bl	8009d7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bce:	bf00      	nop
 8009bd0:	e7f0      	b.n	8009bb4 <prvTimerTask+0x8>
	...

08009bd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bde:	f7ff fa1b 	bl	8009018 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009be2:	f107 0308 	add.w	r3, r7, #8
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f866 	bl	8009cb8 <prvSampleTimeNow>
 8009bec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d130      	bne.n	8009c56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <prvProcessTimerOrBlockTask+0x3c>
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d806      	bhi.n	8009c10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c02:	f7ff fa17 	bl	8009034 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c06:	68f9      	ldr	r1, [r7, #12]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff ff7f 	bl	8009b0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c0e:	e024      	b.n	8009c5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d008      	beq.n	8009c28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c16:	4b13      	ldr	r3, [pc, #76]	@ (8009c64 <prvProcessTimerOrBlockTask+0x90>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <prvProcessTimerOrBlockTask+0x50>
 8009c20:	2301      	movs	r3, #1
 8009c22:	e000      	b.n	8009c26 <prvProcessTimerOrBlockTask+0x52>
 8009c24:	2300      	movs	r3, #0
 8009c26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c28:	4b0f      	ldr	r3, [pc, #60]	@ (8009c68 <prvProcessTimerOrBlockTask+0x94>)
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	4619      	mov	r1, r3
 8009c36:	f7fe ff69 	bl	8008b0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c3a:	f7ff f9fb 	bl	8009034 <xTaskResumeAll>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10a      	bne.n	8009c5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c44:	4b09      	ldr	r3, [pc, #36]	@ (8009c6c <prvProcessTimerOrBlockTask+0x98>)
 8009c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	f3bf 8f6f 	isb	sy
}
 8009c54:	e001      	b.n	8009c5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c56:	f7ff f9ed 	bl	8009034 <xTaskResumeAll>
}
 8009c5a:	bf00      	nop
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20001678 	.word	0x20001678
 8009c68:	2000167c 	.word	0x2000167c
 8009c6c:	e000ed04 	.word	0xe000ed04

08009c70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c78:	4b0e      	ldr	r3, [pc, #56]	@ (8009cb4 <prvGetNextExpireTime+0x44>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <prvGetNextExpireTime+0x16>
 8009c82:	2201      	movs	r2, #1
 8009c84:	e000      	b.n	8009c88 <prvGetNextExpireTime+0x18>
 8009c86:	2200      	movs	r2, #0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d105      	bne.n	8009ca0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c94:	4b07      	ldr	r3, [pc, #28]	@ (8009cb4 <prvGetNextExpireTime+0x44>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	e001      	b.n	8009ca4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	20001674 	.word	0x20001674

08009cb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cc0:	f7ff fa58 	bl	8009174 <xTaskGetTickCount>
 8009cc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf4 <prvSampleTimeNow+0x3c>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d205      	bcs.n	8009cdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cd0:	f000 f940 	bl	8009f54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	e002      	b.n	8009ce2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ce2:	4a04      	ldr	r2, [pc, #16]	@ (8009cf4 <prvSampleTimeNow+0x3c>)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20001684 	.word	0x20001684

08009cf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d812      	bhi.n	8009d44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	1ad2      	subs	r2, r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d302      	bcc.n	8009d32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	e01b      	b.n	8009d6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d32:	4b10      	ldr	r3, [pc, #64]	@ (8009d74 <prvInsertTimerInActiveList+0x7c>)
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7fe f99c 	bl	800807a <vListInsert>
 8009d42:	e012      	b.n	8009d6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d206      	bcs.n	8009d5a <prvInsertTimerInActiveList+0x62>
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d302      	bcc.n	8009d5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d54:	2301      	movs	r3, #1
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	e007      	b.n	8009d6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d5a:	4b07      	ldr	r3, [pc, #28]	@ (8009d78 <prvInsertTimerInActiveList+0x80>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3304      	adds	r3, #4
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	f7fe f988 	bl	800807a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d6a:	697b      	ldr	r3, [r7, #20]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	20001678 	.word	0x20001678
 8009d78:	20001674 	.word	0x20001674

08009d7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08e      	sub	sp, #56	@ 0x38
 8009d80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d82:	e0d4      	b.n	8009f2e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	da1b      	bge.n	8009dc2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d8a:	1d3b      	adds	r3, r7, #4
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10d      	bne.n	8009db2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9a:	b672      	cpsid	i
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	b662      	cpsie	i
 8009daa:	61fb      	str	r3, [r7, #28]
}
 8009dac:	bf00      	nop
 8009dae:	bf00      	nop
 8009db0:	e7fd      	b.n	8009dae <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009db8:	6850      	ldr	r0, [r2, #4]
 8009dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dbc:	6892      	ldr	r2, [r2, #8]
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f2c0 80b2 	blt.w	8009f2e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd8:	3304      	adds	r3, #4
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe f986 	bl	80080ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009de0:	463b      	mov	r3, r7
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff ff68 	bl	8009cb8 <prvSampleTimeNow>
 8009de8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b09      	cmp	r3, #9
 8009dee:	f200 809b 	bhi.w	8009f28 <prvProcessReceivedCommands+0x1ac>
 8009df2:	a201      	add	r2, pc, #4	@ (adr r2, 8009df8 <prvProcessReceivedCommands+0x7c>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e21 	.word	0x08009e21
 8009dfc:	08009e21 	.word	0x08009e21
 8009e00:	08009e21 	.word	0x08009e21
 8009e04:	08009e9b 	.word	0x08009e9b
 8009e08:	08009eaf 	.word	0x08009eaf
 8009e0c:	08009eff 	.word	0x08009eff
 8009e10:	08009e21 	.word	0x08009e21
 8009e14:	08009e21 	.word	0x08009e21
 8009e18:	08009e9b 	.word	0x08009e9b
 8009e1c:	08009eaf 	.word	0x08009eaf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e26:	f043 0301 	orr.w	r3, r3, #1
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	18d1      	adds	r1, r2, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e40:	f7ff ff5a 	bl	8009cf8 <prvInsertTimerInActiveList>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d070      	beq.n	8009f2c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e58:	f003 0304 	and.w	r3, r3, #4
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d065      	beq.n	8009f2c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	441a      	add	r2, r3
 8009e68:	2300      	movs	r3, #0
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2100      	movs	r1, #0
 8009e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e72:	f7ff fdfb 	bl	8009a6c <xTimerGenericCommand>
 8009e76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d156      	bne.n	8009f2c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e82:	b672      	cpsid	i
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	b662      	cpsie	i
 8009e92:	61bb      	str	r3, [r7, #24]
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	e7fd      	b.n	8009e96 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ea0:	f023 0301 	bic.w	r3, r3, #1
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009eac:	e03f      	b.n	8009f2e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009eb4:	f043 0301 	orr.w	r3, r3, #1
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10d      	bne.n	8009eea <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed2:	b672      	cpsid	i
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	b662      	cpsie	i
 8009ee2:	617b      	str	r3, [r7, #20]
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	e7fd      	b.n	8009ee6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	18d1      	adds	r1, r2, r3
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ef8:	f7ff fefe 	bl	8009cf8 <prvInsertTimerInActiveList>
					break;
 8009efc:	e017      	b.n	8009f2e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d103      	bne.n	8009f14 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f0e:	f000 fbd1 	bl	800a6b4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f12:	e00c      	b.n	8009f2e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f1a:	f023 0301 	bic.w	r3, r3, #1
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009f26:	e002      	b.n	8009f2e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009f28:	bf00      	nop
 8009f2a:	e000      	b.n	8009f2e <prvProcessReceivedCommands+0x1b2>
					break;
 8009f2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f2e:	4b08      	ldr	r3, [pc, #32]	@ (8009f50 <prvProcessReceivedCommands+0x1d4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	1d39      	adds	r1, r7, #4
 8009f34:	2200      	movs	r2, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fbc6 	bl	80086c8 <xQueueReceive>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f47f af20 	bne.w	8009d84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	3730      	adds	r7, #48	@ 0x30
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	2000167c 	.word	0x2000167c

08009f54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f5a:	e04b      	b.n	8009ff4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800a01c <prvSwitchTimerLists+0xc8>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f66:	4b2d      	ldr	r3, [pc, #180]	@ (800a01c <prvSwitchTimerLists+0xc8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe f8b9 	bl	80080ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d031      	beq.n	8009ff4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	4413      	add	r3, r2
 8009f98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d90e      	bls.n	8009fc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fae:	4b1b      	ldr	r3, [pc, #108]	@ (800a01c <prvSwitchTimerLists+0xc8>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fe f85e 	bl	800807a <vListInsert>
 8009fbe:	e019      	b.n	8009ff4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	2100      	movs	r1, #0
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7ff fd4e 	bl	8009a6c <xTimerGenericCommand>
 8009fd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10d      	bne.n	8009ff4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fdc:	b672      	cpsid	i
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	b662      	cpsie	i
 8009fec:	603b      	str	r3, [r7, #0]
}
 8009fee:	bf00      	nop
 8009ff0:	bf00      	nop
 8009ff2:	e7fd      	b.n	8009ff0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ff4:	4b09      	ldr	r3, [pc, #36]	@ (800a01c <prvSwitchTimerLists+0xc8>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1ae      	bne.n	8009f5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ffe:	4b07      	ldr	r3, [pc, #28]	@ (800a01c <prvSwitchTimerLists+0xc8>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a004:	4b06      	ldr	r3, [pc, #24]	@ (800a020 <prvSwitchTimerLists+0xcc>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a04      	ldr	r2, [pc, #16]	@ (800a01c <prvSwitchTimerLists+0xc8>)
 800a00a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a00c:	4a04      	ldr	r2, [pc, #16]	@ (800a020 <prvSwitchTimerLists+0xcc>)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	6013      	str	r3, [r2, #0]
}
 800a012:	bf00      	nop
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20001674 	.word	0x20001674
 800a020:	20001678 	.word	0x20001678

0800a024 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a02a:	f000 f947 	bl	800a2bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a02e:	4b15      	ldr	r3, [pc, #84]	@ (800a084 <prvCheckForValidListAndQueue+0x60>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d120      	bne.n	800a078 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a036:	4814      	ldr	r0, [pc, #80]	@ (800a088 <prvCheckForValidListAndQueue+0x64>)
 800a038:	f7fd ffce 	bl	8007fd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a03c:	4813      	ldr	r0, [pc, #76]	@ (800a08c <prvCheckForValidListAndQueue+0x68>)
 800a03e:	f7fd ffcb 	bl	8007fd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a042:	4b13      	ldr	r3, [pc, #76]	@ (800a090 <prvCheckForValidListAndQueue+0x6c>)
 800a044:	4a10      	ldr	r2, [pc, #64]	@ (800a088 <prvCheckForValidListAndQueue+0x64>)
 800a046:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a048:	4b12      	ldr	r3, [pc, #72]	@ (800a094 <prvCheckForValidListAndQueue+0x70>)
 800a04a:	4a10      	ldr	r2, [pc, #64]	@ (800a08c <prvCheckForValidListAndQueue+0x68>)
 800a04c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a04e:	2300      	movs	r3, #0
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	4b11      	ldr	r3, [pc, #68]	@ (800a098 <prvCheckForValidListAndQueue+0x74>)
 800a054:	4a11      	ldr	r2, [pc, #68]	@ (800a09c <prvCheckForValidListAndQueue+0x78>)
 800a056:	2110      	movs	r1, #16
 800a058:	200a      	movs	r0, #10
 800a05a:	f7fe f8dd 	bl	8008218 <xQueueGenericCreateStatic>
 800a05e:	4603      	mov	r3, r0
 800a060:	4a08      	ldr	r2, [pc, #32]	@ (800a084 <prvCheckForValidListAndQueue+0x60>)
 800a062:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a064:	4b07      	ldr	r3, [pc, #28]	@ (800a084 <prvCheckForValidListAndQueue+0x60>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d005      	beq.n	800a078 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a06c:	4b05      	ldr	r3, [pc, #20]	@ (800a084 <prvCheckForValidListAndQueue+0x60>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	490b      	ldr	r1, [pc, #44]	@ (800a0a0 <prvCheckForValidListAndQueue+0x7c>)
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fd20 	bl	8008ab8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a078:	f000 f956 	bl	800a328 <vPortExitCritical>
}
 800a07c:	bf00      	nop
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	2000167c 	.word	0x2000167c
 800a088:	2000164c 	.word	0x2000164c
 800a08c:	20001660 	.word	0x20001660
 800a090:	20001674 	.word	0x20001674
 800a094:	20001678 	.word	0x20001678
 800a098:	20001728 	.word	0x20001728
 800a09c:	20001688 	.word	0x20001688
 800a0a0:	0800ad1c 	.word	0x0800ad1c

0800a0a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3b04      	subs	r3, #4
 800a0b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a0bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3b04      	subs	r3, #4
 800a0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	f023 0201 	bic.w	r2, r3, #1
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3b04      	subs	r3, #4
 800a0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0d4:	4a0c      	ldr	r2, [pc, #48]	@ (800a108 <pxPortInitialiseStack+0x64>)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3b14      	subs	r3, #20
 800a0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3b04      	subs	r3, #4
 800a0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f06f 0202 	mvn.w	r2, #2
 800a0f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3b20      	subs	r3, #32
 800a0f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	0800a10d 	.word	0x0800a10d

0800a10c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a116:	4b15      	ldr	r3, [pc, #84]	@ (800a16c <prvTaskExitError+0x60>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d00d      	beq.n	800a13c <prvTaskExitError+0x30>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	b672      	cpsid	i
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	b662      	cpsie	i
 800a134:	60fb      	str	r3, [r7, #12]
}
 800a136:	bf00      	nop
 800a138:	bf00      	nop
 800a13a:	e7fd      	b.n	800a138 <prvTaskExitError+0x2c>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a140:	b672      	cpsid	i
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	b662      	cpsie	i
 800a150:	60bb      	str	r3, [r7, #8]
}
 800a152:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a154:	bf00      	nop
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0fc      	beq.n	800a156 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	2000000c 	.word	0x2000000c

0800a170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a170:	4b07      	ldr	r3, [pc, #28]	@ (800a190 <pxCurrentTCBConst2>)
 800a172:	6819      	ldr	r1, [r3, #0]
 800a174:	6808      	ldr	r0, [r1, #0]
 800a176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17a:	f380 8809 	msr	PSP, r0
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f04f 0000 	mov.w	r0, #0
 800a186:	f380 8811 	msr	BASEPRI, r0
 800a18a:	4770      	bx	lr
 800a18c:	f3af 8000 	nop.w

0800a190 <pxCurrentTCBConst2>:
 800a190:	2000114c 	.word	0x2000114c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a198:	4808      	ldr	r0, [pc, #32]	@ (800a1bc <prvPortStartFirstTask+0x24>)
 800a19a:	6800      	ldr	r0, [r0, #0]
 800a19c:	6800      	ldr	r0, [r0, #0]
 800a19e:	f380 8808 	msr	MSP, r0
 800a1a2:	f04f 0000 	mov.w	r0, #0
 800a1a6:	f380 8814 	msr	CONTROL, r0
 800a1aa:	b662      	cpsie	i
 800a1ac:	b661      	cpsie	f
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	df00      	svc	0
 800a1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ba:	bf00      	nop
 800a1bc:	e000ed08 	.word	0xe000ed08

0800a1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1c6:	4b37      	ldr	r3, [pc, #220]	@ (800a2a4 <xPortStartScheduler+0xe4>)
 800a1c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	22ff      	movs	r2, #255	@ 0xff
 800a1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a2a8 <xPortStartScheduler+0xe8>)
 800a1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a2ac <xPortStartScheduler+0xec>)
 800a1f0:	2207      	movs	r2, #7
 800a1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1f4:	e009      	b.n	800a20a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a1f6:	4b2d      	ldr	r3, [pc, #180]	@ (800a2ac <xPortStartScheduler+0xec>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	4a2b      	ldr	r2, [pc, #172]	@ (800a2ac <xPortStartScheduler+0xec>)
 800a1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	b2db      	uxtb	r3, r3
 800a208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a20a:	78fb      	ldrb	r3, [r7, #3]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a212:	2b80      	cmp	r3, #128	@ 0x80
 800a214:	d0ef      	beq.n	800a1f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a216:	4b25      	ldr	r3, [pc, #148]	@ (800a2ac <xPortStartScheduler+0xec>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f1c3 0307 	rsb	r3, r3, #7
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d00d      	beq.n	800a23e <xPortStartScheduler+0x7e>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a226:	b672      	cpsid	i
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	b662      	cpsie	i
 800a236:	60bb      	str	r3, [r7, #8]
}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	e7fd      	b.n	800a23a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a23e:	4b1b      	ldr	r3, [pc, #108]	@ (800a2ac <xPortStartScheduler+0xec>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	4a19      	ldr	r2, [pc, #100]	@ (800a2ac <xPortStartScheduler+0xec>)
 800a246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a248:	4b18      	ldr	r3, [pc, #96]	@ (800a2ac <xPortStartScheduler+0xec>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a250:	4a16      	ldr	r2, [pc, #88]	@ (800a2ac <xPortStartScheduler+0xec>)
 800a252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	b2da      	uxtb	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a25c:	4b14      	ldr	r3, [pc, #80]	@ (800a2b0 <xPortStartScheduler+0xf0>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a13      	ldr	r2, [pc, #76]	@ (800a2b0 <xPortStartScheduler+0xf0>)
 800a262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a268:	4b11      	ldr	r3, [pc, #68]	@ (800a2b0 <xPortStartScheduler+0xf0>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a10      	ldr	r2, [pc, #64]	@ (800a2b0 <xPortStartScheduler+0xf0>)
 800a26e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a274:	f000 f8dc 	bl	800a430 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a278:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b4 <xPortStartScheduler+0xf4>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a27e:	f000 f8fb 	bl	800a478 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a282:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b8 <xPortStartScheduler+0xf8>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a0c      	ldr	r2, [pc, #48]	@ (800a2b8 <xPortStartScheduler+0xf8>)
 800a288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a28c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a28e:	f7ff ff83 	bl	800a198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a292:	f7ff f83b 	bl	800930c <vTaskSwitchContext>
	prvTaskExitError();
 800a296:	f7ff ff39 	bl	800a10c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	e000e400 	.word	0xe000e400
 800a2a8:	20001778 	.word	0x20001778
 800a2ac:	2000177c 	.word	0x2000177c
 800a2b0:	e000ed20 	.word	0xe000ed20
 800a2b4:	2000000c 	.word	0x2000000c
 800a2b8:	e000ef34 	.word	0xe000ef34

0800a2bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c6:	b672      	cpsid	i
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	b662      	cpsie	i
 800a2d6:	607b      	str	r3, [r7, #4]
}
 800a2d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2da:	4b11      	ldr	r3, [pc, #68]	@ (800a320 <vPortEnterCritical+0x64>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	4a0f      	ldr	r2, [pc, #60]	@ (800a320 <vPortEnterCritical+0x64>)
 800a2e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a320 <vPortEnterCritical+0x64>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d112      	bne.n	800a312 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a324 <vPortEnterCritical+0x68>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00d      	beq.n	800a312 <vPortEnterCritical+0x56>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	b672      	cpsid	i
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	b662      	cpsie	i
 800a30a:	603b      	str	r3, [r7, #0]
}
 800a30c:	bf00      	nop
 800a30e:	bf00      	nop
 800a310:	e7fd      	b.n	800a30e <vPortEnterCritical+0x52>
	}
}
 800a312:	bf00      	nop
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	2000000c 	.word	0x2000000c
 800a324:	e000ed04 	.word	0xe000ed04

0800a328 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a32e:	4b13      	ldr	r3, [pc, #76]	@ (800a37c <vPortExitCritical+0x54>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10d      	bne.n	800a352 <vPortExitCritical+0x2a>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33a:	b672      	cpsid	i
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	b662      	cpsie	i
 800a34a:	607b      	str	r3, [r7, #4]
}
 800a34c:	bf00      	nop
 800a34e:	bf00      	nop
 800a350:	e7fd      	b.n	800a34e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a352:	4b0a      	ldr	r3, [pc, #40]	@ (800a37c <vPortExitCritical+0x54>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3b01      	subs	r3, #1
 800a358:	4a08      	ldr	r2, [pc, #32]	@ (800a37c <vPortExitCritical+0x54>)
 800a35a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a35c:	4b07      	ldr	r3, [pc, #28]	@ (800a37c <vPortExitCritical+0x54>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d105      	bne.n	800a370 <vPortExitCritical+0x48>
 800a364:	2300      	movs	r3, #0
 800a366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	f383 8811 	msr	BASEPRI, r3
}
 800a36e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	2000000c 	.word	0x2000000c

0800a380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a380:	f3ef 8009 	mrs	r0, PSP
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	4b15      	ldr	r3, [pc, #84]	@ (800a3e0 <pxCurrentTCBConst>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	f01e 0f10 	tst.w	lr, #16
 800a390:	bf08      	it	eq
 800a392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	6010      	str	r0, [r2, #0]
 800a39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3a4:	b672      	cpsid	i
 800a3a6:	f380 8811 	msr	BASEPRI, r0
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	b662      	cpsie	i
 800a3b4:	f7fe ffaa 	bl	800930c <vTaskSwitchContext>
 800a3b8:	f04f 0000 	mov.w	r0, #0
 800a3bc:	f380 8811 	msr	BASEPRI, r0
 800a3c0:	bc09      	pop	{r0, r3}
 800a3c2:	6819      	ldr	r1, [r3, #0]
 800a3c4:	6808      	ldr	r0, [r1, #0]
 800a3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ca:	f01e 0f10 	tst.w	lr, #16
 800a3ce:	bf08      	it	eq
 800a3d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3d4:	f380 8809 	msr	PSP, r0
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop

0800a3e0 <pxCurrentTCBConst>:
 800a3e0:	2000114c 	.word	0x2000114c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop

0800a3e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f2:	b672      	cpsid	i
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	b662      	cpsie	i
 800a402:	607b      	str	r3, [r7, #4]
}
 800a404:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a406:	f7fe fec5 	bl	8009194 <xTaskIncrementTick>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d003      	beq.n	800a418 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a410:	4b06      	ldr	r3, [pc, #24]	@ (800a42c <xPortSysTickHandler+0x44>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	2300      	movs	r3, #0
 800a41a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	f383 8811 	msr	BASEPRI, r3
}
 800a422:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	e000ed04 	.word	0xe000ed04

0800a430 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a430:	b480      	push	{r7}
 800a432:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a434:	4b0b      	ldr	r3, [pc, #44]	@ (800a464 <vPortSetupTimerInterrupt+0x34>)
 800a436:	2200      	movs	r2, #0
 800a438:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a43a:	4b0b      	ldr	r3, [pc, #44]	@ (800a468 <vPortSetupTimerInterrupt+0x38>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a440:	4b0a      	ldr	r3, [pc, #40]	@ (800a46c <vPortSetupTimerInterrupt+0x3c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a0a      	ldr	r2, [pc, #40]	@ (800a470 <vPortSetupTimerInterrupt+0x40>)
 800a446:	fba2 2303 	umull	r2, r3, r2, r3
 800a44a:	099b      	lsrs	r3, r3, #6
 800a44c:	4a09      	ldr	r2, [pc, #36]	@ (800a474 <vPortSetupTimerInterrupt+0x44>)
 800a44e:	3b01      	subs	r3, #1
 800a450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a452:	4b04      	ldr	r3, [pc, #16]	@ (800a464 <vPortSetupTimerInterrupt+0x34>)
 800a454:	2207      	movs	r2, #7
 800a456:	601a      	str	r2, [r3, #0]
}
 800a458:	bf00      	nop
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	e000e010 	.word	0xe000e010
 800a468:	e000e018 	.word	0xe000e018
 800a46c:	20000000 	.word	0x20000000
 800a470:	10624dd3 	.word	0x10624dd3
 800a474:	e000e014 	.word	0xe000e014

0800a478 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a478:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a488 <vPortEnableVFP+0x10>
 800a47c:	6801      	ldr	r1, [r0, #0]
 800a47e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a482:	6001      	str	r1, [r0, #0]
 800a484:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a486:	bf00      	nop
 800a488:	e000ed88 	.word	0xe000ed88

0800a48c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a492:	f3ef 8305 	mrs	r3, IPSR
 800a496:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b0f      	cmp	r3, #15
 800a49c:	d917      	bls.n	800a4ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a49e:	4a1a      	ldr	r2, [pc, #104]	@ (800a508 <vPortValidateInterruptPriority+0x7c>)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4a8:	4b18      	ldr	r3, [pc, #96]	@ (800a50c <vPortValidateInterruptPriority+0x80>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	7afa      	ldrb	r2, [r7, #11]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d20d      	bcs.n	800a4ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b6:	b672      	cpsid	i
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	b662      	cpsie	i
 800a4c6:	607b      	str	r3, [r7, #4]
}
 800a4c8:	bf00      	nop
 800a4ca:	bf00      	nop
 800a4cc:	e7fd      	b.n	800a4ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4ce:	4b10      	ldr	r3, [pc, #64]	@ (800a510 <vPortValidateInterruptPriority+0x84>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a514 <vPortValidateInterruptPriority+0x88>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d90d      	bls.n	800a4fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e2:	b672      	cpsid	i
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	b662      	cpsie	i
 800a4f2:	603b      	str	r3, [r7, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	bf00      	nop
 800a4f8:	e7fd      	b.n	800a4f6 <vPortValidateInterruptPriority+0x6a>
	}
 800a4fa:	bf00      	nop
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	e000e3f0 	.word	0xe000e3f0
 800a50c:	20001778 	.word	0x20001778
 800a510:	e000ed0c 	.word	0xe000ed0c
 800a514:	2000177c 	.word	0x2000177c

0800a518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08a      	sub	sp, #40	@ 0x28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a520:	2300      	movs	r3, #0
 800a522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a524:	f7fe fd78 	bl	8009018 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a528:	4b5d      	ldr	r3, [pc, #372]	@ (800a6a0 <pvPortMalloc+0x188>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a530:	f000 f920 	bl	800a774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a534:	4b5b      	ldr	r3, [pc, #364]	@ (800a6a4 <pvPortMalloc+0x18c>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4013      	ands	r3, r2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f040 8094 	bne.w	800a66a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d020      	beq.n	800a58a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a548:	2208      	movs	r2, #8
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4413      	add	r3, r2
 800a54e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f003 0307 	and.w	r3, r3, #7
 800a556:	2b00      	cmp	r3, #0
 800a558:	d017      	beq.n	800a58a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f023 0307 	bic.w	r3, r3, #7
 800a560:	3308      	adds	r3, #8
 800a562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00d      	beq.n	800a58a <pvPortMalloc+0x72>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	b672      	cpsid	i
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	b662      	cpsie	i
 800a582:	617b      	str	r3, [r7, #20]
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop
 800a588:	e7fd      	b.n	800a586 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d06c      	beq.n	800a66a <pvPortMalloc+0x152>
 800a590:	4b45      	ldr	r3, [pc, #276]	@ (800a6a8 <pvPortMalloc+0x190>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	429a      	cmp	r2, r3
 800a598:	d867      	bhi.n	800a66a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a59a:	4b44      	ldr	r3, [pc, #272]	@ (800a6ac <pvPortMalloc+0x194>)
 800a59c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a59e:	4b43      	ldr	r3, [pc, #268]	@ (800a6ac <pvPortMalloc+0x194>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5a4:	e004      	b.n	800a5b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d903      	bls.n	800a5c2 <pvPortMalloc+0xaa>
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1f1      	bne.n	800a5a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5c2:	4b37      	ldr	r3, [pc, #220]	@ (800a6a0 <pvPortMalloc+0x188>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d04e      	beq.n	800a66a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	4413      	add	r3, r2
 800a5d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	1ad2      	subs	r2, r2, r3
 800a5e6:	2308      	movs	r3, #8
 800a5e8:	005b      	lsls	r3, r3, #1
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d922      	bls.n	800a634 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	f003 0307 	and.w	r3, r3, #7
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00d      	beq.n	800a61c <pvPortMalloc+0x104>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a604:	b672      	cpsid	i
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	b662      	cpsie	i
 800a614:	613b      	str	r3, [r7, #16]
}
 800a616:	bf00      	nop
 800a618:	bf00      	nop
 800a61a:	e7fd      	b.n	800a618 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	1ad2      	subs	r2, r2, r3
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a62e:	69b8      	ldr	r0, [r7, #24]
 800a630:	f000 f902 	bl	800a838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a634:	4b1c      	ldr	r3, [pc, #112]	@ (800a6a8 <pvPortMalloc+0x190>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	4a1a      	ldr	r2, [pc, #104]	@ (800a6a8 <pvPortMalloc+0x190>)
 800a640:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a642:	4b19      	ldr	r3, [pc, #100]	@ (800a6a8 <pvPortMalloc+0x190>)
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	4b1a      	ldr	r3, [pc, #104]	@ (800a6b0 <pvPortMalloc+0x198>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d203      	bcs.n	800a656 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a64e:	4b16      	ldr	r3, [pc, #88]	@ (800a6a8 <pvPortMalloc+0x190>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a17      	ldr	r2, [pc, #92]	@ (800a6b0 <pvPortMalloc+0x198>)
 800a654:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	4b12      	ldr	r3, [pc, #72]	@ (800a6a4 <pvPortMalloc+0x18c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	431a      	orrs	r2, r3
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a66a:	f7fe fce3 	bl	8009034 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	f003 0307 	and.w	r3, r3, #7
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00d      	beq.n	800a694 <pvPortMalloc+0x17c>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a67c:	b672      	cpsid	i
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	b662      	cpsie	i
 800a68c:	60fb      	str	r3, [r7, #12]
}
 800a68e:	bf00      	nop
 800a690:	bf00      	nop
 800a692:	e7fd      	b.n	800a690 <pvPortMalloc+0x178>
	return pvReturn;
 800a694:	69fb      	ldr	r3, [r7, #28]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3728      	adds	r7, #40	@ 0x28
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20005388 	.word	0x20005388
 800a6a4:	20005394 	.word	0x20005394
 800a6a8:	2000538c 	.word	0x2000538c
 800a6ac:	20005380 	.word	0x20005380
 800a6b0:	20005390 	.word	0x20005390

0800a6b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d04e      	beq.n	800a764 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6c6:	2308      	movs	r3, #8
 800a6c8:	425b      	negs	r3, r3
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	4b24      	ldr	r3, [pc, #144]	@ (800a76c <vPortFree+0xb8>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4013      	ands	r3, r2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10d      	bne.n	800a6fe <vPortFree+0x4a>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e6:	b672      	cpsid	i
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	b662      	cpsie	i
 800a6f6:	60fb      	str	r3, [r7, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00d      	beq.n	800a722 <vPortFree+0x6e>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70a:	b672      	cpsid	i
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	b662      	cpsie	i
 800a71a:	60bb      	str	r3, [r7, #8]
}
 800a71c:	bf00      	nop
 800a71e:	bf00      	nop
 800a720:	e7fd      	b.n	800a71e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	4b11      	ldr	r3, [pc, #68]	@ (800a76c <vPortFree+0xb8>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4013      	ands	r3, r2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d019      	beq.n	800a764 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d115      	bne.n	800a764 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	4b0b      	ldr	r3, [pc, #44]	@ (800a76c <vPortFree+0xb8>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	43db      	mvns	r3, r3
 800a742:	401a      	ands	r2, r3
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a748:	f7fe fc66 	bl	8009018 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	4b07      	ldr	r3, [pc, #28]	@ (800a770 <vPortFree+0xbc>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4413      	add	r3, r2
 800a756:	4a06      	ldr	r2, [pc, #24]	@ (800a770 <vPortFree+0xbc>)
 800a758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a75a:	6938      	ldr	r0, [r7, #16]
 800a75c:	f000 f86c 	bl	800a838 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a760:	f7fe fc68 	bl	8009034 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a764:	bf00      	nop
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	20005394 	.word	0x20005394
 800a770:	2000538c 	.word	0x2000538c

0800a774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a77a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a77e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a780:	4b27      	ldr	r3, [pc, #156]	@ (800a820 <prvHeapInit+0xac>)
 800a782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00c      	beq.n	800a7a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3307      	adds	r3, #7
 800a792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f023 0307 	bic.w	r3, r3, #7
 800a79a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	4a1f      	ldr	r2, [pc, #124]	@ (800a820 <prvHeapInit+0xac>)
 800a7a4:	4413      	add	r3, r2
 800a7a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a824 <prvHeapInit+0xb0>)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7b2:	4b1c      	ldr	r3, [pc, #112]	@ (800a824 <prvHeapInit+0xb0>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	4413      	add	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0307 	bic.w	r3, r3, #7
 800a7ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4a15      	ldr	r2, [pc, #84]	@ (800a828 <prvHeapInit+0xb4>)
 800a7d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7d6:	4b14      	ldr	r3, [pc, #80]	@ (800a828 <prvHeapInit+0xb4>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7de:	4b12      	ldr	r3, [pc, #72]	@ (800a828 <prvHeapInit+0xb4>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	1ad2      	subs	r2, r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a828 <prvHeapInit+0xb4>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	4a0a      	ldr	r2, [pc, #40]	@ (800a82c <prvHeapInit+0xb8>)
 800a802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	4a09      	ldr	r2, [pc, #36]	@ (800a830 <prvHeapInit+0xbc>)
 800a80a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a80c:	4b09      	ldr	r3, [pc, #36]	@ (800a834 <prvHeapInit+0xc0>)
 800a80e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	bf00      	nop
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	20001780 	.word	0x20001780
 800a824:	20005380 	.word	0x20005380
 800a828:	20005388 	.word	0x20005388
 800a82c:	20005390 	.word	0x20005390
 800a830:	2000538c 	.word	0x2000538c
 800a834:	20005394 	.word	0x20005394

0800a838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a840:	4b28      	ldr	r3, [pc, #160]	@ (800a8e4 <prvInsertBlockIntoFreeList+0xac>)
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	e002      	b.n	800a84c <prvInsertBlockIntoFreeList+0x14>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	429a      	cmp	r2, r3
 800a854:	d8f7      	bhi.n	800a846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	4413      	add	r3, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	429a      	cmp	r2, r3
 800a866:	d108      	bne.n	800a87a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	441a      	add	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	441a      	add	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d118      	bne.n	800a8c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	4b15      	ldr	r3, [pc, #84]	@ (800a8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d00d      	beq.n	800a8b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	441a      	add	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	e008      	b.n	800a8c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	e003      	b.n	800a8c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d002      	beq.n	800a8d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8d6:	bf00      	nop
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20005380 	.word	0x20005380
 800a8e8:	20005388 	.word	0x20005388

0800a8ec <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 800a8f8:	887a      	ldrh	r2, [r7, #2]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	8a9b      	ldrh	r3, [r3, #20]
 800a8fe:	4619      	mov	r1, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	8b1b      	ldrh	r3, [r3, #24]
 800a904:	1acb      	subs	r3, r1, r3
 800a906:	429a      	cmp	r2, r3
 800a908:	dd05      	ble.n	800a916 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	8a9a      	ldrh	r2, [r3, #20]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	8b1b      	ldrh	r3, [r3, #24]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	8b12      	ldrh	r2, [r2, #24]
 800a91e:	1898      	adds	r0, r3, r2
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	887a      	ldrh	r2, [r7, #2]
 800a926:	4619      	mov	r1, r3
 800a928:	f000 f910 	bl	800ab4c <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	8b1a      	ldrh	r2, [r3, #24]
 800a930:	887b      	ldrh	r3, [r7, #2]
 800a932:	4413      	add	r3, r2
 800a934:	b29a      	uxth	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	69d9      	ldr	r1, [r3, #28]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	8a9b      	ldrh	r3, [r3, #20]
 800a946:	461a      	mov	r2, r3
 800a948:	f7fc fe8a 	bl	8007660 <HAL_UARTEx_ReceiveToIdle_DMA>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10c      	bne.n	800a96c <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f022 0208 	bic.w	r2, r2, #8
 800a968:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 800a96a:	e01f      	b.n	800a9ac <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f04f 32ff 	mov.w	r2, #4294967295
 800a976:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fb f9ca 	bl	8005d16 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	69d9      	ldr	r1, [r3, #28]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	8a9b      	ldrh	r3, [r3, #20]
 800a98e:	461a      	mov	r2, r3
 800a990:	f7fc fe66 	bl	8007660 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0208 	bic.w	r2, r2, #8
 800a9aa:	601a      	str	r2, [r3, #0]
}
 800a9ac:	bf00      	nop
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <atoi>:
 800a9b4:	220a      	movs	r2, #10
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	f000 b87a 	b.w	800aab0 <strtol>

0800a9bc <_strtol_l.constprop.0>:
 800a9bc:	2b24      	cmp	r3, #36	@ 0x24
 800a9be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c2:	4686      	mov	lr, r0
 800a9c4:	4690      	mov	r8, r2
 800a9c6:	d801      	bhi.n	800a9cc <_strtol_l.constprop.0+0x10>
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d106      	bne.n	800a9da <_strtol_l.constprop.0+0x1e>
 800a9cc:	f000 f894 	bl	800aaf8 <__errno>
 800a9d0:	2316      	movs	r3, #22
 800a9d2:	6003      	str	r3, [r0, #0]
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9da:	4834      	ldr	r0, [pc, #208]	@ (800aaac <_strtol_l.constprop.0+0xf0>)
 800a9dc:	460d      	mov	r5, r1
 800a9de:	462a      	mov	r2, r5
 800a9e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9e4:	5d06      	ldrb	r6, [r0, r4]
 800a9e6:	f016 0608 	ands.w	r6, r6, #8
 800a9ea:	d1f8      	bne.n	800a9de <_strtol_l.constprop.0+0x22>
 800a9ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800a9ee:	d12d      	bne.n	800aa4c <_strtol_l.constprop.0+0x90>
 800a9f0:	782c      	ldrb	r4, [r5, #0]
 800a9f2:	2601      	movs	r6, #1
 800a9f4:	1c95      	adds	r5, r2, #2
 800a9f6:	f033 0210 	bics.w	r2, r3, #16
 800a9fa:	d109      	bne.n	800aa10 <_strtol_l.constprop.0+0x54>
 800a9fc:	2c30      	cmp	r4, #48	@ 0x30
 800a9fe:	d12a      	bne.n	800aa56 <_strtol_l.constprop.0+0x9a>
 800aa00:	782a      	ldrb	r2, [r5, #0]
 800aa02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa06:	2a58      	cmp	r2, #88	@ 0x58
 800aa08:	d125      	bne.n	800aa56 <_strtol_l.constprop.0+0x9a>
 800aa0a:	786c      	ldrb	r4, [r5, #1]
 800aa0c:	2310      	movs	r3, #16
 800aa0e:	3502      	adds	r5, #2
 800aa10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa14:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa18:	2200      	movs	r2, #0
 800aa1a:	fbbc f9f3 	udiv	r9, ip, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa28:	2f09      	cmp	r7, #9
 800aa2a:	d81b      	bhi.n	800aa64 <_strtol_l.constprop.0+0xa8>
 800aa2c:	463c      	mov	r4, r7
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	dd27      	ble.n	800aa82 <_strtol_l.constprop.0+0xc6>
 800aa32:	1c57      	adds	r7, r2, #1
 800aa34:	d007      	beq.n	800aa46 <_strtol_l.constprop.0+0x8a>
 800aa36:	4581      	cmp	r9, r0
 800aa38:	d320      	bcc.n	800aa7c <_strtol_l.constprop.0+0xc0>
 800aa3a:	d101      	bne.n	800aa40 <_strtol_l.constprop.0+0x84>
 800aa3c:	45a2      	cmp	sl, r4
 800aa3e:	db1d      	blt.n	800aa7c <_strtol_l.constprop.0+0xc0>
 800aa40:	fb00 4003 	mla	r0, r0, r3, r4
 800aa44:	2201      	movs	r2, #1
 800aa46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa4a:	e7eb      	b.n	800aa24 <_strtol_l.constprop.0+0x68>
 800aa4c:	2c2b      	cmp	r4, #43	@ 0x2b
 800aa4e:	bf04      	itt	eq
 800aa50:	782c      	ldrbeq	r4, [r5, #0]
 800aa52:	1c95      	addeq	r5, r2, #2
 800aa54:	e7cf      	b.n	800a9f6 <_strtol_l.constprop.0+0x3a>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1da      	bne.n	800aa10 <_strtol_l.constprop.0+0x54>
 800aa5a:	2c30      	cmp	r4, #48	@ 0x30
 800aa5c:	bf0c      	ite	eq
 800aa5e:	2308      	moveq	r3, #8
 800aa60:	230a      	movne	r3, #10
 800aa62:	e7d5      	b.n	800aa10 <_strtol_l.constprop.0+0x54>
 800aa64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa68:	2f19      	cmp	r7, #25
 800aa6a:	d801      	bhi.n	800aa70 <_strtol_l.constprop.0+0xb4>
 800aa6c:	3c37      	subs	r4, #55	@ 0x37
 800aa6e:	e7de      	b.n	800aa2e <_strtol_l.constprop.0+0x72>
 800aa70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa74:	2f19      	cmp	r7, #25
 800aa76:	d804      	bhi.n	800aa82 <_strtol_l.constprop.0+0xc6>
 800aa78:	3c57      	subs	r4, #87	@ 0x57
 800aa7a:	e7d8      	b.n	800aa2e <_strtol_l.constprop.0+0x72>
 800aa7c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa80:	e7e1      	b.n	800aa46 <_strtol_l.constprop.0+0x8a>
 800aa82:	1c53      	adds	r3, r2, #1
 800aa84:	d108      	bne.n	800aa98 <_strtol_l.constprop.0+0xdc>
 800aa86:	2322      	movs	r3, #34	@ 0x22
 800aa88:	f8ce 3000 	str.w	r3, [lr]
 800aa8c:	4660      	mov	r0, ip
 800aa8e:	f1b8 0f00 	cmp.w	r8, #0
 800aa92:	d0a0      	beq.n	800a9d6 <_strtol_l.constprop.0+0x1a>
 800aa94:	1e69      	subs	r1, r5, #1
 800aa96:	e006      	b.n	800aaa6 <_strtol_l.constprop.0+0xea>
 800aa98:	b106      	cbz	r6, 800aa9c <_strtol_l.constprop.0+0xe0>
 800aa9a:	4240      	negs	r0, r0
 800aa9c:	f1b8 0f00 	cmp.w	r8, #0
 800aaa0:	d099      	beq.n	800a9d6 <_strtol_l.constprop.0+0x1a>
 800aaa2:	2a00      	cmp	r2, #0
 800aaa4:	d1f6      	bne.n	800aa94 <_strtol_l.constprop.0+0xd8>
 800aaa6:	f8c8 1000 	str.w	r1, [r8]
 800aaaa:	e794      	b.n	800a9d6 <_strtol_l.constprop.0+0x1a>
 800aaac:	0800ad69 	.word	0x0800ad69

0800aab0 <strtol>:
 800aab0:	4613      	mov	r3, r2
 800aab2:	460a      	mov	r2, r1
 800aab4:	4601      	mov	r1, r0
 800aab6:	4802      	ldr	r0, [pc, #8]	@ (800aac0 <strtol+0x10>)
 800aab8:	6800      	ldr	r0, [r0, #0]
 800aaba:	f7ff bf7f 	b.w	800a9bc <_strtol_l.constprop.0>
 800aabe:	bf00      	nop
 800aac0:	20000010 	.word	0x20000010

0800aac4 <memset>:
 800aac4:	4402      	add	r2, r0
 800aac6:	4603      	mov	r3, r0
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d100      	bne.n	800aace <memset+0xa>
 800aacc:	4770      	bx	lr
 800aace:	f803 1b01 	strb.w	r1, [r3], #1
 800aad2:	e7f9      	b.n	800aac8 <memset+0x4>

0800aad4 <strncmp>:
 800aad4:	b510      	push	{r4, lr}
 800aad6:	b16a      	cbz	r2, 800aaf4 <strncmp+0x20>
 800aad8:	3901      	subs	r1, #1
 800aada:	1884      	adds	r4, r0, r2
 800aadc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aae0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d103      	bne.n	800aaf0 <strncmp+0x1c>
 800aae8:	42a0      	cmp	r0, r4
 800aaea:	d001      	beq.n	800aaf0 <strncmp+0x1c>
 800aaec:	2a00      	cmp	r2, #0
 800aaee:	d1f5      	bne.n	800aadc <strncmp+0x8>
 800aaf0:	1ad0      	subs	r0, r2, r3
 800aaf2:	bd10      	pop	{r4, pc}
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	e7fc      	b.n	800aaf2 <strncmp+0x1e>

0800aaf8 <__errno>:
 800aaf8:	4b01      	ldr	r3, [pc, #4]	@ (800ab00 <__errno+0x8>)
 800aafa:	6818      	ldr	r0, [r3, #0]
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	20000010 	.word	0x20000010

0800ab04 <__libc_init_array>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	4d0d      	ldr	r5, [pc, #52]	@ (800ab3c <__libc_init_array+0x38>)
 800ab08:	4c0d      	ldr	r4, [pc, #52]	@ (800ab40 <__libc_init_array+0x3c>)
 800ab0a:	1b64      	subs	r4, r4, r5
 800ab0c:	10a4      	asrs	r4, r4, #2
 800ab0e:	2600      	movs	r6, #0
 800ab10:	42a6      	cmp	r6, r4
 800ab12:	d109      	bne.n	800ab28 <__libc_init_array+0x24>
 800ab14:	4d0b      	ldr	r5, [pc, #44]	@ (800ab44 <__libc_init_array+0x40>)
 800ab16:	4c0c      	ldr	r4, [pc, #48]	@ (800ab48 <__libc_init_array+0x44>)
 800ab18:	f000 f826 	bl	800ab68 <_init>
 800ab1c:	1b64      	subs	r4, r4, r5
 800ab1e:	10a4      	asrs	r4, r4, #2
 800ab20:	2600      	movs	r6, #0
 800ab22:	42a6      	cmp	r6, r4
 800ab24:	d105      	bne.n	800ab32 <__libc_init_array+0x2e>
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
 800ab28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab2c:	4798      	blx	r3
 800ab2e:	3601      	adds	r6, #1
 800ab30:	e7ee      	b.n	800ab10 <__libc_init_array+0xc>
 800ab32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab36:	4798      	blx	r3
 800ab38:	3601      	adds	r6, #1
 800ab3a:	e7f2      	b.n	800ab22 <__libc_init_array+0x1e>
 800ab3c:	0800ae74 	.word	0x0800ae74
 800ab40:	0800ae74 	.word	0x0800ae74
 800ab44:	0800ae74 	.word	0x0800ae74
 800ab48:	0800ae78 	.word	0x0800ae78

0800ab4c <memcpy>:
 800ab4c:	440a      	add	r2, r1
 800ab4e:	4291      	cmp	r1, r2
 800ab50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab54:	d100      	bne.n	800ab58 <memcpy+0xc>
 800ab56:	4770      	bx	lr
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab62:	4291      	cmp	r1, r2
 800ab64:	d1f9      	bne.n	800ab5a <memcpy+0xe>
 800ab66:	bd10      	pop	{r4, pc}

0800ab68 <_init>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	bf00      	nop
 800ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6e:	bc08      	pop	{r3}
 800ab70:	469e      	mov	lr, r3
 800ab72:	4770      	bx	lr

0800ab74 <_fini>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr
