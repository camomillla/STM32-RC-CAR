
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a878  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800aa78  0800aa78  0000ba78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aca0  0800aca0  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800aca0  0800aca0  0000bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aca8  0800aca8  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca8  0800aca8  0000bca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800acac  0800acac  0000bcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800acb0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005434  20000060  0800ad10  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005494  0800ad10  0000c494  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022571  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dde  00000000  00000000  0002e5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf0  00000000  00000000  000333e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ab  00000000  00000000  00034fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c211  00000000  00000000  0003657b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000236a4  00000000  00000000  0006278c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001095ff  00000000  00000000  00085e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018f42f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007804  00000000  00000000  0018f474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00196c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aa60 	.word	0x0800aa60

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800aa60 	.word	0x0800aa60

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b96a 	b.w	800053c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	460c      	mov	r4, r1
 8000288:	2b00      	cmp	r3, #0
 800028a:	d14e      	bne.n	800032a <__udivmoddi4+0xaa>
 800028c:	4694      	mov	ip, r2
 800028e:	458c      	cmp	ip, r1
 8000290:	4686      	mov	lr, r0
 8000292:	fab2 f282 	clz	r2, r2
 8000296:	d962      	bls.n	800035e <__udivmoddi4+0xde>
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0320 	rsb	r3, r2, #32
 800029e:	4091      	lsls	r1, r2
 80002a0:	fa20 f303 	lsr.w	r3, r0, r3
 80002a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a8:	4319      	orrs	r1, r3
 80002aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f f68c 	uxth.w	r6, ip
 80002b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	fb07 1114 	mls	r1, r7, r4, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb04 f106 	mul.w	r1, r4, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002d6:	f080 8112 	bcs.w	80004fe <__udivmoddi4+0x27e>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 810f 	bls.w	80004fe <__udivmoddi4+0x27e>
 80002e0:	3c02      	subs	r4, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ee:	fb07 1110 	mls	r1, r7, r0, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb00 f606 	mul.w	r6, r0, r6
 80002fa:	429e      	cmp	r6, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x94>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f100 31ff 	add.w	r1, r0, #4294967295
 8000306:	f080 80fc 	bcs.w	8000502 <__udivmoddi4+0x282>
 800030a:	429e      	cmp	r6, r3
 800030c:	f240 80f9 	bls.w	8000502 <__udivmoddi4+0x282>
 8000310:	4463      	add	r3, ip
 8000312:	3802      	subs	r0, #2
 8000314:	1b9b      	subs	r3, r3, r6
 8000316:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800031a:	2100      	movs	r1, #0
 800031c:	b11d      	cbz	r5, 8000326 <__udivmoddi4+0xa6>
 800031e:	40d3      	lsrs	r3, r2
 8000320:	2200      	movs	r2, #0
 8000322:	e9c5 3200 	strd	r3, r2, [r5]
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d905      	bls.n	800033a <__udivmoddi4+0xba>
 800032e:	b10d      	cbz	r5, 8000334 <__udivmoddi4+0xb4>
 8000330:	e9c5 0100 	strd	r0, r1, [r5]
 8000334:	2100      	movs	r1, #0
 8000336:	4608      	mov	r0, r1
 8000338:	e7f5      	b.n	8000326 <__udivmoddi4+0xa6>
 800033a:	fab3 f183 	clz	r1, r3
 800033e:	2900      	cmp	r1, #0
 8000340:	d146      	bne.n	80003d0 <__udivmoddi4+0x150>
 8000342:	42a3      	cmp	r3, r4
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xcc>
 8000346:	4290      	cmp	r0, r2
 8000348:	f0c0 80f0 	bcc.w	800052c <__udivmoddi4+0x2ac>
 800034c:	1a86      	subs	r6, r0, r2
 800034e:	eb64 0303 	sbc.w	r3, r4, r3
 8000352:	2001      	movs	r0, #1
 8000354:	2d00      	cmp	r5, #0
 8000356:	d0e6      	beq.n	8000326 <__udivmoddi4+0xa6>
 8000358:	e9c5 6300 	strd	r6, r3, [r5]
 800035c:	e7e3      	b.n	8000326 <__udivmoddi4+0xa6>
 800035e:	2a00      	cmp	r2, #0
 8000360:	f040 8090 	bne.w	8000484 <__udivmoddi4+0x204>
 8000364:	eba1 040c 	sub.w	r4, r1, ip
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	fa1f f78c 	uxth.w	r7, ip
 8000370:	2101      	movs	r1, #1
 8000372:	fbb4 f6f8 	udiv	r6, r4, r8
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb08 4416 	mls	r4, r8, r6, r4
 800037e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000382:	fb07 f006 	mul.w	r0, r7, r6
 8000386:	4298      	cmp	r0, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x11c>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x11a>
 8000394:	4298      	cmp	r0, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2b4>
 800039a:	4626      	mov	r6, r4
 800039c:	1a1c      	subs	r4, r3, r0
 800039e:	fa1f f38e 	uxth.w	r3, lr
 80003a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003a6:	fb08 4410 	mls	r4, r8, r0, r4
 80003aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ae:	fb00 f707 	mul.w	r7, r0, r7
 80003b2:	429f      	cmp	r7, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x148>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x146>
 80003c0:	429f      	cmp	r7, r3
 80003c2:	f200 80b0 	bhi.w	8000526 <__udivmoddi4+0x2a6>
 80003c6:	4620      	mov	r0, r4
 80003c8:	1bdb      	subs	r3, r3, r7
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	e7a5      	b.n	800031c <__udivmoddi4+0x9c>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 f706 	lsr.w	r7, r2, r6
 80003da:	431f      	orrs	r7, r3
 80003dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e0:	fa04 f301 	lsl.w	r3, r4, r1
 80003e4:	ea43 030c 	orr.w	r3, r3, ip
 80003e8:	40f4      	lsrs	r4, r6
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	0c38      	lsrs	r0, r7, #16
 80003f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f4:	fbb4 fef0 	udiv	lr, r4, r0
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000400:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000404:	fb0e f90c 	mul.w	r9, lr, ip
 8000408:	45a1      	cmp	r9, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90a      	bls.n	8000426 <__udivmoddi4+0x1a6>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000416:	f080 8084 	bcs.w	8000522 <__udivmoddi4+0x2a2>
 800041a:	45a1      	cmp	r9, r4
 800041c:	f240 8081 	bls.w	8000522 <__udivmoddi4+0x2a2>
 8000420:	f1ae 0e02 	sub.w	lr, lr, #2
 8000424:	443c      	add	r4, r7
 8000426:	eba4 0409 	sub.w	r4, r4, r9
 800042a:	fa1f f983 	uxth.w	r9, r3
 800042e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000432:	fb00 4413 	mls	r4, r0, r3, r4
 8000436:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043a:	fb03 fc0c 	mul.w	ip, r3, ip
 800043e:	45a4      	cmp	ip, r4
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1d2>
 8000442:	193c      	adds	r4, r7, r4
 8000444:	f103 30ff 	add.w	r0, r3, #4294967295
 8000448:	d267      	bcs.n	800051a <__udivmoddi4+0x29a>
 800044a:	45a4      	cmp	ip, r4
 800044c:	d965      	bls.n	800051a <__udivmoddi4+0x29a>
 800044e:	3b02      	subs	r3, #2
 8000450:	443c      	add	r4, r7
 8000452:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000456:	fba0 9302 	umull	r9, r3, r0, r2
 800045a:	eba4 040c 	sub.w	r4, r4, ip
 800045e:	429c      	cmp	r4, r3
 8000460:	46ce      	mov	lr, r9
 8000462:	469c      	mov	ip, r3
 8000464:	d351      	bcc.n	800050a <__udivmoddi4+0x28a>
 8000466:	d04e      	beq.n	8000506 <__udivmoddi4+0x286>
 8000468:	b155      	cbz	r5, 8000480 <__udivmoddi4+0x200>
 800046a:	ebb8 030e 	subs.w	r3, r8, lr
 800046e:	eb64 040c 	sbc.w	r4, r4, ip
 8000472:	fa04 f606 	lsl.w	r6, r4, r6
 8000476:	40cb      	lsrs	r3, r1
 8000478:	431e      	orrs	r6, r3
 800047a:	40cc      	lsrs	r4, r1
 800047c:	e9c5 6400 	strd	r6, r4, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	e750      	b.n	8000326 <__udivmoddi4+0xa6>
 8000484:	f1c2 0320 	rsb	r3, r2, #32
 8000488:	fa20 f103 	lsr.w	r1, r0, r3
 800048c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000490:	fa24 f303 	lsr.w	r3, r4, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	430c      	orrs	r4, r1
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa00 fe02 	lsl.w	lr, r0, r2
 80004a0:	fa1f f78c 	uxth.w	r7, ip
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b2:	fb00 f107 	mul.w	r1, r0, r7
 80004b6:	4299      	cmp	r1, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x24c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f100 36ff 	add.w	r6, r0, #4294967295
 80004c2:	d22c      	bcs.n	800051e <__udivmoddi4+0x29e>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d92a      	bls.n	800051e <__udivmoddi4+0x29e>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004d4:	fb08 3311 	mls	r3, r8, r1, r3
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb01 f307 	mul.w	r3, r1, r7
 80004e0:	42a3      	cmp	r3, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x276>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ec:	d213      	bcs.n	8000516 <__udivmoddi4+0x296>
 80004ee:	42a3      	cmp	r3, r4
 80004f0:	d911      	bls.n	8000516 <__udivmoddi4+0x296>
 80004f2:	3902      	subs	r1, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	1ae4      	subs	r4, r4, r3
 80004f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004fc:	e739      	b.n	8000372 <__udivmoddi4+0xf2>
 80004fe:	4604      	mov	r4, r0
 8000500:	e6f0      	b.n	80002e4 <__udivmoddi4+0x64>
 8000502:	4608      	mov	r0, r1
 8000504:	e706      	b.n	8000314 <__udivmoddi4+0x94>
 8000506:	45c8      	cmp	r8, r9
 8000508:	d2ae      	bcs.n	8000468 <__udivmoddi4+0x1e8>
 800050a:	ebb9 0e02 	subs.w	lr, r9, r2
 800050e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000512:	3801      	subs	r0, #1
 8000514:	e7a8      	b.n	8000468 <__udivmoddi4+0x1e8>
 8000516:	4631      	mov	r1, r6
 8000518:	e7ed      	b.n	80004f6 <__udivmoddi4+0x276>
 800051a:	4603      	mov	r3, r0
 800051c:	e799      	b.n	8000452 <__udivmoddi4+0x1d2>
 800051e:	4630      	mov	r0, r6
 8000520:	e7d4      	b.n	80004cc <__udivmoddi4+0x24c>
 8000522:	46d6      	mov	lr, sl
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1a6>
 8000526:	4463      	add	r3, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e74d      	b.n	80003c8 <__udivmoddi4+0x148>
 800052c:	4606      	mov	r6, r0
 800052e:	4623      	mov	r3, r4
 8000530:	4608      	mov	r0, r1
 8000532:	e70f      	b.n	8000354 <__udivmoddi4+0xd4>
 8000534:	3e02      	subs	r6, #2
 8000536:	4463      	add	r3, ip
 8000538:	e730      	b.n	800039c <__udivmoddi4+0x11c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000546:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <MX_DMA_Init+0x48>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a0f      	ldr	r2, [pc, #60]	@ (8000588 <MX_DMA_Init+0x48>)
 800054c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <MX_DMA_Init+0x48>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2105      	movs	r1, #5
 8000562:	2010      	movs	r0, #16
 8000564:	f001 fdc5 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000568:	2010      	movs	r0, #16
 800056a:	f001 fdde 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2105      	movs	r1, #5
 8000572:	2011      	movs	r0, #17
 8000574:	f001 fdbd 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000578:	2011      	movs	r0, #17
 800057a:	f001 fdd6 	bl	800212a <HAL_NVIC_EnableIRQ>

}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800

0800058c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000590:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <MX_FREERTOS_Init+0x18>)
 8000592:	2100      	movs	r1, #0
 8000594:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <MX_FREERTOS_Init+0x1c>)
 8000596:	f007 f803 	bl	80075a0 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a03      	ldr	r2, [pc, #12]	@ (80005ac <MX_FREERTOS_Init+0x20>)
 800059e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	0800ac5c 	.word	0x0800ac5c
 80005a8:	080005b1 	.word	0x080005b1
 80005ac:	2000007c 	.word	0x2000007c

080005b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f007 f897 	bl	80076ec <osDelay>
 80005be:	e7fb      	b.n	80005b8 <StartDefaultTask+0x8>

080005c0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	@ 0x30
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	4b77      	ldr	r3, [pc, #476]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a76      	ldr	r2, [pc, #472]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b74      	ldr	r3, [pc, #464]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	61bb      	str	r3, [r7, #24]
 80005ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ee:	4b71      	ldr	r3, [pc, #452]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a70      	ldr	r2, [pc, #448]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 80005f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b6e      	ldr	r3, [pc, #440]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b6b      	ldr	r3, [pc, #428]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a6a      	ldr	r2, [pc, #424]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b68      	ldr	r3, [pc, #416]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b65      	ldr	r3, [pc, #404]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a64      	ldr	r2, [pc, #400]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b62      	ldr	r3, [pc, #392]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000636:	4b5f      	ldr	r3, [pc, #380]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a5e      	ldr	r2, [pc, #376]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b5c      	ldr	r3, [pc, #368]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064e:	4b59      	ldr	r3, [pc, #356]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a58      	ldr	r2, [pc, #352]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b56      	ldr	r3, [pc, #344]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	4b53      	ldr	r3, [pc, #332]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a52      	ldr	r2, [pc, #328]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b50      	ldr	r3, [pc, #320]	@ (80007b4 <MX_GPIO_Init+0x1f4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000684:	484c      	ldr	r0, [pc, #304]	@ (80007b8 <MX_GPIO_Init+0x1f8>)
 8000686:	f002 fb2d 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2141      	movs	r1, #65	@ 0x41
 800068e:	484b      	ldr	r0, [pc, #300]	@ (80007bc <MX_GPIO_Init+0x1fc>)
 8000690:	f002 fb28 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2110      	movs	r1, #16
 8000698:	4849      	ldr	r0, [pc, #292]	@ (80007c0 <MX_GPIO_Init+0x200>)
 800069a:	f002 fb23 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800069e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4843      	ldr	r0, [pc, #268]	@ (80007c4 <MX_GPIO_Init+0x204>)
 80006b6:	f002 f969 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006ba:	2332      	movs	r3, #50	@ 0x32
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ca:	230b      	movs	r3, #11
 80006cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	483b      	ldr	r0, [pc, #236]	@ (80007c4 <MX_GPIO_Init+0x204>)
 80006d6:	f002 f959 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006da:	2386      	movs	r3, #134	@ 0x86
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ea:	230b      	movs	r3, #11
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	4834      	ldr	r0, [pc, #208]	@ (80007c8 <MX_GPIO_Init+0x208>)
 80006f6:	f002 f949 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006fa:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	4829      	ldr	r0, [pc, #164]	@ (80007b8 <MX_GPIO_Init+0x1f8>)
 8000714:	f002 f93a 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 8000718:	2341      	movs	r3, #65	@ 0x41
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4823      	ldr	r0, [pc, #140]	@ (80007bc <MX_GPIO_Init+0x1fc>)
 8000730:	f002 f92c 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000734:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000746:	230b      	movs	r3, #11
 8000748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4819      	ldr	r0, [pc, #100]	@ (80007b8 <MX_GPIO_Init+0x1f8>)
 8000752:	f002 f91b 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000756:	2380      	movs	r3, #128	@ 0x80
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4814      	ldr	r0, [pc, #80]	@ (80007bc <MX_GPIO_Init+0x1fc>)
 800076a:	f002 f90f 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800076e:	2310      	movs	r3, #16
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <MX_GPIO_Init+0x200>)
 8000786:	f002 f901 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800078a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800079c:	230b      	movs	r3, #11
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_GPIO_Init+0x1fc>)
 80007a8:	f002 f8f0 	bl	800298c <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3730      	adds	r7, #48	@ 0x30
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40021800 	.word	0x40021800
 80007c0:	40020c00 	.word	0x40020c00
 80007c4:	40020800 	.word	0x40020800
 80007c8:	40020000 	.word	0x40020000

080007cc <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <HAL_UARTEx_RxEventCallback+0x28>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d104      	bne.n	80007ec <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&HC05, Size);
 80007e2:	887b      	ldrh	r3, [r7, #2]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <HAL_UARTEx_RxEventCallback+0x2c>)
 80007e8:	f009 ff3e 	bl	800a668 <ATC_IdleLineCallback>
	}
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40004400 	.word	0x40004400
 80007f8:	20000080 	.word	0x20000080

080007fc <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6178      	str	r0, [r7, #20]
 8000804:	ed87 0a04 	vstr	s0, [r7, #16]
 8000808:	edc7 0a03 	vstr	s1, [r7, #12]
 800080c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000810:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	615a      	str	r2, [r3, #20]
}
 8000836:	bf00      	nop
 8000838:	371c      	adds	r7, #28
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <pid_calculate>:
	pid_data->total_error = 0;
	pid_data->previous_error = 0;
}

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 8000842:	b480      	push	{r7}
 8000844:	b089      	sub	sp, #36	@ 0x24
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	441a      	add	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	ed93 7a02 	vldr	s14, [r3, #8]
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	ee07 3a90 	vmov	s15, r3
 800086e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000876:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000890:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	ed93 7a04 	vldr	s14, [r3, #16]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ae:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	ee07 3a90 	vmov	s15, r3
 80008ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008be:	ed97 7a07 	vldr	s14, [r7, #28]
 80008c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ca:	db08      	blt.n	80008de <pid_calculate+0x9c>
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	ee07 3a90 	vmov	s15, r3
 80008d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d8:	edc7 7a07 	vstr	s15, [r7, #28]
 80008dc:	e016      	b.n	800090c <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	425b      	negs	r3, r3
 80008e4:	ee07 3a90 	vmov	s15, r3
 80008e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80008f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f8:	d808      	bhi.n	800090c <pid_calculate+0xca>
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	425b      	negs	r3, r3
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000908:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8000912:	ed97 7a05 	vldr	s14, [r7, #20]
 8000916:	edd7 7a07 	vldr	s15, [r7, #28]
 800091a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800091e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800092a:	ee17 3a90 	vmov	r3, s15
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	@ 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000950:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b084      	sub	sp, #16
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f82a 	bl	80009d8 <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800098c:	fb02 f303 	mul.w	r3, r2, r3
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	8892      	ldrh	r2, [r2, #4]
 8000994:	fb93 f2f2 	sdiv	r2, r3, r2
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f103 0018 	add.w	r0, r3, #24
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6919      	ldr	r1, [r3, #16]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f7ff ff49 	bl	8000842 <pid_calculate>
 80009b0:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	695a      	ldr	r2, [r3, #20]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	441a      	add	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db04      	blt.n	80009d0 <motor_calculate_speed+0x5a>
	{
		drv8835_set_motorA_speed(m->actual_PWM);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f81c 	bl	8000a08 <drv8835_set_motorA_speed>

	}

}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <drv8835_set_motorA_speed>:

	m->set_speed = set_speed;
}

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000a12:	88fa      	ldrh	r2, [r7, #6]
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <drv8835_set_motorA_speed+0x34>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d303      	bcc.n	8000a26 <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <drv8835_set_motorA_speed+0x34>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a24:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <drv8835_set_motorA_speed+0x34>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	88fa      	ldrh	r2, [r7, #6]
 8000a2c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000013c 	.word	0x2000013c

08000a40 <drv8835_init>:

void drv8835_init()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	drv8835_set_motorA_speed(0);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff ffdf 	bl	8000a08 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <drv8835_init+0x18>)
 8000a4e:	f003 fd21 	bl	8004494 <HAL_TIM_PWM_Start>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000013c 	.word	0x2000013c

08000a5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d102      	bne.n	8000a74 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000a6e:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a70:	f7ff ff81 	bl	8000976 <motor_calculate_speed>
	}
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40001000 	.word	0x40001000
 8000a80:	200000bc 	.word	0x200000bc

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8a:	f001 f9d6 	bl	8001e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8e:	f000 f8bb 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a92:	f7ff fd95 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a96:	f7ff fd53 	bl	8000540 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a9a:	f000 ffb5 	bl	8001a08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a9e:	f001 f8fb 	bl	8001c98 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000aa2:	f000 ff81 	bl	80019a8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000aa6:	f000 fa6d 	bl	8000f84 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000aaa:	f000 fb29 	bl	8001100 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000aae:	f000 fb7d 	bl	80011ac <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ab2:	f000 fc6f 	bl	8001394 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000ab6:	f000 fabf 	bl	8001038 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000aba:	f000 fc33 	bl	8001324 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000abe:	f000 fbcb 	bl	8001258 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000ac2:	f000 fcc1 	bl	8001448 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  ATC_Init(&HC05, &huart2, 2048, "HC05");
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bbc <main+0x138>)
 8000ac8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000acc:	493c      	ldr	r1, [pc, #240]	@ (8000bc0 <main+0x13c>)
 8000ace:	483d      	ldr	r0, [pc, #244]	@ (8000bc4 <main+0x140>)
 8000ad0:	f009 fc46 	bl	800a360 <ATC_Init>
  ATC_SendReceive(&HC05, "AT\r\n", 1000, NULL, 1000, 0);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ae4:	4938      	ldr	r1, [pc, #224]	@ (8000bc8 <main+0x144>)
 8000ae6:	4837      	ldr	r0, [pc, #220]	@ (8000bc4 <main+0x140>)
 8000ae8:	f009 fcdf 	bl	800a4aa <ATC_SendReceive>
  ATC_SendReceive(&HC05, "AT+NAMERC-Car\r\n", 1000, NULL, 1000, 0);
 8000aec:	2300      	movs	r3, #0
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2300      	movs	r3, #0
 8000af8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000afc:	4933      	ldr	r1, [pc, #204]	@ (8000bcc <main+0x148>)
 8000afe:	4831      	ldr	r0, [pc, #196]	@ (8000bc4 <main+0x140>)
 8000b00:	f009 fcd3 	bl	800a4aa <ATC_SendReceive>
  ATC_SendReceive(&HC05, "AT+PIN1609\r\n", 1000, NULL, 1000, 0);
 8000b04:	2300      	movs	r3, #0
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b14:	492e      	ldr	r1, [pc, #184]	@ (8000bd0 <main+0x14c>)
 8000b16:	482b      	ldr	r0, [pc, #172]	@ (8000bc4 <main+0x140>)
 8000b18:	f009 fcc7 	bl	800a4aa <ATC_SendReceive>
  ATC_SendReceive(&HC05, "AT+BAUD8\r\n", 1000, NULL, 1000, 0);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b2c:	4929      	ldr	r1, [pc, #164]	@ (8000bd4 <main+0x150>)
 8000b2e:	4825      	ldr	r0, [pc, #148]	@ (8000bc4 <main+0x140>)
 8000b30:	f009 fcbb 	bl	800a4aa <ATC_SendReceive>

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 8000b34:	4b28      	ldr	r3, [pc, #160]	@ (8000bd8 <main+0x154>)
 8000b36:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff fb81 	bl	8000240 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	4824      	ldr	r0, [pc, #144]	@ (8000bdc <main+0x158>)
 8000b4a:	f004 fd3f 	bl	80055cc <HAL_UART_Transmit>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000b4e:	213c      	movs	r1, #60	@ 0x3c
 8000b50:	4823      	ldr	r0, [pc, #140]	@ (8000be0 <main+0x15c>)
 8000b52:	f003 fe3f 	bl	80047d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b56:	213c      	movs	r1, #60	@ 0x3c
 8000b58:	4822      	ldr	r0, [pc, #136]	@ (8000be4 <main+0x160>)
 8000b5a:	f003 fe3b 	bl	80047d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000b5e:	213c      	movs	r1, #60	@ 0x3c
 8000b60:	4821      	ldr	r0, [pc, #132]	@ (8000be8 <main+0x164>)
 8000b62:	f003 fe37 	bl	80047d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000b66:	213c      	movs	r1, #60	@ 0x3c
 8000b68:	4820      	ldr	r0, [pc, #128]	@ (8000bec <main+0x168>)
 8000b6a:	f003 fe33 	bl	80047d4 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	481f      	ldr	r0, [pc, #124]	@ (8000bf0 <main+0x16c>)
 8000b72:	f003 fc8f 	bl	8004494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b76:	210c      	movs	r1, #12
 8000b78:	481d      	ldr	r0, [pc, #116]	@ (8000bf0 <main+0x16c>)
 8000b7a:	f003 fc8b 	bl	8004494 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8000b7e:	481d      	ldr	r0, [pc, #116]	@ (8000bf4 <main+0x170>)
 8000b80:	f003 fbb8 	bl	80042f4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000b84:	2104      	movs	r1, #4
 8000b86:	481c      	ldr	r0, [pc, #112]	@ (8000bf8 <main+0x174>)
 8000b88:	f003 fc84 	bl	8004494 <HAL_TIM_PWM_Start>

  drv8835_init();
 8000b8c:	f7ff ff58 	bl	8000a40 <drv8835_init>
  motor_init(&motorA, &htim4);
 8000b90:	4915      	ldr	r1, [pc, #84]	@ (8000be8 <main+0x164>)
 8000b92:	481a      	ldr	r0, [pc, #104]	@ (8000bfc <main+0x178>)
 8000b94:	f7ff fed1 	bl	800093a <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8000c00 <main+0x17c>
 8000b9e:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8000c00 <main+0x17c>
 8000ba2:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000ba6:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <main+0x180>)
 8000ba8:	f7ff fe28 	bl	80007fc <pid_init>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bac:	f006 fc8e 	bl	80074cc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000bb0:	f7ff fcec 	bl	800058c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bb4:	f006 fcbe 	bl	8007534 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <main+0x134>
 8000bbc:	0800abdc 	.word	0x0800abdc
 8000bc0:	20000350 	.word	0x20000350
 8000bc4:	20000080 	.word	0x20000080
 8000bc8:	0800abe4 	.word	0x0800abe4
 8000bcc:	0800abec 	.word	0x0800abec
 8000bd0:	0800abfc 	.word	0x0800abfc
 8000bd4:	0800ac0c 	.word	0x0800ac0c
 8000bd8:	0800ac18 	.word	0x0800ac18
 8000bdc:	200003d8 	.word	0x200003d8
 8000be0:	200000f0 	.word	0x200000f0
 8000be4:	20000188 	.word	0x20000188
 8000be8:	200001d4 	.word	0x200001d4
 8000bec:	200002b8 	.word	0x200002b8
 8000bf0:	2000013c 	.word	0x2000013c
 8000bf4:	2000026c 	.word	0x2000026c
 8000bf8:	20000304 	.word	0x20000304
 8000bfc:	200000bc 	.word	0x200000bc
 8000c00:	3d4ccccd 	.word	0x3d4ccccd
 8000c04:	200000d4 	.word	0x200000d4

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b094      	sub	sp, #80	@ 0x50
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2234      	movs	r2, #52	@ 0x34
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f009 fe54 	bl	800a8c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c2c:	f002 f9ae 	bl	8002f8c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce4 <SystemClock_Config+0xdc>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce4 <SystemClock_Config+0xdc>)
 8000c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <SystemClock_Config+0xdc>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c48:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <SystemClock_Config+0xe0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c50:	4a25      	ldr	r2, [pc, #148]	@ (8000ce8 <SystemClock_Config+0xe0>)
 8000c52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <SystemClock_Config+0xe0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c68:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c7c:	2360      	movs	r3, #96	@ 0x60
 8000c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c84:	2304      	movs	r3, #4
 8000c86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 f9db 	bl	800304c <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c9c:	f000 f826 	bl	8000cec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ca0:	f002 f984 	bl	8002fac <HAL_PWREx_EnableOverDrive>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000caa:	f000 f81f 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cae:	230f      	movs	r3, #15
 8000cb0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	2103      	movs	r1, #3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fc6c 	bl	80035a8 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000cd6:	f000 f809 	bl	8000cec <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3750      	adds	r7, #80	@ 0x50
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	210f      	movs	r1, #15
 8000d32:	f06f 0001 	mvn.w	r0, #1
 8000d36:	f001 f9dc 	bl	80020f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <NMI_Handler+0x4>

08000d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f001 f897 	bl	8001eb4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d86:	f008 f92b 	bl	8008fe0 <xTaskGetSchedulerState>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d001      	beq.n	8000d94 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d90:	f008 ff1a 	bl	8009bc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <DMA1_Stream5_IRQHandler+0x10>)
 8000d9e:	f001 fb7f 	bl	80024a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000460 	.word	0x20000460

08000dac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <DMA1_Stream6_IRQHandler+0x10>)
 8000db2:	f001 fb75 	bl	80024a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200004c0 	.word	0x200004c0

08000dc0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000dc6:	f003 fd93 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000f0 	.word	0x200000f0

08000dd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dda:	f003 fd89 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000f0 	.word	0x200000f0

08000de8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000dee:	f003 fd7f 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000f0 	.word	0x200000f0

08000dfc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e00:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <TIM1_CC_IRQHandler+0x10>)
 8000e02:	f003 fd75 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000f0 	.word	0x200000f0

08000e10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <TIM2_IRQHandler+0x10>)
 8000e16:	f003 fd6b 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000013c 	.word	0x2000013c

08000e24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <TIM3_IRQHandler+0x10>)
 8000e2a:	f003 fd61 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000188 	.word	0x20000188

08000e38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <TIM4_IRQHandler+0x10>)
 8000e3e:	f003 fd57 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001d4 	.word	0x200001d4

08000e4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <USART2_IRQHandler+0x10>)
 8000e52:	f004 fdd9 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000350 	.word	0x20000350

08000e60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <USART3_IRQHandler+0x10>)
 8000e66:	f004 fdcf 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200003d8 	.word	0x200003d8

08000e74 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000e78:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000e7a:	f003 fd39 	bl	80048f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000e7e:	4803      	ldr	r0, [pc, #12]	@ (8000e8c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000e80:	f003 fd36 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200002b8 	.word	0x200002b8
 8000e8c:	20000304 	.word	0x20000304

08000e90 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000e96:	f003 fd2b 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200002b8 	.word	0x200002b8

08000ea4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000eaa:	f003 fd21 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200002b8 	.word	0x200002b8

08000eb8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <TIM8_CC_IRQHandler+0x10>)
 8000ebe:	f003 fd17 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200002b8 	.word	0x200002b8

08000ecc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM5_IRQHandler+0x10>)
 8000ed2:	f003 fd0d 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000220 	.word	0x20000220

08000ee0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <TIM6_DAC_IRQHandler+0x10>)
 8000ee6:	f003 fd03 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000026c 	.word	0x2000026c

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f009 fd10 	bl	800a948 <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20080000 	.word	0x20080000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	200000ec 	.word	0x200000ec
 8000f5c:	20005498 	.word	0x20005498

08000f60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	@ 0x30
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2224      	movs	r2, #36	@ 0x24
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f009 fc96 	bl	800a8c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <MX_TIM1_Init+0xac>)
 8000fa4:	4a23      	ldr	r2, [pc, #140]	@ (8001034 <MX_TIM1_Init+0xb0>)
 8000fa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <MX_TIM1_Init+0xac>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000fae:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <MX_TIM1_Init+0xac>)
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <MX_TIM1_Init+0xac>)
 8000fb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <MX_TIM1_Init+0xac>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <MX_TIM1_Init+0xac>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <MX_TIM1_Init+0xac>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000fde:	230f      	movs	r3, #15
 8000fe0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <MX_TIM1_Init+0xac>)
 8000ffa:	f003 fb45 	bl	8004688 <HAL_TIM_Encoder_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001004:	f7ff fe72 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_TIM1_Init+0xac>)
 800101a:	f004 f9dd 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001024:	f7ff fe62 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	@ 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000f0 	.word	0x200000f0
 8001034:	40010000 	.word	0x40010000

08001038 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <MX_TIM2_Init+0xc4>)
 800105e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001064:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <MX_TIM2_Init+0xc4>)
 8001066:	222f      	movs	r2, #47	@ 0x2f
 8001068:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <MX_TIM2_Init+0xc4>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001070:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <MX_TIM2_Init+0xc4>)
 8001072:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <MX_TIM2_Init+0xc4>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <MX_TIM2_Init+0xc4>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001084:	481d      	ldr	r0, [pc, #116]	@ (80010fc <MX_TIM2_Init+0xc4>)
 8001086:	f003 f9ad 	bl	80043e4 <HAL_TIM_PWM_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001090:	f7ff fe2c 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4816      	ldr	r0, [pc, #88]	@ (80010fc <MX_TIM2_Init+0xc4>)
 80010a4:	f004 f998 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80010ae:	f7ff fe1d 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b2:	2360      	movs	r3, #96	@ 0x60
 80010b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <MX_TIM2_Init+0xc4>)
 80010ca:	f003 fd19 	bl	8004b00 <HAL_TIM_PWM_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010d4:	f7ff fe0a 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	220c      	movs	r2, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <MX_TIM2_Init+0xc4>)
 80010e0:	f003 fd0e 	bl	8004b00 <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80010ea:	f7ff fdff 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010ee:	4803      	ldr	r0, [pc, #12]	@ (80010fc <MX_TIM2_Init+0xc4>)
 80010f0:	f000 fbbc 	bl	800186c <HAL_TIM_MspPostInit>

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	@ 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000013c 	.word	0x2000013c

08001100 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	@ 0x30
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2224      	movs	r2, #36	@ 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f009 fbd8 	bl	800a8c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <MX_TIM3_Init+0xa4>)
 8001120:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <MX_TIM3_Init+0xa8>)
 8001122:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <MX_TIM3_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_TIM3_Init+0xa4>)
 800112c:	2210      	movs	r2, #16
 800112e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001130:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <MX_TIM3_Init+0xa4>)
 8001132:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001136:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_TIM3_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <MX_TIM3_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001144:	2303      	movs	r3, #3
 8001146:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001154:	230f      	movs	r3, #15
 8001156:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001164:	230f      	movs	r3, #15
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <MX_TIM3_Init+0xa4>)
 8001170:	f003 fa8a 	bl	8004688 <HAL_TIM_Encoder_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800117a:	f7ff fdb7 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	@ (80011a4 <MX_TIM3_Init+0xa4>)
 800118c:	f004 f924 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001196:	f7ff fda9 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	@ 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000188 	.word	0x20000188
 80011a8:	40000400 	.word	0x40000400

080011ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	@ 0x30
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2224      	movs	r2, #36	@ 0x24
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f009 fb82 	bl	800a8c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <MX_TIM4_Init+0xa4>)
 80011cc:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <MX_TIM4_Init+0xa8>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <MX_TIM4_Init+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_TIM4_Init+0xa4>)
 80011d8:	2210      	movs	r2, #16
 80011da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_TIM4_Init+0xa4>)
 80011de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_TIM4_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <MX_TIM4_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011f0:	2303      	movs	r3, #3
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011f8:	2301      	movs	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001200:	230f      	movs	r3, #15
 8001202:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001208:	2301      	movs	r3, #1
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001210:	230f      	movs	r3, #15
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	@ (8001250 <MX_TIM4_Init+0xa4>)
 800121c:	f003 fa34 	bl	8004688 <HAL_TIM_Encoder_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001226:	f7ff fd61 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	@ (8001250 <MX_TIM4_Init+0xa4>)
 8001238:	f004 f8ce 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001242:	f7ff fd53 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3730      	adds	r7, #48	@ 0x30
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001d4 	.word	0x200001d4
 8001254:	40000800 	.word	0x40000800

08001258 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800127c:	4b27      	ldr	r3, [pc, #156]	@ (800131c <MX_TIM5_Init+0xc4>)
 800127e:	4a28      	ldr	r2, [pc, #160]	@ (8001320 <MX_TIM5_Init+0xc8>)
 8001280:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001282:	4b26      	ldr	r3, [pc, #152]	@ (800131c <MX_TIM5_Init+0xc4>)
 8001284:	222f      	movs	r2, #47	@ 0x2f
 8001286:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b24      	ldr	r3, [pc, #144]	@ (800131c <MX_TIM5_Init+0xc4>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800128e:	4b23      	ldr	r3, [pc, #140]	@ (800131c <MX_TIM5_Init+0xc4>)
 8001290:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001294:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b21      	ldr	r3, [pc, #132]	@ (800131c <MX_TIM5_Init+0xc4>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <MX_TIM5_Init+0xc4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012a2:	481e      	ldr	r0, [pc, #120]	@ (800131c <MX_TIM5_Init+0xc4>)
 80012a4:	f003 f89e 	bl	80043e4 <HAL_TIM_PWM_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80012ae:	f7ff fd1d 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4816      	ldr	r0, [pc, #88]	@ (800131c <MX_TIM5_Init+0xc4>)
 80012c2:	f004 f889 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80012cc:	f7ff fd0e 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d0:	2360      	movs	r3, #96	@ 0x60
 80012d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	@ (800131c <MX_TIM5_Init+0xc4>)
 80012e8:	f003 fc0a 	bl	8004b00 <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80012f2:	f7ff fcfb 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	220c      	movs	r2, #12
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	@ (800131c <MX_TIM5_Init+0xc4>)
 80012fe:	f003 fbff 	bl	8004b00 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001308:	f7ff fcf0 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800130c:	4803      	ldr	r0, [pc, #12]	@ (800131c <MX_TIM5_Init+0xc4>)
 800130e:	f000 faad 	bl	800186c <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000220 	.word	0x20000220
 8001320:	40000c00 	.word	0x40000c00

08001324 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <MX_TIM6_Init+0x68>)
 8001336:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <MX_TIM6_Init+0x6c>)
 8001338:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_TIM6_Init+0x68>)
 800133c:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001340:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_TIM6_Init+0x68>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001348:	4b10      	ldr	r3, [pc, #64]	@ (800138c <MX_TIM6_Init+0x68>)
 800134a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800134e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_TIM6_Init+0x68>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_TIM6_Init+0x68>)
 8001358:	f002 ff74 	bl	8004244 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001362:	f7ff fcc3 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	@ (800138c <MX_TIM6_Init+0x68>)
 8001374:	f004 f830 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800137e:	f7ff fcb5 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000026c 	.word	0x2000026c
 8001390:	40001000 	.word	0x40001000

08001394 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2224      	movs	r2, #36	@ 0x24
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f009 fa8e 	bl	800a8c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <MX_TIM8_Init+0xac>)
 80013b4:	4a23      	ldr	r2, [pc, #140]	@ (8001444 <MX_TIM8_Init+0xb0>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013b8:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <MX_TIM8_Init+0xac>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <MX_TIM8_Init+0xac>)
 80013c0:	2210      	movs	r2, #16
 80013c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <MX_TIM8_Init+0xac>)
 80013c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <MX_TIM8_Init+0xac>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_TIM8_Init+0xac>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <MX_TIM8_Init+0xac>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013de:	2303      	movs	r3, #3
 80013e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013e6:	2301      	movs	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013ee:	230f      	movs	r3, #15
 80013f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013f6:	2301      	movs	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80013fe:	230f      	movs	r3, #15
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_TIM8_Init+0xac>)
 800140a:	f003 f93d 	bl	8004688 <HAL_TIM_Encoder_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001414:	f7ff fc6a 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_TIM8_Init+0xac>)
 800142a:	f003 ffd5 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001434:	f7ff fc5a 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3730      	adds	r7, #48	@ 0x30
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200002b8 	.word	0x200002b8
 8001444:	40010400 	.word	0x40010400

08001448 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001460:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_TIM12_Init+0x84>)
 8001462:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <MX_TIM12_Init+0x88>)
 8001464:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <MX_TIM12_Init+0x84>)
 8001468:	225f      	movs	r2, #95	@ 0x5f
 800146a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_TIM12_Init+0x84>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_TIM12_Init+0x84>)
 8001474:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001478:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_TIM12_Init+0x84>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_TIM12_Init+0x84>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001486:	4811      	ldr	r0, [pc, #68]	@ (80014cc <MX_TIM12_Init+0x84>)
 8001488:	f002 ffac 	bl	80043e4 <HAL_TIM_PWM_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001492:	f7ff fc2b 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2204      	movs	r2, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	@ (80014cc <MX_TIM12_Init+0x84>)
 80014ae:	f003 fb27 	bl	8004b00 <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80014b8:	f7ff fc18 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <MX_TIM12_Init+0x84>)
 80014be:	f000 f9d5 	bl	800186c <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000304 	.word	0x20000304
 80014d0:	40001800 	.word	0x40001800

080014d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b090      	sub	sp, #64	@ 0x40
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a93      	ldr	r2, [pc, #588]	@ (8001740 <HAL_TIM_Encoder_MspInit+0x26c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d149      	bne.n	800158a <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014f6:	4b93      	ldr	r3, [pc, #588]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4a92      	ldr	r2, [pc, #584]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6453      	str	r3, [r2, #68]	@ 0x44
 8001502:	4b90      	ldr	r3, [pc, #576]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800150c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800150e:	4b8d      	ldr	r3, [pc, #564]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a8c      	ldr	r2, [pc, #560]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b8a      	ldr	r3, [pc, #552]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 8001526:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001538:	2301      	movs	r3, #1
 800153a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001540:	4619      	mov	r1, r3
 8001542:	4881      	ldr	r0, [pc, #516]	@ (8001748 <HAL_TIM_Encoder_MspInit+0x274>)
 8001544:	f001 fa22 	bl	800298c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2105      	movs	r1, #5
 800154c:	2018      	movs	r0, #24
 800154e:	f000 fdd0 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001552:	2018      	movs	r0, #24
 8001554:	f000 fde9 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2105      	movs	r1, #5
 800155c:	2019      	movs	r0, #25
 800155e:	f000 fdc8 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001562:	2019      	movs	r0, #25
 8001564:	f000 fde1 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2105      	movs	r1, #5
 800156c:	201a      	movs	r0, #26
 800156e:	f000 fdc0 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001572:	201a      	movs	r0, #26
 8001574:	f000 fdd9 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2105      	movs	r1, #5
 800157c:	201b      	movs	r0, #27
 800157e:	f000 fdb8 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001582:	201b      	movs	r0, #27
 8001584:	f000 fdd1 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001588:	e0d5      	b.n	8001736 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6f      	ldr	r2, [pc, #444]	@ (800174c <HAL_TIM_Encoder_MspInit+0x278>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d14c      	bne.n	800162e <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001594:	4b6b      	ldr	r3, [pc, #428]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	4a6a      	ldr	r2, [pc, #424]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a0:	4b68      	ldr	r3, [pc, #416]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b65      	ldr	r3, [pc, #404]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	4a64      	ldr	r2, [pc, #400]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b8:	4b62      	ldr	r3, [pc, #392]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c8:	4a5e      	ldr	r2, [pc, #376]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d0:	4b5c      	ldr	r3, [pc, #368]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 80015dc:	2340      	movs	r3, #64	@ 0x40
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ec:	2302      	movs	r3, #2
 80015ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015f4:	4619      	mov	r1, r3
 80015f6:	4856      	ldr	r0, [pc, #344]	@ (8001750 <HAL_TIM_Encoder_MspInit+0x27c>)
 80015f8:	f001 f9c8 	bl	800298c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 80015fc:	2320      	movs	r3, #32
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800160c:	2302      	movs	r3, #2
 800160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001614:	4619      	mov	r1, r3
 8001616:	484f      	ldr	r0, [pc, #316]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x280>)
 8001618:	f001 f9b8 	bl	800298c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2105      	movs	r1, #5
 8001620:	201d      	movs	r0, #29
 8001622:	f000 fd66 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001626:	201d      	movs	r0, #29
 8001628:	f000 fd7f 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 800162c:	e083      	b.n	8001736 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a49      	ldr	r2, [pc, #292]	@ (8001758 <HAL_TIM_Encoder_MspInit+0x284>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d131      	bne.n	800169c <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001638:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a41      	ldr	r2, [pc, #260]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b3f      	ldr	r3, [pc, #252]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001650:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	4a3b      	ldr	r2, [pc, #236]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6313      	str	r3, [r2, #48]	@ 0x30
 800165c:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8001668:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800167a:	2302      	movs	r3, #2
 800167c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	4835      	ldr	r0, [pc, #212]	@ (800175c <HAL_TIM_Encoder_MspInit+0x288>)
 8001686:	f001 f981 	bl	800298c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	201e      	movs	r0, #30
 8001690:	f000 fd2f 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001694:	201e      	movs	r0, #30
 8001696:	f000 fd48 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 800169a:	e04c      	b.n	8001736 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001760 <HAL_TIM_Encoder_MspInit+0x28c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d147      	bne.n	8001736 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016a6:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a26      	ldr	r2, [pc, #152]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a20      	ldr	r2, [pc, #128]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <HAL_TIM_Encoder_MspInit+0x270>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 80016d6:	23c0      	movs	r3, #192	@ 0xc0
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016e6:	2303      	movs	r3, #3
 80016e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ee:	4619      	mov	r1, r3
 80016f0:	481c      	ldr	r0, [pc, #112]	@ (8001764 <HAL_TIM_Encoder_MspInit+0x290>)
 80016f2:	f001 f94b 	bl	800298c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2105      	movs	r1, #5
 80016fa:	202b      	movs	r0, #43	@ 0x2b
 80016fc:	f000 fcf9 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001700:	202b      	movs	r0, #43	@ 0x2b
 8001702:	f000 fd12 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	202c      	movs	r0, #44	@ 0x2c
 800170c:	f000 fcf1 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001710:	202c      	movs	r0, #44	@ 0x2c
 8001712:	f000 fd0a 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2105      	movs	r1, #5
 800171a:	202d      	movs	r0, #45	@ 0x2d
 800171c:	f000 fce9 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001720:	202d      	movs	r0, #45	@ 0x2d
 8001722:	f000 fd02 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	202e      	movs	r0, #46	@ 0x2e
 800172c:	f000 fce1 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001730:	202e      	movs	r0, #46	@ 0x2e
 8001732:	f000 fcfa 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3740      	adds	r7, #64	@ 0x40
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40010000 	.word	0x40010000
 8001744:	40023800 	.word	0x40023800
 8001748:	40021000 	.word	0x40021000
 800174c:	40000400 	.word	0x40000400
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40000800 	.word	0x40000800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40010400 	.word	0x40010400
 8001764:	40020800 	.word	0x40020800

08001768 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001778:	d114      	bne.n	80017a4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177a:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <HAL_TIM_PWM_MspInit+0xac>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a25      	ldr	r2, [pc, #148]	@ (8001814 <HAL_TIM_PWM_MspInit+0xac>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_TIM_PWM_MspInit+0xac>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2105      	movs	r1, #5
 8001796:	201c      	movs	r0, #28
 8001798:	f000 fcab 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800179c:	201c      	movs	r0, #28
 800179e:	f000 fcc4 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80017a2:	e032      	b.n	800180a <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <HAL_TIM_PWM_MspInit+0xb0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d114      	bne.n	80017d8 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_TIM_PWM_MspInit+0xac>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a18      	ldr	r2, [pc, #96]	@ (8001814 <HAL_TIM_PWM_MspInit+0xac>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <HAL_TIM_PWM_MspInit+0xac>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2105      	movs	r1, #5
 80017ca:	2032      	movs	r0, #50	@ 0x32
 80017cc:	f000 fc91 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80017d0:	2032      	movs	r0, #50	@ 0x32
 80017d2:	f000 fcaa 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 80017d6:	e018      	b.n	800180a <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <HAL_TIM_PWM_MspInit+0xb4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d113      	bne.n	800180a <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <HAL_TIM_PWM_MspInit+0xac>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <HAL_TIM_PWM_MspInit+0xac>)
 80017e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_TIM_PWM_MspInit+0xac>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	202b      	movs	r0, #43	@ 0x2b
 8001800:	f000 fc77 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001804:	202b      	movs	r0, #43	@ 0x2b
 8001806:	f000 fc90 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40000c00 	.word	0x40000c00
 800181c:	40001800 	.word	0x40001800

08001820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <HAL_TIM_Base_MspInit+0x44>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d113      	bne.n	800185a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_TIM_Base_MspInit+0x48>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a0c      	ldr	r2, [pc, #48]	@ (8001868 <HAL_TIM_Base_MspInit+0x48>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_TIM_Base_MspInit+0x48>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2036      	movs	r0, #54	@ 0x36
 8001850:	f000 fc4f 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001854:	2036      	movs	r0, #54	@ 0x36
 8001856:	f000 fc68 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40001000 	.word	0x40001000
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	@ 0x30
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800188c:	d139      	bne.n	8001902 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b41      	ldr	r3, [pc, #260]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a40      	ldr	r2, [pc, #256]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a3a      	ldr	r2, [pc, #232]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b38      	ldr	r3, [pc, #224]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 80018be:	2320      	movs	r3, #32
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ce:	2301      	movs	r3, #1
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	482f      	ldr	r0, [pc, #188]	@ (8001998 <HAL_TIM_MspPostInit+0x12c>)
 80018da:	f001 f857 	bl	800298c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 80018de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4828      	ldr	r0, [pc, #160]	@ (800199c <HAL_TIM_MspPostInit+0x130>)
 80018fc:	f001 f846 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001900:	e043      	b.n	800198a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a26      	ldr	r2, [pc, #152]	@ (80019a0 <HAL_TIM_MspPostInit+0x134>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d11c      	bne.n	8001946 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001910:	4a20      	ldr	r2, [pc, #128]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6313      	str	r3, [r2, #48]	@ 0x30
 8001918:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001924:	2309      	movs	r3, #9
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001934:	2302      	movs	r3, #2
 8001936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4816      	ldr	r0, [pc, #88]	@ (8001998 <HAL_TIM_MspPostInit+0x12c>)
 8001940:	f001 f824 	bl	800298c <HAL_GPIO_Init>
}
 8001944:	e021      	b.n	800198a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <HAL_TIM_MspPostInit+0x138>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d11c      	bne.n	800198a <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	6313      	str	r3, [r2, #48]	@ 0x30
 800195c:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <HAL_TIM_MspPostInit+0x128>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001968:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800197a:	2309      	movs	r3, #9
 800197c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	@ (800199c <HAL_TIM_MspPostInit+0x130>)
 8001986:	f001 f801 	bl	800298c <HAL_GPIO_Init>
}
 800198a:	bf00      	nop
 800198c:	3730      	adds	r7, #48	@ 0x30
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40000c00 	.word	0x40000c00
 80019a4:	40001800 	.word	0x40001800

080019a8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019ae:	4a15      	ldr	r2, [pc, #84]	@ (8001a04 <MX_USART2_UART_Init+0x5c>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019b2:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019ec:	f003 fda0 	bl	8005530 <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019f6:	f7ff f979 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000350 	.word	0x20000350
 8001a04:	40004400 	.word	0x40004400

08001a08 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a0e:	4a15      	ldr	r2, [pc, #84]	@ (8001a64 <MX_USART3_UART_Init+0x5c>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a4c:	f003 fd70 	bl	8005530 <HAL_UART_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a56:	f7ff f949 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200003d8 	.word	0x200003d8
 8001a64:	40004800 	.word	0x40004800

08001a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0b0      	sub	sp, #192	@ 0xc0
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	2290      	movs	r2, #144	@ 0x90
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f008 ff1b 	bl	800a8c4 <memset>
  if(uartHandle->Instance==USART2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a79      	ldr	r2, [pc, #484]	@ (8001c78 <HAL_UART_MspInit+0x210>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	f040 80a0 	bne.w	8001bda <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a9a:	2380      	movs	r3, #128	@ 0x80
 8001a9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 ffa4 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ab2:	f7ff f91b 	bl	8000cec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab6:	4b71      	ldr	r3, [pc, #452]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	4a70      	ldr	r2, [pc, #448]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ace:	4b6b      	ldr	r3, [pc, #428]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a6a      	ldr	r2, [pc, #424]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ae6:	2360      	movs	r3, #96	@ 0x60
 8001ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afe:	2307      	movs	r3, #7
 8001b00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b08:	4619      	mov	r1, r3
 8001b0a:	485d      	ldr	r0, [pc, #372]	@ (8001c80 <HAL_UART_MspInit+0x218>)
 8001b0c:	f000 ff3e 	bl	800298c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b10:	4b5c      	ldr	r3, [pc, #368]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b12:	4a5d      	ldr	r2, [pc, #372]	@ (8001c88 <HAL_UART_MspInit+0x220>)
 8001b14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b16:	4b5b      	ldr	r3, [pc, #364]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b18:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1e:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b24:	4b57      	ldr	r3, [pc, #348]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2a:	4b56      	ldr	r3, [pc, #344]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b32:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b38:	4b52      	ldr	r3, [pc, #328]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b3e:	4b51      	ldr	r3, [pc, #324]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b44:	4b4f      	ldr	r3, [pc, #316]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b50:	484c      	ldr	r0, [pc, #304]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b52:	f000 fb05 	bl	8002160 <HAL_DMA_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001b5c:	f7ff f8c6 	bl	8000cec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a48      	ldr	r2, [pc, #288]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b64:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b66:	4a47      	ldr	r2, [pc, #284]	@ (8001c84 <HAL_UART_MspInit+0x21c>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b6c:	4b47      	ldr	r3, [pc, #284]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001b6e:	4a48      	ldr	r2, [pc, #288]	@ (8001c90 <HAL_UART_MspInit+0x228>)
 8001b70:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b72:	4b46      	ldr	r3, [pc, #280]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001b74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b78:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b7a:	4b44      	ldr	r3, [pc, #272]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001b7c:	2240      	movs	r2, #64	@ 0x40
 8001b7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b80:	4b42      	ldr	r3, [pc, #264]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b86:	4b41      	ldr	r3, [pc, #260]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001b88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b94:	4b3d      	ldr	r3, [pc, #244]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba6:	4b39      	ldr	r3, [pc, #228]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bac:	4837      	ldr	r0, [pc, #220]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001bae:	f000 fad7 	bl	8002160 <HAL_DMA_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001bb8:	f7ff f898 	bl	8000cec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001bc0:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bc2:	4a32      	ldr	r2, [pc, #200]	@ (8001c8c <HAL_UART_MspInit+0x224>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2105      	movs	r1, #5
 8001bcc:	2026      	movs	r0, #38	@ 0x26
 8001bce:	f000 fa90 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd2:	2026      	movs	r0, #38	@ 0x26
 8001bd4:	f000 faa9 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bd8:	e049      	b.n	8001c6e <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2d      	ldr	r2, [pc, #180]	@ (8001c94 <HAL_UART_MspInit+0x22c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d144      	bne.n	8001c6e <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fefe 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001bfe:	f7ff f875 	bl	8000cec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c02:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	4a1d      	ldr	r2, [pc, #116]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_UART_MspInit+0x214>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c52:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c56:	4619      	mov	r1, r3
 8001c58:	4809      	ldr	r0, [pc, #36]	@ (8001c80 <HAL_UART_MspInit+0x218>)
 8001c5a:	f000 fe97 	bl	800298c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2105      	movs	r1, #5
 8001c62:	2027      	movs	r0, #39	@ 0x27
 8001c64:	f000 fa45 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c68:	2027      	movs	r0, #39	@ 0x27
 8001c6a:	f000 fa5e 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	37c0      	adds	r7, #192	@ 0xc0
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40004400 	.word	0x40004400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020c00 	.word	0x40020c00
 8001c84:	20000460 	.word	0x20000460
 8001c88:	40026088 	.word	0x40026088
 8001c8c:	200004c0 	.word	0x200004c0
 8001c90:	400260a0 	.word	0x400260a0
 8001c94:	40004800 	.word	0x40004800

08001c98 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c9c:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ca2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ca6:	2206      	movs	r2, #6
 8001ca8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cb8:	2202      	movs	r2, #2
 8001cba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cdc:	f001 f81b 	bl	8002d16 <HAL_PCD_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001ce6:	f7ff f801 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000520 	.word	0x20000520

08001cf4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0ae      	sub	sp, #184	@ 0xb8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2290      	movs	r2, #144	@ 0x90
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f008 fdd5 	bl	800a8c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d22:	d159      	bne.n	8001dd8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 fe5d 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001d40:	f7fe ffd4 	bl	8000cec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <HAL_PCD_MspInit+0xec>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	4a25      	ldr	r2, [pc, #148]	@ (8001de0 <HAL_PCD_MspInit+0xec>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <HAL_PCD_MspInit+0xec>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d5c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001d60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d76:	230a      	movs	r3, #10
 8001d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4818      	ldr	r0, [pc, #96]	@ (8001de4 <HAL_PCD_MspInit+0xf0>)
 8001d84:	f000 fe02 	bl	800298c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4810      	ldr	r0, [pc, #64]	@ (8001de4 <HAL_PCD_MspInit+0xf0>)
 8001da4:	f000 fdf2 	bl	800298c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001da8:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_PCD_MspInit+0xec>)
 8001daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dac:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <HAL_PCD_MspInit+0xec>)
 8001dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db2:	6353      	str	r3, [r2, #52]	@ 0x34
 8001db4:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_PCD_MspInit+0xec>)
 8001db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <HAL_PCD_MspInit+0xec>)
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc4:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <HAL_PCD_MspInit+0xec>)
 8001dc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dca:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <HAL_PCD_MspInit+0xec>)
 8001dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001dd8:	bf00      	nop
 8001dda:	37b8      	adds	r7, #184	@ 0xb8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dec:	f7ff f8b8 	bl	8000f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	@ (8001e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	@ (8001e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f008 fd9d 	bl	800a954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7fe fe33 	bl	8000a84 <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e20:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001e2c:	0800acb0 	.word	0x0800acb0
  ldr r2, =_sbss
 8001e30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001e34:	20005494 	.word	0x20005494

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>

08001e3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f000 f94c 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e44:	200f      	movs	r0, #15
 8001e46:	f000 f805 	bl	8001e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4a:	f7fe ff55 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_InitTick+0x54>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <HAL_InitTick+0x58>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f967 	bl	8002146 <HAL_SYSTICK_Config>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00e      	b.n	8001ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0f      	cmp	r3, #15
 8001e86:	d80a      	bhi.n	8001e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f000 f92f 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e94:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <HAL_InitTick+0x5c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000a00 	.word	0x20000a00

08001edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <HAL_GetTick+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000a00 	.word	0x20000a00

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff ffee 	bl	8001edc <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffde 	bl	8001edc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x40>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x40>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00
 8001f80:	05fa0000 	.word	0x05fa0000

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	@ (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	@ (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	@ (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	@ 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff3e 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff31 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff feb6 	bl	8001edc <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e099      	b.n	80022b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219c:	e00f      	b.n	80021be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800219e:	f7ff fe9d 	bl	8001edc <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d908      	bls.n	80021be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e078      	b.n	80022b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e8      	bne.n	800219e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4b38      	ldr	r3, [pc, #224]	@ (80022b8 <HAL_DMA_Init+0x158>)
 80021d8:	4013      	ands	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	4313      	orrs	r3, r2
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f023 0307 	bic.w	r3, r3, #7
 800223e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	2b04      	cmp	r3, #4
 8002250:	d117      	bne.n	8002282 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00e      	beq.n	8002282 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 fb15 	bl	8002894 <DMA_CheckFifoParam>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2240      	movs	r2, #64	@ 0x40
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800227e:	2301      	movs	r3, #1
 8002280:	e016      	b.n	80022b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 facc 	bl	8002828 <DMA_CalcBaseAndBitshift>
 8002290:	4603      	mov	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002298:	223f      	movs	r2, #63	@ 0x3f
 800229a:	409a      	lsls	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	e010803f 	.word	0xe010803f

080022bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_DMA_Start_IT+0x26>
 80022de:	2302      	movs	r3, #2
 80022e0:	e048      	b.n	8002374 <HAL_DMA_Start_IT+0xb8>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d137      	bne.n	8002366 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fa5e 	bl	80027cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	223f      	movs	r2, #63	@ 0x3f
 8002316:	409a      	lsls	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0216 	orr.w	r2, r2, #22
 800232a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800233a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0208 	orr.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e005      	b.n	8002372 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002372:	7dfb      	ldrb	r3, [r7, #23]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800238a:	f7ff fda7 	bl	8001edc <HAL_GetTick>
 800238e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d008      	beq.n	80023ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2280      	movs	r2, #128	@ 0x80
 80023a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e052      	b.n	8002454 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0216 	bic.w	r2, r2, #22
 80023bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <HAL_DMA_Abort+0x62>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0208 	bic.w	r2, r2, #8
 80023ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fe:	e013      	b.n	8002428 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002400:	f7ff fd6c 	bl	8001edc <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b05      	cmp	r3, #5
 800240c:	d90c      	bls.n	8002428 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2203      	movs	r2, #3
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e015      	b.n	8002454 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e4      	bne.n	8002400 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243a:	223f      	movs	r2, #63	@ 0x3f
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2280      	movs	r2, #128	@ 0x80
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00c      	b.n	8002494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2205      	movs	r2, #5
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80024ac:	4b8e      	ldr	r3, [pc, #568]	@ (80026e8 <HAL_DMA_IRQHandler+0x248>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a8e      	ldr	r2, [pc, #568]	@ (80026ec <HAL_DMA_IRQHandler+0x24c>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0a9b      	lsrs	r3, r3, #10
 80024b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ca:	2208      	movs	r2, #8
 80024cc:	409a      	lsls	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01a      	beq.n	800250c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0204 	bic.w	r2, r2, #4
 80024f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	2208      	movs	r2, #8
 80024fa:	409a      	lsls	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	2201      	movs	r2, #1
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d012      	beq.n	8002542 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252e:	2201      	movs	r2, #1
 8002530:	409a      	lsls	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253a:	f043 0202 	orr.w	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002546:	2204      	movs	r2, #4
 8002548:	409a      	lsls	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d012      	beq.n	8002578 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00b      	beq.n	8002578 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002564:	2204      	movs	r2, #4
 8002566:	409a      	lsls	r2, r3
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002570:	f043 0204 	orr.w	r2, r3, #4
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257c:	2210      	movs	r2, #16
 800257e:	409a      	lsls	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d043      	beq.n	8002610 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d03c      	beq.n	8002610 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259a:	2210      	movs	r2, #16
 800259c:	409a      	lsls	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d018      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d108      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d024      	beq.n	8002610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
 80025ce:	e01f      	b.n	8002610 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
 80025e0:	e016      	b.n	8002610 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d107      	bne.n	8002600 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0208 	bic.w	r2, r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	2220      	movs	r2, #32
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 808f 	beq.w	8002740 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8087 	beq.w	8002740 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002636:	2220      	movs	r2, #32
 8002638:	409a      	lsls	r2, r3
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b05      	cmp	r3, #5
 8002648:	d136      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0216 	bic.w	r2, r2, #22
 8002658:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002668:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <HAL_DMA_IRQHandler+0x1da>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0208 	bic.w	r2, r2, #8
 8002688:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268e:	223f      	movs	r2, #63	@ 0x3f
 8002690:	409a      	lsls	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d07e      	beq.n	80027ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
        }
        return;
 80026b6:	e079      	b.n	80027ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01d      	beq.n	8002702 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10d      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d031      	beq.n	8002740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
 80026e4:	e02c      	b.n	8002740 <HAL_DMA_IRQHandler+0x2a0>
 80026e6:	bf00      	nop
 80026e8:	20000000 	.word	0x20000000
 80026ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d023      	beq.n	8002740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
 8002700:	e01e      	b.n	8002740 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10f      	bne.n	8002730 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0210 	bic.w	r2, r2, #16
 800271e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002744:	2b00      	cmp	r3, #0
 8002746:	d032      	beq.n	80027ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d022      	beq.n	800279a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2205      	movs	r2, #5
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	3301      	adds	r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	d307      	bcc.n	8002788 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f2      	bne.n	800276c <HAL_DMA_IRQHandler+0x2cc>
 8002786:	e000      	b.n	800278a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002788:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
 80027aa:	e000      	b.n	80027ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80027ac:	bf00      	nop
    }
  }
}
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b40      	cmp	r3, #64	@ 0x40
 80027f8:	d108      	bne.n	800280c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800280a:	e007      	b.n	800281c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	3b10      	subs	r3, #16
 8002838:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <DMA_CalcBaseAndBitshift+0x60>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002842:	4a12      	ldr	r2, [pc, #72]	@ (800288c <DMA_CalcBaseAndBitshift+0x64>)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d908      	bls.n	8002868 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <DMA_CalcBaseAndBitshift+0x68>)
 800285e:	4013      	ands	r3, r2
 8002860:	1d1a      	adds	r2, r3, #4
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	659a      	str	r2, [r3, #88]	@ 0x58
 8002866:	e006      	b.n	8002876 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <DMA_CalcBaseAndBitshift+0x68>)
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	aaaaaaab 	.word	0xaaaaaaab
 800288c:	0800ac98 	.word	0x0800ac98
 8002890:	fffffc00 	.word	0xfffffc00

08002894 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11f      	bne.n	80028ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d856      	bhi.n	8002962 <DMA_CheckFifoParam+0xce>
 80028b4:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <DMA_CheckFifoParam+0x28>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028df 	.word	0x080028df
 80028c4:	080028cd 	.word	0x080028cd
 80028c8:	08002963 	.word	0x08002963
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d046      	beq.n	8002966 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e043      	b.n	8002966 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028e6:	d140      	bne.n	800296a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ec:	e03d      	b.n	800296a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f6:	d121      	bne.n	800293c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d837      	bhi.n	800296e <DMA_CheckFifoParam+0xda>
 80028fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002904 <DMA_CheckFifoParam+0x70>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002915 	.word	0x08002915
 8002908:	0800291b 	.word	0x0800291b
 800290c:	08002915 	.word	0x08002915
 8002910:	0800292d 	.word	0x0800292d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e030      	b.n	800297c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d025      	beq.n	8002972 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292a:	e022      	b.n	8002972 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002934:	d11f      	bne.n	8002976 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800293a:	e01c      	b.n	8002976 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d903      	bls.n	800294a <DMA_CheckFifoParam+0xb6>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d003      	beq.n	8002950 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002948:	e018      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      break;
 800294e:	e015      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00e      	beq.n	800297a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      break;
 8002960:	e00b      	b.n	800297a <DMA_CheckFifoParam+0xe6>
      break;
 8002962:	bf00      	nop
 8002964:	e00a      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e008      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e006      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e004      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e002      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;   
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
    }
  } 
  
  return status; 
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	@ 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e175      	b.n	8002c98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f040 8164 	bne.w	8002c92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d005      	beq.n	80029e2 <HAL_GPIO_Init+0x56>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d130      	bne.n	8002a44 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 0201 	and.w	r2, r3, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d017      	beq.n	8002a80 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d123      	bne.n	8002ad4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	69b9      	ldr	r1, [r7, #24]
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80be 	beq.w	8002c92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	4b66      	ldr	r3, [pc, #408]	@ (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	4a65      	ldr	r2, [pc, #404]	@ (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b22:	4b63      	ldr	r3, [pc, #396]	@ (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b2e:	4a61      	ldr	r2, [pc, #388]	@ (8002cb4 <HAL_GPIO_Init+0x328>)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a58      	ldr	r2, [pc, #352]	@ (8002cb8 <HAL_GPIO_Init+0x32c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d037      	beq.n	8002bca <HAL_GPIO_Init+0x23e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a57      	ldr	r2, [pc, #348]	@ (8002cbc <HAL_GPIO_Init+0x330>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d031      	beq.n	8002bc6 <HAL_GPIO_Init+0x23a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a56      	ldr	r2, [pc, #344]	@ (8002cc0 <HAL_GPIO_Init+0x334>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d02b      	beq.n	8002bc2 <HAL_GPIO_Init+0x236>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a55      	ldr	r2, [pc, #340]	@ (8002cc4 <HAL_GPIO_Init+0x338>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d025      	beq.n	8002bbe <HAL_GPIO_Init+0x232>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a54      	ldr	r2, [pc, #336]	@ (8002cc8 <HAL_GPIO_Init+0x33c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01f      	beq.n	8002bba <HAL_GPIO_Init+0x22e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a53      	ldr	r2, [pc, #332]	@ (8002ccc <HAL_GPIO_Init+0x340>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x22a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a52      	ldr	r2, [pc, #328]	@ (8002cd0 <HAL_GPIO_Init+0x344>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x226>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a51      	ldr	r2, [pc, #324]	@ (8002cd4 <HAL_GPIO_Init+0x348>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x222>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a50      	ldr	r2, [pc, #320]	@ (8002cd8 <HAL_GPIO_Init+0x34c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x21e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002cdc <HAL_GPIO_Init+0x350>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x21a>
 8002ba2:	2309      	movs	r3, #9
 8002ba4:	e012      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	e010      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002baa:	2308      	movs	r3, #8
 8002bac:	e00e      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bae:	2307      	movs	r3, #7
 8002bb0:	e00c      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	e00a      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	@ (8002cb4 <HAL_GPIO_Init+0x328>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0e:	4a34      	ldr	r2, [pc, #208]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c14:	4b32      	ldr	r3, [pc, #200]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c38:	4a29      	ldr	r2, [pc, #164]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	f67f ae86 	bls.w	80029ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40021800 	.word	0x40021800
 8002cd4:	40021c00 	.word	0x40021c00
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40022400 	.word	0x40022400
 8002ce0:	40013c00 	.word	0x40013c00

08002ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf4:	787b      	ldrb	r3, [r7, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d00:	e003      	b.n	8002d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	619a      	str	r2, [r3, #24]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af02      	add	r7, sp, #8
 8002d1c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e108      	b.n	8002f3a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe ffd6 	bl	8001cf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d56:	d102      	bne.n	8002d5e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 f916 	bl	8006f94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7c1a      	ldrb	r2, [r3, #16]
 8002d70:	f88d 2000 	strb.w	r2, [sp]
 8002d74:	3304      	adds	r3, #4
 8002d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d78:	f004 f8b2 	bl	8006ee0 <USB_CoreInit>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0d5      	b.n	8002f3a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 f90e 	bl	8006fb6 <USB_SetCurrentMode>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0c6      	b.n	8002f3a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]
 8002db0:	e04a      	b.n	8002e48 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3315      	adds	r3, #21
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3314      	adds	r3, #20
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	b298      	uxth	r0, r3
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	332e      	adds	r3, #46	@ 0x2e
 8002dee:	4602      	mov	r2, r0
 8002df0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002df2:	7bfa      	ldrb	r2, [r7, #15]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3318      	adds	r3, #24
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	331c      	adds	r3, #28
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3320      	adds	r3, #32
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3324      	adds	r3, #36	@ 0x24
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	3301      	adds	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	791b      	ldrb	r3, [r3, #4]
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d3af      	bcc.n	8002db2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	e044      	b.n	8002ee2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	791b      	ldrb	r3, [r3, #4]
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d3b5      	bcc.n	8002e58 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7c1a      	ldrb	r2, [r3, #16]
 8002ef4:	f88d 2000 	strb.w	r2, [sp]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002efc:	f004 f8a8 	bl	8007050 <USB_DevInit>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e013      	b.n	8002f3a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7b1b      	ldrb	r3, [r3, #12]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d102      	bne.n	8002f2e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f80b 	bl	8002f44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fa63 	bl	80073fe <USB_DevDisconnect>

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f72:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	10000003 	.word	0x10000003

08002f8c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40007000 	.word	0x40007000

08002fac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	4a22      	ldr	r2, [pc, #136]	@ (8003044 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fce:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fda:	f7fe ff7f 	bl	8001edc <HAL_GetTick>
 8002fde:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fe0:	e009      	b.n	8002ff6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fe2:	f7fe ff7b 	bl	8001edc <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ff0:	d901      	bls.n	8002ff6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e022      	b.n	800303c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ff6:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003002:	d1ee      	bne.n	8002fe2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003004:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0f      	ldr	r2, [pc, #60]	@ (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 800300a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800300e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003010:	f7fe ff64 	bl	8001edc <HAL_GetTick>
 8003014:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003016:	e009      	b.n	800302c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003018:	f7fe ff60 	bl	8001edc <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003026:	d901      	bls.n	800302c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e007      	b.n	800303c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003038:	d1ee      	bne.n	8003018 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000

0800304c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003054:	2300      	movs	r3, #0
 8003056:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e29b      	b.n	800359a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8087 	beq.w	800317e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003070:	4b96      	ldr	r3, [pc, #600]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b04      	cmp	r3, #4
 800307a:	d00c      	beq.n	8003096 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307c:	4b93      	ldr	r3, [pc, #588]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d112      	bne.n	80030ae <HAL_RCC_OscConfig+0x62>
 8003088:	4b90      	ldr	r3, [pc, #576]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003090:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003094:	d10b      	bne.n	80030ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003096:	4b8d      	ldr	r3, [pc, #564]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d06c      	beq.n	800317c <HAL_RCC_OscConfig+0x130>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d168      	bne.n	800317c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e275      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b6:	d106      	bne.n	80030c6 <HAL_RCC_OscConfig+0x7a>
 80030b8:	4b84      	ldr	r3, [pc, #528]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a83      	ldr	r2, [pc, #524]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e02e      	b.n	8003124 <HAL_RCC_OscConfig+0xd8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x9c>
 80030ce:	4b7f      	ldr	r3, [pc, #508]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a7e      	ldr	r2, [pc, #504]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80030d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b7c      	ldr	r3, [pc, #496]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7b      	ldr	r2, [pc, #492]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80030e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e01d      	b.n	8003124 <HAL_RCC_OscConfig+0xd8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0xc0>
 80030f2:	4b76      	ldr	r3, [pc, #472]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a75      	ldr	r2, [pc, #468]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80030f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b73      	ldr	r3, [pc, #460]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a72      	ldr	r2, [pc, #456]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e00b      	b.n	8003124 <HAL_RCC_OscConfig+0xd8>
 800310c:	4b6f      	ldr	r3, [pc, #444]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a6e      	ldr	r2, [pc, #440]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b6c      	ldr	r3, [pc, #432]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6b      	ldr	r2, [pc, #428]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 800311e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe fed6 	bl	8001edc <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003134:	f7fe fed2 	bl	8001edc <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	@ 0x64
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e229      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	4b61      	ldr	r3, [pc, #388]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0xe8>
 8003152:	e014      	b.n	800317e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe fec2 	bl	8001edc <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800315c:	f7fe febe 	bl	8001edc <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	@ 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e215      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	4b57      	ldr	r3, [pc, #348]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x110>
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d069      	beq.n	800325e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800318a:	4b50      	ldr	r3, [pc, #320]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003196:	4b4d      	ldr	r3, [pc, #308]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d11c      	bne.n	80031dc <HAL_RCC_OscConfig+0x190>
 80031a2:	4b4a      	ldr	r3, [pc, #296]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d116      	bne.n	80031dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	4b47      	ldr	r3, [pc, #284]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d001      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e1e9      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c6:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	493d      	ldr	r1, [pc, #244]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	e040      	b.n	800325e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d023      	beq.n	800322c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e4:	4b39      	ldr	r3, [pc, #228]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a38      	ldr	r2, [pc, #224]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fe74 	bl	8001edc <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe fe70 	bl	8001edc <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e1c7      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320a:	4b30      	ldr	r3, [pc, #192]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003216:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4929      	ldr	r1, [pc, #164]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
 800322a:	e018      	b.n	800325e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322c:	4b27      	ldr	r3, [pc, #156]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a26      	ldr	r2, [pc, #152]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fe50 	bl	8001edc <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003240:	f7fe fe4c 	bl	8001edc <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1a3      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	4b1e      	ldr	r3, [pc, #120]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d038      	beq.n	80032dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d019      	beq.n	80032a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003272:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003276:	4a15      	ldr	r2, [pc, #84]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327e:	f7fe fe2d 	bl	8001edc <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003286:	f7fe fe29 	bl	8001edc <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e180      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003298:	4b0c      	ldr	r3, [pc, #48]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 800329a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x23a>
 80032a4:	e01a      	b.n	80032dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a6:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80032a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032aa:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe fe13 	bl	8001edc <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ba:	f7fe fe0f 	bl	8001edc <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d903      	bls.n	80032d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e166      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
 80032cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	4b92      	ldr	r3, [pc, #584]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80a4 	beq.w	8003432 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b8c      	ldr	r3, [pc, #560]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	4b89      	ldr	r3, [pc, #548]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	4a88      	ldr	r2, [pc, #544]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003300:	6413      	str	r3, [r2, #64]	@ 0x40
 8003302:	4b86      	ldr	r3, [pc, #536]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003312:	4b83      	ldr	r3, [pc, #524]	@ (8003520 <HAL_RCC_OscConfig+0x4d4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d118      	bne.n	8003350 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800331e:	4b80      	ldr	r3, [pc, #512]	@ (8003520 <HAL_RCC_OscConfig+0x4d4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7f      	ldr	r2, [pc, #508]	@ (8003520 <HAL_RCC_OscConfig+0x4d4>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332a:	f7fe fdd7 	bl	8001edc <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003332:	f7fe fdd3 	bl	8001edc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b64      	cmp	r3, #100	@ 0x64
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e12a      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003344:	4b76      	ldr	r3, [pc, #472]	@ (8003520 <HAL_RCC_OscConfig+0x4d4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x31a>
 8003358:	4b70      	ldr	r3, [pc, #448]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	4a6f      	ldr	r2, [pc, #444]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6713      	str	r3, [r2, #112]	@ 0x70
 8003364:	e02d      	b.n	80033c2 <HAL_RCC_OscConfig+0x376>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x33c>
 800336e:	4b6b      	ldr	r3, [pc, #428]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003372:	4a6a      	ldr	r2, [pc, #424]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6713      	str	r3, [r2, #112]	@ 0x70
 800337a:	4b68      	ldr	r3, [pc, #416]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337e:	4a67      	ldr	r2, [pc, #412]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	@ 0x70
 8003386:	e01c      	b.n	80033c2 <HAL_RCC_OscConfig+0x376>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_OscConfig+0x35e>
 8003390:	4b62      	ldr	r3, [pc, #392]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003394:	4a61      	ldr	r2, [pc, #388]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6713      	str	r3, [r2, #112]	@ 0x70
 800339c:	4b5f      	ldr	r3, [pc, #380]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a0:	4a5e      	ldr	r2, [pc, #376]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a8:	e00b      	b.n	80033c2 <HAL_RCC_OscConfig+0x376>
 80033aa:	4b5c      	ldr	r3, [pc, #368]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	4a5b      	ldr	r2, [pc, #364]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b6:	4b59      	ldr	r3, [pc, #356]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	4a58      	ldr	r2, [pc, #352]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d015      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe fd87 	bl	8001edc <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe fd83 	bl	8001edc <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0d8      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	4b4c      	ldr	r3, [pc, #304]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ee      	beq.n	80033d2 <HAL_RCC_OscConfig+0x386>
 80033f4:	e014      	b.n	8003420 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fe fd71 	bl	8001edc <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe fd6d 	bl	8001edc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0c2      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	4b41      	ldr	r3, [pc, #260]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ee      	bne.n	80033fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b3d      	ldr	r3, [pc, #244]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	4a3c      	ldr	r2, [pc, #240]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003430:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80ae 	beq.w	8003598 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343c:	4b37      	ldr	r3, [pc, #220]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d06d      	beq.n	8003524 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d14b      	bne.n	80034e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b32      	ldr	r3, [pc, #200]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a31      	ldr	r2, [pc, #196]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fd3e 	bl	8001edc <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fd3a 	bl	8001edc <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e091      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b29      	ldr	r3, [pc, #164]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	071b      	lsls	r3, r3, #28
 80034ae:	491b      	ldr	r1, [pc, #108]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b4:	4b19      	ldr	r3, [pc, #100]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a18      	ldr	r2, [pc, #96]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fd0c 	bl	8001edc <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fd08 	bl	8001edc <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e05f      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b10      	ldr	r3, [pc, #64]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x47c>
 80034e6:	e057      	b.n	8003598 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e8:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0b      	ldr	r2, [pc, #44]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe fcf2 	bl	8001edc <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe fcee 	bl	8001edc <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e045      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b03      	ldr	r3, [pc, #12]	@ (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x4b0>
 800351a:	e03d      	b.n	8003598 <HAL_RCC_OscConfig+0x54c>
 800351c:	40023800 	.word	0x40023800
 8003520:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003524:	4b1f      	ldr	r3, [pc, #124]	@ (80035a4 <HAL_RCC_OscConfig+0x558>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d030      	beq.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d129      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d122      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003554:	4013      	ands	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800355a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800355c:	4293      	cmp	r3, r2
 800355e:	d119      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	3b01      	subs	r3, #1
 800356e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d10f      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d107      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0d0      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c0:	4b6a      	ldr	r3, [pc, #424]	@ (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d910      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b67      	ldr	r3, [pc, #412]	@ (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 020f 	bic.w	r2, r3, #15
 80035d6:	4965      	ldr	r1, [pc, #404]	@ (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b63      	ldr	r3, [pc, #396]	@ (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b59      	ldr	r3, [pc, #356]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a58      	ldr	r2, [pc, #352]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4b53      	ldr	r3, [pc, #332]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a52      	ldr	r2, [pc, #328]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800362a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b50      	ldr	r3, [pc, #320]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	494d      	ldr	r1, [pc, #308]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d040      	beq.n	80036cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b47      	ldr	r3, [pc, #284]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d115      	bne.n	800368a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366a:	4b41      	ldr	r3, [pc, #260]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e073      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367a:	4b3d      	ldr	r3, [pc, #244]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06b      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b39      	ldr	r3, [pc, #228]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4936      	ldr	r1, [pc, #216]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fe fc1e 	bl	8001edc <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fe fc1a 	bl	8001edc <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e053      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036cc:	4b27      	ldr	r3, [pc, #156]	@ (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d210      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b24      	ldr	r3, [pc, #144]	@ (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 020f 	bic.w	r2, r3, #15
 80036e2:	4922      	ldr	r1, [pc, #136]	@ (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	@ (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e032      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4916      	ldr	r1, [pc, #88]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490e      	ldr	r1, [pc, #56]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f821 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490a      	ldr	r1, [pc, #40]	@ (8003774 <HAL_RCC_ClockConfig+0x1cc>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a09      	ldr	r2, [pc, #36]	@ (8003778 <HAL_RCC_ClockConfig+0x1d0>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003756:	4b09      	ldr	r3, [pc, #36]	@ (800377c <HAL_RCC_ClockConfig+0x1d4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fb7a 	bl	8001e54 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023c00 	.word	0x40023c00
 8003770:	40023800 	.word	0x40023800
 8003774:	0800ac80 	.word	0x0800ac80
 8003778:	20000000 	.word	0x20000000
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	b094      	sub	sp, #80	@ 0x50
 8003786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	647b      	str	r3, [r7, #68]	@ 0x44
 800378c:	2300      	movs	r3, #0
 800378e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003790:	2300      	movs	r3, #0
 8003792:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003798:	4b79      	ldr	r3, [pc, #484]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d00d      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x40>
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	f200 80e1 	bhi.w	800396c <HAL_RCC_GetSysClockFreq+0x1ec>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x3a>
 80037b2:	e0db      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b73      	ldr	r3, [pc, #460]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x204>)
 80037b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037b8:	e0db      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ba:	4b73      	ldr	r3, [pc, #460]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x208>)
 80037bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037be:	e0d8      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d063      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	2200      	movs	r2, #0
 80037de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ea:	2300      	movs	r3, #0
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	f04f 0000 	mov.w	r0, #0
 80037fa:	f04f 0100 	mov.w	r1, #0
 80037fe:	0159      	lsls	r1, r3, #5
 8003800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003804:	0150      	lsls	r0, r2, #5
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4621      	mov	r1, r4
 800380c:	1a51      	subs	r1, r2, r1
 800380e:	6139      	str	r1, [r7, #16]
 8003810:	4629      	mov	r1, r5
 8003812:	eb63 0301 	sbc.w	r3, r3, r1
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003824:	4659      	mov	r1, fp
 8003826:	018b      	lsls	r3, r1, #6
 8003828:	4651      	mov	r1, sl
 800382a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800382e:	4651      	mov	r1, sl
 8003830:	018a      	lsls	r2, r1, #6
 8003832:	4651      	mov	r1, sl
 8003834:	ebb2 0801 	subs.w	r8, r2, r1
 8003838:	4659      	mov	r1, fp
 800383a:	eb63 0901 	sbc.w	r9, r3, r1
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800384e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003852:	4690      	mov	r8, r2
 8003854:	4699      	mov	r9, r3
 8003856:	4623      	mov	r3, r4
 8003858:	eb18 0303 	adds.w	r3, r8, r3
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	462b      	mov	r3, r5
 8003860:	eb49 0303 	adc.w	r3, r9, r3
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003872:	4629      	mov	r1, r5
 8003874:	024b      	lsls	r3, r1, #9
 8003876:	4621      	mov	r1, r4
 8003878:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800387c:	4621      	mov	r1, r4
 800387e:	024a      	lsls	r2, r1, #9
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003886:	2200      	movs	r2, #0
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800388a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800388c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003890:	f7fc fcde 	bl	8000250 <__aeabi_uldivmod>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4613      	mov	r3, r2
 800389a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800389c:	e058      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389e:	4b38      	ldr	r3, [pc, #224]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	2200      	movs	r2, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	4611      	mov	r1, r2
 80038aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ae:	623b      	str	r3, [r7, #32]
 80038b0:	2300      	movs	r3, #0
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038b8:	4642      	mov	r2, r8
 80038ba:	464b      	mov	r3, r9
 80038bc:	f04f 0000 	mov.w	r0, #0
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	0159      	lsls	r1, r3, #5
 80038c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ca:	0150      	lsls	r0, r2, #5
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4641      	mov	r1, r8
 80038d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038d6:	4649      	mov	r1, r9
 80038d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f0:	ebb2 040a 	subs.w	r4, r2, sl
 80038f4:	eb63 050b 	sbc.w	r5, r3, fp
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	00eb      	lsls	r3, r5, #3
 8003902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003906:	00e2      	lsls	r2, r4, #3
 8003908:	4614      	mov	r4, r2
 800390a:	461d      	mov	r5, r3
 800390c:	4643      	mov	r3, r8
 800390e:	18e3      	adds	r3, r4, r3
 8003910:	603b      	str	r3, [r7, #0]
 8003912:	464b      	mov	r3, r9
 8003914:	eb45 0303 	adc.w	r3, r5, r3
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003926:	4629      	mov	r1, r5
 8003928:	028b      	lsls	r3, r1, #10
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003930:	4621      	mov	r1, r4
 8003932:	028a      	lsls	r2, r1, #10
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393a:	2200      	movs	r2, #0
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	61fa      	str	r2, [r7, #28]
 8003940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003944:	f7fc fc84 	bl	8000250 <__aeabi_uldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4613      	mov	r3, r2
 800394e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x200>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003960:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800396a:	e002      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800396c:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x204>)
 800396e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003974:	4618      	mov	r0, r3
 8003976:	3750      	adds	r7, #80	@ 0x50
 8003978:	46bd      	mov	sp, r7
 800397a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	00f42400 	.word	0x00f42400
 8003988:	007a1200 	.word	0x007a1200

0800398c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000000 	.word	0x20000000

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a8:	f7ff fff0 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0a9b      	lsrs	r3, r3, #10
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	@ (80039c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	0800ac90 	.word	0x0800ac90

080039cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d0:	f7ff ffdc 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0b5b      	lsrs	r3, r3, #13
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4903      	ldr	r1, [pc, #12]	@ (80039f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	0800ac90 	.word	0x0800ac90

080039f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a1c:	4b69      	ldr	r3, [pc, #420]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a68      	ldr	r2, [pc, #416]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a26:	6093      	str	r3, [r2, #8]
 8003a28:	4b66      	ldr	r3, [pc, #408]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	4964      	ldr	r1, [pc, #400]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d017      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5c:	4959      	ldr	r1, [pc, #356]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d017      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	494a      	ldr	r1, [pc, #296]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aa8:	d101      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 808b 	beq.w	8003bee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	4a39      	ldr	r2, [pc, #228]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae4:	4b37      	ldr	r3, [pc, #220]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003af0:	4b35      	ldr	r3, [pc, #212]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a34      	ldr	r2, [pc, #208]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afc:	f7fe f9ee 	bl	8001edc <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7fe f9ea 	bl	8001edc <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e38f      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b16:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b22:	4b28      	ldr	r3, [pc, #160]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d035      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d02e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b40:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b54:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b56:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b62:	4a18      	ldr	r2, [pc, #96]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b68:	4b16      	ldr	r3, [pc, #88]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d114      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe f9b2 	bl	8001edc <HAL_GetTick>
 8003b78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe f9ae 	bl	8001edc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e351      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ee      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003baa:	d111      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bb8:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bba:	400b      	ands	r3, r1
 8003bbc:	4901      	ldr	r1, [pc, #4]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	0ffffcff 	.word	0x0ffffcff
 8003bd0:	4bac      	ldr	r3, [pc, #688]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4aab      	ldr	r2, [pc, #684]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bda:	6093      	str	r3, [r2, #8]
 8003bdc:	4ba9      	ldr	r3, [pc, #676]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	49a6      	ldr	r1, [pc, #664]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfa:	4ba2      	ldr	r3, [pc, #648]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c00:	4aa0      	ldr	r2, [pc, #640]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	499b      	ldr	r1, [pc, #620]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c28:	4b96      	ldr	r3, [pc, #600]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c36:	4993      	ldr	r1, [pc, #588]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4a:	4b8e      	ldr	r3, [pc, #568]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c58:	498a      	ldr	r1, [pc, #552]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c6c:	4b85      	ldr	r3, [pc, #532]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7a:	4982      	ldr	r1, [pc, #520]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	4979      	ldr	r1, [pc, #484]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb0:	4b74      	ldr	r3, [pc, #464]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	4971      	ldr	r1, [pc, #452]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd8:	f023 020c 	bic.w	r2, r3, #12
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce0:	4968      	ldr	r1, [pc, #416]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf4:	4b63      	ldr	r3, [pc, #396]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d02:	4960      	ldr	r1, [pc, #384]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d16:	4b5b      	ldr	r3, [pc, #364]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d24:	4957      	ldr	r1, [pc, #348]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d38:	4b52      	ldr	r3, [pc, #328]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	494f      	ldr	r1, [pc, #316]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	4946      	ldr	r1, [pc, #280]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d7c:	4b41      	ldr	r3, [pc, #260]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8a:	493e      	ldr	r1, [pc, #248]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d9e:	4b39      	ldr	r3, [pc, #228]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dac:	4935      	ldr	r1, [pc, #212]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc0:	4b30      	ldr	r3, [pc, #192]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dce:	492d      	ldr	r1, [pc, #180]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d011      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003de2:	4b28      	ldr	r3, [pc, #160]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df0:	4924      	ldr	r1, [pc, #144]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e22:	4b18      	ldr	r3, [pc, #96]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e30:	4914      	ldr	r1, [pc, #80]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e54:	490b      	ldr	r1, [pc, #44]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00f      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e68:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e78:	4902      	ldr	r1, [pc, #8]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e80:	e002      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00b      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e94:	4b8a      	ldr	r3, [pc, #552]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	4986      	ldr	r1, [pc, #536]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003eb8:	4b81      	ldr	r3, [pc, #516]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ebe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ec8:	497d      	ldr	r1, [pc, #500]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d006      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80d6 	beq.w	8004090 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ee4:	4b76      	ldr	r3, [pc, #472]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a75      	ldr	r2, [pc, #468]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fd fff4 	bl	8001edc <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef8:	f7fd fff0 	bl	8001edc <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	@ 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e195      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d021      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d11d      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f2a:	4b65      	ldr	r3, [pc, #404]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f38:	4b61      	ldr	r3, [pc, #388]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f3e:	0e1b      	lsrs	r3, r3, #24
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	019a      	lsls	r2, r3, #6
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4958      	ldr	r1, [pc, #352]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02e      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f90:	d129      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f92:	4b4b      	ldr	r3, [pc, #300]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fa0:	4b47      	ldr	r3, [pc, #284]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa6:	0f1b      	lsrs	r3, r3, #28
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	019a      	lsls	r2, r3, #6
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	071b      	lsls	r3, r3, #28
 8003fc6:	493e      	ldr	r1, [pc, #248]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fce:	4b3c      	ldr	r3, [pc, #240]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd4:	f023 021f 	bic.w	r2, r3, #31
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	4938      	ldr	r1, [pc, #224]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01d      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff2:	4b33      	ldr	r3, [pc, #204]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff8:	0e1b      	lsrs	r3, r3, #24
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004000:	4b2f      	ldr	r3, [pc, #188]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004006:	0f1b      	lsrs	r3, r3, #28
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	019a      	lsls	r2, r3, #6
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	431a      	orrs	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	061b      	lsls	r3, r3, #24
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	071b      	lsls	r3, r3, #28
 8004026:	4926      	ldr	r1, [pc, #152]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d011      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	019a      	lsls	r2, r3, #6
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	071b      	lsls	r3, r3, #28
 8004056:	491a      	ldr	r1, [pc, #104]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800405e:	4b18      	ldr	r3, [pc, #96]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a17      	ldr	r2, [pc, #92]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406a:	f7fd ff37 	bl	8001edc <HAL_GetTick>
 800406e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004072:	f7fd ff33 	bl	8001edc <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b64      	cmp	r3, #100	@ 0x64
 800407e:	d901      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0d8      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004084:	4b0e      	ldr	r3, [pc, #56]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	f040 80ce 	bne.w	8004234 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004098:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a08      	ldr	r2, [pc, #32]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fd ff1a 	bl	8001edc <HAL_GetTick>
 80040a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040aa:	e00b      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040ac:	f7fd ff16 	bl	8001edc <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	@ 0x64
 80040b8:	d904      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0bb      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d0:	d0ec      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d02e      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d12a      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040fa:	4b51      	ldr	r3, [pc, #324]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004108:	4b4d      	ldr	r3, [pc, #308]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	0f1b      	lsrs	r3, r3, #28
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	019a      	lsls	r2, r3, #6
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	431a      	orrs	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	071b      	lsls	r3, r3, #28
 800412e:	4944      	ldr	r1, [pc, #272]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004136:	4b42      	ldr	r3, [pc, #264]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004138:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800413c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	3b01      	subs	r3, #1
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	493d      	ldr	r1, [pc, #244]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d022      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004164:	d11d      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004166:	4b36      	ldr	r3, [pc, #216]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416c:	0e1b      	lsrs	r3, r3, #24
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004174:	4b32      	ldr	r3, [pc, #200]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417a:	0f1b      	lsrs	r3, r3, #28
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	019a      	lsls	r2, r3, #6
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	431a      	orrs	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	431a      	orrs	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	071b      	lsls	r3, r3, #28
 800419a:	4929      	ldr	r1, [pc, #164]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d028      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ae:	4b24      	ldr	r3, [pc, #144]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b4:	0e1b      	lsrs	r3, r3, #24
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041bc:	4b20      	ldr	r3, [pc, #128]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	0c1b      	lsrs	r3, r3, #16
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	019a      	lsls	r2, r3, #6
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	431a      	orrs	r2, r3
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	071b      	lsls	r3, r3, #28
 80041e2:	4917      	ldr	r1, [pc, #92]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041ea:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	4911      	ldr	r1, [pc, #68]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004200:	4b0f      	ldr	r3, [pc, #60]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0e      	ldr	r2, [pc, #56]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fd fe66 	bl	8001edc <HAL_GetTick>
 8004210:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004214:	f7fd fe62 	bl	8001edc <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b64      	cmp	r3, #100	@ 0x64
 8004220:	d901      	bls.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e007      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800422e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004232:	d1ef      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800

08004244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e049      	b.n	80042ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd fad8 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f000 fd78 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e054      	b.n	80043b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a26      	ldr	r2, [pc, #152]	@ (80043c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d022      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004336:	d01d      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a22      	ldr	r2, [pc, #136]	@ (80043c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a21      	ldr	r2, [pc, #132]	@ (80043cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1f      	ldr	r2, [pc, #124]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1e      	ldr	r2, [pc, #120]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1c      	ldr	r2, [pc, #112]	@ (80043d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1b      	ldr	r2, [pc, #108]	@ (80043dc <HAL_TIM_Base_Start_IT+0xe8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d115      	bne.n	80043a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	4b19      	ldr	r3, [pc, #100]	@ (80043e0 <HAL_TIM_Base_Start_IT+0xec>)
 800437c:	4013      	ands	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b06      	cmp	r3, #6
 8004384:	d015      	beq.n	80043b2 <HAL_TIM_Base_Start_IT+0xbe>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438c:	d011      	beq.n	80043b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0201 	orr.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439e:	e008      	b.n	80043b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e000      	b.n	80043b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40010000 	.word	0x40010000
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40000800 	.word	0x40000800
 80043d0:	40000c00 	.word	0x40000c00
 80043d4:	40010400 	.word	0x40010400
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40001800 	.word	0x40001800
 80043e0:	00010007 	.word	0x00010007

080043e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e049      	b.n	800448a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd f9ac 	bl	8001768 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fca8 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <HAL_TIM_PWM_Start+0x24>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e03c      	b.n	8004532 <HAL_TIM_PWM_Start+0x9e>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d109      	bne.n	80044d2 <HAL_TIM_PWM_Start+0x3e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	e02f      	b.n	8004532 <HAL_TIM_PWM_Start+0x9e>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d109      	bne.n	80044ec <HAL_TIM_PWM_Start+0x58>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e022      	b.n	8004532 <HAL_TIM_PWM_Start+0x9e>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d109      	bne.n	8004506 <HAL_TIM_PWM_Start+0x72>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e015      	b.n	8004532 <HAL_TIM_PWM_Start+0x9e>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b10      	cmp	r3, #16
 800450a:	d109      	bne.n	8004520 <HAL_TIM_PWM_Start+0x8c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e008      	b.n	8004532 <HAL_TIM_PWM_Start+0x9e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e092      	b.n	8004660 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Start+0xb6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004548:	e023      	b.n	8004592 <HAL_TIM_PWM_Start+0xfe>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d104      	bne.n	800455a <HAL_TIM_PWM_Start+0xc6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004558:	e01b      	b.n	8004592 <HAL_TIM_PWM_Start+0xfe>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Start+0xd6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004568:	e013      	b.n	8004592 <HAL_TIM_PWM_Start+0xfe>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b0c      	cmp	r3, #12
 800456e:	d104      	bne.n	800457a <HAL_TIM_PWM_Start+0xe6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004578:	e00b      	b.n	8004592 <HAL_TIM_PWM_Start+0xfe>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b10      	cmp	r3, #16
 800457e:	d104      	bne.n	800458a <HAL_TIM_PWM_Start+0xf6>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004588:	e003      	b.n	8004592 <HAL_TIM_PWM_Start+0xfe>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2201      	movs	r2, #1
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fef6 	bl	800538c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a30      	ldr	r2, [pc, #192]	@ (8004668 <HAL_TIM_PWM_Start+0x1d4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIM_PWM_Start+0x120>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2f      	ldr	r2, [pc, #188]	@ (800466c <HAL_TIM_PWM_Start+0x1d8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_PWM_Start+0x124>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_TIM_PWM_Start+0x126>
 80045b8:	2300      	movs	r3, #0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a25      	ldr	r2, [pc, #148]	@ (8004668 <HAL_TIM_PWM_Start+0x1d4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_TIM_PWM_Start+0x18a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e0:	d01d      	beq.n	800461e <HAL_TIM_PWM_Start+0x18a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a22      	ldr	r2, [pc, #136]	@ (8004670 <HAL_TIM_PWM_Start+0x1dc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_TIM_PWM_Start+0x18a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a20      	ldr	r2, [pc, #128]	@ (8004674 <HAL_TIM_PWM_Start+0x1e0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_TIM_PWM_Start+0x18a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004678 <HAL_TIM_PWM_Start+0x1e4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_PWM_Start+0x18a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a19      	ldr	r2, [pc, #100]	@ (800466c <HAL_TIM_PWM_Start+0x1d8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIM_PWM_Start+0x18a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1b      	ldr	r2, [pc, #108]	@ (800467c <HAL_TIM_PWM_Start+0x1e8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIM_PWM_Start+0x18a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a19      	ldr	r2, [pc, #100]	@ (8004680 <HAL_TIM_PWM_Start+0x1ec>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d115      	bne.n	800464a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	4b17      	ldr	r3, [pc, #92]	@ (8004684 <HAL_TIM_PWM_Start+0x1f0>)
 8004626:	4013      	ands	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d015      	beq.n	800465c <HAL_TIM_PWM_Start+0x1c8>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004636:	d011      	beq.n	800465c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	e008      	b.n	800465c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e000      	b.n	800465e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40010000 	.word	0x40010000
 800466c:	40010400 	.word	0x40010400
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00
 800467c:	40014000 	.word	0x40014000
 8004680:	40001800 	.word	0x40001800
 8004684:	00010007 	.word	0x00010007

08004688 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e08f      	b.n	80047bc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7fc ff0f 	bl	80014d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6899      	ldr	r1, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b3e      	ldr	r3, [pc, #248]	@ (80047c4 <HAL_TIM_Encoder_Init+0x13c>)
 80046ca:	400b      	ands	r3, r1
 80046cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 fb4d 	bl	8004d78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <HAL_TIM_Encoder_Init+0x140>)
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	4313      	orrs	r3, r2
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4b2b      	ldr	r3, [pc, #172]	@ (80047cc <HAL_TIM_Encoder_Init+0x144>)
 800471e:	4013      	ands	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4b2a      	ldr	r3, [pc, #168]	@ (80047d0 <HAL_TIM_Encoder_Init+0x148>)
 8004726:	4013      	ands	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	4313      	orrs	r3, r2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	011a      	lsls	r2, r3, #4
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	031b      	lsls	r3, r3, #12
 8004748:	4313      	orrs	r3, r2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004756:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	4313      	orrs	r3, r2
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	fffebff8 	.word	0xfffebff8
 80047c8:	fffffcfc 	.word	0xfffffcfc
 80047cc:	fffff3f3 	.word	0xfffff3f3
 80047d0:	ffff0f0f 	.word	0xffff0f0f

080047d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d110      	bne.n	8004826 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d102      	bne.n	8004810 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800480a:	7b7b      	ldrb	r3, [r7, #13]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d001      	beq.n	8004814 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e069      	b.n	80048e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004824:	e031      	b.n	800488a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b04      	cmp	r3, #4
 800482a:	d110      	bne.n	800484e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800482c:	7bbb      	ldrb	r3, [r7, #14]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d102      	bne.n	8004838 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004832:	7b3b      	ldrb	r3, [r7, #12]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d001      	beq.n	800483c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e055      	b.n	80048e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800484c:	e01d      	b.n	800488a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d108      	bne.n	8004866 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004854:	7bbb      	ldrb	r3, [r7, #14]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d105      	bne.n	8004866 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800485a:	7b7b      	ldrb	r3, [r7, #13]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d102      	bne.n	8004866 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004860:	7b3b      	ldrb	r3, [r7, #12]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e03e      	b.n	80048e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2202      	movs	r2, #2
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_TIM_Encoder_Start+0xc4>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b04      	cmp	r3, #4
 8004894:	d008      	beq.n	80048a8 <HAL_TIM_Encoder_Start+0xd4>
 8004896:	e00f      	b.n	80048b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2201      	movs	r2, #1
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fd73 	bl	800538c <TIM_CCxChannelCmd>
      break;
 80048a6:	e016      	b.n	80048d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2201      	movs	r2, #1
 80048ae:	2104      	movs	r1, #4
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fd6b 	bl	800538c <TIM_CCxChannelCmd>
      break;
 80048b6:	e00e      	b.n	80048d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2201      	movs	r2, #1
 80048be:	2100      	movs	r1, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fd63 	bl	800538c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2201      	movs	r2, #1
 80048cc:	2104      	movs	r1, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fd5c 	bl	800538c <TIM_CCxChannelCmd>
      break;
 80048d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d020      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0202 	mvn.w	r2, #2
 8004924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9fe 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9f0 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa01 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0204 	mvn.w	r2, #4
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9d8 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9ca 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f9db 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d020      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01b      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0208 	mvn.w	r2, #8
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2204      	movs	r2, #4
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f9b2 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f9a4 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f9b5 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d020      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01b      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0210 	mvn.w	r2, #16
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f98c 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f97e 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f98f 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0201 	mvn.w	r2, #1
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fc f800 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fd3f 	bl	8005508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00c      	beq.n	8004aae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fd37 	bl	800551c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00c      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f949 	bl	8004d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00c      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0220 	mvn.w	r2, #32
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fcff 	bl	80054f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e0ff      	b.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b14      	cmp	r3, #20
 8004b2a:	f200 80f0 	bhi.w	8004d0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b89 	.word	0x08004b89
 8004b38:	08004d0f 	.word	0x08004d0f
 8004b3c:	08004d0f 	.word	0x08004d0f
 8004b40:	08004d0f 	.word	0x08004d0f
 8004b44:	08004bc9 	.word	0x08004bc9
 8004b48:	08004d0f 	.word	0x08004d0f
 8004b4c:	08004d0f 	.word	0x08004d0f
 8004b50:	08004d0f 	.word	0x08004d0f
 8004b54:	08004c0b 	.word	0x08004c0b
 8004b58:	08004d0f 	.word	0x08004d0f
 8004b5c:	08004d0f 	.word	0x08004d0f
 8004b60:	08004d0f 	.word	0x08004d0f
 8004b64:	08004c4b 	.word	0x08004c4b
 8004b68:	08004d0f 	.word	0x08004d0f
 8004b6c:	08004d0f 	.word	0x08004d0f
 8004b70:	08004d0f 	.word	0x08004d0f
 8004b74:	08004c8d 	.word	0x08004c8d
 8004b78:	08004d0f 	.word	0x08004d0f
 8004b7c:	08004d0f 	.word	0x08004d0f
 8004b80:	08004d0f 	.word	0x08004d0f
 8004b84:	08004ccd 	.word	0x08004ccd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f99e 	bl	8004ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0208 	orr.w	r2, r2, #8
 8004ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0204 	bic.w	r2, r2, #4
 8004bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	619a      	str	r2, [r3, #24]
      break;
 8004bc6:	e0a5      	b.n	8004d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f9f0 	bl	8004fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6999      	ldr	r1, [r3, #24]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	021a      	lsls	r2, r3, #8
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	619a      	str	r2, [r3, #24]
      break;
 8004c08:	e084      	b.n	8004d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fa47 	bl	80050a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0208 	orr.w	r2, r2, #8
 8004c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0204 	bic.w	r2, r2, #4
 8004c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69d9      	ldr	r1, [r3, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	61da      	str	r2, [r3, #28]
      break;
 8004c48:	e064      	b.n	8004d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fa9d 	bl	8005190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69d9      	ldr	r1, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	021a      	lsls	r2, r3, #8
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	61da      	str	r2, [r3, #28]
      break;
 8004c8a:	e043      	b.n	8004d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fad4 	bl	8005240 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0208 	orr.w	r2, r2, #8
 8004ca6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0204 	bic.w	r2, r2, #4
 8004cb6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004cca:	e023      	b.n	8004d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fb06 	bl	80052e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ce6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	021a      	lsls	r2, r3, #8
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d0c:	e002      	b.n	8004d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
      break;
 8004d12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop

08004d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a46      	ldr	r2, [pc, #280]	@ (8004ea4 <TIM_Base_SetConfig+0x12c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d96:	d00f      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a43      	ldr	r2, [pc, #268]	@ (8004ea8 <TIM_Base_SetConfig+0x130>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a42      	ldr	r2, [pc, #264]	@ (8004eac <TIM_Base_SetConfig+0x134>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a41      	ldr	r2, [pc, #260]	@ (8004eb0 <TIM_Base_SetConfig+0x138>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a40      	ldr	r2, [pc, #256]	@ (8004eb4 <TIM_Base_SetConfig+0x13c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d108      	bne.n	8004dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a35      	ldr	r2, [pc, #212]	@ (8004ea4 <TIM_Base_SetConfig+0x12c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d02b      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd8:	d027      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a32      	ldr	r2, [pc, #200]	@ (8004ea8 <TIM_Base_SetConfig+0x130>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d023      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a31      	ldr	r2, [pc, #196]	@ (8004eac <TIM_Base_SetConfig+0x134>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01f      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a30      	ldr	r2, [pc, #192]	@ (8004eb0 <TIM_Base_SetConfig+0x138>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01b      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2f      	ldr	r2, [pc, #188]	@ (8004eb4 <TIM_Base_SetConfig+0x13c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d017      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb8 <TIM_Base_SetConfig+0x140>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2d      	ldr	r2, [pc, #180]	@ (8004ebc <TIM_Base_SetConfig+0x144>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00f      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec0 <TIM_Base_SetConfig+0x148>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec4 <TIM_Base_SetConfig+0x14c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec8 <TIM_Base_SetConfig+0x150>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a29      	ldr	r2, [pc, #164]	@ (8004ecc <TIM_Base_SetConfig+0x154>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d108      	bne.n	8004e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a10      	ldr	r2, [pc, #64]	@ (8004ea4 <TIM_Base_SetConfig+0x12c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_Base_SetConfig+0xf8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a12      	ldr	r2, [pc, #72]	@ (8004eb4 <TIM_Base_SetConfig+0x13c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d103      	bne.n	8004e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f023 0201 	bic.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	611a      	str	r2, [r3, #16]
  }
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800
 8004ec4:	40001800 	.word	0x40001800
 8004ec8:	40001c00 	.word	0x40001c00
 8004ecc:	40002000 	.word	0x40002000

08004ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f023 0201 	bic.w	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa8 <TIM_OC1_SetConfig+0xd8>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 0302 	bic.w	r3, r3, #2
 8004f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a21      	ldr	r2, [pc, #132]	@ (8004fac <TIM_OC1_SetConfig+0xdc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_OC1_SetConfig+0x64>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a20      	ldr	r2, [pc, #128]	@ (8004fb0 <TIM_OC1_SetConfig+0xe0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10c      	bne.n	8004f4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0308 	bic.w	r3, r3, #8
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 0304 	bic.w	r3, r3, #4
 8004f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a16      	ldr	r2, [pc, #88]	@ (8004fac <TIM_OC1_SetConfig+0xdc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_OC1_SetConfig+0x8e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a15      	ldr	r2, [pc, #84]	@ (8004fb0 <TIM_OC1_SetConfig+0xe0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d111      	bne.n	8004f82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	621a      	str	r2, [r3, #32]
}
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	fffeff8f 	.word	0xfffeff8f
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40010400 	.word	0x40010400

08004fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f023 0210 	bic.w	r2, r3, #16
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4b2e      	ldr	r3, [pc, #184]	@ (8005098 <TIM_OC2_SetConfig+0xe4>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 0320 	bic.w	r3, r3, #32
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a23      	ldr	r2, [pc, #140]	@ (800509c <TIM_OC2_SetConfig+0xe8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_OC2_SetConfig+0x68>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a22      	ldr	r2, [pc, #136]	@ (80050a0 <TIM_OC2_SetConfig+0xec>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d10d      	bne.n	8005038 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005036:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a18      	ldr	r2, [pc, #96]	@ (800509c <TIM_OC2_SetConfig+0xe8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_OC2_SetConfig+0x94>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a17      	ldr	r2, [pc, #92]	@ (80050a0 <TIM_OC2_SetConfig+0xec>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d113      	bne.n	8005070 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800504e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005056:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	feff8fff 	.word	0xfeff8fff
 800509c:	40010000 	.word	0x40010000
 80050a0:	40010400 	.word	0x40010400

080050a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005184 <TIM_OC3_SetConfig+0xe0>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a22      	ldr	r2, [pc, #136]	@ (8005188 <TIM_OC3_SetConfig+0xe4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC3_SetConfig+0x66>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a21      	ldr	r2, [pc, #132]	@ (800518c <TIM_OC3_SetConfig+0xe8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10d      	bne.n	8005126 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a17      	ldr	r2, [pc, #92]	@ (8005188 <TIM_OC3_SetConfig+0xe4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC3_SetConfig+0x92>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a16      	ldr	r2, [pc, #88]	@ (800518c <TIM_OC3_SetConfig+0xe8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d113      	bne.n	800515e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	fffeff8f 	.word	0xfffeff8f
 8005188:	40010000 	.word	0x40010000
 800518c:	40010400 	.word	0x40010400

08005190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005234 <TIM_OC4_SetConfig+0xa4>)
 80051bc:	4013      	ands	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	031b      	lsls	r3, r3, #12
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a13      	ldr	r2, [pc, #76]	@ (8005238 <TIM_OC4_SetConfig+0xa8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_OC4_SetConfig+0x68>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a12      	ldr	r2, [pc, #72]	@ (800523c <TIM_OC4_SetConfig+0xac>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d109      	bne.n	800520c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	019b      	lsls	r3, r3, #6
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	feff8fff 	.word	0xfeff8fff
 8005238:	40010000 	.word	0x40010000
 800523c:	40010400 	.word	0x40010400

08005240 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <TIM_OC5_SetConfig+0x98>)
 800526c:	4013      	ands	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005280:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a12      	ldr	r2, [pc, #72]	@ (80052dc <TIM_OC5_SetConfig+0x9c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d003      	beq.n	800529e <TIM_OC5_SetConfig+0x5e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a11      	ldr	r2, [pc, #68]	@ (80052e0 <TIM_OC5_SetConfig+0xa0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d109      	bne.n	80052b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	621a      	str	r2, [r3, #32]
}
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	fffeff8f 	.word	0xfffeff8f
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400

080052e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4b1c      	ldr	r3, [pc, #112]	@ (8005380 <TIM_OC6_SetConfig+0x9c>)
 8005310:	4013      	ands	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	051b      	lsls	r3, r3, #20
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a13      	ldr	r2, [pc, #76]	@ (8005384 <TIM_OC6_SetConfig+0xa0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_OC6_SetConfig+0x60>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a12      	ldr	r2, [pc, #72]	@ (8005388 <TIM_OC6_SetConfig+0xa4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d109      	bne.n	8005358 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800534a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	feff8fff 	.word	0xfeff8fff
 8005384:	40010000 	.word	0x40010000
 8005388:	40010400 	.word	0x40010400

0800538c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	2201      	movs	r2, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	401a      	ands	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1a      	ldr	r2, [r3, #32]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	fa01 f303 	lsl.w	r3, r1, r3
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e06d      	b.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a30      	ldr	r2, [pc, #192]	@ (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a2f      	ldr	r2, [pc, #188]	@ (80054dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d108      	bne.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800542a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a20      	ldr	r2, [pc, #128]	@ (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d022      	beq.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005462:	d01d      	beq.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1d      	ldr	r2, [pc, #116]	@ (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d018      	beq.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1c      	ldr	r2, [pc, #112]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d013      	beq.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1a      	ldr	r2, [pc, #104]	@ (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00e      	beq.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a15      	ldr	r2, [pc, #84]	@ (80054dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d009      	beq.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a16      	ldr	r2, [pc, #88]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a15      	ldr	r2, [pc, #84]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d10c      	bne.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40010400 	.word	0x40010400
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40001800 	.word	0x40001800

080054f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e040      	b.n	80055c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fc fa88 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2224      	movs	r2, #36	@ 0x24
 800555c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fff0 	bl	800655c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fd89 	bl	8006094 <UART_SetConfig>
 8005582:	4603      	mov	r3, r0
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e01b      	b.n	80055c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800559a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 f86f 	bl	80066a0 <UART_CheckIdleState>
 80055c2:	4603      	mov	r3, r0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	@ 0x28
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d177      	bne.n	80056d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_UART_Transmit+0x24>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e070      	b.n	80056d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2221      	movs	r2, #33	@ 0x21
 8005600:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005602:	f7fc fc6b 	bl	8001edc <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005620:	d108      	bne.n	8005634 <HAL_UART_Transmit+0x68>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e003      	b.n	800563c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800563c:	e02f      	b.n	800569e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	2180      	movs	r1, #128	@ 0x80
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f001 f8d1 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e03b      	b.n	80056d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005672:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	3302      	adds	r3, #2
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e007      	b.n	800568c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	781a      	ldrb	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3301      	adds	r3, #1
 800568a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1c9      	bne.n	800563e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2200      	movs	r2, #0
 80056b2:	2140      	movs	r1, #64	@ 0x40
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f001 f89b 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e005      	b.n	80056d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e000      	b.n	80056d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	@ 0x28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d165      	bne.n	80057c2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_UART_Transmit_DMA+0x22>
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e05e      	b.n	80057c4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	88fa      	ldrh	r2, [r7, #6]
 8005718:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2221      	movs	r2, #33	@ 0x21
 8005728:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	2b00      	cmp	r3, #0
 8005730:	d027      	beq.n	8005782 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005736:	4a25      	ldr	r2, [pc, #148]	@ (80057cc <HAL_UART_Transmit_DMA+0xec>)
 8005738:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	4a24      	ldr	r2, [pc, #144]	@ (80057d0 <HAL_UART_Transmit_DMA+0xf0>)
 8005740:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005746:	4a23      	ldr	r2, [pc, #140]	@ (80057d4 <HAL_UART_Transmit_DMA+0xf4>)
 8005748:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574e:	2200      	movs	r2, #0
 8005750:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575a:	4619      	mov	r1, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3328      	adds	r3, #40	@ 0x28
 8005762:	461a      	mov	r2, r3
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	f7fc fda9 	bl	80022bc <HAL_DMA_Start_IT>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2210      	movs	r2, #16
 8005774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e020      	b.n	80057c4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2240      	movs	r2, #64	@ 0x40
 8005788:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	613b      	str	r3, [r7, #16]
   return(result);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057aa:	623a      	str	r2, [r7, #32]
 80057ac:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	69f9      	ldr	r1, [r7, #28]
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e5      	bne.n	800578a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3728      	adds	r7, #40	@ 0x28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	08006b21 	.word	0x08006b21
 80057d0:	08006bb7 	.word	0x08006bb7
 80057d4:	08006d39 	.word	0x08006d39

080057d8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08e      	sub	sp, #56	@ 0x38
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005800:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e6      	bne.n	80057e0 <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581c:	2b80      	cmp	r3, #128	@ 0x80
 800581e:	d137      	bne.n	8005890 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005836:	633b      	str	r3, [r7, #48]	@ 0x30
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3308      	adds	r3, #8
 800583e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005840:	61ba      	str	r2, [r7, #24]
 8005842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6979      	ldr	r1, [r7, #20]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	613b      	str	r3, [r7, #16]
   return(result);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005858:	2b00      	cmp	r3, #0
 800585a:	d019      	beq.n	8005890 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005860:	2200      	movs	r2, #0
 8005862:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005868:	4618      	mov	r0, r3
 800586a:	f7fc fd87 	bl	800237c <HAL_DMA_Abort>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005878:	4618      	mov	r0, r3
 800587a:	f7fc ff9b 	bl	80027b4 <HAL_DMA_GetError>
 800587e:	4603      	mov	r3, r0
 8005880:	2b20      	cmp	r3, #32
 8005882:	d105      	bne.n	8005890 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2210      	movs	r2, #16
 8005888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e007      	b.n	80058a0 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3738      	adds	r7, #56	@ 0x38
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b09a      	sub	sp, #104	@ 0x68
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80058be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80058d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80058dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e6      	bne.n	80058b0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3308      	adds	r3, #8
 80058e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3308      	adds	r3, #8
 8005900:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005902:	643a      	str	r2, [r7, #64]	@ 0x40
 8005904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e5      	bne.n	80058e2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800591a:	2b01      	cmp	r3, #1
 800591c:	d118      	bne.n	8005950 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	61fb      	str	r3, [r7, #28]
   return(result);
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f023 0310 	bic.w	r3, r3, #16
 8005932:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800593c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800593e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e6      	bne.n	800591e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595a:	2b40      	cmp	r3, #64	@ 0x40
 800595c:	d137      	bne.n	80059ce <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3308      	adds	r3, #8
 8005964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	60bb      	str	r3, [r7, #8]
   return(result);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3308      	adds	r3, #8
 800597c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800597e:	61ba      	str	r2, [r7, #24]
 8005980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	6979      	ldr	r1, [r7, #20]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	613b      	str	r3, [r7, #16]
   return(result);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e5      	bne.n	800595e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005996:	2b00      	cmp	r3, #0
 8005998:	d019      	beq.n	80059ce <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599e:	2200      	movs	r2, #0
 80059a0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc fce8 	bl	800237c <HAL_DMA_Abort>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fc fefc 	bl	80027b4 <HAL_DMA_GetError>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d105      	bne.n	80059ce <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2210      	movs	r2, #16
 80059c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e017      	b.n	80059fe <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	220f      	movs	r2, #15
 80059dc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0208 	orr.w	r2, r2, #8
 80059ec:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3768      	adds	r7, #104	@ 0x68
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a36:	4013      	ands	r3, r2
 8005a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d115      	bne.n	8005a70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00f      	beq.n	8005a70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d009      	beq.n	8005a70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 82ac 	beq.w	8005fbe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	4798      	blx	r3
      }
      return;
 8005a6e:	e2a6      	b.n	8005fbe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8117 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a8a:	4b85      	ldr	r3, [pc, #532]	@ (8005ca0 <HAL_UART_IRQHandler+0x298>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 810a 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d011      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xbc>
 8005aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00b      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aba:	f043 0201 	orr.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d011      	beq.n	8005af4 <HAL_UART_IRQHandler+0xec>
 8005ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aea:	f043 0204 	orr.w	r2, r3, #4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d011      	beq.n	8005b24 <HAL_UART_IRQHandler+0x11c>
 8005b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2204      	movs	r2, #4
 8005b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b1a:	f043 0202 	orr.w	r2, r3, #2
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d017      	beq.n	8005b60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b56:	f043 0208 	orr.w	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d012      	beq.n	8005b92 <HAL_UART_IRQHandler+0x18a>
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8212 	beq.w	8005fc2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bda:	2b40      	cmp	r3, #64	@ 0x40
 8005bdc:	d005      	beq.n	8005bea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d04f      	beq.n	8005c8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 ff34 	bl	8006a58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfa:	2b40      	cmp	r3, #64	@ 0x40
 8005bfc:	d141      	bne.n	8005c82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3308      	adds	r3, #8
 8005c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1d9      	bne.n	8005bfe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d013      	beq.n	8005c7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c56:	4a13      	ldr	r2, [pc, #76]	@ (8005ca4 <HAL_UART_IRQHandler+0x29c>)
 8005c58:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fc fbfc 	bl	800245c <HAL_DMA_Abort_IT>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d017      	beq.n	8005c9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	e00f      	b.n	8005c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9d4 	bl	8006028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	e00b      	b.n	8005c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9d0 	bl	8006028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	e007      	b.n	8005c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9cc 	bl	8006028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005c98:	e193      	b.n	8005fc2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9a:	bf00      	nop
    return;
 8005c9c:	e191      	b.n	8005fc2 <HAL_UART_IRQHandler+0x5ba>
 8005c9e:	bf00      	nop
 8005ca0:	04000120 	.word	0x04000120
 8005ca4:	08006db7 	.word	0x08006db7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	f040 814c 	bne.w	8005f4a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 8145 	beq.w	8005f4a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 813e 	beq.w	8005f4a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2210      	movs	r2, #16
 8005cd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce0:	2b40      	cmp	r3, #64	@ 0x40
 8005ce2:	f040 80b6 	bne.w	8005e52 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8165 	beq.w	8005fc6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d06:	429a      	cmp	r2, r3
 8005d08:	f080 815d 	bcs.w	8005fc6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d20:	f000 8086 	beq.w	8005e30 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1da      	bne.n	8005d24 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e1      	bne.n	8005d6e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3308      	adds	r3, #8
 8005db0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e3      	bne.n	8005daa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e00:	f023 0310 	bic.w	r3, r3, #16
 8005e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e4      	bne.n	8005df0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fc faa6 	bl	800237c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fa fcbe 	bl	80007cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e50:	e0b9      	b.n	8005fc6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 80ab 	beq.w	8005fca <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 80a6 	beq.w	8005fca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ea2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e4      	bne.n	8005e7e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	f023 0301 	bic.w	r3, r3, #1
 8005eca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ed8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e3      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 0310 	bic.w	r3, r3, #16
 8005f14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	69b9      	ldr	r1, [r7, #24]
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e4      	bne.n	8005f00 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fa fc42 	bl	80007cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f48:	e03f      	b.n	8005fca <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00e      	beq.n	8005f74 <HAL_UART_IRQHandler+0x56c>
 8005f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d008      	beq.n	8005f74 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f865 	bl	800603c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f72:	e02d      	b.n	8005fd0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00e      	beq.n	8005f9e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d008      	beq.n	8005f9e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01c      	beq.n	8005fce <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4798      	blx	r3
    }
    return;
 8005f9c:	e017      	b.n	8005fce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d012      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x5c8>
 8005faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 ff13 	bl	8006de2 <UART_EndTransmit_IT>
    return;
 8005fbc:	e008      	b.n	8005fd0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005fbe:	bf00      	nop
 8005fc0:	e006      	b.n	8005fd0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005fc2:	bf00      	nop
 8005fc4:	e004      	b.n	8005fd0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005fc6:	bf00      	nop
 8005fc8:	e002      	b.n	8005fd0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005fca:	bf00      	nop
 8005fcc:	e000      	b.n	8005fd0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005fce:	bf00      	nop
  }

}
 8005fd0:	37e8      	adds	r7, #232	@ 0xe8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop

08005fd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800605c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006064:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4313      	orrs	r3, r2
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4ba6      	ldr	r3, [pc, #664]	@ (8006358 <UART_SetConfig+0x2c4>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	6979      	ldr	r1, [r7, #20]
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	430a      	orrs	r2, r1
 8006104:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a94      	ldr	r2, [pc, #592]	@ (800635c <UART_SetConfig+0x2c8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d120      	bne.n	8006152 <UART_SetConfig+0xbe>
 8006110:	4b93      	ldr	r3, [pc, #588]	@ (8006360 <UART_SetConfig+0x2cc>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b03      	cmp	r3, #3
 800611c:	d816      	bhi.n	800614c <UART_SetConfig+0xb8>
 800611e:	a201      	add	r2, pc, #4	@ (adr r2, 8006124 <UART_SetConfig+0x90>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006135 	.word	0x08006135
 8006128:	08006141 	.word	0x08006141
 800612c:	0800613b 	.word	0x0800613b
 8006130:	08006147 	.word	0x08006147
 8006134:	2301      	movs	r3, #1
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e150      	b.n	80063dc <UART_SetConfig+0x348>
 800613a:	2302      	movs	r3, #2
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e14d      	b.n	80063dc <UART_SetConfig+0x348>
 8006140:	2304      	movs	r3, #4
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e14a      	b.n	80063dc <UART_SetConfig+0x348>
 8006146:	2308      	movs	r3, #8
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e147      	b.n	80063dc <UART_SetConfig+0x348>
 800614c:	2310      	movs	r3, #16
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e144      	b.n	80063dc <UART_SetConfig+0x348>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a83      	ldr	r2, [pc, #524]	@ (8006364 <UART_SetConfig+0x2d0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d132      	bne.n	80061c2 <UART_SetConfig+0x12e>
 800615c:	4b80      	ldr	r3, [pc, #512]	@ (8006360 <UART_SetConfig+0x2cc>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d828      	bhi.n	80061bc <UART_SetConfig+0x128>
 800616a:	a201      	add	r2, pc, #4	@ (adr r2, 8006170 <UART_SetConfig+0xdc>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061a5 	.word	0x080061a5
 8006174:	080061bd 	.word	0x080061bd
 8006178:	080061bd 	.word	0x080061bd
 800617c:	080061bd 	.word	0x080061bd
 8006180:	080061b1 	.word	0x080061b1
 8006184:	080061bd 	.word	0x080061bd
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061ab 	.word	0x080061ab
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061bd 	.word	0x080061bd
 80061a0:	080061b7 	.word	0x080061b7
 80061a4:	2300      	movs	r3, #0
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e118      	b.n	80063dc <UART_SetConfig+0x348>
 80061aa:	2302      	movs	r3, #2
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e115      	b.n	80063dc <UART_SetConfig+0x348>
 80061b0:	2304      	movs	r3, #4
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e112      	b.n	80063dc <UART_SetConfig+0x348>
 80061b6:	2308      	movs	r3, #8
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e10f      	b.n	80063dc <UART_SetConfig+0x348>
 80061bc:	2310      	movs	r3, #16
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e10c      	b.n	80063dc <UART_SetConfig+0x348>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a68      	ldr	r2, [pc, #416]	@ (8006368 <UART_SetConfig+0x2d4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d120      	bne.n	800620e <UART_SetConfig+0x17a>
 80061cc:	4b64      	ldr	r3, [pc, #400]	@ (8006360 <UART_SetConfig+0x2cc>)
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061d6:	2b30      	cmp	r3, #48	@ 0x30
 80061d8:	d013      	beq.n	8006202 <UART_SetConfig+0x16e>
 80061da:	2b30      	cmp	r3, #48	@ 0x30
 80061dc:	d814      	bhi.n	8006208 <UART_SetConfig+0x174>
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d009      	beq.n	80061f6 <UART_SetConfig+0x162>
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d810      	bhi.n	8006208 <UART_SetConfig+0x174>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <UART_SetConfig+0x15c>
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d006      	beq.n	80061fc <UART_SetConfig+0x168>
 80061ee:	e00b      	b.n	8006208 <UART_SetConfig+0x174>
 80061f0:	2300      	movs	r3, #0
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e0f2      	b.n	80063dc <UART_SetConfig+0x348>
 80061f6:	2302      	movs	r3, #2
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e0ef      	b.n	80063dc <UART_SetConfig+0x348>
 80061fc:	2304      	movs	r3, #4
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e0ec      	b.n	80063dc <UART_SetConfig+0x348>
 8006202:	2308      	movs	r3, #8
 8006204:	77fb      	strb	r3, [r7, #31]
 8006206:	e0e9      	b.n	80063dc <UART_SetConfig+0x348>
 8006208:	2310      	movs	r3, #16
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e0e6      	b.n	80063dc <UART_SetConfig+0x348>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a56      	ldr	r2, [pc, #344]	@ (800636c <UART_SetConfig+0x2d8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d120      	bne.n	800625a <UART_SetConfig+0x1c6>
 8006218:	4b51      	ldr	r3, [pc, #324]	@ (8006360 <UART_SetConfig+0x2cc>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006222:	2bc0      	cmp	r3, #192	@ 0xc0
 8006224:	d013      	beq.n	800624e <UART_SetConfig+0x1ba>
 8006226:	2bc0      	cmp	r3, #192	@ 0xc0
 8006228:	d814      	bhi.n	8006254 <UART_SetConfig+0x1c0>
 800622a:	2b80      	cmp	r3, #128	@ 0x80
 800622c:	d009      	beq.n	8006242 <UART_SetConfig+0x1ae>
 800622e:	2b80      	cmp	r3, #128	@ 0x80
 8006230:	d810      	bhi.n	8006254 <UART_SetConfig+0x1c0>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <UART_SetConfig+0x1a8>
 8006236:	2b40      	cmp	r3, #64	@ 0x40
 8006238:	d006      	beq.n	8006248 <UART_SetConfig+0x1b4>
 800623a:	e00b      	b.n	8006254 <UART_SetConfig+0x1c0>
 800623c:	2300      	movs	r3, #0
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e0cc      	b.n	80063dc <UART_SetConfig+0x348>
 8006242:	2302      	movs	r3, #2
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e0c9      	b.n	80063dc <UART_SetConfig+0x348>
 8006248:	2304      	movs	r3, #4
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e0c6      	b.n	80063dc <UART_SetConfig+0x348>
 800624e:	2308      	movs	r3, #8
 8006250:	77fb      	strb	r3, [r7, #31]
 8006252:	e0c3      	b.n	80063dc <UART_SetConfig+0x348>
 8006254:	2310      	movs	r3, #16
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e0c0      	b.n	80063dc <UART_SetConfig+0x348>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a44      	ldr	r2, [pc, #272]	@ (8006370 <UART_SetConfig+0x2dc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d125      	bne.n	80062b0 <UART_SetConfig+0x21c>
 8006264:	4b3e      	ldr	r3, [pc, #248]	@ (8006360 <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800626e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006272:	d017      	beq.n	80062a4 <UART_SetConfig+0x210>
 8006274:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006278:	d817      	bhi.n	80062aa <UART_SetConfig+0x216>
 800627a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800627e:	d00b      	beq.n	8006298 <UART_SetConfig+0x204>
 8006280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006284:	d811      	bhi.n	80062aa <UART_SetConfig+0x216>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <UART_SetConfig+0x1fe>
 800628a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800628e:	d006      	beq.n	800629e <UART_SetConfig+0x20a>
 8006290:	e00b      	b.n	80062aa <UART_SetConfig+0x216>
 8006292:	2300      	movs	r3, #0
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e0a1      	b.n	80063dc <UART_SetConfig+0x348>
 8006298:	2302      	movs	r3, #2
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e09e      	b.n	80063dc <UART_SetConfig+0x348>
 800629e:	2304      	movs	r3, #4
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e09b      	b.n	80063dc <UART_SetConfig+0x348>
 80062a4:	2308      	movs	r3, #8
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e098      	b.n	80063dc <UART_SetConfig+0x348>
 80062aa:	2310      	movs	r3, #16
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e095      	b.n	80063dc <UART_SetConfig+0x348>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006374 <UART_SetConfig+0x2e0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d125      	bne.n	8006306 <UART_SetConfig+0x272>
 80062ba:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <UART_SetConfig+0x2cc>)
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80062c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062c8:	d017      	beq.n	80062fa <UART_SetConfig+0x266>
 80062ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062ce:	d817      	bhi.n	8006300 <UART_SetConfig+0x26c>
 80062d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062d4:	d00b      	beq.n	80062ee <UART_SetConfig+0x25a>
 80062d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062da:	d811      	bhi.n	8006300 <UART_SetConfig+0x26c>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <UART_SetConfig+0x254>
 80062e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062e4:	d006      	beq.n	80062f4 <UART_SetConfig+0x260>
 80062e6:	e00b      	b.n	8006300 <UART_SetConfig+0x26c>
 80062e8:	2301      	movs	r3, #1
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e076      	b.n	80063dc <UART_SetConfig+0x348>
 80062ee:	2302      	movs	r3, #2
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e073      	b.n	80063dc <UART_SetConfig+0x348>
 80062f4:	2304      	movs	r3, #4
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e070      	b.n	80063dc <UART_SetConfig+0x348>
 80062fa:	2308      	movs	r3, #8
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	e06d      	b.n	80063dc <UART_SetConfig+0x348>
 8006300:	2310      	movs	r3, #16
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e06a      	b.n	80063dc <UART_SetConfig+0x348>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1b      	ldr	r2, [pc, #108]	@ (8006378 <UART_SetConfig+0x2e4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d138      	bne.n	8006382 <UART_SetConfig+0x2ee>
 8006310:	4b13      	ldr	r3, [pc, #76]	@ (8006360 <UART_SetConfig+0x2cc>)
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006316:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800631a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800631e:	d017      	beq.n	8006350 <UART_SetConfig+0x2bc>
 8006320:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006324:	d82a      	bhi.n	800637c <UART_SetConfig+0x2e8>
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800632a:	d00b      	beq.n	8006344 <UART_SetConfig+0x2b0>
 800632c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006330:	d824      	bhi.n	800637c <UART_SetConfig+0x2e8>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <UART_SetConfig+0x2aa>
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800633a:	d006      	beq.n	800634a <UART_SetConfig+0x2b6>
 800633c:	e01e      	b.n	800637c <UART_SetConfig+0x2e8>
 800633e:	2300      	movs	r3, #0
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e04b      	b.n	80063dc <UART_SetConfig+0x348>
 8006344:	2302      	movs	r3, #2
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e048      	b.n	80063dc <UART_SetConfig+0x348>
 800634a:	2304      	movs	r3, #4
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e045      	b.n	80063dc <UART_SetConfig+0x348>
 8006350:	2308      	movs	r3, #8
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e042      	b.n	80063dc <UART_SetConfig+0x348>
 8006356:	bf00      	nop
 8006358:	efff69f3 	.word	0xefff69f3
 800635c:	40011000 	.word	0x40011000
 8006360:	40023800 	.word	0x40023800
 8006364:	40004400 	.word	0x40004400
 8006368:	40004800 	.word	0x40004800
 800636c:	40004c00 	.word	0x40004c00
 8006370:	40005000 	.word	0x40005000
 8006374:	40011400 	.word	0x40011400
 8006378:	40007800 	.word	0x40007800
 800637c:	2310      	movs	r3, #16
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e02c      	b.n	80063dc <UART_SetConfig+0x348>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a72      	ldr	r2, [pc, #456]	@ (8006550 <UART_SetConfig+0x4bc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d125      	bne.n	80063d8 <UART_SetConfig+0x344>
 800638c:	4b71      	ldr	r3, [pc, #452]	@ (8006554 <UART_SetConfig+0x4c0>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006392:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006396:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800639a:	d017      	beq.n	80063cc <UART_SetConfig+0x338>
 800639c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80063a0:	d817      	bhi.n	80063d2 <UART_SetConfig+0x33e>
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a6:	d00b      	beq.n	80063c0 <UART_SetConfig+0x32c>
 80063a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ac:	d811      	bhi.n	80063d2 <UART_SetConfig+0x33e>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <UART_SetConfig+0x326>
 80063b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063b6:	d006      	beq.n	80063c6 <UART_SetConfig+0x332>
 80063b8:	e00b      	b.n	80063d2 <UART_SetConfig+0x33e>
 80063ba:	2300      	movs	r3, #0
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e00d      	b.n	80063dc <UART_SetConfig+0x348>
 80063c0:	2302      	movs	r3, #2
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e00a      	b.n	80063dc <UART_SetConfig+0x348>
 80063c6:	2304      	movs	r3, #4
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e007      	b.n	80063dc <UART_SetConfig+0x348>
 80063cc:	2308      	movs	r3, #8
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e004      	b.n	80063dc <UART_SetConfig+0x348>
 80063d2:	2310      	movs	r3, #16
 80063d4:	77fb      	strb	r3, [r7, #31]
 80063d6:	e001      	b.n	80063dc <UART_SetConfig+0x348>
 80063d8:	2310      	movs	r3, #16
 80063da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063e4:	d15b      	bne.n	800649e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80063e6:	7ffb      	ldrb	r3, [r7, #31]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d828      	bhi.n	800643e <UART_SetConfig+0x3aa>
 80063ec:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <UART_SetConfig+0x360>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006429 	.word	0x08006429
 8006400:	0800643f 	.word	0x0800643f
 8006404:	0800642f 	.word	0x0800642f
 8006408:	0800643f 	.word	0x0800643f
 800640c:	0800643f 	.word	0x0800643f
 8006410:	0800643f 	.word	0x0800643f
 8006414:	08006437 	.word	0x08006437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006418:	f7fd fac4 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 800641c:	61b8      	str	r0, [r7, #24]
        break;
 800641e:	e013      	b.n	8006448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006420:	f7fd fad4 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8006424:	61b8      	str	r0, [r7, #24]
        break;
 8006426:	e00f      	b.n	8006448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006428:	4b4b      	ldr	r3, [pc, #300]	@ (8006558 <UART_SetConfig+0x4c4>)
 800642a:	61bb      	str	r3, [r7, #24]
        break;
 800642c:	e00c      	b.n	8006448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642e:	f7fd f9a7 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8006432:	61b8      	str	r0, [r7, #24]
        break;
 8006434:	e008      	b.n	8006448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800643a:	61bb      	str	r3, [r7, #24]
        break;
 800643c:	e004      	b.n	8006448 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	77bb      	strb	r3, [r7, #30]
        break;
 8006446:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d074      	beq.n	8006538 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	005a      	lsls	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	441a      	add	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006462:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b0f      	cmp	r3, #15
 8006468:	d916      	bls.n	8006498 <UART_SetConfig+0x404>
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006470:	d212      	bcs.n	8006498 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f023 030f 	bic.w	r3, r3, #15
 800647a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	b29a      	uxth	r2, r3
 8006488:	89fb      	ldrh	r3, [r7, #14]
 800648a:	4313      	orrs	r3, r2
 800648c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	89fa      	ldrh	r2, [r7, #14]
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e04f      	b.n	8006538 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	77bb      	strb	r3, [r7, #30]
 800649c:	e04c      	b.n	8006538 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800649e:	7ffb      	ldrb	r3, [r7, #31]
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d828      	bhi.n	80064f6 <UART_SetConfig+0x462>
 80064a4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <UART_SetConfig+0x418>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064d9 	.word	0x080064d9
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	080064f7 	.word	0x080064f7
 80064bc:	080064e7 	.word	0x080064e7
 80064c0:	080064f7 	.word	0x080064f7
 80064c4:	080064f7 	.word	0x080064f7
 80064c8:	080064f7 	.word	0x080064f7
 80064cc:	080064ef 	.word	0x080064ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d0:	f7fd fa68 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 80064d4:	61b8      	str	r0, [r7, #24]
        break;
 80064d6:	e013      	b.n	8006500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d8:	f7fd fa78 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 80064dc:	61b8      	str	r0, [r7, #24]
        break;
 80064de:	e00f      	b.n	8006500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006558 <UART_SetConfig+0x4c4>)
 80064e2:	61bb      	str	r3, [r7, #24]
        break;
 80064e4:	e00c      	b.n	8006500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064e6:	f7fd f94b 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80064ea:	61b8      	str	r0, [r7, #24]
        break;
 80064ec:	e008      	b.n	8006500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f2:	61bb      	str	r3, [r7, #24]
        break;
 80064f4:	e004      	b.n	8006500 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	77bb      	strb	r3, [r7, #30]
        break;
 80064fe:	bf00      	nop
    }

    if (pclk != 0U)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d018      	beq.n	8006538 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	085a      	lsrs	r2, r3, #1
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	441a      	add	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b0f      	cmp	r3, #15
 800651e:	d909      	bls.n	8006534 <UART_SetConfig+0x4a0>
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006526:	d205      	bcs.n	8006534 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	b29a      	uxth	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	e001      	b.n	8006538 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006544:	7fbb      	ldrb	r3, [r7, #30]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	40007c00 	.word	0x40007c00
 8006554:	40023800 	.word	0x40023800
 8006558:	00f42400 	.word	0x00f42400

0800655c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01a      	beq.n	8006672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800665a:	d10a      	bne.n	8006672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b098      	sub	sp, #96	@ 0x60
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066b0:	f7fb fc14 	bl	8001edc <HAL_GetTick>
 80066b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d12e      	bne.n	8006722 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066cc:	2200      	movs	r2, #0
 80066ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f88c 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d021      	beq.n	8006722 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006702:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800670a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e6      	bne.n	80066de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e062      	b.n	80067e8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b04      	cmp	r3, #4
 800672e:	d149      	bne.n	80067c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006738:	2200      	movs	r2, #0
 800673a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f856 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d03c      	beq.n	80067c4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	623b      	str	r3, [r7, #32]
   return(result);
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006768:	633b      	str	r3, [r7, #48]	@ 0x30
 800676a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800676e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e6      	bne.n	800674a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3308      	adds	r3, #8
 8006782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	60fb      	str	r3, [r7, #12]
   return(result);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800679c:	61fa      	str	r2, [r7, #28]
 800679e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	617b      	str	r3, [r7, #20]
   return(result);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e011      	b.n	80067e8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3758      	adds	r7, #88	@ 0x58
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	4613      	mov	r3, r2
 80067fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006800:	e04f      	b.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d04b      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680a:	f7fb fb67 	bl	8001edc <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	429a      	cmp	r2, r3
 8006818:	d302      	bcc.n	8006820 <UART_WaitOnFlagUntilTimeout+0x30>
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e04e      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	d037      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b80      	cmp	r3, #128	@ 0x80
 8006836:	d034      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b40      	cmp	r3, #64	@ 0x40
 800683c:	d031      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b08      	cmp	r3, #8
 800684a:	d110      	bne.n	800686e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2208      	movs	r2, #8
 8006852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f8ff 	bl	8006a58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2208      	movs	r2, #8
 800685e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e029      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800687c:	d111      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f8e5 	bl	8006a58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e00f      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4013      	ands	r3, r2
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d0a0      	beq.n	8006802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b096      	sub	sp, #88	@ 0x58
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	88fa      	ldrh	r2, [r7, #6]
 80068e4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2222      	movs	r2, #34	@ 0x22
 80068f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d028      	beq.n	8006952 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006904:	4a3e      	ldr	r2, [pc, #248]	@ (8006a00 <UART_Start_Receive_DMA+0x134>)
 8006906:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800690c:	4a3d      	ldr	r2, [pc, #244]	@ (8006a04 <UART_Start_Receive_DMA+0x138>)
 800690e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006914:	4a3c      	ldr	r2, [pc, #240]	@ (8006a08 <UART_Start_Receive_DMA+0x13c>)
 8006916:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800691c:	2200      	movs	r2, #0
 800691e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3324      	adds	r3, #36	@ 0x24
 800692a:	4619      	mov	r1, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006930:	461a      	mov	r2, r3
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	f7fb fcc2 	bl	80022bc <HAL_DMA_Start_IT>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2210      	movs	r2, #16
 8006942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e051      	b.n	80069f6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d018      	beq.n	800698c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800696e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800697a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800697e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e6      	bne.n	800695a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80069ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e5      	bne.n	800698c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3308      	adds	r3, #8
 80069c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	613b      	str	r3, [r7, #16]
   return(result);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3308      	adds	r3, #8
 80069de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069e0:	623a      	str	r2, [r7, #32]
 80069e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	69f9      	ldr	r1, [r7, #28]
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e5      	bne.n	80069c0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3758      	adds	r7, #88	@ 0x58
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	08006bd3 	.word	0x08006bd3
 8006a04:	08006cfb 	.word	0x08006cfb
 8006a08:	08006d39 	.word	0x08006d39

08006a0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b089      	sub	sp, #36	@ 0x24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a28:	61fb      	str	r3, [r7, #28]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6979      	ldr	r1, [r7, #20]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e6      	bne.n	8006a14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006a4c:	bf00      	nop
 8006a4e:	3724      	adds	r7, #36	@ 0x24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b095      	sub	sp, #84	@ 0x54
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e6      	bne.n	8006a60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e5      	bne.n	8006a92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d118      	bne.n	8006b00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f023 0310 	bic.w	r3, r3, #16
 8006ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6979      	ldr	r1, [r7, #20]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	613b      	str	r3, [r7, #16]
   return(result);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e6      	bne.n	8006ace <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b14:	bf00      	nop
 8006b16:	3754      	adds	r7, #84	@ 0x54
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b090      	sub	sp, #64	@ 0x40
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b36:	d037      	beq.n	8006ba8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b60:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e5      	bne.n	8006b40 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	69b9      	ldr	r1, [r7, #24]
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e6      	bne.n	8006b74 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ba6:	e002      	b.n	8006bae <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006ba8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006baa:	f7ff fa15 	bl	8005fd8 <HAL_UART_TxCpltCallback>
}
 8006bae:	bf00      	nop
 8006bb0:	3740      	adds	r7, #64	@ 0x40
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff fa11 	bl	8005fec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b09c      	sub	sp, #112	@ 0x70
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006be8:	d071      	beq.n	8006cce <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c12:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c18:	e841 2300 	strex	r3, r2, [r1]
 8006c1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e6      	bne.n	8006bf2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c36:	f023 0301 	bic.w	r3, r3, #1
 8006c3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c44:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c46:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e5      	bne.n	8006c24 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	623b      	str	r3, [r7, #32]
   return(result);
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3308      	adds	r3, #8
 8006c76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c78:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e5      	bne.n	8006c58 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d118      	bne.n	8006cce <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f023 0310 	bic.w	r3, r3, #16
 8006cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	69b9      	ldr	r1, [r7, #24]
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e6      	bne.n	8006c9c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d107      	bne.n	8006cec <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ce6:	f7f9 fd71 	bl	80007cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cea:	e002      	b.n	8006cf2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006cec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cee:	f7ff f987 	bl	8006000 <HAL_UART_RxCpltCallback>
}
 8006cf2:	bf00      	nop
 8006cf4:	3770      	adds	r7, #112	@ 0x70
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d109      	bne.n	8006d2a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d1c:	085b      	lsrs	r3, r3, #1
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	4619      	mov	r1, r3
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7f9 fd52 	bl	80007cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d28:	e002      	b.n	8006d30 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff f972 	bl	8006014 <HAL_UART_RxHalfCpltCallback>
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d44:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d4a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5e:	2b80      	cmp	r3, #128	@ 0x80
 8006d60:	d109      	bne.n	8006d76 <UART_DMAError+0x3e>
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b21      	cmp	r3, #33	@ 0x21
 8006d66:	d106      	bne.n	8006d76 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006d70:	6978      	ldr	r0, [r7, #20]
 8006d72:	f7ff fe4b 	bl	8006a0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d80:	2b40      	cmp	r3, #64	@ 0x40
 8006d82:	d109      	bne.n	8006d98 <UART_DMAError+0x60>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b22      	cmp	r3, #34	@ 0x22
 8006d88:	d106      	bne.n	8006d98 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006d92:	6978      	ldr	r0, [r7, #20]
 8006d94:	f7ff fe60 	bl	8006a58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d9e:	f043 0210 	orr.w	r2, r3, #16
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006da8:	6978      	ldr	r0, [r7, #20]
 8006daa:	f7ff f93d 	bl	8006028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dae:	bf00      	nop
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff f927 	bl	8006028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b088      	sub	sp, #32
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dfe:	61fb      	str	r3, [r7, #28]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6979      	ldr	r1, [r7, #20]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	613b      	str	r3, [r7, #16]
   return(result);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e6      	bne.n	8006dea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff f8d5 	bl	8005fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e2e:	bf00      	nop
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b08c      	sub	sp, #48	@ 0x30
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	4613      	mov	r3, r2
 8006e42:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d142      	bne.n	8006ed4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e03b      	b.n	8006ed6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f7ff fd2b 	bl	80068cc <UART_Start_Receive_DMA>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d124      	bne.n	8006ece <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d11d      	bne.n	8006ec8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2210      	movs	r2, #16
 8006e92:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f043 0310 	orr.w	r3, r3, #16
 8006ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6a39      	ldr	r1, [r7, #32]
 8006eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e6      	bne.n	8006e94 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8006ec6:	e002      	b.n	8006ece <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006ece:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ed2:	e000      	b.n	8006ed6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006ed4:	2302      	movs	r3, #2
  }
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3730      	adds	r7, #48	@ 0x30
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	f107 001c 	add.w	r0, r7, #28
 8006eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ef2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d121      	bne.n	8006f3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	4b21      	ldr	r3, [pc, #132]	@ (8006f90 <USB_CoreInit+0xb0>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d105      	bne.n	8006f32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa92 	bl	800745c <USB_CoreReset>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]
 8006f3c:	e010      	b.n	8006f60 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa86 	bl	800745c <USB_CoreReset>
 8006f50:	4603      	mov	r3, r0
 8006f52:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006f60:	7fbb      	ldrb	r3, [r7, #30]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d10b      	bne.n	8006f7e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f043 0206 	orr.w	r2, r3, #6
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f043 0220 	orr.w	r2, r3, #32
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f8a:	b004      	add	sp, #16
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	ffbdffbf 	.word	0xffbdffbf

08006f94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f023 0201 	bic.w	r2, r3, #1
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d115      	bne.n	8007004 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fe4:	200a      	movs	r0, #10
 8006fe6:	f7fa ff85 	bl	8001ef4 <HAL_Delay>
      ms += 10U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	330a      	adds	r3, #10
 8006fee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fa25 	bl	8007440 <USB_GetMode>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d01e      	beq.n	800703a <USB_SetCurrentMode+0x84>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2bc7      	cmp	r3, #199	@ 0xc7
 8007000:	d9f0      	bls.n	8006fe4 <USB_SetCurrentMode+0x2e>
 8007002:	e01a      	b.n	800703a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d115      	bne.n	8007036 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007016:	200a      	movs	r0, #10
 8007018:	f7fa ff6c 	bl	8001ef4 <HAL_Delay>
      ms += 10U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	330a      	adds	r3, #10
 8007020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa0c 	bl	8007440 <USB_GetMode>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <USB_SetCurrentMode+0x84>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2bc7      	cmp	r3, #199	@ 0xc7
 8007032:	d9f0      	bls.n	8007016 <USB_SetCurrentMode+0x60>
 8007034:	e001      	b.n	800703a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e005      	b.n	8007046 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2bc8      	cmp	r3, #200	@ 0xc8
 800703e:	d101      	bne.n	8007044 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e000      	b.n	8007046 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007050:	b084      	sub	sp, #16
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800705e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800706a:	2300      	movs	r3, #0
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	e009      	b.n	8007084 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3340      	adds	r3, #64	@ 0x40
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	2200      	movs	r2, #0
 800707c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3301      	adds	r3, #1
 8007082:	613b      	str	r3, [r7, #16]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b0e      	cmp	r3, #14
 8007088:	d9f2      	bls.n	8007070 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800708a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800708e:	2b00      	cmp	r3, #0
 8007090:	d11c      	bne.n	80070cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070a0:	f043 0302 	orr.w	r3, r3, #2
 80070a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e005      	b.n	80070d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070de:	461a      	mov	r2, r3
 80070e0:	2300      	movs	r3, #0
 80070e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10d      	bne.n	8007108 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070f4:	2100      	movs	r1, #0
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f968 	bl	80073cc <USB_SetDevSpeed>
 80070fc:	e008      	b.n	8007110 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070fe:	2101      	movs	r1, #1
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f963 	bl	80073cc <USB_SetDevSpeed>
 8007106:	e003      	b.n	8007110 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007108:	2103      	movs	r1, #3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f95e 	bl	80073cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007110:	2110      	movs	r1, #16
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8fa 	bl	800730c <USB_FlushTxFifo>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f924 	bl	8007370 <USB_FlushRxFifo>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007138:	461a      	mov	r2, r3
 800713a:	2300      	movs	r3, #0
 800713c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007144:	461a      	mov	r2, r3
 8007146:	2300      	movs	r3, #0
 8007148:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007150:	461a      	mov	r2, r3
 8007152:	2300      	movs	r3, #0
 8007154:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	e043      	b.n	80071e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800716e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007172:	d118      	bne.n	80071a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007186:	461a      	mov	r2, r3
 8007188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	e013      	b.n	80071b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800719c:	461a      	mov	r2, r3
 800719e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	e008      	b.n	80071b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b2:	461a      	mov	r2, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c4:	461a      	mov	r2, r3
 80071c6:	2300      	movs	r3, #0
 80071c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d6:	461a      	mov	r2, r3
 80071d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	3301      	adds	r3, #1
 80071e2:	613b      	str	r3, [r7, #16]
 80071e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071e8:	461a      	mov	r2, r3
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d3b5      	bcc.n	800715c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f0:	2300      	movs	r3, #0
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	e043      	b.n	800727e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800720c:	d118      	bne.n	8007240 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	461a      	mov	r2, r3
 8007222:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	e013      	b.n	8007252 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007236:	461a      	mov	r2, r3
 8007238:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	e008      	b.n	8007252 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724c:	461a      	mov	r2, r3
 800724e:	2300      	movs	r3, #0
 8007250:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725e:	461a      	mov	r2, r3
 8007260:	2300      	movs	r3, #0
 8007262:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007270:	461a      	mov	r2, r3
 8007272:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007276:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3301      	adds	r3, #1
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007282:	461a      	mov	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4293      	cmp	r3, r2
 8007288:	d3b5      	bcc.n	80071f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800729c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80072aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f043 0210 	orr.w	r2, r3, #16
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007304 <USB_DevInit+0x2b4>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f043 0208 	orr.w	r2, r3, #8
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d105      	bne.n	80072f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <USB_DevInit+0x2b8>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007300:	b004      	add	sp, #16
 8007302:	4770      	bx	lr
 8007304:	803c3800 	.word	0x803c3800
 8007308:	40000004 	.word	0x40000004

0800730c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3301      	adds	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007326:	d901      	bls.n	800732c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e01b      	b.n	8007364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	daf2      	bge.n	800731a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	019b      	lsls	r3, r3, #6
 800733c:	f043 0220 	orr.w	r2, r3, #32
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007350:	d901      	bls.n	8007356 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e006      	b.n	8007364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b20      	cmp	r3, #32
 8007360:	d0f0      	beq.n	8007344 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007388:	d901      	bls.n	800738e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e018      	b.n	80073c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	daf2      	bge.n	800737c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2210      	movs	r2, #16
 800739e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073ac:	d901      	bls.n	80073b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e006      	b.n	80073c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b10      	cmp	r3, #16
 80073bc:	d0f0      	beq.n	80073a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073ec:	4313      	orrs	r3, r2
 80073ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007418:	f023 0303 	bic.w	r3, r3, #3
 800741c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800742c:	f043 0302 	orr.w	r3, r3, #2
 8007430:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	f003 0301 	and.w	r3, r3, #1
}
 8007450:	4618      	mov	r0, r3
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007474:	d901      	bls.n	800747a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e01b      	b.n	80074b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	daf2      	bge.n	8007468 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f043 0201 	orr.w	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3301      	adds	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800749e:	d901      	bls.n	80074a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e006      	b.n	80074b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d0f0      	beq.n	8007492 <USB_CoreReset+0x36>

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074be:	b480      	push	{r7}
 80074c0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80074c2:	bf00      	nop
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d2:	f3ef 8305 	mrs	r3, IPSR
 80074d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80074d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10f      	bne.n	80074fe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074de:	f3ef 8310 	mrs	r3, PRIMASK
 80074e2:	607b      	str	r3, [r7, #4]
  return(result);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d105      	bne.n	80074f6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074ea:	f3ef 8311 	mrs	r3, BASEPRI
 80074ee:	603b      	str	r3, [r7, #0]
  return(result);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <osKernelInitialize+0x3a>
 80074f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007530 <osKernelInitialize+0x64>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d103      	bne.n	8007506 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80074fe:	f06f 0305 	mvn.w	r3, #5
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e00c      	b.n	8007520 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007506:	4b0a      	ldr	r3, [pc, #40]	@ (8007530 <osKernelInitialize+0x64>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800750e:	4b08      	ldr	r3, [pc, #32]	@ (8007530 <osKernelInitialize+0x64>)
 8007510:	2201      	movs	r2, #1
 8007512:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	e002      	b.n	8007520 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800751a:	f04f 33ff 	mov.w	r3, #4294967295
 800751e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007520:	68fb      	ldr	r3, [r7, #12]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	20000a04 	.word	0x20000a04

08007534 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800753a:	f3ef 8305 	mrs	r3, IPSR
 800753e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007540:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10f      	bne.n	8007566 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007546:	f3ef 8310 	mrs	r3, PRIMASK
 800754a:	607b      	str	r3, [r7, #4]
  return(result);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d105      	bne.n	800755e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007552:	f3ef 8311 	mrs	r3, BASEPRI
 8007556:	603b      	str	r3, [r7, #0]
  return(result);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <osKernelStart+0x3a>
 800755e:	4b0f      	ldr	r3, [pc, #60]	@ (800759c <osKernelStart+0x68>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d103      	bne.n	800756e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007566:	f06f 0305 	mvn.w	r3, #5
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	e010      	b.n	8007590 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800756e:	4b0b      	ldr	r3, [pc, #44]	@ (800759c <osKernelStart+0x68>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d109      	bne.n	800758a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007576:	f7ff ffa2 	bl	80074be <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800757a:	4b08      	ldr	r3, [pc, #32]	@ (800759c <osKernelStart+0x68>)
 800757c:	2202      	movs	r2, #2
 800757e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007580:	f001 f8ca 	bl	8008718 <vTaskStartScheduler>
      stat = osOK;
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	e002      	b.n	8007590 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800758a:	f04f 33ff 	mov.w	r3, #4294967295
 800758e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007590:	68fb      	ldr	r3, [r7, #12]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000a04 	.word	0x20000a04

080075a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b090      	sub	sp, #64	@ 0x40
 80075a4:	af04      	add	r7, sp, #16
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075ac:	2300      	movs	r3, #0
 80075ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b0:	f3ef 8305 	mrs	r3, IPSR
 80075b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80075b6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f040 808f 	bne.w	80076dc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075be:	f3ef 8310 	mrs	r3, PRIMASK
 80075c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ca:	f3ef 8311 	mrs	r3, BASEPRI
 80075ce:	617b      	str	r3, [r7, #20]
  return(result);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <osThreadNew+0x3e>
 80075d6:	4b44      	ldr	r3, [pc, #272]	@ (80076e8 <osThreadNew+0x148>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d07e      	beq.n	80076dc <osThreadNew+0x13c>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d07b      	beq.n	80076dc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80075e4:	2380      	movs	r3, #128	@ 0x80
 80075e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80075e8:	2318      	movs	r3, #24
 80075ea:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80075f0:	f04f 33ff 	mov.w	r3, #4294967295
 80075f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d045      	beq.n	8007688 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <osThreadNew+0x6a>
        name = attr->name;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d008      	beq.n	8007630 <osThreadNew+0x90>
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	2b38      	cmp	r3, #56	@ 0x38
 8007622:	d805      	bhi.n	8007630 <osThreadNew+0x90>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <osThreadNew+0x94>
        return (NULL);
 8007630:	2300      	movs	r3, #0
 8007632:	e054      	b.n	80076de <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	089b      	lsrs	r3, r3, #2
 8007642:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00e      	beq.n	800766a <osThreadNew+0xca>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b5b      	cmp	r3, #91	@ 0x5b
 8007652:	d90a      	bls.n	800766a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007658:	2b00      	cmp	r3, #0
 800765a:	d006      	beq.n	800766a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <osThreadNew+0xca>
        mem = 1;
 8007664:	2301      	movs	r3, #1
 8007666:	623b      	str	r3, [r7, #32]
 8007668:	e010      	b.n	800768c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10c      	bne.n	800768c <osThreadNew+0xec>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d108      	bne.n	800768c <osThreadNew+0xec>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <osThreadNew+0xec>
          mem = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	623b      	str	r3, [r7, #32]
 8007686:	e001      	b.n	800768c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d110      	bne.n	80076b4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fe4f 	bl	800834c <xTaskCreateStatic>
 80076ae:	4603      	mov	r3, r0
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	e013      	b.n	80076dc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d110      	bne.n	80076dc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	b29a      	uxth	r2, r3
 80076be:	f107 0310 	add.w	r3, r7, #16
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fea3 	bl	8008418 <xTaskCreate>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d001      	beq.n	80076dc <osThreadNew+0x13c>
          hTask = NULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076dc:	693b      	ldr	r3, [r7, #16]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3730      	adds	r7, #48	@ 0x30
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000a04 	.word	0x20000a04

080076ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f4:	f3ef 8305 	mrs	r3, IPSR
 80076f8:	613b      	str	r3, [r7, #16]
  return(result);
 80076fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10f      	bne.n	8007720 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007700:	f3ef 8310 	mrs	r3, PRIMASK
 8007704:	60fb      	str	r3, [r7, #12]
  return(result);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d105      	bne.n	8007718 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800770c:	f3ef 8311 	mrs	r3, BASEPRI
 8007710:	60bb      	str	r3, [r7, #8]
  return(result);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d007      	beq.n	8007728 <osDelay+0x3c>
 8007718:	4b0a      	ldr	r3, [pc, #40]	@ (8007744 <osDelay+0x58>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d103      	bne.n	8007728 <osDelay+0x3c>
    stat = osErrorISR;
 8007720:	f06f 0305 	mvn.w	r3, #5
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	e007      	b.n	8007738 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 ffb8 	bl	80086a8 <vTaskDelay>
    }
  }

  return (stat);
 8007738:	697b      	ldr	r3, [r7, #20]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000a04 	.word	0x20000a04

08007748 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a07      	ldr	r2, [pc, #28]	@ (8007774 <vApplicationGetIdleTaskMemory+0x2c>)
 8007758:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4a06      	ldr	r2, [pc, #24]	@ (8007778 <vApplicationGetIdleTaskMemory+0x30>)
 800775e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2280      	movs	r2, #128	@ 0x80
 8007764:	601a      	str	r2, [r3, #0]
}
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20000a08 	.word	0x20000a08
 8007778:	20000a64 	.word	0x20000a64

0800777c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4a07      	ldr	r2, [pc, #28]	@ (80077a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800778c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4a06      	ldr	r2, [pc, #24]	@ (80077ac <vApplicationGetTimerTaskMemory+0x30>)
 8007792:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800779a:	601a      	str	r2, [r3, #0]
}
 800779c:	bf00      	nop
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	20000c64 	.word	0x20000c64
 80077ac:	20000cc0 	.word	0x20000cc0

080077b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f103 0208 	add.w	r2, r3, #8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295
 80077c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f103 0208 	add.w	r2, r3, #8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f103 0208 	add.w	r2, r3, #8
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	601a      	str	r2, [r3, #0]
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d103      	bne.n	8007872 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e00c      	b.n	800788c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3308      	adds	r3, #8
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e002      	b.n	8007880 <vListInsert+0x2e>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	429a      	cmp	r2, r3
 800788a:	d2f6      	bcs.n	800787a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	601a      	str	r2, [r3, #0]
}
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6892      	ldr	r2, [r2, #8]
 80078da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6852      	ldr	r2, [r2, #4]
 80078e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d103      	bne.n	80078f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	1e5a      	subs	r2, r3, #1
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007930:	b672      	cpsid	i
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	b662      	cpsie	i
 8007940:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007948:	f002 f8a8 	bl	8009a9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007954:	68f9      	ldr	r1, [r7, #12]
 8007956:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007958:	fb01 f303 	mul.w	r3, r1, r3
 800795c:	441a      	add	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007978:	3b01      	subs	r3, #1
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	441a      	add	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	22ff      	movs	r2, #255	@ 0xff
 800798c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	22ff      	movs	r2, #255	@ 0xff
 8007994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d114      	bne.n	80079c8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d01a      	beq.n	80079dc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3310      	adds	r3, #16
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 f950 	bl	8008c50 <xTaskRemoveFromEventList>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d012      	beq.n	80079dc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079b6:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <xQueueGenericReset+0xd4>)
 80079b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	e009      	b.n	80079dc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3310      	adds	r3, #16
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff feef 	bl	80077b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3324      	adds	r3, #36	@ 0x24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff feea 	bl	80077b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079dc:	f002 f894 	bl	8009b08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079e0:	2301      	movs	r3, #1
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08e      	sub	sp, #56	@ 0x38
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10d      	bne.n	8007a20 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a08:	b672      	cpsid	i
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	b662      	cpsie	i
 8007a18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a1a:	bf00      	nop
 8007a1c:	bf00      	nop
 8007a1e:	e7fd      	b.n	8007a1c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10d      	bne.n	8007a42 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	b672      	cpsid	i
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	b662      	cpsie	i
 8007a3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <xQueueGenericCreateStatic+0x5e>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <xQueueGenericCreateStatic+0x62>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <xQueueGenericCreateStatic+0x64>
 8007a52:	2300      	movs	r3, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10d      	bne.n	8007a74 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5c:	b672      	cpsid	i
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	b662      	cpsie	i
 8007a6c:	623b      	str	r3, [r7, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	bf00      	nop
 8007a72:	e7fd      	b.n	8007a70 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d102      	bne.n	8007a80 <xQueueGenericCreateStatic+0x90>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <xQueueGenericCreateStatic+0x94>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <xQueueGenericCreateStatic+0x96>
 8007a84:	2300      	movs	r3, #0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10d      	bne.n	8007aa6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8e:	b672      	cpsid	i
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	b662      	cpsie	i
 8007a9e:	61fb      	str	r3, [r7, #28]
}
 8007aa0:	bf00      	nop
 8007aa2:	bf00      	nop
 8007aa4:	e7fd      	b.n	8007aa2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007aa6:	2350      	movs	r3, #80	@ 0x50
 8007aa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b50      	cmp	r3, #80	@ 0x50
 8007aae:	d00d      	beq.n	8007acc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	b672      	cpsid	i
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	b662      	cpsie	i
 8007ac4:	61bb      	str	r3, [r7, #24]
}
 8007ac6:	bf00      	nop
 8007ac8:	bf00      	nop
 8007aca:	e7fd      	b.n	8007ac8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007acc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00d      	beq.n	8007af4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ae0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f805 	bl	8007afe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3730      	adds	r7, #48	@ 0x30
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
 8007b0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e002      	b.n	8007b20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	69b8      	ldr	r0, [r7, #24]
 8007b30:	f7ff fef2 	bl	8007918 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	78fa      	ldrb	r2, [r7, #3]
 8007b38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08e      	sub	sp, #56	@ 0x38
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b52:	2300      	movs	r3, #0
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10d      	bne.n	8007b7c <xQueueGenericSend+0x38>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b64:	b672      	cpsid	i
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	b662      	cpsie	i
 8007b74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b76:	bf00      	nop
 8007b78:	bf00      	nop
 8007b7a:	e7fd      	b.n	8007b78 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <xQueueGenericSend+0x46>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <xQueueGenericSend+0x4a>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <xQueueGenericSend+0x4c>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10d      	bne.n	8007bb0 <xQueueGenericSend+0x6c>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b98:	b672      	cpsid	i
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	b662      	cpsie	i
 8007ba8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007baa:	bf00      	nop
 8007bac:	bf00      	nop
 8007bae:	e7fd      	b.n	8007bac <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d103      	bne.n	8007bbe <xQueueGenericSend+0x7a>
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d101      	bne.n	8007bc2 <xQueueGenericSend+0x7e>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <xQueueGenericSend+0x80>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10d      	bne.n	8007be4 <xQueueGenericSend+0xa0>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bcc:	b672      	cpsid	i
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	b662      	cpsie	i
 8007bdc:	623b      	str	r3, [r7, #32]
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007be4:	f001 f9fc 	bl	8008fe0 <xTaskGetSchedulerState>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <xQueueGenericSend+0xb0>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <xQueueGenericSend+0xb4>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <xQueueGenericSend+0xb6>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10d      	bne.n	8007c1a <xQueueGenericSend+0xd6>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	b672      	cpsid	i
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	b662      	cpsie	i
 8007c12:	61fb      	str	r3, [r7, #28]
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop
 8007c18:	e7fd      	b.n	8007c16 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c1a:	f001 ff3f 	bl	8009a9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d302      	bcc.n	8007c30 <xQueueGenericSend+0xec>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d129      	bne.n	8007c84 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c36:	f000 fa1b 	bl	8008070 <prvCopyDataToQueue>
 8007c3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c46:	3324      	adds	r3, #36	@ 0x24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f001 f801 	bl	8008c50 <xTaskRemoveFromEventList>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d013      	beq.n	8007c7c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c54:	4b3f      	ldr	r3, [pc, #252]	@ (8007d54 <xQueueGenericSend+0x210>)
 8007c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	e00a      	b.n	8007c7c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c6c:	4b39      	ldr	r3, [pc, #228]	@ (8007d54 <xQueueGenericSend+0x210>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c7c:	f001 ff44 	bl	8009b08 <vPortExitCritical>
				return pdPASS;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e063      	b.n	8007d4c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d103      	bne.n	8007c92 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c8a:	f001 ff3d 	bl	8009b08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e05c      	b.n	8007d4c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d106      	bne.n	8007ca6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c98:	f107 0314 	add.w	r3, r7, #20
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 f83d 	bl	8008d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ca6:	f001 ff2f 	bl	8009b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007caa:	f000 fda1 	bl	80087f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cae:	f001 fef5 	bl	8009a9c <vPortEnterCritical>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cb8:	b25b      	sxtb	r3, r3
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d103      	bne.n	8007cc8 <xQueueGenericSend+0x184>
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cce:	b25b      	sxtb	r3, r3
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d103      	bne.n	8007cde <xQueueGenericSend+0x19a>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cde:	f001 ff13 	bl	8009b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ce2:	1d3a      	adds	r2, r7, #4
 8007ce4:	f107 0314 	add.w	r3, r7, #20
 8007ce8:	4611      	mov	r1, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 f82c 	bl	8008d48 <xTaskCheckForTimeOut>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d124      	bne.n	8007d40 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cf8:	f000 fab2 	bl	8008260 <prvIsQueueFull>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d018      	beq.n	8007d34 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	3310      	adds	r3, #16
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 ff4a 	bl	8008ba4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d12:	f000 fa3d 	bl	8008190 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d16:	f000 fd79 	bl	800880c <xTaskResumeAll>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f47f af7c 	bne.w	8007c1a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007d22:	4b0c      	ldr	r3, [pc, #48]	@ (8007d54 <xQueueGenericSend+0x210>)
 8007d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	e772      	b.n	8007c1a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d36:	f000 fa2b 	bl	8008190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d3a:	f000 fd67 	bl	800880c <xTaskResumeAll>
 8007d3e:	e76c      	b.n	8007c1a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d42:	f000 fa25 	bl	8008190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d46:	f000 fd61 	bl	800880c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3738      	adds	r7, #56	@ 0x38
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08e      	sub	sp, #56	@ 0x38
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10d      	bne.n	8007d8c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d74:	b672      	cpsid	i
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	b662      	cpsie	i
 8007d84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	e7fd      	b.n	8007d88 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericSendFromISR+0x42>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <xQueueGenericSendFromISR+0x46>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <xQueueGenericSendFromISR+0x48>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10d      	bne.n	8007dc0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da8:	b672      	cpsid	i
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	b662      	cpsie	i
 8007db8:	623b      	str	r3, [r7, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	bf00      	nop
 8007dbe:	e7fd      	b.n	8007dbc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d103      	bne.n	8007dce <xQueueGenericSendFromISR+0x76>
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d101      	bne.n	8007dd2 <xQueueGenericSendFromISR+0x7a>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <xQueueGenericSendFromISR+0x7c>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10d      	bne.n	8007df4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ddc:	b672      	cpsid	i
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	b662      	cpsie	i
 8007dec:	61fb      	str	r3, [r7, #28]
}
 8007dee:	bf00      	nop
 8007df0:	bf00      	nop
 8007df2:	e7fd      	b.n	8007df0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007df4:	f001 ff3a 	bl	8009c6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007df8:	f3ef 8211 	mrs	r2, BASEPRI
 8007dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e00:	b672      	cpsid	i
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	b662      	cpsie	i
 8007e10:	61ba      	str	r2, [r7, #24]
 8007e12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d302      	bcc.n	8007e2a <xQueueGenericSendFromISR+0xd2>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d12c      	bne.n	8007e84 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	68b9      	ldr	r1, [r7, #8]
 8007e38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e3a:	f000 f919 	bl	8008070 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e46:	d112      	bne.n	8007e6e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d016      	beq.n	8007e7e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	3324      	adds	r3, #36	@ 0x24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fefb 	bl	8008c50 <xTaskRemoveFromEventList>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00e      	beq.n	8007e7e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e007      	b.n	8007e7e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e72:	3301      	adds	r3, #1
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	b25a      	sxtb	r2, r3
 8007e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007e82:	e001      	b.n	8007e88 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e84:	2300      	movs	r3, #0
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3738      	adds	r7, #56	@ 0x38
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08c      	sub	sp, #48	@ 0x30
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007eac:	2300      	movs	r3, #0
 8007eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10d      	bne.n	8007ed6 <xQueueReceive+0x36>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	b672      	cpsid	i
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	b662      	cpsie	i
 8007ece:	623b      	str	r3, [r7, #32]
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	e7fd      	b.n	8007ed2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d103      	bne.n	8007ee4 <xQueueReceive+0x44>
 8007edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <xQueueReceive+0x48>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <xQueueReceive+0x4a>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10d      	bne.n	8007f0a <xQueueReceive+0x6a>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef2:	b672      	cpsid	i
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	b662      	cpsie	i
 8007f02:	61fb      	str	r3, [r7, #28]
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	e7fd      	b.n	8007f06 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f0a:	f001 f869 	bl	8008fe0 <xTaskGetSchedulerState>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d102      	bne.n	8007f1a <xQueueReceive+0x7a>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <xQueueReceive+0x7e>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <xQueueReceive+0x80>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10d      	bne.n	8007f40 <xQueueReceive+0xa0>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	b672      	cpsid	i
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	b662      	cpsie	i
 8007f38:	61bb      	str	r3, [r7, #24]
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	e7fd      	b.n	8007f3c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f40:	f001 fdac 	bl	8009a9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01f      	beq.n	8007f90 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f54:	f000 f8f6 	bl	8008144 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	1e5a      	subs	r2, r3, #1
 8007f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00f      	beq.n	8007f88 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6a:	3310      	adds	r3, #16
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fe6f 	bl	8008c50 <xTaskRemoveFromEventList>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d007      	beq.n	8007f88 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f78:	4b3c      	ldr	r3, [pc, #240]	@ (800806c <xQueueReceive+0x1cc>)
 8007f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f88:	f001 fdbe 	bl	8009b08 <vPortExitCritical>
				return pdPASS;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e069      	b.n	8008064 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d103      	bne.n	8007f9e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f96:	f001 fdb7 	bl	8009b08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e062      	b.n	8008064 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fa4:	f107 0310 	add.w	r3, r7, #16
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 feb7 	bl	8008d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fb2:	f001 fda9 	bl	8009b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fb6:	f000 fc1b 	bl	80087f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fba:	f001 fd6f 	bl	8009a9c <vPortEnterCritical>
 8007fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fc4:	b25b      	sxtb	r3, r3
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fca:	d103      	bne.n	8007fd4 <xQueueReceive+0x134>
 8007fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fda:	b25b      	sxtb	r3, r3
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d103      	bne.n	8007fea <xQueueReceive+0x14a>
 8007fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fea:	f001 fd8d 	bl	8009b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fee:	1d3a      	adds	r2, r7, #4
 8007ff0:	f107 0310 	add.w	r3, r7, #16
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fea6 	bl	8008d48 <xTaskCheckForTimeOut>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d123      	bne.n	800804a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008004:	f000 f916 	bl	8008234 <prvIsQueueEmpty>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d017      	beq.n	800803e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800800e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008010:	3324      	adds	r3, #36	@ 0x24
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fdc4 	bl	8008ba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800801c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800801e:	f000 f8b7 	bl	8008190 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008022:	f000 fbf3 	bl	800880c <xTaskResumeAll>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d189      	bne.n	8007f40 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800802c:	4b0f      	ldr	r3, [pc, #60]	@ (800806c <xQueueReceive+0x1cc>)
 800802e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	e780      	b.n	8007f40 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800803e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008040:	f000 f8a6 	bl	8008190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008044:	f000 fbe2 	bl	800880c <xTaskResumeAll>
 8008048:	e77a      	b.n	8007f40 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800804a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800804c:	f000 f8a0 	bl	8008190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008050:	f000 fbdc 	bl	800880c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008054:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008056:	f000 f8ed 	bl	8008234 <prvIsQueueEmpty>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	f43f af6f 	beq.w	8007f40 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008062:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008064:	4618      	mov	r0, r3
 8008066:	3730      	adds	r7, #48	@ 0x30
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	e000ed04 	.word	0xe000ed04

08008070 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008084:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10d      	bne.n	80080aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d14d      	bne.n	8008132 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 ffbe 	bl	800901c <xTaskPriorityDisinherit>
 80080a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	609a      	str	r2, [r3, #8]
 80080a8:	e043      	b.n	8008132 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d119      	bne.n	80080e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6858      	ldr	r0, [r3, #4]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b8:	461a      	mov	r2, r3
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	f002 fc78 	bl	800a9b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	441a      	add	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d32b      	bcc.n	8008132 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	605a      	str	r2, [r3, #4]
 80080e2:	e026      	b.n	8008132 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68d8      	ldr	r0, [r3, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ec:	461a      	mov	r2, r3
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	f002 fc5e 	bl	800a9b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	68da      	ldr	r2, [r3, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fc:	425b      	negs	r3, r3
 80080fe:	441a      	add	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d207      	bcs.n	8008120 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008118:	425b      	negs	r3, r3
 800811a:	441a      	add	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d105      	bne.n	8008132 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3b01      	subs	r3, #1
 8008130:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800813a:	697b      	ldr	r3, [r7, #20]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	d018      	beq.n	8008188 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815e:	441a      	add	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	429a      	cmp	r2, r3
 800816e:	d303      	bcc.n	8008178 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68d9      	ldr	r1, [r3, #12]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008180:	461a      	mov	r2, r3
 8008182:	6838      	ldr	r0, [r7, #0]
 8008184:	f002 fc14 	bl	800a9b0 <memcpy>
	}
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008198:	f001 fc80 	bl	8009a9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081a4:	e011      	b.n	80081ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d012      	beq.n	80081d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3324      	adds	r3, #36	@ 0x24
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fd4c 	bl	8008c50 <xTaskRemoveFromEventList>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081be:	f000 fe2b 	bl	8008e18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dce9      	bgt.n	80081a6 <prvUnlockQueue+0x16>
 80081d2:	e000      	b.n	80081d6 <prvUnlockQueue+0x46>
					break;
 80081d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	22ff      	movs	r2, #255	@ 0xff
 80081da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80081de:	f001 fc93 	bl	8009b08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081e2:	f001 fc5b 	bl	8009a9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081ee:	e011      	b.n	8008214 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d012      	beq.n	800821e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3310      	adds	r3, #16
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fd27 	bl	8008c50 <xTaskRemoveFromEventList>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008208:	f000 fe06 	bl	8008e18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	3b01      	subs	r3, #1
 8008210:	b2db      	uxtb	r3, r3
 8008212:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008218:	2b00      	cmp	r3, #0
 800821a:	dce9      	bgt.n	80081f0 <prvUnlockQueue+0x60>
 800821c:	e000      	b.n	8008220 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800821e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	22ff      	movs	r2, #255	@ 0xff
 8008224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008228:	f001 fc6e 	bl	8009b08 <vPortExitCritical>
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800823c:	f001 fc2e 	bl	8009a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008244:	2b00      	cmp	r3, #0
 8008246:	d102      	bne.n	800824e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008248:	2301      	movs	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e001      	b.n	8008252 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008252:	f001 fc59 	bl	8009b08 <vPortExitCritical>

	return xReturn;
 8008256:	68fb      	ldr	r3, [r7, #12]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008268:	f001 fc18 	bl	8009a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008274:	429a      	cmp	r2, r3
 8008276:	d102      	bne.n	800827e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008278:	2301      	movs	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e001      	b.n	8008282 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008282:	f001 fc41 	bl	8009b08 <vPortExitCritical>

	return xReturn;
 8008286:	68fb      	ldr	r3, [r7, #12]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	e014      	b.n	80082ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082a0:	4a0f      	ldr	r2, [pc, #60]	@ (80082e0 <vQueueAddToRegistry+0x50>)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10b      	bne.n	80082c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082ac:	490c      	ldr	r1, [pc, #48]	@ (80082e0 <vQueueAddToRegistry+0x50>)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082b6:	4a0a      	ldr	r2, [pc, #40]	@ (80082e0 <vQueueAddToRegistry+0x50>)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	4413      	add	r3, r2
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082c2:	e006      	b.n	80082d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3301      	adds	r3, #1
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b07      	cmp	r3, #7
 80082ce:	d9e7      	bls.n	80082a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	200010c0 	.word	0x200010c0

080082e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082f4:	f001 fbd2 	bl	8009a9c <vPortEnterCritical>
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082fe:	b25b      	sxtb	r3, r3
 8008300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008304:	d103      	bne.n	800830e <vQueueWaitForMessageRestricted+0x2a>
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008314:	b25b      	sxtb	r3, r3
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831a:	d103      	bne.n	8008324 <vQueueWaitForMessageRestricted+0x40>
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008324:	f001 fbf0 	bl	8009b08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832c:	2b00      	cmp	r3, #0
 800832e:	d106      	bne.n	800833e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	3324      	adds	r3, #36	@ 0x24
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	68b9      	ldr	r1, [r7, #8]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fc5b 	bl	8008bf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800833e:	6978      	ldr	r0, [r7, #20]
 8008340:	f7ff ff26 	bl	8008190 <prvUnlockQueue>
	}
 8008344:	bf00      	nop
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08e      	sub	sp, #56	@ 0x38
 8008350:	af04      	add	r7, sp, #16
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800835a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10d      	bne.n	800837c <xTaskCreateStatic+0x30>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008364:	b672      	cpsid	i
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	b662      	cpsie	i
 8008374:	623b      	str	r3, [r7, #32]
}
 8008376:	bf00      	nop
 8008378:	bf00      	nop
 800837a:	e7fd      	b.n	8008378 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800837c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10d      	bne.n	800839e <xTaskCreateStatic+0x52>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008386:	b672      	cpsid	i
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	b662      	cpsie	i
 8008396:	61fb      	str	r3, [r7, #28]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800839e:	235c      	movs	r3, #92	@ 0x5c
 80083a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80083a6:	d00d      	beq.n	80083c4 <xTaskCreateStatic+0x78>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ac:	b672      	cpsid	i
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	b662      	cpsie	i
 80083bc:	61bb      	str	r3, [r7, #24]
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	e7fd      	b.n	80083c0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01e      	beq.n	800840a <xTaskCreateStatic+0xbe>
 80083cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d01b      	beq.n	800840a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083e4:	2300      	movs	r3, #0
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	9302      	str	r3, [sp, #8]
 80083ec:	f107 0314 	add.w	r3, r7, #20
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f850 	bl	80084a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008402:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008404:	f000 f8e0 	bl	80085c8 <prvAddNewTaskToReadyList>
 8008408:	e001      	b.n	800840e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800840e:	697b      	ldr	r3, [r7, #20]
	}
 8008410:	4618      	mov	r0, r3
 8008412:	3728      	adds	r7, #40	@ 0x28
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08c      	sub	sp, #48	@ 0x30
 800841c:	af04      	add	r7, sp, #16
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	4613      	mov	r3, r2
 8008426:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4618      	mov	r0, r3
 800842e:	f001 fc63 	bl	8009cf8 <pvPortMalloc>
 8008432:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00e      	beq.n	8008458 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800843a:	205c      	movs	r0, #92	@ 0x5c
 800843c:	f001 fc5c 	bl	8009cf8 <pvPortMalloc>
 8008440:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30
 800844e:	e005      	b.n	800845c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008450:	6978      	ldr	r0, [r7, #20]
 8008452:	f001 fd1f 	bl	8009e94 <vPortFree>
 8008456:	e001      	b.n	800845c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d017      	beq.n	8008492 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	2300      	movs	r3, #0
 800846e:	9303      	str	r3, [sp, #12]
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	9302      	str	r3, [sp, #8]
 8008474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f80e 	bl	80084a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008486:	69f8      	ldr	r0, [r7, #28]
 8008488:	f000 f89e 	bl	80085c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800848c:	2301      	movs	r3, #1
 800848e:	61bb      	str	r3, [r7, #24]
 8008490:	e002      	b.n	8008498 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008492:	f04f 33ff 	mov.w	r3, #4294967295
 8008496:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008498:	69bb      	ldr	r3, [r7, #24]
	}
 800849a:	4618      	mov	r0, r3
 800849c:	3720      	adds	r7, #32
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b088      	sub	sp, #32
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	461a      	mov	r2, r3
 80084ba:	21a5      	movs	r1, #165	@ 0xa5
 80084bc:	f002 fa02 	bl	800a8c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80084ca:	440b      	add	r3, r1
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	f023 0307 	bic.w	r3, r3, #7
 80084d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00d      	beq.n	8008500 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e8:	b672      	cpsid	i
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	b662      	cpsie	i
 80084f8:	617b      	str	r3, [r7, #20]
}
 80084fa:	bf00      	nop
 80084fc:	bf00      	nop
 80084fe:	e7fd      	b.n	80084fc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d01f      	beq.n	8008546 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008506:	2300      	movs	r3, #0
 8008508:	61fb      	str	r3, [r7, #28]
 800850a:	e012      	b.n	8008532 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	4413      	add	r3, r2
 8008512:	7819      	ldrb	r1, [r3, #0]
 8008514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	4413      	add	r3, r2
 800851a:	3334      	adds	r3, #52	@ 0x34
 800851c:	460a      	mov	r2, r1
 800851e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	4413      	add	r3, r2
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d006      	beq.n	800853a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	3301      	adds	r3, #1
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	2b0f      	cmp	r3, #15
 8008536:	d9e9      	bls.n	800850c <prvInitialiseNewTask+0x6a>
 8008538:	e000      	b.n	800853c <prvInitialiseNewTask+0x9a>
			{
				break;
 800853a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800853c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008544:	e003      	b.n	800854e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800854e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008550:	2b37      	cmp	r3, #55	@ 0x37
 8008552:	d901      	bls.n	8008558 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008554:	2337      	movs	r3, #55	@ 0x37
 8008556:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800855c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008562:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	2200      	movs	r2, #0
 8008568:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	3304      	adds	r3, #4
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff f93e 	bl	80077f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008576:	3318      	adds	r3, #24
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff f939 	bl	80077f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008582:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008586:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008592:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	2200      	movs	r2, #0
 8008598:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	68f9      	ldr	r1, [r7, #12]
 80085a6:	69b8      	ldr	r0, [r7, #24]
 80085a8:	f001 f968 	bl	800987c <pxPortInitialiseStack>
 80085ac:	4602      	mov	r2, r0
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085be:	bf00      	nop
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085d0:	f001 fa64 	bl	8009a9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085d4:	4b2d      	ldr	r3, [pc, #180]	@ (800868c <prvAddNewTaskToReadyList+0xc4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3301      	adds	r3, #1
 80085da:	4a2c      	ldr	r2, [pc, #176]	@ (800868c <prvAddNewTaskToReadyList+0xc4>)
 80085dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085de:	4b2c      	ldr	r3, [pc, #176]	@ (8008690 <prvAddNewTaskToReadyList+0xc8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d109      	bne.n	80085fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008690 <prvAddNewTaskToReadyList+0xc8>)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085ec:	4b27      	ldr	r3, [pc, #156]	@ (800868c <prvAddNewTaskToReadyList+0xc4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d110      	bne.n	8008616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085f4:	f000 fc34 	bl	8008e60 <prvInitialiseTaskLists>
 80085f8:	e00d      	b.n	8008616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085fa:	4b26      	ldr	r3, [pc, #152]	@ (8008694 <prvAddNewTaskToReadyList+0xcc>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008602:	4b23      	ldr	r3, [pc, #140]	@ (8008690 <prvAddNewTaskToReadyList+0xc8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	429a      	cmp	r2, r3
 800860e:	d802      	bhi.n	8008616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008610:	4a1f      	ldr	r2, [pc, #124]	@ (8008690 <prvAddNewTaskToReadyList+0xc8>)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008616:	4b20      	ldr	r3, [pc, #128]	@ (8008698 <prvAddNewTaskToReadyList+0xd0>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3301      	adds	r3, #1
 800861c:	4a1e      	ldr	r2, [pc, #120]	@ (8008698 <prvAddNewTaskToReadyList+0xd0>)
 800861e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008620:	4b1d      	ldr	r3, [pc, #116]	@ (8008698 <prvAddNewTaskToReadyList+0xd0>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862c:	4b1b      	ldr	r3, [pc, #108]	@ (800869c <prvAddNewTaskToReadyList+0xd4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	429a      	cmp	r2, r3
 8008632:	d903      	bls.n	800863c <prvAddNewTaskToReadyList+0x74>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008638:	4a18      	ldr	r2, [pc, #96]	@ (800869c <prvAddNewTaskToReadyList+0xd4>)
 800863a:	6013      	str	r3, [r2, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4a15      	ldr	r2, [pc, #84]	@ (80086a0 <prvAddNewTaskToReadyList+0xd8>)
 800864a:	441a      	add	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3304      	adds	r3, #4
 8008650:	4619      	mov	r1, r3
 8008652:	4610      	mov	r0, r2
 8008654:	f7ff f8d9 	bl	800780a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008658:	f001 fa56 	bl	8009b08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800865c:	4b0d      	ldr	r3, [pc, #52]	@ (8008694 <prvAddNewTaskToReadyList+0xcc>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00e      	beq.n	8008682 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008664:	4b0a      	ldr	r3, [pc, #40]	@ (8008690 <prvAddNewTaskToReadyList+0xc8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	429a      	cmp	r2, r3
 8008670:	d207      	bcs.n	8008682 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008672:	4b0c      	ldr	r3, [pc, #48]	@ (80086a4 <prvAddNewTaskToReadyList+0xdc>)
 8008674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200015d4 	.word	0x200015d4
 8008690:	20001100 	.word	0x20001100
 8008694:	200015e0 	.word	0x200015e0
 8008698:	200015f0 	.word	0x200015f0
 800869c:	200015dc 	.word	0x200015dc
 80086a0:	20001104 	.word	0x20001104
 80086a4:	e000ed04 	.word	0xe000ed04

080086a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d01a      	beq.n	80086f0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086ba:	4b15      	ldr	r3, [pc, #84]	@ (8008710 <vTaskDelay+0x68>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00d      	beq.n	80086de <vTaskDelay+0x36>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c6:	b672      	cpsid	i
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	b662      	cpsie	i
 80086d6:	60bb      	str	r3, [r7, #8]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <vTaskDelay+0x32>
			vTaskSuspendAll();
 80086de:	f000 f887 	bl	80087f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086e2:	2100      	movs	r1, #0
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fd0d 	bl	8009104 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086ea:	f000 f88f 	bl	800880c <xTaskResumeAll>
 80086ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80086f6:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <vTaskDelay+0x6c>)
 80086f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200015fc 	.word	0x200015fc
 8008714:	e000ed04 	.word	0xe000ed04

08008718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	@ 0x28
 800871c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800871e:	2300      	movs	r3, #0
 8008720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008722:	2300      	movs	r3, #0
 8008724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008726:	463a      	mov	r2, r7
 8008728:	1d39      	adds	r1, r7, #4
 800872a:	f107 0308 	add.w	r3, r7, #8
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff f80a 	bl	8007748 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	9202      	str	r2, [sp, #8]
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	2300      	movs	r3, #0
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	2300      	movs	r3, #0
 8008744:	460a      	mov	r2, r1
 8008746:	4924      	ldr	r1, [pc, #144]	@ (80087d8 <vTaskStartScheduler+0xc0>)
 8008748:	4824      	ldr	r0, [pc, #144]	@ (80087dc <vTaskStartScheduler+0xc4>)
 800874a:	f7ff fdff 	bl	800834c <xTaskCreateStatic>
 800874e:	4603      	mov	r3, r0
 8008750:	4a23      	ldr	r2, [pc, #140]	@ (80087e0 <vTaskStartScheduler+0xc8>)
 8008752:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008754:	4b22      	ldr	r3, [pc, #136]	@ (80087e0 <vTaskStartScheduler+0xc8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800875c:	2301      	movs	r3, #1
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	e001      	b.n	8008766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008762:	2300      	movs	r3, #0
 8008764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d102      	bne.n	8008772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800876c:	f000 fd1e 	bl	80091ac <xTimerCreateTimerTask>
 8008770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d118      	bne.n	80087aa <vTaskStartScheduler+0x92>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877c:	b672      	cpsid	i
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	b662      	cpsie	i
 800878c:	613b      	str	r3, [r7, #16]
}
 800878e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008790:	4b14      	ldr	r3, [pc, #80]	@ (80087e4 <vTaskStartScheduler+0xcc>)
 8008792:	f04f 32ff 	mov.w	r2, #4294967295
 8008796:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008798:	4b13      	ldr	r3, [pc, #76]	@ (80087e8 <vTaskStartScheduler+0xd0>)
 800879a:	2201      	movs	r2, #1
 800879c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800879e:	4b13      	ldr	r3, [pc, #76]	@ (80087ec <vTaskStartScheduler+0xd4>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087a4:	f001 f8fc 	bl	80099a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087a8:	e011      	b.n	80087ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b0:	d10d      	bne.n	80087ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b6:	b672      	cpsid	i
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	b662      	cpsie	i
 80087c6:	60fb      	str	r3, [r7, #12]
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	e7fd      	b.n	80087ca <vTaskStartScheduler+0xb2>
}
 80087ce:	bf00      	nop
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	0800ac44 	.word	0x0800ac44
 80087dc:	08008e31 	.word	0x08008e31
 80087e0:	200015f8 	.word	0x200015f8
 80087e4:	200015f4 	.word	0x200015f4
 80087e8:	200015e0 	.word	0x200015e0
 80087ec:	200015d8 	.word	0x200015d8

080087f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087f4:	4b04      	ldr	r3, [pc, #16]	@ (8008808 <vTaskSuspendAll+0x18>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	4a03      	ldr	r2, [pc, #12]	@ (8008808 <vTaskSuspendAll+0x18>)
 80087fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80087fe:	bf00      	nop
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	200015fc 	.word	0x200015fc

0800880c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800881a:	4b43      	ldr	r3, [pc, #268]	@ (8008928 <xTaskResumeAll+0x11c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10d      	bne.n	800883e <xTaskResumeAll+0x32>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008826:	b672      	cpsid	i
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	b662      	cpsie	i
 8008836:	603b      	str	r3, [r7, #0]
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	e7fd      	b.n	800883a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800883e:	f001 f92d 	bl	8009a9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008842:	4b39      	ldr	r3, [pc, #228]	@ (8008928 <xTaskResumeAll+0x11c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3b01      	subs	r3, #1
 8008848:	4a37      	ldr	r2, [pc, #220]	@ (8008928 <xTaskResumeAll+0x11c>)
 800884a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800884c:	4b36      	ldr	r3, [pc, #216]	@ (8008928 <xTaskResumeAll+0x11c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d162      	bne.n	800891a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008854:	4b35      	ldr	r3, [pc, #212]	@ (800892c <xTaskResumeAll+0x120>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d05e      	beq.n	800891a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800885c:	e02f      	b.n	80088be <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885e:	4b34      	ldr	r3, [pc, #208]	@ (8008930 <xTaskResumeAll+0x124>)
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3318      	adds	r3, #24
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff f82a 	bl	80078c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3304      	adds	r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff f825 	bl	80078c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800887e:	4b2d      	ldr	r3, [pc, #180]	@ (8008934 <xTaskResumeAll+0x128>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d903      	bls.n	800888e <xTaskResumeAll+0x82>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888a:	4a2a      	ldr	r2, [pc, #168]	@ (8008934 <xTaskResumeAll+0x128>)
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4a27      	ldr	r2, [pc, #156]	@ (8008938 <xTaskResumeAll+0x12c>)
 800889c:	441a      	add	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f7fe ffb0 	bl	800780a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ae:	4b23      	ldr	r3, [pc, #140]	@ (800893c <xTaskResumeAll+0x130>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d302      	bcc.n	80088be <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80088b8:	4b21      	ldr	r3, [pc, #132]	@ (8008940 <xTaskResumeAll+0x134>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088be:	4b1c      	ldr	r3, [pc, #112]	@ (8008930 <xTaskResumeAll+0x124>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1cb      	bne.n	800885e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088cc:	f000 fb68 	bl	8008fa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80088d0:	4b1c      	ldr	r3, [pc, #112]	@ (8008944 <xTaskResumeAll+0x138>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d010      	beq.n	80088fe <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088dc:	f000 f846 	bl	800896c <xTaskIncrementTick>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80088e6:	4b16      	ldr	r3, [pc, #88]	@ (8008940 <xTaskResumeAll+0x134>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1f1      	bne.n	80088dc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80088f8:	4b12      	ldr	r3, [pc, #72]	@ (8008944 <xTaskResumeAll+0x138>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088fe:	4b10      	ldr	r3, [pc, #64]	@ (8008940 <xTaskResumeAll+0x134>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d009      	beq.n	800891a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008906:	2301      	movs	r3, #1
 8008908:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800890a:	4b0f      	ldr	r3, [pc, #60]	@ (8008948 <xTaskResumeAll+0x13c>)
 800890c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800891a:	f001 f8f5 	bl	8009b08 <vPortExitCritical>

	return xAlreadyYielded;
 800891e:	68bb      	ldr	r3, [r7, #8]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	200015fc 	.word	0x200015fc
 800892c:	200015d4 	.word	0x200015d4
 8008930:	20001594 	.word	0x20001594
 8008934:	200015dc 	.word	0x200015dc
 8008938:	20001104 	.word	0x20001104
 800893c:	20001100 	.word	0x20001100
 8008940:	200015e8 	.word	0x200015e8
 8008944:	200015e4 	.word	0x200015e4
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008952:	4b05      	ldr	r3, [pc, #20]	@ (8008968 <xTaskGetTickCount+0x1c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008958:	687b      	ldr	r3, [r7, #4]
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	200015d8 	.word	0x200015d8

0800896c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008976:	4b50      	ldr	r3, [pc, #320]	@ (8008ab8 <xTaskIncrementTick+0x14c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	f040 808c 	bne.w	8008a98 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008980:	4b4e      	ldr	r3, [pc, #312]	@ (8008abc <xTaskIncrementTick+0x150>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3301      	adds	r3, #1
 8008986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008988:	4a4c      	ldr	r2, [pc, #304]	@ (8008abc <xTaskIncrementTick+0x150>)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d123      	bne.n	80089dc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008994:	4b4a      	ldr	r3, [pc, #296]	@ (8008ac0 <xTaskIncrementTick+0x154>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00d      	beq.n	80089ba <xTaskIncrementTick+0x4e>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	b672      	cpsid	i
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	b662      	cpsie	i
 80089b2:	603b      	str	r3, [r7, #0]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <xTaskIncrementTick+0x4a>
 80089ba:	4b41      	ldr	r3, [pc, #260]	@ (8008ac0 <xTaskIncrementTick+0x154>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	4b40      	ldr	r3, [pc, #256]	@ (8008ac4 <xTaskIncrementTick+0x158>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ac0 <xTaskIncrementTick+0x154>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	4a3e      	ldr	r2, [pc, #248]	@ (8008ac4 <xTaskIncrementTick+0x158>)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	4b3e      	ldr	r3, [pc, #248]	@ (8008ac8 <xTaskIncrementTick+0x15c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3301      	adds	r3, #1
 80089d4:	4a3c      	ldr	r2, [pc, #240]	@ (8008ac8 <xTaskIncrementTick+0x15c>)
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	f000 fae2 	bl	8008fa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089dc:	4b3b      	ldr	r3, [pc, #236]	@ (8008acc <xTaskIncrementTick+0x160>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d349      	bcc.n	8008a7a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089e6:	4b36      	ldr	r3, [pc, #216]	@ (8008ac0 <xTaskIncrementTick+0x154>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d104      	bne.n	80089fa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f0:	4b36      	ldr	r3, [pc, #216]	@ (8008acc <xTaskIncrementTick+0x160>)
 80089f2:	f04f 32ff 	mov.w	r2, #4294967295
 80089f6:	601a      	str	r2, [r3, #0]
					break;
 80089f8:	e03f      	b.n	8008a7a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089fa:	4b31      	ldr	r3, [pc, #196]	@ (8008ac0 <xTaskIncrementTick+0x154>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d203      	bcs.n	8008a1a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a12:	4a2e      	ldr	r2, [pc, #184]	@ (8008acc <xTaskIncrementTick+0x160>)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a18:	e02f      	b.n	8008a7a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe ff50 	bl	80078c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d004      	beq.n	8008a36 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3318      	adds	r3, #24
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe ff47 	bl	80078c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3a:	4b25      	ldr	r3, [pc, #148]	@ (8008ad0 <xTaskIncrementTick+0x164>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d903      	bls.n	8008a4a <xTaskIncrementTick+0xde>
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a46:	4a22      	ldr	r2, [pc, #136]	@ (8008ad0 <xTaskIncrementTick+0x164>)
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4a1f      	ldr	r2, [pc, #124]	@ (8008ad4 <xTaskIncrementTick+0x168>)
 8008a58:	441a      	add	r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4610      	mov	r0, r2
 8008a62:	f7fe fed2 	bl	800780a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ad8 <xTaskIncrementTick+0x16c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d3b8      	bcc.n	80089e6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a78:	e7b5      	b.n	80089e6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a7a:	4b17      	ldr	r3, [pc, #92]	@ (8008ad8 <xTaskIncrementTick+0x16c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a80:	4914      	ldr	r1, [pc, #80]	@ (8008ad4 <xTaskIncrementTick+0x168>)
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d907      	bls.n	8008aa2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008a92:	2301      	movs	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e004      	b.n	8008aa2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a98:	4b10      	ldr	r3, [pc, #64]	@ (8008adc <xTaskIncrementTick+0x170>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8008adc <xTaskIncrementTick+0x170>)
 8008aa0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ae0 <xTaskIncrementTick+0x174>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008aae:	697b      	ldr	r3, [r7, #20]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	200015fc 	.word	0x200015fc
 8008abc:	200015d8 	.word	0x200015d8
 8008ac0:	2000158c 	.word	0x2000158c
 8008ac4:	20001590 	.word	0x20001590
 8008ac8:	200015ec 	.word	0x200015ec
 8008acc:	200015f4 	.word	0x200015f4
 8008ad0:	200015dc 	.word	0x200015dc
 8008ad4:	20001104 	.word	0x20001104
 8008ad8:	20001100 	.word	0x20001100
 8008adc:	200015e4 	.word	0x200015e4
 8008ae0:	200015e8 	.word	0x200015e8

08008ae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008aea:	4b29      	ldr	r3, [pc, #164]	@ (8008b90 <vTaskSwitchContext+0xac>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008af2:	4b28      	ldr	r3, [pc, #160]	@ (8008b94 <vTaskSwitchContext+0xb0>)
 8008af4:	2201      	movs	r2, #1
 8008af6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008af8:	e044      	b.n	8008b84 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008afa:	4b26      	ldr	r3, [pc, #152]	@ (8008b94 <vTaskSwitchContext+0xb0>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b00:	4b25      	ldr	r3, [pc, #148]	@ (8008b98 <vTaskSwitchContext+0xb4>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	e013      	b.n	8008b30 <vTaskSwitchContext+0x4c>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10d      	bne.n	8008b2a <vTaskSwitchContext+0x46>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	b672      	cpsid	i
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	b662      	cpsie	i
 8008b22:	607b      	str	r3, [r7, #4]
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop
 8008b28:	e7fd      	b.n	8008b26 <vTaskSwitchContext+0x42>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	491a      	ldr	r1, [pc, #104]	@ (8008b9c <vTaskSwitchContext+0xb8>)
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0e1      	beq.n	8008b08 <vTaskSwitchContext+0x24>
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4a13      	ldr	r2, [pc, #76]	@ (8008b9c <vTaskSwitchContext+0xb8>)
 8008b50:	4413      	add	r3, r2
 8008b52:	60bb      	str	r3, [r7, #8]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	605a      	str	r2, [r3, #4]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	3308      	adds	r3, #8
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d104      	bne.n	8008b74 <vTaskSwitchContext+0x90>
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	605a      	str	r2, [r3, #4]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	4a09      	ldr	r2, [pc, #36]	@ (8008ba0 <vTaskSwitchContext+0xbc>)
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	4a06      	ldr	r2, [pc, #24]	@ (8008b98 <vTaskSwitchContext+0xb4>)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6013      	str	r3, [r2, #0]
}
 8008b84:	bf00      	nop
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	200015fc 	.word	0x200015fc
 8008b94:	200015e8 	.word	0x200015e8
 8008b98:	200015dc 	.word	0x200015dc
 8008b9c:	20001104 	.word	0x20001104
 8008ba0:	20001100 	.word	0x20001100

08008ba4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10d      	bne.n	8008bd0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb8:	b672      	cpsid	i
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	b662      	cpsie	i
 8008bc8:	60fb      	str	r3, [r7, #12]
}
 8008bca:	bf00      	nop
 8008bcc:	bf00      	nop
 8008bce:	e7fd      	b.n	8008bcc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bd0:	4b07      	ldr	r3, [pc, #28]	@ (8008bf0 <vTaskPlaceOnEventList+0x4c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3318      	adds	r3, #24
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7fe fe3a 	bl	8007852 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bde:	2101      	movs	r1, #1
 8008be0:	6838      	ldr	r0, [r7, #0]
 8008be2:	f000 fa8f 	bl	8009104 <prvAddCurrentTaskToDelayedList>
}
 8008be6:	bf00      	nop
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20001100 	.word	0x20001100

08008bf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10d      	bne.n	8008c22 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0a:	b672      	cpsid	i
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	b662      	cpsie	i
 8008c1a:	617b      	str	r3, [r7, #20]
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	e7fd      	b.n	8008c1e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c22:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <vTaskPlaceOnEventListRestricted+0x58>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3318      	adds	r3, #24
 8008c28:	4619      	mov	r1, r3
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f7fe fded 	bl	800780a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	68b8      	ldr	r0, [r7, #8]
 8008c40:	f000 fa60 	bl	8009104 <prvAddCurrentTaskToDelayedList>
	}
 8008c44:	bf00      	nop
 8008c46:	3718      	adds	r7, #24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	20001100 	.word	0x20001100

08008c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10d      	bne.n	8008c82 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6a:	b672      	cpsid	i
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	b662      	cpsie	i
 8008c7a:	60fb      	str	r3, [r7, #12]
}
 8008c7c:	bf00      	nop
 8008c7e:	bf00      	nop
 8008c80:	e7fd      	b.n	8008c7e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	3318      	adds	r3, #24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe fe1c 	bl	80078c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008d04 <xTaskRemoveFromEventList+0xb4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11d      	bne.n	8008cd0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	3304      	adds	r3, #4
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fe13 	bl	80078c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca2:	4b19      	ldr	r3, [pc, #100]	@ (8008d08 <xTaskRemoveFromEventList+0xb8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d903      	bls.n	8008cb2 <xTaskRemoveFromEventList+0x62>
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cae:	4a16      	ldr	r2, [pc, #88]	@ (8008d08 <xTaskRemoveFromEventList+0xb8>)
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4a13      	ldr	r2, [pc, #76]	@ (8008d0c <xTaskRemoveFromEventList+0xbc>)
 8008cc0:	441a      	add	r2, r3
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4610      	mov	r0, r2
 8008cca:	f7fe fd9e 	bl	800780a <vListInsertEnd>
 8008cce:	e005      	b.n	8008cdc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	3318      	adds	r3, #24
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	480e      	ldr	r0, [pc, #56]	@ (8008d10 <xTaskRemoveFromEventList+0xc0>)
 8008cd8:	f7fe fd97 	bl	800780a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d14 <xTaskRemoveFromEventList+0xc4>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d905      	bls.n	8008cf6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cea:	2301      	movs	r3, #1
 8008cec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cee:	4b0a      	ldr	r3, [pc, #40]	@ (8008d18 <xTaskRemoveFromEventList+0xc8>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	e001      	b.n	8008cfa <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008cfa:	697b      	ldr	r3, [r7, #20]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	200015fc 	.word	0x200015fc
 8008d08:	200015dc 	.word	0x200015dc
 8008d0c:	20001104 	.word	0x20001104
 8008d10:	20001594 	.word	0x20001594
 8008d14:	20001100 	.word	0x20001100
 8008d18:	200015e8 	.word	0x200015e8

08008d1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d24:	4b06      	ldr	r3, [pc, #24]	@ (8008d40 <vTaskInternalSetTimeOutState+0x24>)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d2c:	4b05      	ldr	r3, [pc, #20]	@ (8008d44 <vTaskInternalSetTimeOutState+0x28>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	200015ec 	.word	0x200015ec
 8008d44:	200015d8 	.word	0x200015d8

08008d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10d      	bne.n	8008d74 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	b672      	cpsid	i
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	b662      	cpsie	i
 8008d6c:	613b      	str	r3, [r7, #16]
}
 8008d6e:	bf00      	nop
 8008d70:	bf00      	nop
 8008d72:	e7fd      	b.n	8008d70 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10d      	bne.n	8008d96 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7e:	b672      	cpsid	i
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	b662      	cpsie	i
 8008d8e:	60fb      	str	r3, [r7, #12]
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	e7fd      	b.n	8008d92 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008d96:	f000 fe81 	bl	8009a9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8008e10 <xTaskCheckForTimeOut+0xc8>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db2:	d102      	bne.n	8008dba <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	e023      	b.n	8008e02 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	4b15      	ldr	r3, [pc, #84]	@ (8008e14 <xTaskCheckForTimeOut+0xcc>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d007      	beq.n	8008dd6 <xTaskCheckForTimeOut+0x8e>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d302      	bcc.n	8008dd6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	e015      	b.n	8008e02 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d20b      	bcs.n	8008df8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	1ad2      	subs	r2, r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff ff95 	bl	8008d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]
 8008df6:	e004      	b.n	8008e02 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e02:	f000 fe81 	bl	8009b08 <vPortExitCritical>

	return xReturn;
 8008e06:	69fb      	ldr	r3, [r7, #28]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	200015d8 	.word	0x200015d8
 8008e14:	200015ec 	.word	0x200015ec

08008e18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e1c:	4b03      	ldr	r3, [pc, #12]	@ (8008e2c <vTaskMissedYield+0x14>)
 8008e1e:	2201      	movs	r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
}
 8008e22:	bf00      	nop
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	200015e8 	.word	0x200015e8

08008e30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e38:	f000 f852 	bl	8008ee0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e3c:	4b06      	ldr	r3, [pc, #24]	@ (8008e58 <prvIdleTask+0x28>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d9f9      	bls.n	8008e38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e44:	4b05      	ldr	r3, [pc, #20]	@ (8008e5c <prvIdleTask+0x2c>)
 8008e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e54:	e7f0      	b.n	8008e38 <prvIdleTask+0x8>
 8008e56:	bf00      	nop
 8008e58:	20001104 	.word	0x20001104
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e66:	2300      	movs	r3, #0
 8008e68:	607b      	str	r3, [r7, #4]
 8008e6a:	e00c      	b.n	8008e86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4a12      	ldr	r2, [pc, #72]	@ (8008ec0 <prvInitialiseTaskLists+0x60>)
 8008e78:	4413      	add	r3, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe fc98 	bl	80077b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3301      	adds	r3, #1
 8008e84:	607b      	str	r3, [r7, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b37      	cmp	r3, #55	@ 0x37
 8008e8a:	d9ef      	bls.n	8008e6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e8c:	480d      	ldr	r0, [pc, #52]	@ (8008ec4 <prvInitialiseTaskLists+0x64>)
 8008e8e:	f7fe fc8f 	bl	80077b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e92:	480d      	ldr	r0, [pc, #52]	@ (8008ec8 <prvInitialiseTaskLists+0x68>)
 8008e94:	f7fe fc8c 	bl	80077b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e98:	480c      	ldr	r0, [pc, #48]	@ (8008ecc <prvInitialiseTaskLists+0x6c>)
 8008e9a:	f7fe fc89 	bl	80077b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e9e:	480c      	ldr	r0, [pc, #48]	@ (8008ed0 <prvInitialiseTaskLists+0x70>)
 8008ea0:	f7fe fc86 	bl	80077b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ea4:	480b      	ldr	r0, [pc, #44]	@ (8008ed4 <prvInitialiseTaskLists+0x74>)
 8008ea6:	f7fe fc83 	bl	80077b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed8 <prvInitialiseTaskLists+0x78>)
 8008eac:	4a05      	ldr	r2, [pc, #20]	@ (8008ec4 <prvInitialiseTaskLists+0x64>)
 8008eae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8008edc <prvInitialiseTaskLists+0x7c>)
 8008eb2:	4a05      	ldr	r2, [pc, #20]	@ (8008ec8 <prvInitialiseTaskLists+0x68>)
 8008eb4:	601a      	str	r2, [r3, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20001104 	.word	0x20001104
 8008ec4:	20001564 	.word	0x20001564
 8008ec8:	20001578 	.word	0x20001578
 8008ecc:	20001594 	.word	0x20001594
 8008ed0:	200015a8 	.word	0x200015a8
 8008ed4:	200015c0 	.word	0x200015c0
 8008ed8:	2000158c 	.word	0x2000158c
 8008edc:	20001590 	.word	0x20001590

08008ee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ee6:	e019      	b.n	8008f1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ee8:	f000 fdd8 	bl	8009a9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eec:	4b10      	ldr	r3, [pc, #64]	@ (8008f30 <prvCheckTasksWaitingTermination+0x50>)
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe fce3 	bl	80078c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008efe:	4b0d      	ldr	r3, [pc, #52]	@ (8008f34 <prvCheckTasksWaitingTermination+0x54>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	4a0b      	ldr	r2, [pc, #44]	@ (8008f34 <prvCheckTasksWaitingTermination+0x54>)
 8008f06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f08:	4b0b      	ldr	r3, [pc, #44]	@ (8008f38 <prvCheckTasksWaitingTermination+0x58>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8008f38 <prvCheckTasksWaitingTermination+0x58>)
 8008f10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f12:	f000 fdf9 	bl	8009b08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f810 	bl	8008f3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <prvCheckTasksWaitingTermination+0x58>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e1      	bne.n	8008ee8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200015a8 	.word	0x200015a8
 8008f34:	200015d4 	.word	0x200015d4
 8008f38:	200015bc 	.word	0x200015bc

08008f3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d108      	bne.n	8008f60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 ff9e 	bl	8009e94 <vPortFree>
				vPortFree( pxTCB );
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 ff9b 	bl	8009e94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f5e:	e01b      	b.n	8008f98 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d103      	bne.n	8008f72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 ff92 	bl	8009e94 <vPortFree>
	}
 8008f70:	e012      	b.n	8008f98 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d00d      	beq.n	8008f98 <prvDeleteTCB+0x5c>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f80:	b672      	cpsid	i
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	b662      	cpsie	i
 8008f90:	60fb      	str	r3, [r7, #12]
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <prvDeleteTCB+0x58>
	}
 8008f98:	bf00      	nop
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd8 <prvResetNextTaskUnblockTime+0x38>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d104      	bne.n	8008fba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8008fdc <prvResetNextTaskUnblockTime+0x3c>)
 8008fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fb8:	e008      	b.n	8008fcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fba:	4b07      	ldr	r3, [pc, #28]	@ (8008fd8 <prvResetNextTaskUnblockTime+0x38>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	4a04      	ldr	r2, [pc, #16]	@ (8008fdc <prvResetNextTaskUnblockTime+0x3c>)
 8008fca:	6013      	str	r3, [r2, #0]
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	2000158c 	.word	0x2000158c
 8008fdc:	200015f4 	.word	0x200015f4

08008fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8009014 <xTaskGetSchedulerState+0x34>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	607b      	str	r3, [r7, #4]
 8008ff2:	e008      	b.n	8009006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ff4:	4b08      	ldr	r3, [pc, #32]	@ (8009018 <xTaskGetSchedulerState+0x38>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	607b      	str	r3, [r7, #4]
 8009000:	e001      	b.n	8009006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009002:	2300      	movs	r3, #0
 8009004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009006:	687b      	ldr	r3, [r7, #4]
	}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	200015e0 	.word	0x200015e0
 8009018:	200015fc 	.word	0x200015fc

0800901c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d05c      	beq.n	80090ec <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009032:	4b31      	ldr	r3, [pc, #196]	@ (80090f8 <xTaskPriorityDisinherit+0xdc>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	429a      	cmp	r2, r3
 800903a:	d00d      	beq.n	8009058 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009040:	b672      	cpsid	i
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	b662      	cpsie	i
 8009050:	60fb      	str	r3, [r7, #12]
}
 8009052:	bf00      	nop
 8009054:	bf00      	nop
 8009056:	e7fd      	b.n	8009054 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10d      	bne.n	800907c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009064:	b672      	cpsid	i
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	b662      	cpsie	i
 8009074:	60bb      	str	r3, [r7, #8]
}
 8009076:	bf00      	nop
 8009078:	bf00      	nop
 800907a:	e7fd      	b.n	8009078 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009080:	1e5a      	subs	r2, r3, #1
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908e:	429a      	cmp	r2, r3
 8009090:	d02c      	beq.n	80090ec <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009096:	2b00      	cmp	r3, #0
 8009098:	d128      	bne.n	80090ec <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	3304      	adds	r3, #4
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fc10 	bl	80078c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090bc:	4b0f      	ldr	r3, [pc, #60]	@ (80090fc <xTaskPriorityDisinherit+0xe0>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d903      	bls.n	80090cc <xTaskPriorityDisinherit+0xb0>
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c8:	4a0c      	ldr	r2, [pc, #48]	@ (80090fc <xTaskPriorityDisinherit+0xe0>)
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d0:	4613      	mov	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4a09      	ldr	r2, [pc, #36]	@ (8009100 <xTaskPriorityDisinherit+0xe4>)
 80090da:	441a      	add	r2, r3
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	3304      	adds	r3, #4
 80090e0:	4619      	mov	r1, r3
 80090e2:	4610      	mov	r0, r2
 80090e4:	f7fe fb91 	bl	800780a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090e8:	2301      	movs	r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090ec:	697b      	ldr	r3, [r7, #20]
	}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20001100 	.word	0x20001100
 80090fc:	200015dc 	.word	0x200015dc
 8009100:	20001104 	.word	0x20001104

08009104 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800910e:	4b21      	ldr	r3, [pc, #132]	@ (8009194 <prvAddCurrentTaskToDelayedList+0x90>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009114:	4b20      	ldr	r3, [pc, #128]	@ (8009198 <prvAddCurrentTaskToDelayedList+0x94>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3304      	adds	r3, #4
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fbd2 	bl	80078c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d10a      	bne.n	800913e <prvAddCurrentTaskToDelayedList+0x3a>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d007      	beq.n	800913e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800912e:	4b1a      	ldr	r3, [pc, #104]	@ (8009198 <prvAddCurrentTaskToDelayedList+0x94>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3304      	adds	r3, #4
 8009134:	4619      	mov	r1, r3
 8009136:	4819      	ldr	r0, [pc, #100]	@ (800919c <prvAddCurrentTaskToDelayedList+0x98>)
 8009138:	f7fe fb67 	bl	800780a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800913c:	e026      	b.n	800918c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4413      	add	r3, r2
 8009144:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009146:	4b14      	ldr	r3, [pc, #80]	@ (8009198 <prvAddCurrentTaskToDelayedList+0x94>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	429a      	cmp	r2, r3
 8009154:	d209      	bcs.n	800916a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009156:	4b12      	ldr	r3, [pc, #72]	@ (80091a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	4b0f      	ldr	r3, [pc, #60]	@ (8009198 <prvAddCurrentTaskToDelayedList+0x94>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3304      	adds	r3, #4
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f7fe fb75 	bl	8007852 <vListInsert>
}
 8009168:	e010      	b.n	800918c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800916a:	4b0e      	ldr	r3, [pc, #56]	@ (80091a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4b0a      	ldr	r3, [pc, #40]	@ (8009198 <prvAddCurrentTaskToDelayedList+0x94>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3304      	adds	r3, #4
 8009174:	4619      	mov	r1, r3
 8009176:	4610      	mov	r0, r2
 8009178:	f7fe fb6b 	bl	8007852 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800917c:	4b0a      	ldr	r3, [pc, #40]	@ (80091a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	429a      	cmp	r2, r3
 8009184:	d202      	bcs.n	800918c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009186:	4a08      	ldr	r2, [pc, #32]	@ (80091a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	6013      	str	r3, [r2, #0]
}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	200015d8 	.word	0x200015d8
 8009198:	20001100 	.word	0x20001100
 800919c:	200015c0 	.word	0x200015c0
 80091a0:	20001590 	.word	0x20001590
 80091a4:	2000158c 	.word	0x2000158c
 80091a8:	200015f4 	.word	0x200015f4

080091ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08a      	sub	sp, #40	@ 0x28
 80091b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091b6:	f000 fb21 	bl	80097fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009234 <xTimerCreateTimerTask+0x88>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d021      	beq.n	8009206 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091ca:	1d3a      	adds	r2, r7, #4
 80091cc:	f107 0108 	add.w	r1, r7, #8
 80091d0:	f107 030c 	add.w	r3, r7, #12
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fad1 	bl	800777c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	9202      	str	r2, [sp, #8]
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	2302      	movs	r3, #2
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2300      	movs	r3, #0
 80091ea:	460a      	mov	r2, r1
 80091ec:	4912      	ldr	r1, [pc, #72]	@ (8009238 <xTimerCreateTimerTask+0x8c>)
 80091ee:	4813      	ldr	r0, [pc, #76]	@ (800923c <xTimerCreateTimerTask+0x90>)
 80091f0:	f7ff f8ac 	bl	800834c <xTaskCreateStatic>
 80091f4:	4603      	mov	r3, r0
 80091f6:	4a12      	ldr	r2, [pc, #72]	@ (8009240 <xTimerCreateTimerTask+0x94>)
 80091f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091fa:	4b11      	ldr	r3, [pc, #68]	@ (8009240 <xTimerCreateTimerTask+0x94>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009202:	2301      	movs	r3, #1
 8009204:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10d      	bne.n	8009228 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009210:	b672      	cpsid	i
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	b662      	cpsie	i
 8009220:	613b      	str	r3, [r7, #16]
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	e7fd      	b.n	8009224 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009228:	697b      	ldr	r3, [r7, #20]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20001630 	.word	0x20001630
 8009238:	0800ac4c 	.word	0x0800ac4c
 800923c:	08009385 	.word	0x08009385
 8009240:	20001634 	.word	0x20001634

08009244 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08a      	sub	sp, #40	@ 0x28
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009252:	2300      	movs	r3, #0
 8009254:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10d      	bne.n	8009278 <xTimerGenericCommand+0x34>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	b672      	cpsid	i
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	b662      	cpsie	i
 8009270:	623b      	str	r3, [r7, #32]
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	e7fd      	b.n	8009274 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009278:	4b19      	ldr	r3, [pc, #100]	@ (80092e0 <xTimerGenericCommand+0x9c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d02a      	beq.n	80092d6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b05      	cmp	r3, #5
 8009290:	dc18      	bgt.n	80092c4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009292:	f7ff fea5 	bl	8008fe0 <xTaskGetSchedulerState>
 8009296:	4603      	mov	r3, r0
 8009298:	2b02      	cmp	r3, #2
 800929a:	d109      	bne.n	80092b0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800929c:	4b10      	ldr	r3, [pc, #64]	@ (80092e0 <xTimerGenericCommand+0x9c>)
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	f107 0110 	add.w	r1, r7, #16
 80092a4:	2300      	movs	r3, #0
 80092a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092a8:	f7fe fc4c 	bl	8007b44 <xQueueGenericSend>
 80092ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80092ae:	e012      	b.n	80092d6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092b0:	4b0b      	ldr	r3, [pc, #44]	@ (80092e0 <xTimerGenericCommand+0x9c>)
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	f107 0110 	add.w	r1, r7, #16
 80092b8:	2300      	movs	r3, #0
 80092ba:	2200      	movs	r2, #0
 80092bc:	f7fe fc42 	bl	8007b44 <xQueueGenericSend>
 80092c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80092c2:	e008      	b.n	80092d6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092c4:	4b06      	ldr	r3, [pc, #24]	@ (80092e0 <xTimerGenericCommand+0x9c>)
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	f107 0110 	add.w	r1, r7, #16
 80092cc:	2300      	movs	r3, #0
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	f7fe fd42 	bl	8007d58 <xQueueGenericSendFromISR>
 80092d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3728      	adds	r7, #40	@ 0x28
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20001630 	.word	0x20001630

080092e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ee:	4b24      	ldr	r3, [pc, #144]	@ (8009380 <prvProcessExpiredTimer+0x9c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	3304      	adds	r3, #4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fae1 	bl	80078c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b00      	cmp	r3, #0
 800930e:	d025      	beq.n	800935c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	18d1      	adds	r1, r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	6978      	ldr	r0, [r7, #20]
 800931e:	f000 f8d7 	bl	80094d0 <prvInsertTimerInActiveList>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d022      	beq.n	800936e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009328:	2300      	movs	r3, #0
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	2300      	movs	r3, #0
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	2100      	movs	r1, #0
 8009332:	6978      	ldr	r0, [r7, #20]
 8009334:	f7ff ff86 	bl	8009244 <xTimerGenericCommand>
 8009338:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d116      	bne.n	800936e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009344:	b672      	cpsid	i
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	b662      	cpsie	i
 8009354:	60fb      	str	r3, [r7, #12]
}
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	e7fd      	b.n	8009358 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009362:	f023 0301 	bic.w	r3, r3, #1
 8009366:	b2da      	uxtb	r2, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	6978      	ldr	r0, [r7, #20]
 8009374:	4798      	blx	r3
}
 8009376:	bf00      	nop
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20001628 	.word	0x20001628

08009384 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800938c:	f107 0308 	add.w	r3, r7, #8
 8009390:	4618      	mov	r0, r3
 8009392:	f000 f859 	bl	8009448 <prvGetNextExpireTime>
 8009396:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	4619      	mov	r1, r3
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 f805 	bl	80093ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093a2:	f000 f8d7 	bl	8009554 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093a6:	bf00      	nop
 80093a8:	e7f0      	b.n	800938c <prvTimerTask+0x8>
	...

080093ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093b6:	f7ff fa1b 	bl	80087f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093ba:	f107 0308 	add.w	r3, r7, #8
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 f866 	bl	8009490 <prvSampleTimeNow>
 80093c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d130      	bne.n	800942e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10a      	bne.n	80093e8 <prvProcessTimerOrBlockTask+0x3c>
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d806      	bhi.n	80093e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093da:	f7ff fa17 	bl	800880c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093de:	68f9      	ldr	r1, [r7, #12]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff ff7f 	bl	80092e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093e6:	e024      	b.n	8009432 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d008      	beq.n	8009400 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093ee:	4b13      	ldr	r3, [pc, #76]	@ (800943c <prvProcessTimerOrBlockTask+0x90>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <prvProcessTimerOrBlockTask+0x50>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e000      	b.n	80093fe <prvProcessTimerOrBlockTask+0x52>
 80093fc:	2300      	movs	r3, #0
 80093fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009400:	4b0f      	ldr	r3, [pc, #60]	@ (8009440 <prvProcessTimerOrBlockTask+0x94>)
 8009402:	6818      	ldr	r0, [r3, #0]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	4619      	mov	r1, r3
 800940e:	f7fe ff69 	bl	80082e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009412:	f7ff f9fb 	bl	800880c <xTaskResumeAll>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10a      	bne.n	8009432 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800941c:	4b09      	ldr	r3, [pc, #36]	@ (8009444 <prvProcessTimerOrBlockTask+0x98>)
 800941e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	f3bf 8f6f 	isb	sy
}
 800942c:	e001      	b.n	8009432 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800942e:	f7ff f9ed 	bl	800880c <xTaskResumeAll>
}
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	2000162c 	.word	0x2000162c
 8009440:	20001630 	.word	0x20001630
 8009444:	e000ed04 	.word	0xe000ed04

08009448 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009450:	4b0e      	ldr	r3, [pc, #56]	@ (800948c <prvGetNextExpireTime+0x44>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <prvGetNextExpireTime+0x16>
 800945a:	2201      	movs	r2, #1
 800945c:	e000      	b.n	8009460 <prvGetNextExpireTime+0x18>
 800945e:	2200      	movs	r2, #0
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d105      	bne.n	8009478 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800946c:	4b07      	ldr	r3, [pc, #28]	@ (800948c <prvGetNextExpireTime+0x44>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	e001      	b.n	800947c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800947c:	68fb      	ldr	r3, [r7, #12]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	20001628 	.word	0x20001628

08009490 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009498:	f7ff fa58 	bl	800894c <xTaskGetTickCount>
 800949c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800949e:	4b0b      	ldr	r3, [pc, #44]	@ (80094cc <prvSampleTimeNow+0x3c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d205      	bcs.n	80094b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094a8:	f000 f940 	bl	800972c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	e002      	b.n	80094ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094ba:	4a04      	ldr	r2, [pc, #16]	@ (80094cc <prvSampleTimeNow+0x3c>)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094c0:	68fb      	ldr	r3, [r7, #12]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20001638 	.word	0x20001638

080094d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d812      	bhi.n	800951c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	1ad2      	subs	r2, r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	429a      	cmp	r2, r3
 8009502:	d302      	bcc.n	800950a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009504:	2301      	movs	r3, #1
 8009506:	617b      	str	r3, [r7, #20]
 8009508:	e01b      	b.n	8009542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800950a:	4b10      	ldr	r3, [pc, #64]	@ (800954c <prvInsertTimerInActiveList+0x7c>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3304      	adds	r3, #4
 8009512:	4619      	mov	r1, r3
 8009514:	4610      	mov	r0, r2
 8009516:	f7fe f99c 	bl	8007852 <vListInsert>
 800951a:	e012      	b.n	8009542 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d206      	bcs.n	8009532 <prvInsertTimerInActiveList+0x62>
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	429a      	cmp	r2, r3
 800952a:	d302      	bcc.n	8009532 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800952c:	2301      	movs	r3, #1
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	e007      	b.n	8009542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009532:	4b07      	ldr	r3, [pc, #28]	@ (8009550 <prvInsertTimerInActiveList+0x80>)
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3304      	adds	r3, #4
 800953a:	4619      	mov	r1, r3
 800953c:	4610      	mov	r0, r2
 800953e:	f7fe f988 	bl	8007852 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009542:	697b      	ldr	r3, [r7, #20]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	2000162c 	.word	0x2000162c
 8009550:	20001628 	.word	0x20001628

08009554 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08e      	sub	sp, #56	@ 0x38
 8009558:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800955a:	e0d4      	b.n	8009706 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	da1b      	bge.n	800959a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009562:	1d3b      	adds	r3, r7, #4
 8009564:	3304      	adds	r3, #4
 8009566:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10d      	bne.n	800958a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009572:	b672      	cpsid	i
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	b662      	cpsie	i
 8009582:	61fb      	str	r3, [r7, #28]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800958a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009590:	6850      	ldr	r0, [r2, #4]
 8009592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009594:	6892      	ldr	r2, [r2, #8]
 8009596:	4611      	mov	r1, r2
 8009598:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	f2c0 80b2 	blt.w	8009706 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d004      	beq.n	80095b8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b0:	3304      	adds	r3, #4
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe f986 	bl	80078c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095b8:	463b      	mov	r3, r7
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff ff68 	bl	8009490 <prvSampleTimeNow>
 80095c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b09      	cmp	r3, #9
 80095c6:	f200 809b 	bhi.w	8009700 <prvProcessReceivedCommands+0x1ac>
 80095ca:	a201      	add	r2, pc, #4	@ (adr r2, 80095d0 <prvProcessReceivedCommands+0x7c>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	080095f9 	.word	0x080095f9
 80095d4:	080095f9 	.word	0x080095f9
 80095d8:	080095f9 	.word	0x080095f9
 80095dc:	08009673 	.word	0x08009673
 80095e0:	08009687 	.word	0x08009687
 80095e4:	080096d7 	.word	0x080096d7
 80095e8:	080095f9 	.word	0x080095f9
 80095ec:	080095f9 	.word	0x080095f9
 80095f0:	08009673 	.word	0x08009673
 80095f4:	08009687 	.word	0x08009687
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	18d1      	adds	r1, r2, r3
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009618:	f7ff ff5a 	bl	80094d0 <prvInsertTimerInActiveList>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d070      	beq.n	8009704 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800962a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d065      	beq.n	8009704 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	441a      	add	r2, r3
 8009640:	2300      	movs	r3, #0
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	2300      	movs	r3, #0
 8009646:	2100      	movs	r1, #0
 8009648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800964a:	f7ff fdfb 	bl	8009244 <xTimerGenericCommand>
 800964e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d156      	bne.n	8009704 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965a:	b672      	cpsid	i
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	b662      	cpsie	i
 800966a:	61bb      	str	r3, [r7, #24]
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	e7fd      	b.n	800966e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009678:	f023 0301 	bic.w	r3, r3, #1
 800967c:	b2da      	uxtb	r2, r3
 800967e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009684:	e03f      	b.n	8009706 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800968c:	f043 0301 	orr.w	r3, r3, #1
 8009690:	b2da      	uxtb	r2, r3
 8009692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009694:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800969e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10d      	bne.n	80096c2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096aa:	b672      	cpsid	i
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	b662      	cpsie	i
 80096ba:	617b      	str	r3, [r7, #20]
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	e7fd      	b.n	80096be <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c4:	699a      	ldr	r2, [r3, #24]
 80096c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c8:	18d1      	adds	r1, r2, r3
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096d0:	f7ff fefe 	bl	80094d0 <prvInsertTimerInActiveList>
					break;
 80096d4:	e017      	b.n	8009706 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80096e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096e6:	f000 fbd5 	bl	8009e94 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096ea:	e00c      	b.n	8009706 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096f2:	f023 0301 	bic.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096fe:	e002      	b.n	8009706 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009700:	bf00      	nop
 8009702:	e000      	b.n	8009706 <prvProcessReceivedCommands+0x1b2>
					break;
 8009704:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009706:	4b08      	ldr	r3, [pc, #32]	@ (8009728 <prvProcessReceivedCommands+0x1d4>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	1d39      	adds	r1, r7, #4
 800970c:	2200      	movs	r2, #0
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fbc6 	bl	8007ea0 <xQueueReceive>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	f47f af20 	bne.w	800955c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800971c:	bf00      	nop
 800971e:	bf00      	nop
 8009720:	3730      	adds	r7, #48	@ 0x30
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20001630 	.word	0x20001630

0800972c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009732:	e04b      	b.n	80097cc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009734:	4b2f      	ldr	r3, [pc, #188]	@ (80097f4 <prvSwitchTimerLists+0xc8>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800973e:	4b2d      	ldr	r3, [pc, #180]	@ (80097f4 <prvSwitchTimerLists+0xc8>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3304      	adds	r3, #4
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe f8b9 	bl	80078c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b00      	cmp	r3, #0
 8009766:	d031      	beq.n	80097cc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	4413      	add	r3, r2
 8009770:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	429a      	cmp	r2, r3
 8009778:	d90e      	bls.n	8009798 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009786:	4b1b      	ldr	r3, [pc, #108]	@ (80097f4 <prvSwitchTimerLists+0xc8>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3304      	adds	r3, #4
 800978e:	4619      	mov	r1, r3
 8009790:	4610      	mov	r0, r2
 8009792:	f7fe f85e 	bl	8007852 <vListInsert>
 8009796:	e019      	b.n	80097cc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009798:	2300      	movs	r3, #0
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	2300      	movs	r3, #0
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	2100      	movs	r1, #0
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f7ff fd4e 	bl	8009244 <xTimerGenericCommand>
 80097a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10d      	bne.n	80097cc <prvSwitchTimerLists+0xa0>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b4:	b672      	cpsid	i
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	b662      	cpsie	i
 80097c4:	603b      	str	r3, [r7, #0]
}
 80097c6:	bf00      	nop
 80097c8:	bf00      	nop
 80097ca:	e7fd      	b.n	80097c8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097cc:	4b09      	ldr	r3, [pc, #36]	@ (80097f4 <prvSwitchTimerLists+0xc8>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1ae      	bne.n	8009734 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097d6:	4b07      	ldr	r3, [pc, #28]	@ (80097f4 <prvSwitchTimerLists+0xc8>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097dc:	4b06      	ldr	r3, [pc, #24]	@ (80097f8 <prvSwitchTimerLists+0xcc>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a04      	ldr	r2, [pc, #16]	@ (80097f4 <prvSwitchTimerLists+0xc8>)
 80097e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097e4:	4a04      	ldr	r2, [pc, #16]	@ (80097f8 <prvSwitchTimerLists+0xcc>)
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	6013      	str	r3, [r2, #0]
}
 80097ea:	bf00      	nop
 80097ec:	3718      	adds	r7, #24
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20001628 	.word	0x20001628
 80097f8:	2000162c 	.word	0x2000162c

080097fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009802:	f000 f94b 	bl	8009a9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009806:	4b15      	ldr	r3, [pc, #84]	@ (800985c <prvCheckForValidListAndQueue+0x60>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d120      	bne.n	8009850 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800980e:	4814      	ldr	r0, [pc, #80]	@ (8009860 <prvCheckForValidListAndQueue+0x64>)
 8009810:	f7fd ffce 	bl	80077b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009814:	4813      	ldr	r0, [pc, #76]	@ (8009864 <prvCheckForValidListAndQueue+0x68>)
 8009816:	f7fd ffcb 	bl	80077b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800981a:	4b13      	ldr	r3, [pc, #76]	@ (8009868 <prvCheckForValidListAndQueue+0x6c>)
 800981c:	4a10      	ldr	r2, [pc, #64]	@ (8009860 <prvCheckForValidListAndQueue+0x64>)
 800981e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009820:	4b12      	ldr	r3, [pc, #72]	@ (800986c <prvCheckForValidListAndQueue+0x70>)
 8009822:	4a10      	ldr	r2, [pc, #64]	@ (8009864 <prvCheckForValidListAndQueue+0x68>)
 8009824:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009826:	2300      	movs	r3, #0
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	4b11      	ldr	r3, [pc, #68]	@ (8009870 <prvCheckForValidListAndQueue+0x74>)
 800982c:	4a11      	ldr	r2, [pc, #68]	@ (8009874 <prvCheckForValidListAndQueue+0x78>)
 800982e:	2110      	movs	r1, #16
 8009830:	200a      	movs	r0, #10
 8009832:	f7fe f8dd 	bl	80079f0 <xQueueGenericCreateStatic>
 8009836:	4603      	mov	r3, r0
 8009838:	4a08      	ldr	r2, [pc, #32]	@ (800985c <prvCheckForValidListAndQueue+0x60>)
 800983a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800983c:	4b07      	ldr	r3, [pc, #28]	@ (800985c <prvCheckForValidListAndQueue+0x60>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d005      	beq.n	8009850 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009844:	4b05      	ldr	r3, [pc, #20]	@ (800985c <prvCheckForValidListAndQueue+0x60>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	490b      	ldr	r1, [pc, #44]	@ (8009878 <prvCheckForValidListAndQueue+0x7c>)
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe fd20 	bl	8008290 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009850:	f000 f95a 	bl	8009b08 <vPortExitCritical>
}
 8009854:	bf00      	nop
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20001630 	.word	0x20001630
 8009860:	20001600 	.word	0x20001600
 8009864:	20001614 	.word	0x20001614
 8009868:	20001628 	.word	0x20001628
 800986c:	2000162c 	.word	0x2000162c
 8009870:	200016dc 	.word	0x200016dc
 8009874:	2000163c 	.word	0x2000163c
 8009878:	0800ac54 	.word	0x0800ac54

0800987c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3b04      	subs	r3, #4
 800988c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3b04      	subs	r3, #4
 800989a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f023 0201 	bic.w	r2, r3, #1
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3b04      	subs	r3, #4
 80098aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098ac:	4a0c      	ldr	r2, [pc, #48]	@ (80098e0 <pxPortInitialiseStack+0x64>)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3b14      	subs	r3, #20
 80098b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3b04      	subs	r3, #4
 80098c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f06f 0202 	mvn.w	r2, #2
 80098ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3b20      	subs	r3, #32
 80098d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098d2:	68fb      	ldr	r3, [r7, #12]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	080098e5 	.word	0x080098e5

080098e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098ee:	4b15      	ldr	r3, [pc, #84]	@ (8009944 <prvTaskExitError+0x60>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f6:	d00d      	beq.n	8009914 <prvTaskExitError+0x30>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fc:	b672      	cpsid	i
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	b662      	cpsie	i
 800990c:	60fb      	str	r3, [r7, #12]
}
 800990e:	bf00      	nop
 8009910:	bf00      	nop
 8009912:	e7fd      	b.n	8009910 <prvTaskExitError+0x2c>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009918:	b672      	cpsid	i
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	b662      	cpsie	i
 8009928:	60bb      	str	r3, [r7, #8]
}
 800992a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800992c:	bf00      	nop
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d0fc      	beq.n	800992e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	2000000c 	.word	0x2000000c
	...

08009950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009950:	4b07      	ldr	r3, [pc, #28]	@ (8009970 <pxCurrentTCBConst2>)
 8009952:	6819      	ldr	r1, [r3, #0]
 8009954:	6808      	ldr	r0, [r1, #0]
 8009956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	f380 8809 	msr	PSP, r0
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f04f 0000 	mov.w	r0, #0
 8009966:	f380 8811 	msr	BASEPRI, r0
 800996a:	4770      	bx	lr
 800996c:	f3af 8000 	nop.w

08009970 <pxCurrentTCBConst2>:
 8009970:	20001100 	.word	0x20001100
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009978:	4808      	ldr	r0, [pc, #32]	@ (800999c <prvPortStartFirstTask+0x24>)
 800997a:	6800      	ldr	r0, [r0, #0]
 800997c:	6800      	ldr	r0, [r0, #0]
 800997e:	f380 8808 	msr	MSP, r0
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	f380 8814 	msr	CONTROL, r0
 800998a:	b662      	cpsie	i
 800998c:	b661      	cpsie	f
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	df00      	svc	0
 8009998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800999a:	bf00      	nop
 800999c:	e000ed08 	.word	0xe000ed08

080099a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099a6:	4b37      	ldr	r3, [pc, #220]	@ (8009a84 <xPortStartScheduler+0xe4>)
 80099a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	22ff      	movs	r2, #255	@ 0xff
 80099b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009a88 <xPortStartScheduler+0xe8>)
 80099cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099ce:	4b2f      	ldr	r3, [pc, #188]	@ (8009a8c <xPortStartScheduler+0xec>)
 80099d0:	2207      	movs	r2, #7
 80099d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099d4:	e009      	b.n	80099ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80099d6:	4b2d      	ldr	r3, [pc, #180]	@ (8009a8c <xPortStartScheduler+0xec>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3b01      	subs	r3, #1
 80099dc:	4a2b      	ldr	r2, [pc, #172]	@ (8009a8c <xPortStartScheduler+0xec>)
 80099de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099f2:	2b80      	cmp	r3, #128	@ 0x80
 80099f4:	d0ef      	beq.n	80099d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099f6:	4b25      	ldr	r3, [pc, #148]	@ (8009a8c <xPortStartScheduler+0xec>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f1c3 0307 	rsb	r3, r3, #7
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d00d      	beq.n	8009a1e <xPortStartScheduler+0x7e>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a06:	b672      	cpsid	i
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	b662      	cpsie	i
 8009a16:	60bb      	str	r3, [r7, #8]
}
 8009a18:	bf00      	nop
 8009a1a:	bf00      	nop
 8009a1c:	e7fd      	b.n	8009a1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8009a8c <xPortStartScheduler+0xec>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	021b      	lsls	r3, r3, #8
 8009a24:	4a19      	ldr	r2, [pc, #100]	@ (8009a8c <xPortStartScheduler+0xec>)
 8009a26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a28:	4b18      	ldr	r3, [pc, #96]	@ (8009a8c <xPortStartScheduler+0xec>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a30:	4a16      	ldr	r2, [pc, #88]	@ (8009a8c <xPortStartScheduler+0xec>)
 8009a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a3c:	4b14      	ldr	r3, [pc, #80]	@ (8009a90 <xPortStartScheduler+0xf0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a13      	ldr	r2, [pc, #76]	@ (8009a90 <xPortStartScheduler+0xf0>)
 8009a42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a48:	4b11      	ldr	r3, [pc, #68]	@ (8009a90 <xPortStartScheduler+0xf0>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a10      	ldr	r2, [pc, #64]	@ (8009a90 <xPortStartScheduler+0xf0>)
 8009a4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a54:	f000 f8dc 	bl	8009c10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a58:	4b0e      	ldr	r3, [pc, #56]	@ (8009a94 <xPortStartScheduler+0xf4>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a5e:	f000 f8fb 	bl	8009c58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a62:	4b0d      	ldr	r3, [pc, #52]	@ (8009a98 <xPortStartScheduler+0xf8>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a0c      	ldr	r2, [pc, #48]	@ (8009a98 <xPortStartScheduler+0xf8>)
 8009a68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a6e:	f7ff ff83 	bl	8009978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a72:	f7ff f837 	bl	8008ae4 <vTaskSwitchContext>
	prvTaskExitError();
 8009a76:	f7ff ff35 	bl	80098e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	e000e400 	.word	0xe000e400
 8009a88:	2000172c 	.word	0x2000172c
 8009a8c:	20001730 	.word	0x20001730
 8009a90:	e000ed20 	.word	0xe000ed20
 8009a94:	2000000c 	.word	0x2000000c
 8009a98:	e000ef34 	.word	0xe000ef34

08009a9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	607b      	str	r3, [r7, #4]
}
 8009ab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009aba:	4b11      	ldr	r3, [pc, #68]	@ (8009b00 <vPortEnterCritical+0x64>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8009b00 <vPortEnterCritical+0x64>)
 8009ac2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8009b00 <vPortEnterCritical+0x64>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d112      	bne.n	8009af2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009acc:	4b0d      	ldr	r3, [pc, #52]	@ (8009b04 <vPortEnterCritical+0x68>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00d      	beq.n	8009af2 <vPortEnterCritical+0x56>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ada:	b672      	cpsid	i
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	b662      	cpsie	i
 8009aea:	603b      	str	r3, [r7, #0]
}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	e7fd      	b.n	8009aee <vPortEnterCritical+0x52>
	}
}
 8009af2:	bf00      	nop
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	2000000c 	.word	0x2000000c
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b0e:	4b13      	ldr	r3, [pc, #76]	@ (8009b5c <vPortExitCritical+0x54>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10d      	bne.n	8009b32 <vPortExitCritical+0x2a>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1a:	b672      	cpsid	i
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	b662      	cpsie	i
 8009b2a:	607b      	str	r3, [r7, #4]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009b32:	4b0a      	ldr	r3, [pc, #40]	@ (8009b5c <vPortExitCritical+0x54>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	4a08      	ldr	r2, [pc, #32]	@ (8009b5c <vPortExitCritical+0x54>)
 8009b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b3c:	4b07      	ldr	r3, [pc, #28]	@ (8009b5c <vPortExitCritical+0x54>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d105      	bne.n	8009b50 <vPortExitCritical+0x48>
 8009b44:	2300      	movs	r3, #0
 8009b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	f383 8811 	msr	BASEPRI, r3
}
 8009b4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	2000000c 	.word	0x2000000c

08009b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b60:	f3ef 8009 	mrs	r0, PSP
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	4b15      	ldr	r3, [pc, #84]	@ (8009bc0 <pxCurrentTCBConst>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	f01e 0f10 	tst.w	lr, #16
 8009b70:	bf08      	it	eq
 8009b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7a:	6010      	str	r0, [r2, #0]
 8009b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009b84:	b672      	cpsid	i
 8009b86:	f380 8811 	msr	BASEPRI, r0
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	b662      	cpsie	i
 8009b94:	f7fe ffa6 	bl	8008ae4 <vTaskSwitchContext>
 8009b98:	f04f 0000 	mov.w	r0, #0
 8009b9c:	f380 8811 	msr	BASEPRI, r0
 8009ba0:	bc09      	pop	{r0, r3}
 8009ba2:	6819      	ldr	r1, [r3, #0]
 8009ba4:	6808      	ldr	r0, [r1, #0]
 8009ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	f01e 0f10 	tst.w	lr, #16
 8009bae:	bf08      	it	eq
 8009bb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009bb4:	f380 8809 	msr	PSP, r0
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop

08009bc0 <pxCurrentTCBConst>:
 8009bc0:	20001100 	.word	0x20001100
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop

08009bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	b672      	cpsid	i
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	b662      	cpsie	i
 8009be2:	607b      	str	r3, [r7, #4]
}
 8009be4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009be6:	f7fe fec1 	bl	800896c <xTaskIncrementTick>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bf0:	4b06      	ldr	r3, [pc, #24]	@ (8009c0c <xPortSysTickHandler+0x44>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	f383 8811 	msr	BASEPRI, r3
}
 8009c02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	e000ed04 	.word	0xe000ed04

08009c10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c14:	4b0b      	ldr	r3, [pc, #44]	@ (8009c44 <vPortSetupTimerInterrupt+0x34>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c48 <vPortSetupTimerInterrupt+0x38>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c20:	4b0a      	ldr	r3, [pc, #40]	@ (8009c4c <vPortSetupTimerInterrupt+0x3c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a0a      	ldr	r2, [pc, #40]	@ (8009c50 <vPortSetupTimerInterrupt+0x40>)
 8009c26:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2a:	099b      	lsrs	r3, r3, #6
 8009c2c:	4a09      	ldr	r2, [pc, #36]	@ (8009c54 <vPortSetupTimerInterrupt+0x44>)
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c32:	4b04      	ldr	r3, [pc, #16]	@ (8009c44 <vPortSetupTimerInterrupt+0x34>)
 8009c34:	2207      	movs	r2, #7
 8009c36:	601a      	str	r2, [r3, #0]
}
 8009c38:	bf00      	nop
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	e000e010 	.word	0xe000e010
 8009c48:	e000e018 	.word	0xe000e018
 8009c4c:	20000000 	.word	0x20000000
 8009c50:	10624dd3 	.word	0x10624dd3
 8009c54:	e000e014 	.word	0xe000e014

08009c58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c68 <vPortEnableVFP+0x10>
 8009c5c:	6801      	ldr	r1, [r0, #0]
 8009c5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c62:	6001      	str	r1, [r0, #0]
 8009c64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c66:	bf00      	nop
 8009c68:	e000ed88 	.word	0xe000ed88

08009c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c72:	f3ef 8305 	mrs	r3, IPSR
 8009c76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b0f      	cmp	r3, #15
 8009c7c:	d917      	bls.n	8009cae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ce8 <vPortValidateInterruptPriority+0x7c>)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4413      	add	r3, r2
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c88:	4b18      	ldr	r3, [pc, #96]	@ (8009cec <vPortValidateInterruptPriority+0x80>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	7afa      	ldrb	r2, [r7, #11]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d20d      	bcs.n	8009cae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c96:	b672      	cpsid	i
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	b662      	cpsie	i
 8009ca6:	607b      	str	r3, [r7, #4]
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	e7fd      	b.n	8009caa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cae:	4b10      	ldr	r3, [pc, #64]	@ (8009cf0 <vPortValidateInterruptPriority+0x84>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8009cf4 <vPortValidateInterruptPriority+0x88>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d90d      	bls.n	8009cda <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	b672      	cpsid	i
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	b662      	cpsie	i
 8009cd2:	603b      	str	r3, [r7, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	e7fd      	b.n	8009cd6 <vPortValidateInterruptPriority+0x6a>
	}
 8009cda:	bf00      	nop
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	e000e3f0 	.word	0xe000e3f0
 8009cec:	2000172c 	.word	0x2000172c
 8009cf0:	e000ed0c 	.word	0xe000ed0c
 8009cf4:	20001730 	.word	0x20001730

08009cf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08a      	sub	sp, #40	@ 0x28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d04:	f7fe fd74 	bl	80087f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d08:	4b5d      	ldr	r3, [pc, #372]	@ (8009e80 <pvPortMalloc+0x188>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d10:	f000 f920 	bl	8009f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d14:	4b5b      	ldr	r3, [pc, #364]	@ (8009e84 <pvPortMalloc+0x18c>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f040 8094 	bne.w	8009e4a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d020      	beq.n	8009d6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009d28:	2208      	movs	r2, #8
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f003 0307 	and.w	r3, r3, #7
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d017      	beq.n	8009d6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f023 0307 	bic.w	r3, r3, #7
 8009d40:	3308      	adds	r3, #8
 8009d42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00d      	beq.n	8009d6a <pvPortMalloc+0x72>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d52:	b672      	cpsid	i
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	b662      	cpsie	i
 8009d62:	617b      	str	r3, [r7, #20]
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop
 8009d68:	e7fd      	b.n	8009d66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d06c      	beq.n	8009e4a <pvPortMalloc+0x152>
 8009d70:	4b45      	ldr	r3, [pc, #276]	@ (8009e88 <pvPortMalloc+0x190>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d867      	bhi.n	8009e4a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d7a:	4b44      	ldr	r3, [pc, #272]	@ (8009e8c <pvPortMalloc+0x194>)
 8009d7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d7e:	4b43      	ldr	r3, [pc, #268]	@ (8009e8c <pvPortMalloc+0x194>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d84:	e004      	b.n	8009d90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d903      	bls.n	8009da2 <pvPortMalloc+0xaa>
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1f1      	bne.n	8009d86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009da2:	4b37      	ldr	r3, [pc, #220]	@ (8009e80 <pvPortMalloc+0x188>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d04e      	beq.n	8009e4a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2208      	movs	r2, #8
 8009db2:	4413      	add	r3, r2
 8009db4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	1ad2      	subs	r2, r2, r3
 8009dc6:	2308      	movs	r3, #8
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d922      	bls.n	8009e14 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00d      	beq.n	8009dfc <pvPortMalloc+0x104>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de4:	b672      	cpsid	i
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	b662      	cpsie	i
 8009df4:	613b      	str	r3, [r7, #16]
}
 8009df6:	bf00      	nop
 8009df8:	bf00      	nop
 8009dfa:	e7fd      	b.n	8009df8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	1ad2      	subs	r2, r2, r3
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e0e:	69b8      	ldr	r0, [r7, #24]
 8009e10:	f000 f902 	bl	800a018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e14:	4b1c      	ldr	r3, [pc, #112]	@ (8009e88 <pvPortMalloc+0x190>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8009e88 <pvPortMalloc+0x190>)
 8009e20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e22:	4b19      	ldr	r3, [pc, #100]	@ (8009e88 <pvPortMalloc+0x190>)
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	4b1a      	ldr	r3, [pc, #104]	@ (8009e90 <pvPortMalloc+0x198>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d203      	bcs.n	8009e36 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e2e:	4b16      	ldr	r3, [pc, #88]	@ (8009e88 <pvPortMalloc+0x190>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a17      	ldr	r2, [pc, #92]	@ (8009e90 <pvPortMalloc+0x198>)
 8009e34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	4b12      	ldr	r3, [pc, #72]	@ (8009e84 <pvPortMalloc+0x18c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e46:	2200      	movs	r2, #0
 8009e48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e4a:	f7fe fcdf 	bl	800880c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	f003 0307 	and.w	r3, r3, #7
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00d      	beq.n	8009e74 <pvPortMalloc+0x17c>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5c:	b672      	cpsid	i
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	b662      	cpsie	i
 8009e6c:	60fb      	str	r3, [r7, #12]
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	e7fd      	b.n	8009e70 <pvPortMalloc+0x178>
	return pvReturn;
 8009e74:	69fb      	ldr	r3, [r7, #28]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3728      	adds	r7, #40	@ 0x28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	2000533c 	.word	0x2000533c
 8009e84:	20005348 	.word	0x20005348
 8009e88:	20005340 	.word	0x20005340
 8009e8c:	20005334 	.word	0x20005334
 8009e90:	20005344 	.word	0x20005344

08009e94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d04e      	beq.n	8009f44 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ea6:	2308      	movs	r3, #8
 8009ea8:	425b      	negs	r3, r3
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4413      	add	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	4b24      	ldr	r3, [pc, #144]	@ (8009f4c <vPortFree+0xb8>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10d      	bne.n	8009ede <vPortFree+0x4a>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec6:	b672      	cpsid	i
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	b662      	cpsie	i
 8009ed6:	60fb      	str	r3, [r7, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	bf00      	nop
 8009edc:	e7fd      	b.n	8009eda <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00d      	beq.n	8009f02 <vPortFree+0x6e>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	b672      	cpsid	i
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	b662      	cpsie	i
 8009efa:	60bb      	str	r3, [r7, #8]
}
 8009efc:	bf00      	nop
 8009efe:	bf00      	nop
 8009f00:	e7fd      	b.n	8009efe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	4b11      	ldr	r3, [pc, #68]	@ (8009f4c <vPortFree+0xb8>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d019      	beq.n	8009f44 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d115      	bne.n	8009f44 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f4c <vPortFree+0xb8>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	43db      	mvns	r3, r3
 8009f22:	401a      	ands	r2, r3
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f28:	f7fe fc62 	bl	80087f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	4b07      	ldr	r3, [pc, #28]	@ (8009f50 <vPortFree+0xbc>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4413      	add	r3, r2
 8009f36:	4a06      	ldr	r2, [pc, #24]	@ (8009f50 <vPortFree+0xbc>)
 8009f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f3a:	6938      	ldr	r0, [r7, #16]
 8009f3c:	f000 f86c 	bl	800a018 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f40:	f7fe fc64 	bl	800880c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f44:	bf00      	nop
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20005348 	.word	0x20005348
 8009f50:	20005340 	.word	0x20005340

08009f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f5a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f60:	4b27      	ldr	r3, [pc, #156]	@ (800a000 <prvHeapInit+0xac>)
 8009f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00c      	beq.n	8009f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3307      	adds	r3, #7
 8009f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	4a1f      	ldr	r2, [pc, #124]	@ (800a000 <prvHeapInit+0xac>)
 8009f84:	4413      	add	r3, r2
 8009f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f8c:	4a1d      	ldr	r2, [pc, #116]	@ (800a004 <prvHeapInit+0xb0>)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f92:	4b1c      	ldr	r3, [pc, #112]	@ (800a004 <prvHeapInit+0xb0>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fa0:	2208      	movs	r2, #8
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	1a9b      	subs	r3, r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f023 0307 	bic.w	r3, r3, #7
 8009fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4a15      	ldr	r2, [pc, #84]	@ (800a008 <prvHeapInit+0xb4>)
 8009fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fb6:	4b14      	ldr	r3, [pc, #80]	@ (800a008 <prvHeapInit+0xb4>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fbe:	4b12      	ldr	r3, [pc, #72]	@ (800a008 <prvHeapInit+0xb4>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	1ad2      	subs	r2, r2, r3
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	@ (800a008 <prvHeapInit+0xb4>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800a00c <prvHeapInit+0xb8>)
 8009fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	4a09      	ldr	r2, [pc, #36]	@ (800a010 <prvHeapInit+0xbc>)
 8009fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fec:	4b09      	ldr	r3, [pc, #36]	@ (800a014 <prvHeapInit+0xc0>)
 8009fee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	20001734 	.word	0x20001734
 800a004:	20005334 	.word	0x20005334
 800a008:	2000533c 	.word	0x2000533c
 800a00c:	20005344 	.word	0x20005344
 800a010:	20005340 	.word	0x20005340
 800a014:	20005348 	.word	0x20005348

0800a018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a020:	4b28      	ldr	r3, [pc, #160]	@ (800a0c4 <prvInsertBlockIntoFreeList+0xac>)
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	e002      	b.n	800a02c <prvInsertBlockIntoFreeList+0x14>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	429a      	cmp	r2, r3
 800a034:	d8f7      	bhi.n	800a026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	4413      	add	r3, r2
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	429a      	cmp	r2, r3
 800a046:	d108      	bne.n	800a05a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	441a      	add	r2, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	441a      	add	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d118      	bne.n	800a0a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	4b15      	ldr	r3, [pc, #84]	@ (800a0c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	429a      	cmp	r2, r3
 800a078:	d00d      	beq.n	800a096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685a      	ldr	r2, [r3, #4]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	441a      	add	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	e008      	b.n	800a0a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a096:	4b0c      	ldr	r3, [pc, #48]	@ (800a0c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	e003      	b.n	800a0a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d002      	beq.n	800a0b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0b6:	bf00      	nop
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	20005334 	.word	0x20005334
 800a0c8:	2000533c 	.word	0x2000533c

0800a0cc <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fb35 	bl	800a748 <malloc>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00b      	beq.n	800a112 <ATC_Free+0x26>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d007      	beq.n	800a112 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 fb26 	bl	800a758 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
  }
}
 800a112:	bf00      	nop
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b082      	sub	sp, #8
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	8a9b      	ldrh	r3, [r3, #20]
 800a130:	461a      	mov	r2, r3
 800a132:	2100      	movs	r1, #0
 800a134:	f000 fbc6 	bl	800a8c4 <memset>
}
 800a138:	bf00      	nop
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	4613      	mov	r3, r2
 800a14c:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	88fa      	ldrh	r2, [r7, #6]
 800a156:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	88fa      	ldrh	r2, [r7, #6]
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	4618      	mov	r0, r3
 800a162:	f7fb fabd 	bl	80056e0 <HAL_UART_Transmit_DMA>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d102      	bne.n	800a172 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 800a16c:	2301      	movs	r3, #1
 800a16e:	75fb      	strb	r3, [r7, #23]
 800a170:	e000      	b.n	800a174 <ATC_TxRaw+0x34>
      break;
 800a172:	bf00      	nop

  } while (0);

  return answer;
 800a174:	7dfb      	ldrb	r3, [r7, #23]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b082      	sub	sp, #8
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fb ff60 	bl	8006050 <HAL_UART_GetState>
 800a190:	4603      	mov	r3, r0
 800a192:	2b21      	cmp	r3, #33	@ 0x21
 800a194:	d007      	beq.n	800a1a6 <ATC_TxBusy+0x28>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fb ff58 	bl	8006050 <HAL_UART_GetState>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b23      	cmp	r3, #35	@ 0x23
 800a1a4:	d101      	bne.n	800a1aa <ATC_TxBusy+0x2c>
  {
    return true;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e000      	b.n	800a1ac <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800a1aa:	2300      	movs	r3, #0
  }
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 800a1c2:	f7f7 fe8b 	bl	8001edc <HAL_GetTick>
 800a1c6:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	f000 fab1 	bl	800a730 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fb ff3c 	bl	8006050 <HAL_UART_GetState>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b22      	cmp	r3, #34	@ 0x22
 800a1dc:	d007      	beq.n	800a1ee <ATC_TxWait+0x3a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fb ff34 	bl	8006050 <HAL_UART_GetState>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b20      	cmp	r3, #32
 800a1ec:	d102      	bne.n	800a1f4 <ATC_TxWait+0x40>
    {
      answer = true;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f2:	e01c      	b.n	800a22e <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fb ff29 	bl	8006050 <HAL_UART_GetState>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2be0      	cmp	r3, #224	@ 0xe0
 800a202:	d014      	beq.n	800a22e <ATC_TxWait+0x7a>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fb ff21 	bl	8006050 <HAL_UART_GetState>
 800a20e:	4603      	mov	r3, r0
 800a210:	2ba0      	cmp	r3, #160	@ 0xa0
 800a212:	d00c      	beq.n	800a22e <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800a214:	f7f7 fe62 	bl	8001edc <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d8d1      	bhi.n	800a1c8 <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fb fad5 	bl	80057d8 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <ATC_CheckResponse>:
}

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	8b1b      	ldrh	r3, [r3, #24]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d023      	beq.n	800a296 <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800a24e:	2300      	movs	r3, #0
 800a250:	81bb      	strh	r3, [r7, #12]
 800a252:	e01b      	b.n	800a28c <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a258:	89ba      	ldrh	r2, [r7, #12]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	320a      	adds	r2, #10
 800a25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a262:	4619      	mov	r1, r3
 800a264:	f000 fb49 	bl	800a8fa <strstr>
 800a268:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00a      	beq.n	800a286 <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d002      	beq.n	800a27c <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 800a27c:	89bb      	ldrh	r3, [r7, #12]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	3301      	adds	r3, #1
 800a282:	73fb      	strb	r3, [r7, #15]
        break;
 800a284:	e007      	b.n	800a296 <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800a286:	89bb      	ldrh	r3, [r7, #12]
 800a288:	3301      	adds	r3, #1
 800a28a:	81bb      	strh	r3, [r7, #12]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	8adb      	ldrh	r3, [r3, #22]
 800a290:	89ba      	ldrh	r2, [r7, #12]
 800a292:	429a      	cmp	r2, r3
 800a294:	d3de      	bcc.n	800a254 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 800a296:	7bfb      	ldrb	r3, [r7, #15]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fb fee3 	bl	8006078 <HAL_UART_GetError>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01f      	beq.n	800a2f8 <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c2:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fb faed 	bl	80058a8 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6818      	ldr	r0, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	69d9      	ldr	r1, [r3, #28]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	8a9b      	ldrh	r3, [r3, #20]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f7fc fdab 	bl	8006e36 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 0208 	bic.w	r2, r2, #8
 800a2f6:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fb fea7 	bl	8006050 <HAL_UART_GetState>
 800a302:	4603      	mov	r3, r0
 800a304:	2b22      	cmp	r3, #34	@ 0x22
 800a306:	d027      	beq.n	800a358 <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fb fe9f 	bl	8006050 <HAL_UART_GetState>
 800a312:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800a314:	2b23      	cmp	r3, #35	@ 0x23
 800a316:	d01f      	beq.n	800a358 <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f04f 32ff 	mov.w	r2, #4294967295
 800a322:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fb fabd 	bl	80058a8 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	69d9      	ldr	r1, [r3, #28]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	8a9b      	ldrh	r3, [r3, #20]
 800a33a:	461a      	mov	r2, r3
 800a33c:	f7fc fd7b 	bl	8006e36 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f022 0208 	bic.w	r2, r2, #8
 800a356:	601a      	str	r2, [r3, #0]
  }
}
 800a358:	bf00      	nop
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	4613      	mov	r3, r2
 800a36e:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 800a370:	2300      	movs	r3, #0
 800a372:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d075      	beq.n	800a466 <ATC_Init+0x106>
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d072      	beq.n	800a466 <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800a380:	223c      	movs	r2, #60	@ 0x3c
 800a382:	2100      	movs	r1, #0
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 fa9d 	bl	800a8c4 <memset>
    if (pName != NULL)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d006      	beq.n	800a39e <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3304      	adds	r3, #4
 800a394:	2207      	movs	r2, #7
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 fa9b 	bl	800a8d4 <strncpy>
    }
    hAtc->hUart = hUart;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 800a3a4:	88fb      	ldrh	r3, [r7, #6]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff fe90 	bl	800a0cc <ATC_Malloc>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d04e      	beq.n	800a458 <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	88fa      	ldrh	r2, [r7, #6]
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fa7e 	bl	800a8c4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 800a3c8:	88fb      	ldrh	r3, [r7, #6]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fe7e 	bl	800a0cc <ATC_Malloc>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d03e      	beq.n	800a45c <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	88fa      	ldrh	r2, [r7, #6]
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fa6c 	bl	800a8c4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 800a3ec:	88fb      	ldrh	r3, [r7, #6]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fe6c 	bl	800a0cc <ATC_Malloc>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d02e      	beq.n	800a460 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a406:	88fa      	ldrh	r2, [r7, #6]
 800a408:	2100      	movs	r1, #0
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fa5a 	bl	800a8c4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	88fa      	ldrh	r2, [r7, #6]
 800a414:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f04f 32ff 	mov.w	r2, #4294967295
 800a420:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6818      	ldr	r0, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	69d9      	ldr	r1, [r3, #28]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	8a9b      	ldrh	r3, [r3, #20]
 800a42e:	461a      	mov	r2, r3
 800a430:	f7fc fd01 	bl	8006e36 <HAL_UARTEx_ReceiveToIdle_DMA>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d114      	bne.n	800a464 <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f022 0208 	bic.w	r2, r2, #8
 800a450:	601a      	str	r2, [r3, #0]
    answer = true;
 800a452:	2301      	movs	r3, #1
 800a454:	75fb      	strb	r3, [r7, #23]
 800a456:	e006      	b.n	800a466 <ATC_Init+0x106>
      break;
 800a458:	bf00      	nop
 800a45a:	e004      	b.n	800a466 <ATC_Init+0x106>
      break;
 800a45c:	bf00      	nop
 800a45e:	e002      	b.n	800a466 <ATC_Init+0x106>
      break;
 800a460:	bf00      	nop
 800a462:	e000      	b.n	800a466 <ATC_Init+0x106>
      break;
 800a464:	bf00      	nop

  } while (0);

  if (answer == false)
 800a466:	7dfb      	ldrb	r3, [r7, #23]
 800a468:	f083 0301 	eor.w	r3, r3, #1
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d016      	beq.n	800a4a0 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d004      	beq.n	800a484 <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	331c      	adds	r3, #28
 800a47e:	4618      	mov	r0, r3
 800a480:	f7ff fe34 	bl	800a0ec <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	3324      	adds	r3, #36	@ 0x24
 800a490:	4618      	mov	r0, r3
 800a492:	f7ff fe2b 	bl	800a0ec <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800a496:	223c      	movs	r2, #60	@ 0x3c
 800a498:	2100      	movs	r1, #0
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f000 fa12 	bl	800a8c4 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800a4aa:	b590      	push	{r4, r7, lr}
 800a4ac:	b08d      	sub	sp, #52	@ 0x34
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
 800a4b6:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f7ff fe5e 	bl	800a17e <ATC_TxBusy>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 800a4c8:	f06f 0303 	mvn.w	r3, #3
 800a4cc:	e0c8      	b.n	800a660 <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 800a4ce:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d902      	bls.n	800a4dc <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 800a4d6:	f06f 0304 	mvn.w	r3, #4
 800a4da:	e0c1      	b.n	800a660 <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f7ff fedf 	bl	800a2a0 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800a4e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a4e6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4ec:	e04b      	b.n	800a586 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	1d1a      	adds	r2, r3, #4
 800a4f2:	617a      	str	r2, [r7, #20]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800a4f8:	69b8      	ldr	r0, [r7, #24]
 800a4fa:	f7f5 fea1 	bl	8000240 <strlen>
 800a4fe:	4603      	mov	r3, r0
 800a500:	3301      	adds	r3, #1
 800a502:	4618      	mov	r0, r3
 800a504:	f7ff fde2 	bl	800a0cc <ATC_Malloc>
 800a508:	4601      	mov	r1, r0
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a50e:	320a      	adds	r2, #10
 800a510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a518:	320a      	adds	r2, #10
 800a51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d119      	bne.n	800a556 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 800a522:	2300      	movs	r3, #0
 800a524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a528:	e00d      	b.n	800a546 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800a52a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a52e:	330a      	adds	r3, #10
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4413      	add	r3, r2
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff fdd8 	bl	800a0ec <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800a53c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a540:	3301      	adds	r3, #1
 800a542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a54a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a54c:	429a      	cmp	r2, r3
 800a54e:	dcec      	bgt.n	800a52a <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 800a550:	f06f 0302 	mvn.w	r3, #2
 800a554:	e084      	b.n	800a660 <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a55a:	320a      	adds	r2, #10
 800a55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a560:	69b9      	ldr	r1, [r7, #24]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 fa1c 	bl	800a9a0 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a56c:	320a      	adds	r2, #10
 800a56e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800a572:	69b8      	ldr	r0, [r7, #24]
 800a574:	f7f5 fe64 	bl	8000240 <strlen>
 800a578:	4603      	mov	r3, r0
 800a57a:	4423      	add	r3, r4
 800a57c:	2200      	movs	r2, #0
 800a57e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800a580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a582:	3301      	adds	r3, #1
 800a584:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a586:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a58a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a58c:	429a      	cmp	r2, r3
 800a58e:	dbae      	blt.n	800a4ee <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff fdc2 	bl	800a11a <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 800a596:	68b8      	ldr	r0, [r7, #8]
 800a598:	f7f5 fe52 	bl	8000240 <strlen>
 800a59c:	4603      	mov	r3, r0
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	68b9      	ldr	r1, [r7, #8]
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7ff fdcb 	bl	800a140 <ATC_TxRaw>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	f083 0301 	eor.w	r3, r3, #1
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 800a5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800a5bc:	e00d      	b.n	800a5da <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f7ff fdf7 	bl	800a1b4 <ATC_TxWait>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	f083 0301 	eor.w	r3, r3, #1
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 800a5d2:	f06f 0301 	mvn.w	r3, #1
 800a5d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800a5d8:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 800a5da:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d022      	beq.n	800a628 <ATC_SendReceive+0x17e>
 800a5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d11f      	bne.n	800a628 <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 800a5e8:	f7f7 fc78 	bl	8001edc <HAL_GetTick>
 800a5ec:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800a5ee:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800a5f8:	e00e      	b.n	800a618 <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	f000 f898 	bl	800a730 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f7ff fe18 	bl	800a238 <ATC_CheckResponse>
 800a608:	4603      	mov	r3, r0
 800a60a:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800a60c:	7ffb      	ldrb	r3, [r7, #31]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 800a612:	7ffb      	ldrb	r3, [r7, #31]
 800a614:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800a616:	e007      	b.n	800a628 <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 800a618:	f7f7 fc60 	bl	8001edc <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a624:	429a      	cmp	r2, r3
 800a626:	d8e8      	bhi.n	800a5fa <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800a62e:	2300      	movs	r3, #0
 800a630:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a634:	e00d      	b.n	800a652 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800a636:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a63a:	330a      	adds	r3, #10
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	4413      	add	r3, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fd52 	bl	800a0ec <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800a648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a64c:	3301      	adds	r3, #1
 800a64e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a652:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a656:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d3eb      	bcc.n	800a636 <ATC_SendReceive+0x18c>
  }
  return answer;
 800a65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a660:	4618      	mov	r0, r3
 800a662:	3734      	adds	r7, #52	@ 0x34
 800a664:	46bd      	mov	sp, r7
 800a666:	bd90      	pop	{r4, r7, pc}

0800a668 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 800a674:	887a      	ldrh	r2, [r7, #2]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	8a9b      	ldrh	r3, [r3, #20]
 800a67a:	4619      	mov	r1, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	8b1b      	ldrh	r3, [r3, #24]
 800a680:	1acb      	subs	r3, r1, r3
 800a682:	429a      	cmp	r2, r3
 800a684:	dd05      	ble.n	800a692 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	8a9a      	ldrh	r2, [r3, #20]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	8b1b      	ldrh	r3, [r3, #24]
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	8b12      	ldrh	r2, [r2, #24]
 800a69a:	1898      	adds	r0, r3, r2
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	69db      	ldr	r3, [r3, #28]
 800a6a0:	887a      	ldrh	r2, [r7, #2]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	f000 f984 	bl	800a9b0 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	8b1a      	ldrh	r2, [r3, #24]
 800a6ac:	887b      	ldrh	r3, [r7, #2]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	69d9      	ldr	r1, [r3, #28]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	8a9b      	ldrh	r3, [r3, #20]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7fc fbb7 	bl	8006e36 <HAL_UARTEx_ReceiveToIdle_DMA>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10c      	bne.n	800a6e8 <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f022 0208 	bic.w	r2, r2, #8
 800a6e4:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 800a6e6:	e01f      	b.n	800a728 <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f2:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fb f8d5 	bl	80058a8 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	69d9      	ldr	r1, [r3, #28]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	8a9b      	ldrh	r3, [r3, #20]
 800a70a:	461a      	mov	r2, r3
 800a70c:	f7fc fb93 	bl	8006e36 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0208 	bic.w	r2, r2, #8
 800a726:	601a      	str	r2, [r3, #0]
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7f7 fbdb 	bl	8001ef4 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <malloc>:
 800a748:	4b02      	ldr	r3, [pc, #8]	@ (800a754 <malloc+0xc>)
 800a74a:	4601      	mov	r1, r0
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	f000 b82d 	b.w	800a7ac <_malloc_r>
 800a752:	bf00      	nop
 800a754:	20000010 	.word	0x20000010

0800a758 <free>:
 800a758:	4b02      	ldr	r3, [pc, #8]	@ (800a764 <free+0xc>)
 800a75a:	4601      	mov	r1, r0
 800a75c:	6818      	ldr	r0, [r3, #0]
 800a75e:	f000 b935 	b.w	800a9cc <_free_r>
 800a762:	bf00      	nop
 800a764:	20000010 	.word	0x20000010

0800a768 <sbrk_aligned>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	4e0f      	ldr	r6, [pc, #60]	@ (800a7a8 <sbrk_aligned+0x40>)
 800a76c:	460c      	mov	r4, r1
 800a76e:	6831      	ldr	r1, [r6, #0]
 800a770:	4605      	mov	r5, r0
 800a772:	b911      	cbnz	r1, 800a77a <sbrk_aligned+0x12>
 800a774:	f000 f8d8 	bl	800a928 <_sbrk_r>
 800a778:	6030      	str	r0, [r6, #0]
 800a77a:	4621      	mov	r1, r4
 800a77c:	4628      	mov	r0, r5
 800a77e:	f000 f8d3 	bl	800a928 <_sbrk_r>
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	d103      	bne.n	800a78e <sbrk_aligned+0x26>
 800a786:	f04f 34ff 	mov.w	r4, #4294967295
 800a78a:	4620      	mov	r0, r4
 800a78c:	bd70      	pop	{r4, r5, r6, pc}
 800a78e:	1cc4      	adds	r4, r0, #3
 800a790:	f024 0403 	bic.w	r4, r4, #3
 800a794:	42a0      	cmp	r0, r4
 800a796:	d0f8      	beq.n	800a78a <sbrk_aligned+0x22>
 800a798:	1a21      	subs	r1, r4, r0
 800a79a:	4628      	mov	r0, r5
 800a79c:	f000 f8c4 	bl	800a928 <_sbrk_r>
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d1f2      	bne.n	800a78a <sbrk_aligned+0x22>
 800a7a4:	e7ef      	b.n	800a786 <sbrk_aligned+0x1e>
 800a7a6:	bf00      	nop
 800a7a8:	2000534c 	.word	0x2000534c

0800a7ac <_malloc_r>:
 800a7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b0:	1ccd      	adds	r5, r1, #3
 800a7b2:	f025 0503 	bic.w	r5, r5, #3
 800a7b6:	3508      	adds	r5, #8
 800a7b8:	2d0c      	cmp	r5, #12
 800a7ba:	bf38      	it	cc
 800a7bc:	250c      	movcc	r5, #12
 800a7be:	2d00      	cmp	r5, #0
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	db01      	blt.n	800a7c8 <_malloc_r+0x1c>
 800a7c4:	42a9      	cmp	r1, r5
 800a7c6:	d904      	bls.n	800a7d2 <_malloc_r+0x26>
 800a7c8:	230c      	movs	r3, #12
 800a7ca:	6033      	str	r3, [r6, #0]
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8a8 <_malloc_r+0xfc>
 800a7d6:	f000 f869 	bl	800a8ac <__malloc_lock>
 800a7da:	f8d8 3000 	ldr.w	r3, [r8]
 800a7de:	461c      	mov	r4, r3
 800a7e0:	bb44      	cbnz	r4, 800a834 <_malloc_r+0x88>
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7ff ffbf 	bl	800a768 <sbrk_aligned>
 800a7ea:	1c43      	adds	r3, r0, #1
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	d158      	bne.n	800a8a2 <_malloc_r+0xf6>
 800a7f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a7f4:	4627      	mov	r7, r4
 800a7f6:	2f00      	cmp	r7, #0
 800a7f8:	d143      	bne.n	800a882 <_malloc_r+0xd6>
 800a7fa:	2c00      	cmp	r4, #0
 800a7fc:	d04b      	beq.n	800a896 <_malloc_r+0xea>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	4639      	mov	r1, r7
 800a802:	4630      	mov	r0, r6
 800a804:	eb04 0903 	add.w	r9, r4, r3
 800a808:	f000 f88e 	bl	800a928 <_sbrk_r>
 800a80c:	4581      	cmp	r9, r0
 800a80e:	d142      	bne.n	800a896 <_malloc_r+0xea>
 800a810:	6821      	ldr	r1, [r4, #0]
 800a812:	1a6d      	subs	r5, r5, r1
 800a814:	4629      	mov	r1, r5
 800a816:	4630      	mov	r0, r6
 800a818:	f7ff ffa6 	bl	800a768 <sbrk_aligned>
 800a81c:	3001      	adds	r0, #1
 800a81e:	d03a      	beq.n	800a896 <_malloc_r+0xea>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	442b      	add	r3, r5
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	f8d8 3000 	ldr.w	r3, [r8]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	bb62      	cbnz	r2, 800a888 <_malloc_r+0xdc>
 800a82e:	f8c8 7000 	str.w	r7, [r8]
 800a832:	e00f      	b.n	800a854 <_malloc_r+0xa8>
 800a834:	6822      	ldr	r2, [r4, #0]
 800a836:	1b52      	subs	r2, r2, r5
 800a838:	d420      	bmi.n	800a87c <_malloc_r+0xd0>
 800a83a:	2a0b      	cmp	r2, #11
 800a83c:	d917      	bls.n	800a86e <_malloc_r+0xc2>
 800a83e:	1961      	adds	r1, r4, r5
 800a840:	42a3      	cmp	r3, r4
 800a842:	6025      	str	r5, [r4, #0]
 800a844:	bf18      	it	ne
 800a846:	6059      	strne	r1, [r3, #4]
 800a848:	6863      	ldr	r3, [r4, #4]
 800a84a:	bf08      	it	eq
 800a84c:	f8c8 1000 	streq.w	r1, [r8]
 800a850:	5162      	str	r2, [r4, r5]
 800a852:	604b      	str	r3, [r1, #4]
 800a854:	4630      	mov	r0, r6
 800a856:	f000 f82f 	bl	800a8b8 <__malloc_unlock>
 800a85a:	f104 000b 	add.w	r0, r4, #11
 800a85e:	1d23      	adds	r3, r4, #4
 800a860:	f020 0007 	bic.w	r0, r0, #7
 800a864:	1ac2      	subs	r2, r0, r3
 800a866:	bf1c      	itt	ne
 800a868:	1a1b      	subne	r3, r3, r0
 800a86a:	50a3      	strne	r3, [r4, r2]
 800a86c:	e7af      	b.n	800a7ce <_malloc_r+0x22>
 800a86e:	6862      	ldr	r2, [r4, #4]
 800a870:	42a3      	cmp	r3, r4
 800a872:	bf0c      	ite	eq
 800a874:	f8c8 2000 	streq.w	r2, [r8]
 800a878:	605a      	strne	r2, [r3, #4]
 800a87a:	e7eb      	b.n	800a854 <_malloc_r+0xa8>
 800a87c:	4623      	mov	r3, r4
 800a87e:	6864      	ldr	r4, [r4, #4]
 800a880:	e7ae      	b.n	800a7e0 <_malloc_r+0x34>
 800a882:	463c      	mov	r4, r7
 800a884:	687f      	ldr	r7, [r7, #4]
 800a886:	e7b6      	b.n	800a7f6 <_malloc_r+0x4a>
 800a888:	461a      	mov	r2, r3
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	42a3      	cmp	r3, r4
 800a88e:	d1fb      	bne.n	800a888 <_malloc_r+0xdc>
 800a890:	2300      	movs	r3, #0
 800a892:	6053      	str	r3, [r2, #4]
 800a894:	e7de      	b.n	800a854 <_malloc_r+0xa8>
 800a896:	230c      	movs	r3, #12
 800a898:	6033      	str	r3, [r6, #0]
 800a89a:	4630      	mov	r0, r6
 800a89c:	f000 f80c 	bl	800a8b8 <__malloc_unlock>
 800a8a0:	e794      	b.n	800a7cc <_malloc_r+0x20>
 800a8a2:	6005      	str	r5, [r0, #0]
 800a8a4:	e7d6      	b.n	800a854 <_malloc_r+0xa8>
 800a8a6:	bf00      	nop
 800a8a8:	20005350 	.word	0x20005350

0800a8ac <__malloc_lock>:
 800a8ac:	4801      	ldr	r0, [pc, #4]	@ (800a8b4 <__malloc_lock+0x8>)
 800a8ae:	f000 b875 	b.w	800a99c <__retarget_lock_acquire_recursive>
 800a8b2:	bf00      	nop
 800a8b4:	20005490 	.word	0x20005490

0800a8b8 <__malloc_unlock>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	@ (800a8c0 <__malloc_unlock+0x8>)
 800a8ba:	f000 b870 	b.w	800a99e <__retarget_lock_release_recursive>
 800a8be:	bf00      	nop
 800a8c0:	20005490 	.word	0x20005490

0800a8c4 <memset>:
 800a8c4:	4402      	add	r2, r0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d100      	bne.n	800a8ce <memset+0xa>
 800a8cc:	4770      	bx	lr
 800a8ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a8d2:	e7f9      	b.n	800a8c8 <memset+0x4>

0800a8d4 <strncpy>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	3901      	subs	r1, #1
 800a8d8:	4603      	mov	r3, r0
 800a8da:	b132      	cbz	r2, 800a8ea <strncpy+0x16>
 800a8dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a8e0:	f803 4b01 	strb.w	r4, [r3], #1
 800a8e4:	3a01      	subs	r2, #1
 800a8e6:	2c00      	cmp	r4, #0
 800a8e8:	d1f7      	bne.n	800a8da <strncpy+0x6>
 800a8ea:	441a      	add	r2, r3
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d100      	bne.n	800a8f4 <strncpy+0x20>
 800a8f2:	bd10      	pop	{r4, pc}
 800a8f4:	f803 1b01 	strb.w	r1, [r3], #1
 800a8f8:	e7f9      	b.n	800a8ee <strncpy+0x1a>

0800a8fa <strstr>:
 800a8fa:	780a      	ldrb	r2, [r1, #0]
 800a8fc:	b570      	push	{r4, r5, r6, lr}
 800a8fe:	b96a      	cbnz	r2, 800a91c <strstr+0x22>
 800a900:	bd70      	pop	{r4, r5, r6, pc}
 800a902:	429a      	cmp	r2, r3
 800a904:	d109      	bne.n	800a91a <strstr+0x20>
 800a906:	460c      	mov	r4, r1
 800a908:	4605      	mov	r5, r0
 800a90a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0f6      	beq.n	800a900 <strstr+0x6>
 800a912:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a916:	429e      	cmp	r6, r3
 800a918:	d0f7      	beq.n	800a90a <strstr+0x10>
 800a91a:	3001      	adds	r0, #1
 800a91c:	7803      	ldrb	r3, [r0, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1ef      	bne.n	800a902 <strstr+0x8>
 800a922:	4618      	mov	r0, r3
 800a924:	e7ec      	b.n	800a900 <strstr+0x6>
	...

0800a928 <_sbrk_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d06      	ldr	r5, [pc, #24]	@ (800a944 <_sbrk_r+0x1c>)
 800a92c:	2300      	movs	r3, #0
 800a92e:	4604      	mov	r4, r0
 800a930:	4608      	mov	r0, r1
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	f7f6 fade 	bl	8000ef4 <_sbrk>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_sbrk_r+0x1a>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_sbrk_r+0x1a>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	2000548c 	.word	0x2000548c

0800a948 <__errno>:
 800a948:	4b01      	ldr	r3, [pc, #4]	@ (800a950 <__errno+0x8>)
 800a94a:	6818      	ldr	r0, [r3, #0]
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	20000010 	.word	0x20000010

0800a954 <__libc_init_array>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	4d0d      	ldr	r5, [pc, #52]	@ (800a98c <__libc_init_array+0x38>)
 800a958:	4c0d      	ldr	r4, [pc, #52]	@ (800a990 <__libc_init_array+0x3c>)
 800a95a:	1b64      	subs	r4, r4, r5
 800a95c:	10a4      	asrs	r4, r4, #2
 800a95e:	2600      	movs	r6, #0
 800a960:	42a6      	cmp	r6, r4
 800a962:	d109      	bne.n	800a978 <__libc_init_array+0x24>
 800a964:	4d0b      	ldr	r5, [pc, #44]	@ (800a994 <__libc_init_array+0x40>)
 800a966:	4c0c      	ldr	r4, [pc, #48]	@ (800a998 <__libc_init_array+0x44>)
 800a968:	f000 f87a 	bl	800aa60 <_init>
 800a96c:	1b64      	subs	r4, r4, r5
 800a96e:	10a4      	asrs	r4, r4, #2
 800a970:	2600      	movs	r6, #0
 800a972:	42a6      	cmp	r6, r4
 800a974:	d105      	bne.n	800a982 <__libc_init_array+0x2e>
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	f855 3b04 	ldr.w	r3, [r5], #4
 800a97c:	4798      	blx	r3
 800a97e:	3601      	adds	r6, #1
 800a980:	e7ee      	b.n	800a960 <__libc_init_array+0xc>
 800a982:	f855 3b04 	ldr.w	r3, [r5], #4
 800a986:	4798      	blx	r3
 800a988:	3601      	adds	r6, #1
 800a98a:	e7f2      	b.n	800a972 <__libc_init_array+0x1e>
 800a98c:	0800aca8 	.word	0x0800aca8
 800a990:	0800aca8 	.word	0x0800aca8
 800a994:	0800aca8 	.word	0x0800aca8
 800a998:	0800acac 	.word	0x0800acac

0800a99c <__retarget_lock_acquire_recursive>:
 800a99c:	4770      	bx	lr

0800a99e <__retarget_lock_release_recursive>:
 800a99e:	4770      	bx	lr

0800a9a0 <strcpy>:
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9a6:	f803 2b01 	strb.w	r2, [r3], #1
 800a9aa:	2a00      	cmp	r2, #0
 800a9ac:	d1f9      	bne.n	800a9a2 <strcpy+0x2>
 800a9ae:	4770      	bx	lr

0800a9b0 <memcpy>:
 800a9b0:	440a      	add	r2, r1
 800a9b2:	4291      	cmp	r1, r2
 800a9b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9b8:	d100      	bne.n	800a9bc <memcpy+0xc>
 800a9ba:	4770      	bx	lr
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9c6:	4291      	cmp	r1, r2
 800a9c8:	d1f9      	bne.n	800a9be <memcpy+0xe>
 800a9ca:	bd10      	pop	{r4, pc}

0800a9cc <_free_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	d041      	beq.n	800aa58 <_free_r+0x8c>
 800a9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d8:	1f0c      	subs	r4, r1, #4
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	bfb8      	it	lt
 800a9de:	18e4      	addlt	r4, r4, r3
 800a9e0:	f7ff ff64 	bl	800a8ac <__malloc_lock>
 800a9e4:	4a1d      	ldr	r2, [pc, #116]	@ (800aa5c <_free_r+0x90>)
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	b933      	cbnz	r3, 800a9f8 <_free_r+0x2c>
 800a9ea:	6063      	str	r3, [r4, #4]
 800a9ec:	6014      	str	r4, [r2, #0]
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f4:	f7ff bf60 	b.w	800a8b8 <__malloc_unlock>
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	d908      	bls.n	800aa0e <_free_r+0x42>
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	1821      	adds	r1, r4, r0
 800aa00:	428b      	cmp	r3, r1
 800aa02:	bf01      	itttt	eq
 800aa04:	6819      	ldreq	r1, [r3, #0]
 800aa06:	685b      	ldreq	r3, [r3, #4]
 800aa08:	1809      	addeq	r1, r1, r0
 800aa0a:	6021      	streq	r1, [r4, #0]
 800aa0c:	e7ed      	b.n	800a9ea <_free_r+0x1e>
 800aa0e:	461a      	mov	r2, r3
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	b10b      	cbz	r3, 800aa18 <_free_r+0x4c>
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	d9fa      	bls.n	800aa0e <_free_r+0x42>
 800aa18:	6811      	ldr	r1, [r2, #0]
 800aa1a:	1850      	adds	r0, r2, r1
 800aa1c:	42a0      	cmp	r0, r4
 800aa1e:	d10b      	bne.n	800aa38 <_free_r+0x6c>
 800aa20:	6820      	ldr	r0, [r4, #0]
 800aa22:	4401      	add	r1, r0
 800aa24:	1850      	adds	r0, r2, r1
 800aa26:	4283      	cmp	r3, r0
 800aa28:	6011      	str	r1, [r2, #0]
 800aa2a:	d1e0      	bne.n	800a9ee <_free_r+0x22>
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	6053      	str	r3, [r2, #4]
 800aa32:	4408      	add	r0, r1
 800aa34:	6010      	str	r0, [r2, #0]
 800aa36:	e7da      	b.n	800a9ee <_free_r+0x22>
 800aa38:	d902      	bls.n	800aa40 <_free_r+0x74>
 800aa3a:	230c      	movs	r3, #12
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	e7d6      	b.n	800a9ee <_free_r+0x22>
 800aa40:	6820      	ldr	r0, [r4, #0]
 800aa42:	1821      	adds	r1, r4, r0
 800aa44:	428b      	cmp	r3, r1
 800aa46:	bf04      	itt	eq
 800aa48:	6819      	ldreq	r1, [r3, #0]
 800aa4a:	685b      	ldreq	r3, [r3, #4]
 800aa4c:	6063      	str	r3, [r4, #4]
 800aa4e:	bf04      	itt	eq
 800aa50:	1809      	addeq	r1, r1, r0
 800aa52:	6021      	streq	r1, [r4, #0]
 800aa54:	6054      	str	r4, [r2, #4]
 800aa56:	e7ca      	b.n	800a9ee <_free_r+0x22>
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20005350 	.word	0x20005350

0800aa60 <_init>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	bf00      	nop
 800aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa66:	bc08      	pop	{r3}
 800aa68:	469e      	mov	lr, r3
 800aa6a:	4770      	bx	lr

0800aa6c <_fini>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	bf00      	nop
 800aa70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa72:	bc08      	pop	{r3}
 800aa74:	469e      	mov	lr, r3
 800aa76:	4770      	bx	lr
