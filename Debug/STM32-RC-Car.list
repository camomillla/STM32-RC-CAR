
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a1c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007c14  08007c14  00008c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf4  08007cf4  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cf4  08007cf4  00008cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cfc  08007cfc  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cfc  08007cfc  00008cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d00  08007d00  00008d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007d04  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  2000005c  08007d60  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08007d60  00009b44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018695  00000000  00000000  0000908a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e5  00000000  00000000  0002171f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00024f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb8  00000000  00000000  00026360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a046  00000000  00000000  00027318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a89c  00000000  00000000  0005135e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff4b8  00000000  00000000  0006bbfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b0b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005888  00000000  00000000  0016b0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00170980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007bfc 	.word	0x08007bfc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	08007bfc 	.word	0x08007bfc

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b96a 	b.w	8000548 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	460c      	mov	r4, r1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d14e      	bne.n	8000336 <__udivmoddi4+0xaa>
 8000298:	4694      	mov	ip, r2
 800029a:	458c      	cmp	ip, r1
 800029c:	4686      	mov	lr, r0
 800029e:	fab2 f282 	clz	r2, r2
 80002a2:	d962      	bls.n	800036a <__udivmoddi4+0xde>
 80002a4:	b14a      	cbz	r2, 80002ba <__udivmoddi4+0x2e>
 80002a6:	f1c2 0320 	rsb	r3, r2, #32
 80002aa:	4091      	lsls	r1, r2
 80002ac:	fa20 f303 	lsr.w	r3, r0, r3
 80002b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b4:	4319      	orrs	r1, r3
 80002b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002be:	fa1f f68c 	uxth.w	r6, ip
 80002c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ca:	fb07 1114 	mls	r1, r7, r4, r1
 80002ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d2:	fb04 f106 	mul.w	r1, r4, r6
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f104 30ff 	add.w	r0, r4, #4294967295
 80002e2:	f080 8112 	bcs.w	800050a <__udivmoddi4+0x27e>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 810f 	bls.w	800050a <__udivmoddi4+0x27e>
 80002ec:	3c02      	subs	r4, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a59      	subs	r1, r3, r1
 80002f2:	fa1f f38e 	uxth.w	r3, lr
 80002f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002fa:	fb07 1110 	mls	r1, r7, r0, r1
 80002fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000302:	fb00 f606 	mul.w	r6, r0, r6
 8000306:	429e      	cmp	r6, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x94>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000312:	f080 80fc 	bcs.w	800050e <__udivmoddi4+0x282>
 8000316:	429e      	cmp	r6, r3
 8000318:	f240 80f9 	bls.w	800050e <__udivmoddi4+0x282>
 800031c:	4463      	add	r3, ip
 800031e:	3802      	subs	r0, #2
 8000320:	1b9b      	subs	r3, r3, r6
 8000322:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000326:	2100      	movs	r1, #0
 8000328:	b11d      	cbz	r5, 8000332 <__udivmoddi4+0xa6>
 800032a:	40d3      	lsrs	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	e9c5 3200 	strd	r3, r2, [r5]
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d905      	bls.n	8000346 <__udivmoddi4+0xba>
 800033a:	b10d      	cbz	r5, 8000340 <__udivmoddi4+0xb4>
 800033c:	e9c5 0100 	strd	r0, r1, [r5]
 8000340:	2100      	movs	r1, #0
 8000342:	4608      	mov	r0, r1
 8000344:	e7f5      	b.n	8000332 <__udivmoddi4+0xa6>
 8000346:	fab3 f183 	clz	r1, r3
 800034a:	2900      	cmp	r1, #0
 800034c:	d146      	bne.n	80003dc <__udivmoddi4+0x150>
 800034e:	42a3      	cmp	r3, r4
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0xcc>
 8000352:	4290      	cmp	r0, r2
 8000354:	f0c0 80f0 	bcc.w	8000538 <__udivmoddi4+0x2ac>
 8000358:	1a86      	subs	r6, r0, r2
 800035a:	eb64 0303 	sbc.w	r3, r4, r3
 800035e:	2001      	movs	r0, #1
 8000360:	2d00      	cmp	r5, #0
 8000362:	d0e6      	beq.n	8000332 <__udivmoddi4+0xa6>
 8000364:	e9c5 6300 	strd	r6, r3, [r5]
 8000368:	e7e3      	b.n	8000332 <__udivmoddi4+0xa6>
 800036a:	2a00      	cmp	r2, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x204>
 8000370:	eba1 040c 	sub.w	r4, r1, ip
 8000374:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000378:	fa1f f78c 	uxth.w	r7, ip
 800037c:	2101      	movs	r1, #1
 800037e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000382:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000386:	fb08 4416 	mls	r4, r8, r6, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb07 f006 	mul.w	r0, r7, r6
 8000392:	4298      	cmp	r0, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x11c>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f106 34ff 	add.w	r4, r6, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x11a>
 80003a0:	4298      	cmp	r0, r3
 80003a2:	f200 80cd 	bhi.w	8000540 <__udivmoddi4+0x2b4>
 80003a6:	4626      	mov	r6, r4
 80003a8:	1a1c      	subs	r4, r3, r0
 80003aa:	fa1f f38e 	uxth.w	r3, lr
 80003ae:	fbb4 f0f8 	udiv	r0, r4, r8
 80003b2:	fb08 4410 	mls	r4, r8, r0, r4
 80003b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ba:	fb00 f707 	mul.w	r7, r0, r7
 80003be:	429f      	cmp	r7, r3
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x148>
 80003c2:	eb1c 0303 	adds.w	r3, ip, r3
 80003c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x146>
 80003cc:	429f      	cmp	r7, r3
 80003ce:	f200 80b0 	bhi.w	8000532 <__udivmoddi4+0x2a6>
 80003d2:	4620      	mov	r0, r4
 80003d4:	1bdb      	subs	r3, r3, r7
 80003d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003da:	e7a5      	b.n	8000328 <__udivmoddi4+0x9c>
 80003dc:	f1c1 0620 	rsb	r6, r1, #32
 80003e0:	408b      	lsls	r3, r1
 80003e2:	fa22 f706 	lsr.w	r7, r2, r6
 80003e6:	431f      	orrs	r7, r3
 80003e8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003ec:	fa04 f301 	lsl.w	r3, r4, r1
 80003f0:	ea43 030c 	orr.w	r3, r3, ip
 80003f4:	40f4      	lsrs	r4, r6
 80003f6:	fa00 f801 	lsl.w	r8, r0, r1
 80003fa:	0c38      	lsrs	r0, r7, #16
 80003fc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000400:	fbb4 fef0 	udiv	lr, r4, r0
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fb00 441e 	mls	r4, r0, lr, r4
 800040c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000410:	fb0e f90c 	mul.w	r9, lr, ip
 8000414:	45a1      	cmp	r9, r4
 8000416:	fa02 f201 	lsl.w	r2, r2, r1
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x1a6>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000422:	f080 8084 	bcs.w	800052e <__udivmoddi4+0x2a2>
 8000426:	45a1      	cmp	r9, r4
 8000428:	f240 8081 	bls.w	800052e <__udivmoddi4+0x2a2>
 800042c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000430:	443c      	add	r4, r7
 8000432:	eba4 0409 	sub.w	r4, r4, r9
 8000436:	fa1f f983 	uxth.w	r9, r3
 800043a:	fbb4 f3f0 	udiv	r3, r4, r0
 800043e:	fb00 4413 	mls	r4, r0, r3, r4
 8000442:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000446:	fb03 fc0c 	mul.w	ip, r3, ip
 800044a:	45a4      	cmp	ip, r4
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x1d2>
 800044e:	193c      	adds	r4, r7, r4
 8000450:	f103 30ff 	add.w	r0, r3, #4294967295
 8000454:	d267      	bcs.n	8000526 <__udivmoddi4+0x29a>
 8000456:	45a4      	cmp	ip, r4
 8000458:	d965      	bls.n	8000526 <__udivmoddi4+0x29a>
 800045a:	3b02      	subs	r3, #2
 800045c:	443c      	add	r4, r7
 800045e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000462:	fba0 9302 	umull	r9, r3, r0, r2
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	429c      	cmp	r4, r3
 800046c:	46ce      	mov	lr, r9
 800046e:	469c      	mov	ip, r3
 8000470:	d351      	bcc.n	8000516 <__udivmoddi4+0x28a>
 8000472:	d04e      	beq.n	8000512 <__udivmoddi4+0x286>
 8000474:	b155      	cbz	r5, 800048c <__udivmoddi4+0x200>
 8000476:	ebb8 030e 	subs.w	r3, r8, lr
 800047a:	eb64 040c 	sbc.w	r4, r4, ip
 800047e:	fa04 f606 	lsl.w	r6, r4, r6
 8000482:	40cb      	lsrs	r3, r1
 8000484:	431e      	orrs	r6, r3
 8000486:	40cc      	lsrs	r4, r1
 8000488:	e9c5 6400 	strd	r6, r4, [r5]
 800048c:	2100      	movs	r1, #0
 800048e:	e750      	b.n	8000332 <__udivmoddi4+0xa6>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f103 	lsr.w	r1, r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa24 f303 	lsr.w	r3, r4, r3
 80004a0:	4094      	lsls	r4, r2
 80004a2:	430c      	orrs	r4, r1
 80004a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004a8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b4:	fb08 3110 	mls	r1, r8, r0, r3
 80004b8:	0c23      	lsrs	r3, r4, #16
 80004ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004be:	fb00 f107 	mul.w	r1, r0, r7
 80004c2:	4299      	cmp	r1, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x24c>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ce:	d22c      	bcs.n	800052a <__udivmoddi4+0x29e>
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d92a      	bls.n	800052a <__udivmoddi4+0x29e>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e0:	fb08 3311 	mls	r3, r8, r1, r3
 80004e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004e8:	fb01 f307 	mul.w	r3, r1, r7
 80004ec:	42a3      	cmp	r3, r4
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x276>
 80004f0:	eb1c 0404 	adds.w	r4, ip, r4
 80004f4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004f8:	d213      	bcs.n	8000522 <__udivmoddi4+0x296>
 80004fa:	42a3      	cmp	r3, r4
 80004fc:	d911      	bls.n	8000522 <__udivmoddi4+0x296>
 80004fe:	3902      	subs	r1, #2
 8000500:	4464      	add	r4, ip
 8000502:	1ae4      	subs	r4, r4, r3
 8000504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000508:	e739      	b.n	800037e <__udivmoddi4+0xf2>
 800050a:	4604      	mov	r4, r0
 800050c:	e6f0      	b.n	80002f0 <__udivmoddi4+0x64>
 800050e:	4608      	mov	r0, r1
 8000510:	e706      	b.n	8000320 <__udivmoddi4+0x94>
 8000512:	45c8      	cmp	r8, r9
 8000514:	d2ae      	bcs.n	8000474 <__udivmoddi4+0x1e8>
 8000516:	ebb9 0e02 	subs.w	lr, r9, r2
 800051a:	eb63 0c07 	sbc.w	ip, r3, r7
 800051e:	3801      	subs	r0, #1
 8000520:	e7a8      	b.n	8000474 <__udivmoddi4+0x1e8>
 8000522:	4631      	mov	r1, r6
 8000524:	e7ed      	b.n	8000502 <__udivmoddi4+0x276>
 8000526:	4603      	mov	r3, r0
 8000528:	e799      	b.n	800045e <__udivmoddi4+0x1d2>
 800052a:	4630      	mov	r0, r6
 800052c:	e7d4      	b.n	80004d8 <__udivmoddi4+0x24c>
 800052e:	46d6      	mov	lr, sl
 8000530:	e77f      	b.n	8000432 <__udivmoddi4+0x1a6>
 8000532:	4463      	add	r3, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e74d      	b.n	80003d4 <__udivmoddi4+0x148>
 8000538:	4606      	mov	r6, r0
 800053a:	4623      	mov	r3, r4
 800053c:	4608      	mov	r0, r1
 800053e:	e70f      	b.n	8000360 <__udivmoddi4+0xd4>
 8000540:	3e02      	subs	r6, #2
 8000542:	4463      	add	r3, ip
 8000544:	e730      	b.n	80003a8 <__udivmoddi4+0x11c>
 8000546:	bf00      	nop

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <MX_DMA_Init+0x48>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <MX_DMA_Init+0x48>)
 8000558:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <MX_DMA_Init+0x48>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	2010      	movs	r0, #16
 8000570:	f001 fda7 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000574:	2010      	movs	r0, #16
 8000576:	f001 fdc0 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	2011      	movs	r0, #17
 8000580:	f001 fd9f 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000584:	2011      	movs	r0, #17
 8000586:	f001 fdb8 	bl	80020fa <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800

08000598 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	@ 0x30
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b77      	ldr	r3, [pc, #476]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a76      	ldr	r2, [pc, #472]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b74      	ldr	r3, [pc, #464]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	4b71      	ldr	r3, [pc, #452]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a70      	ldr	r2, [pc, #448]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b6e      	ldr	r3, [pc, #440]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b6b      	ldr	r3, [pc, #428]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a6a      	ldr	r2, [pc, #424]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b68      	ldr	r3, [pc, #416]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b65      	ldr	r3, [pc, #404]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a64      	ldr	r2, [pc, #400]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b62      	ldr	r3, [pc, #392]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800060e:	4b5f      	ldr	r3, [pc, #380]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a5e      	ldr	r2, [pc, #376]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b5c      	ldr	r3, [pc, #368]	@ (800078c <MX_GPIO_Init+0x1f4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	4b59      	ldr	r3, [pc, #356]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a58      	ldr	r2, [pc, #352]	@ (800078c <MX_GPIO_Init+0x1f4>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b56      	ldr	r3, [pc, #344]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063e:	4b53      	ldr	r3, [pc, #332]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a52      	ldr	r2, [pc, #328]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b50      	ldr	r3, [pc, #320]	@ (800078c <MX_GPIO_Init+0x1f4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f244 0181 	movw	r1, #16513	@ 0x4081
 800065c:	484c      	ldr	r0, [pc, #304]	@ (8000790 <MX_GPIO_Init+0x1f8>)
 800065e:	f002 fb29 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2141      	movs	r1, #65	@ 0x41
 8000666:	484b      	ldr	r0, [pc, #300]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000668:	f002 fb24 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2110      	movs	r1, #16
 8000670:	4849      	ldr	r0, [pc, #292]	@ (8000798 <MX_GPIO_Init+0x200>)
 8000672:	f002 fb1f 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000676:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800067c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4843      	ldr	r0, [pc, #268]	@ (800079c <MX_GPIO_Init+0x204>)
 800068e:	f002 f965 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000692:	2332      	movs	r3, #50	@ 0x32
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006a2:	230b      	movs	r3, #11
 80006a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	483b      	ldr	r0, [pc, #236]	@ (800079c <MX_GPIO_Init+0x204>)
 80006ae:	f002 f955 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006b2:	2386      	movs	r3, #134	@ 0x86
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c2:	230b      	movs	r3, #11
 80006c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4834      	ldr	r0, [pc, #208]	@ (80007a0 <MX_GPIO_Init+0x208>)
 80006ce:	f002 f945 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006d2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4829      	ldr	r0, [pc, #164]	@ (8000790 <MX_GPIO_Init+0x1f8>)
 80006ec:	f002 f936 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 80006f0:	2341      	movs	r3, #65	@ 0x41
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4823      	ldr	r0, [pc, #140]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000708:	f002 f928 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071e:	230b      	movs	r3, #11
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4819      	ldr	r0, [pc, #100]	@ (8000790 <MX_GPIO_Init+0x1f8>)
 800072a:	f002 f917 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4814      	ldr	r0, [pc, #80]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000742:	f002 f90b 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000746:	2310      	movs	r3, #16
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	480e      	ldr	r0, [pc, #56]	@ (8000798 <MX_GPIO_Init+0x200>)
 800075e:	f002 f8fd 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000762:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000774:	230b      	movs	r3, #11
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000780:	f002 f8ec 	bl	800295c <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3730      	adds	r7, #48	@ 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020400 	.word	0x40020400
 8000794:	40021800 	.word	0x40021800
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020000 	.word	0x40020000

080007a4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <HAL_UARTEx_RxEventCallback+0x28>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d104      	bne.n	80007c4 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 80007ba:	887b      	ldrh	r3, [r7, #2]
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <HAL_UARTEx_RxEventCallback+0x2c>)
 80007c0:	f007 f815 	bl	80077ee <ATC_IdleLineCallback>
	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40004400 	.word	0x40004400
 80007d0:	20000078 	.word	0x20000078

080007d4 <pid_calculate>:
	pid_data->total_error = 0;
	pid_data->previous_error = 0;
}

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	@ 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	441a      	add	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	ee07 3a90 	vmov	s15, r3
 8000800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000808:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	ee07 3a90 	vmov	s15, r3
 800081a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800081e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000822:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	ed93 7a04 	vldr	s14, [r3, #16]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	69ba      	ldr	r2, [r7, #24]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	ee07 3a90 	vmov	s15, r3
 8000838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800083c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000840:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	ee07 3a90 	vmov	s15, r3
 800084c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000850:	ed97 7a07 	vldr	s14, [r7, #28]
 8000854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085c:	db08      	blt.n	8000870 <pid_calculate+0x9c>
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800086a:	edc7 7a07 	vstr	s15, [r7, #28]
 800086e:	e016      	b.n	800089e <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	425b      	negs	r3, r3
 8000876:	ee07 3a90 	vmov	s15, r3
 800087a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088a:	d808      	bhi.n	800089e <pid_calculate+0xca>
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	425b      	negs	r3, r3
 8000892:	ee07 3a90 	vmov	s15, r3
 8000896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800089a:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 80008a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80008a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80008ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80008b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008bc:	ee17 3a90 	vmov	r3, s15
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3724      	adds	r7, #36	@ 0x24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <motor_calculate_speed>:
	m->set_speed = 0;
    m->actual_PWM = 0;
}

void motor_calculate_speed(MOTOR *m)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 f82a 	bl	800092e <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	8892      	ldrh	r2, [r2, #4]
 80008ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f103 0018 	add.w	r0, r3, #24
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6919      	ldr	r1, [r3, #16]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	461a      	mov	r2, r3
 8000902:	f7ff ff67 	bl	80007d4 <pid_calculate>
 8000906:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	695a      	ldr	r2, [r3, #20]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	441a      	add	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db04      	blt.n	8000926 <motor_calculate_speed+0x5a>
	{
		//drv8835_set_motorA_direction(CW);
		drv8835_set_motorA_speed(m->actual_PWM);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f81b 	bl	800095c <drv8835_set_motorA_speed>
	else
	{
		//drv8835_set_motorA_direction(CCW);
		//drv8835_set_motorA_speed(-m->actual_PWM);
	}
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800093e:	b21b      	sxth	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <drv8835_set_motorA_speed>:

	m->set_speed = set_speed;
}

void drv8835_set_motorA_speed(uint16_t speed)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000966:	88fa      	ldrh	r2, [r7, #6]
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <drv8835_set_motorA_speed+0x34>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800096e:	429a      	cmp	r2, r3
 8000970:	d303      	bcc.n	800097a <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <drv8835_set_motorA_speed+0x34>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000978:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 800097a:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <drv8835_set_motorA_speed+0x34>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	88fa      	ldrh	r2, [r7, #6]
 8000980:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000134 	.word	0x20000134

08000994 <HAL_TIM_PeriodElapsedCallback>:

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d102      	bne.n	80009ac <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80009a8:	f7ff ff90 	bl	80008cc <motor_calculate_speed>
	}
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40001000 	.word	0x40001000
 80009b8:	200000b4 	.word	0x200000b4

080009bc <ProcessCommand>:
    // Wyślij dane na UART3, aby były widoczne w terminalu
    HAL_UART_Transmit(&huart3, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);  // Dodaj nową linię
}

void ProcessCommand(uint8_t* cmd) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	if (strcmp((char*)cmd, "LIGHTS") == 0) {
 80009c4:	490b      	ldr	r1, [pc, #44]	@ (80009f4 <ProcessCommand+0x38>)
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fc36 	bl	8000238 <strcmp>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d104      	bne.n	80009dc <ProcessCommand+0x20>
		//HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
		HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 80009d2:	2101      	movs	r1, #1
 80009d4:	4808      	ldr	r0, [pc, #32]	@ (80009f8 <ProcessCommand+0x3c>)
 80009d6:	f002 f986 	bl	8002ce6 <HAL_GPIO_TogglePin>
	} else HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
}
 80009da:	e006      	b.n	80009ea <ProcessCommand+0x2e>
	} else HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	2211      	movs	r2, #17
 80009e2:	4906      	ldr	r1, [pc, #24]	@ (80009fc <ProcessCommand+0x40>)
 80009e4:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <ProcessCommand+0x44>)
 80009e6:	f004 fbcb 	bl	8005180 <HAL_UART_Transmit>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	08007c18 	.word	0x08007c18
 80009f8:	40021800 	.word	0x40021800
 80009fc:	08007c20 	.word	0x08007c20
 8000a00:	200003d0 	.word	0x200003d0

08000a04 <ProcessIncomingData>:

// Funkcja obsługująca przetwarzanie danych przychodzących przez ESP
void ProcessIncomingData() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af02      	add	r7, sp, #8
	char *response = NULL; // Wskaźnik na odebrane dane
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
	    while (1) {
	        // Oczekiwanie na odpowiedź zawierającą +IPD
	        int result = ATC_Receive(&ESP, &response, 5000, 1, "+IPD,");
 8000a0e:	4639      	mov	r1, r7
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <ProcessIncomingData+0x8c>)
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2301      	movs	r3, #1
 8000a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a1a:	481e      	ldr	r0, [pc, #120]	@ (8000a94 <ProcessIncomingData+0x90>)
 8000a1c:	f006 fe36 	bl	800768c <ATC_Receive>
 8000a20:	60f8      	str	r0, [r7, #12]
	        if (result > 0 && response != NULL) {
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	dd2e      	ble.n	8000a86 <ProcessIncomingData+0x82>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d02b      	beq.n	8000a86 <ProcessIncomingData+0x82>
	            // Przetwarzanie odpowiedzi zawierającej +IPD
	            char *ipdStart = strstr(response, "+IPD,");
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	4917      	ldr	r1, [pc, #92]	@ (8000a90 <ProcessIncomingData+0x8c>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f007 f830 	bl	8007a98 <strstr>
 8000a38:	60b8      	str	r0, [r7, #8]
	            if (ipdStart != NULL) {
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d01f      	beq.n	8000a80 <ProcessIncomingData+0x7c>
	                // Znajdź początek danych (po dwukropku ':')
	                char *dataStart = strchr(ipdStart, ':');
 8000a40:	213a      	movs	r1, #58	@ 0x3a
 8000a42:	68b8      	ldr	r0, [r7, #8]
 8000a44:	f007 f808 	bl	8007a58 <strchr>
 8000a48:	6078      	str	r0, [r7, #4]
	                if (dataStart != NULL) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d017      	beq.n	8000a80 <ProcessIncomingData+0x7c>
	                    dataStart++; // Przesuń za dwukropek, aby przejść do danych
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3301      	adds	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
	                    // Wyślij dane na UART3
	                    HAL_UART_Transmit(&huart3, (uint8_t *)dataStart, strlen(dataStart), HAL_MAX_DELAY);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fbf8 	bl	800024c <strlen>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <ProcessIncomingData+0x94>)
 8000a68:	f004 fb8a 	bl	8005180 <HAL_UART_Transmit>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Nowa linia dla przejrzystości
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	2202      	movs	r2, #2
 8000a72:	490a      	ldr	r1, [pc, #40]	@ (8000a9c <ProcessIncomingData+0x98>)
 8000a74:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <ProcessIncomingData+0x94>)
 8000a76:	f004 fb83 	bl	8005180 <HAL_UART_Transmit>
	                    ProcessCommand((uint8_t *)dataStart);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ff9e 	bl	80009bc <ProcessCommand>
	                }
	            }
	            ATC_RxFlush(&ESP); // Wyczyść bufor dla nowych danych
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <ProcessIncomingData+0x90>)
 8000a82:	f006 fb1d 	bl	80070c0 <ATC_RxFlush>
	        }

	        // Wywołanie głównej pętli ATC
	        ATC_Loop(&ESP);
 8000a86:	4803      	ldr	r0, [pc, #12]	@ (8000a94 <ProcessIncomingData+0x90>)
 8000a88:	f006 fd13 	bl	80074b2 <ATC_Loop>
	    while (1) {
 8000a8c:	e7bf      	b.n	8000a0e <ProcessIncomingData+0xa>
 8000a8e:	bf00      	nop
 8000a90:	08007c34 	.word	0x08007c34
 8000a94:	20000078 	.word	0x20000078
 8000a98:	200003d0 	.word	0x200003d0
 8000a9c:	08007c14 	.word	0x08007c14

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa6:	f001 f9b0 	bl	8001e0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aaa:	f000 f891 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aae:	f7ff fd73 	bl	8000598 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab2:	f7ff fd4b 	bl	800054c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000ab6:	f000 ff8f 	bl	80019d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000aba:	f001 f8d5 	bl	8001c68 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000abe:	f000 ff5b 	bl	8001978 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ac2:	f000 fa47 	bl	8000f54 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ac6:	f000 fb03 	bl	80010d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000aca:	f000 fb57 	bl	800117c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ace:	f000 fc49 	bl	8001364 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000ad2:	f000 fa99 	bl	8001008 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000ad6:	f000 fc0d 	bl	80012f4 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000ada:	f000 fba5 	bl	8001228 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000ade:	f000 fc9b 	bl	8001418 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  ATC_Init(&ESP, &huart2, 512, "ESP");
 8000ae2:	4b30      	ldr	r3, [pc, #192]	@ (8000ba4 <main+0x104>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ae8:	492f      	ldr	r1, [pc, #188]	@ (8000ba8 <main+0x108>)
 8000aea:	4830      	ldr	r0, [pc, #192]	@ (8000bac <main+0x10c>)
 8000aec:	f006 fc3c 	bl	8007368 <ATC_Init>
  ATC_SendReceive(&ESP, "AT\r\n", 1000, NULL, 1000, 0);
 8000af0:	2300      	movs	r3, #0
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2300      	movs	r3, #0
 8000afc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b00:	492b      	ldr	r1, [pc, #172]	@ (8000bb0 <main+0x110>)
 8000b02:	482a      	ldr	r0, [pc, #168]	@ (8000bac <main+0x10c>)
 8000b04:	f006 fce3 	bl	80074ce <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWMODE=1\r\n", 1000, NULL, 1000, 0);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2300      	movs	r3, #0
 8000b14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b18:	4926      	ldr	r1, [pc, #152]	@ (8000bb4 <main+0x114>)
 8000b1a:	4824      	ldr	r0, [pc, #144]	@ (8000bac <main+0x10c>)
 8000b1c:	f006 fcd7 	bl	80074ce <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMUX=1\r\n", 1000, NULL, 1000, 0);
 8000b20:	2300      	movs	r3, #0
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b30:	4921      	ldr	r1, [pc, #132]	@ (8000bb8 <main+0x118>)
 8000b32:	481e      	ldr	r0, [pc, #120]	@ (8000bac <main+0x10c>)
 8000b34:	f006 fccb 	bl	80074ce <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMODE=1\r\n", 1000, NULL, 1000, 0);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2300      	movs	r3, #0
 8000b44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b48:	491c      	ldr	r1, [pc, #112]	@ (8000bbc <main+0x11c>)
 8000b4a:	4818      	ldr	r0, [pc, #96]	@ (8000bac <main+0x10c>)
 8000b4c:	f006 fcbf 	bl	80074ce <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPSERVER=1,80\r\n", 1000, NULL, 1000, 0);
 8000b50:	2300      	movs	r3, #0
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b60:	4917      	ldr	r1, [pc, #92]	@ (8000bc0 <main+0x120>)
 8000b62:	4812      	ldr	r0, [pc, #72]	@ (8000bac <main+0x10c>)
 8000b64:	f006 fcb3 	bl	80074ce <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWJAP=\"DeathLock\",\"\"\r\n", 10000, NULL, 10000, 0);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b78:	4912      	ldr	r1, [pc, #72]	@ (8000bc4 <main+0x124>)
 8000b7a:	480c      	ldr	r0, [pc, #48]	@ (8000bac <main+0x10c>)
 8000b7c:	f006 fca7 	bl	80074ce <ATC_SendReceive>

  const char *readyMsg = "STM32 ready to receive data from ESP...\r\n";
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <main+0x128>)
 8000b82:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fb61 	bl	800024c <strlen>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <main+0x12c>)
 8000b96:	f004 faf3 	bl	8005180 <HAL_UART_Transmit>

  ProcessIncomingData();
 8000b9a:	f7ff ff33 	bl	8000a04 <ProcessIncomingData>
  int x = 0;Set_PWM_Frequency(1000); // A4 - 440 Hz*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b9e:	bf00      	nop
 8000ba0:	e7fd      	b.n	8000b9e <main+0xfe>
 8000ba2:	bf00      	nop
 8000ba4:	08007c3c 	.word	0x08007c3c
 8000ba8:	20000348 	.word	0x20000348
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	08007c40 	.word	0x08007c40
 8000bb4:	08007c48 	.word	0x08007c48
 8000bb8:	08007c58 	.word	0x08007c58
 8000bbc:	08007c68 	.word	0x08007c68
 8000bc0:	08007c78 	.word	0x08007c78
 8000bc4:	08007c8c 	.word	0x08007c8c
 8000bc8:	08007ca8 	.word	0x08007ca8
 8000bcc:	200003d0 	.word	0x200003d0

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	@ 0x50
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2234      	movs	r2, #52	@ 0x34
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 ff32 	bl	8007a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bf4:	f002 f9cc 	bl	8002f90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <SystemClock_Config+0xdc>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8000cac <SystemClock_Config+0xdc>)
 8000bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <SystemClock_Config+0xdc>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <SystemClock_Config+0xe0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c18:	4a25      	ldr	r2, [pc, #148]	@ (8000cb0 <SystemClock_Config+0xe0>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <SystemClock_Config+0xe0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c30:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c36:	2302      	movs	r3, #2
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c40:	2304      	movs	r3, #4
 8000c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c44:	2360      	movs	r3, #96	@ 0x60
 8000c46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 f9f9 	bl	8003050 <HAL_RCC_OscConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c64:	f000 f826 	bl	8000cb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c68:	f002 f9a2 	bl	8002fb0 <HAL_PWREx_EnableOverDrive>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c72:	f000 f81f 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	2103      	movs	r1, #3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fc8a 	bl	80035ac <HAL_RCC_ClockConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c9e:	f000 f809 	bl	8000cb4 <Error_Handler>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3750      	adds	r7, #80	@ 0x50
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40007000 	.word	0x40007000

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <Error_Handler+0x8>

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <NMI_Handler+0x4>

08000d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <MemManage_Handler+0x4>

08000d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5e:	f001 f891 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <DMA1_Stream5_IRQHandler+0x10>)
 8000d6e:	f001 fb7f 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000458 	.word	0x20000458

08000d7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d80:	4802      	ldr	r0, [pc, #8]	@ (8000d8c <DMA1_Stream6_IRQHandler+0x10>)
 8000d82:	f001 fb75 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200004b8 	.word	0x200004b8

08000d90 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d94:	4802      	ldr	r0, [pc, #8]	@ (8000da0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d96:	f003 fbab 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000e8 	.word	0x200000e8

08000da4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000daa:	f003 fba1 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000e8 	.word	0x200000e8

08000db8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000dbe:	f003 fb97 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000e8 	.word	0x200000e8

08000dcc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <TIM1_CC_IRQHandler+0x10>)
 8000dd2:	f003 fb8d 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000e8 	.word	0x200000e8

08000de0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <TIM2_IRQHandler+0x10>)
 8000de6:	f003 fb83 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000134 	.word	0x20000134

08000df4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000df8:	4802      	ldr	r0, [pc, #8]	@ (8000e04 <TIM3_IRQHandler+0x10>)
 8000dfa:	f003 fb79 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000180 	.word	0x20000180

08000e08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <TIM4_IRQHandler+0x10>)
 8000e0e:	f003 fb6f 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200001cc 	.word	0x200001cc

08000e1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <USART2_IRQHandler+0x10>)
 8000e22:	f004 fbcb 	bl	80055bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000348 	.word	0x20000348

08000e30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <USART3_IRQHandler+0x10>)
 8000e36:	f004 fbc1 	bl	80055bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200003d0 	.word	0x200003d0

08000e44 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000e48:	4803      	ldr	r0, [pc, #12]	@ (8000e58 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000e4a:	f003 fb51 	bl	80044f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000e4e:	4803      	ldr	r0, [pc, #12]	@ (8000e5c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000e50:	f003 fb4e 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200002b0 	.word	0x200002b0
 8000e5c:	200002fc 	.word	0x200002fc

08000e60 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000e66:	f003 fb43 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200002b0 	.word	0x200002b0

08000e74 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000e7a:	f003 fb39 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200002b0 	.word	0x200002b0

08000e88 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <TIM8_CC_IRQHandler+0x10>)
 8000e8e:	f003 fb2f 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200002b0 	.word	0x200002b0

08000e9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <TIM5_IRQHandler+0x10>)
 8000ea2:	f003 fb25 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000218 	.word	0x20000218

08000eb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <TIM6_DAC_IRQHandler+0x10>)
 8000eb6:	f003 fb1b 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000264 	.word	0x20000264

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f006 fdf6 	bl	8007ae4 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20080000 	.word	0x20080000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	200000e4 	.word	0x200000e4
 8000f2c:	20000b48 	.word	0x20000b48

08000f30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	@ 0x30
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	2224      	movs	r2, #36	@ 0x24
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f006 fd70 	bl	8007a48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f72:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <MX_TIM1_Init+0xac>)
 8000f74:	4a23      	ldr	r2, [pc, #140]	@ (8001004 <MX_TIM1_Init+0xb0>)
 8000f76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f78:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_TIM1_Init+0xac>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <MX_TIM1_Init+0xac>)
 8000f80:	2210      	movs	r2, #16
 8000f82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <MX_TIM1_Init+0xac>)
 8000f86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_TIM1_Init+0xac>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <MX_TIM1_Init+0xac>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <MX_TIM1_Init+0xac>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000fae:	230f      	movs	r3, #15
 8000fb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <MX_TIM1_Init+0xac>)
 8000fca:	f003 f9eb 	bl	80043a4 <HAL_TIM_Encoder_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000fd4:	f7ff fe6e 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_TIM1_Init+0xac>)
 8000fea:	f003 ffcf 	bl	8004f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ff4:	f7ff fe5e 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3730      	adds	r7, #48	@ 0x30
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000e8 	.word	0x200000e8
 8001004:	40010000 	.word	0x40010000

08001008 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	@ 0x28
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102c:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <MX_TIM2_Init+0xc4>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001034:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <MX_TIM2_Init+0xc4>)
 8001036:	222f      	movs	r2, #47	@ 0x2f
 8001038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <MX_TIM2_Init+0xc4>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <MX_TIM2_Init+0xc4>)
 8001042:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <MX_TIM2_Init+0xc4>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <MX_TIM2_Init+0xc4>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001054:	481d      	ldr	r0, [pc, #116]	@ (80010cc <MX_TIM2_Init+0xc4>)
 8001056:	f003 f94e 	bl	80042f6 <HAL_TIM_PWM_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001060:	f7ff fe28 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	4816      	ldr	r0, [pc, #88]	@ (80010cc <MX_TIM2_Init+0xc4>)
 8001074:	f003 ff8a 	bl	8004f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800107e:	f7ff fe19 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001082:	2360      	movs	r3, #96	@ 0x60
 8001084:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_TIM2_Init+0xc4>)
 800109a:	f003 fb31 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010a4:	f7ff fe06 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	220c      	movs	r2, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	@ (80010cc <MX_TIM2_Init+0xc4>)
 80010b0:	f003 fb26 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80010ba:	f7ff fdfb 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010be:	4803      	ldr	r0, [pc, #12]	@ (80010cc <MX_TIM2_Init+0xc4>)
 80010c0:	f000 fbbc 	bl	800183c <HAL_TIM_MspPostInit>

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	@ 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000134 	.word	0x20000134

080010d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	@ 0x30
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2224      	movs	r2, #36	@ 0x24
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 fcb2 	bl	8007a48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ee:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <MX_TIM3_Init+0xa4>)
 80010f0:	4a21      	ldr	r2, [pc, #132]	@ (8001178 <MX_TIM3_Init+0xa8>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <MX_TIM3_Init+0xa4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <MX_TIM3_Init+0xa4>)
 80010fc:	2210      	movs	r2, #16
 80010fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <MX_TIM3_Init+0xa4>)
 8001102:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001106:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <MX_TIM3_Init+0xa4>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <MX_TIM3_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001114:	2303      	movs	r3, #3
 8001116:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800111c:	2301      	movs	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001124:	230f      	movs	r3, #15
 8001126:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800112c:	2301      	movs	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001134:	230f      	movs	r3, #15
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_TIM3_Init+0xa4>)
 8001140:	f003 f930 	bl	80043a4 <HAL_TIM_Encoder_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800114a:	f7ff fdb3 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <MX_TIM3_Init+0xa4>)
 800115c:	f003 ff16 	bl	8004f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001166:	f7ff fda5 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	@ 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000180 	.word	0x20000180
 8001178:	40000400 	.word	0x40000400

0800117c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	@ 0x30
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2224      	movs	r2, #36	@ 0x24
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f006 fc5c 	bl	8007a48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <MX_TIM4_Init+0xa4>)
 800119c:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <MX_TIM4_Init+0xa8>)
 800119e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_TIM4_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <MX_TIM4_Init+0xa4>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <MX_TIM4_Init+0xa4>)
 80011ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_TIM4_Init+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <MX_TIM4_Init+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011c0:	2303      	movs	r3, #3
 80011c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80011d0:	230f      	movs	r3, #15
 80011d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011d8:	2301      	movs	r3, #1
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80011e0:	230f      	movs	r3, #15
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	480d      	ldr	r0, [pc, #52]	@ (8001220 <MX_TIM4_Init+0xa4>)
 80011ec:	f003 f8da 	bl	80043a4 <HAL_TIM_Encoder_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011f6:	f7ff fd5d 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	@ (8001220 <MX_TIM4_Init+0xa4>)
 8001208:	f003 fec0 	bl	8004f8c <HAL_TIMEx_MasterConfigSynchronization>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001212:	f7ff fd4f 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	@ 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001cc 	.word	0x200001cc
 8001224:	40000800 	.word	0x40000800

08001228 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800124c:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <MX_TIM5_Init+0xc4>)
 800124e:	4a28      	ldr	r2, [pc, #160]	@ (80012f0 <MX_TIM5_Init+0xc8>)
 8001250:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <MX_TIM5_Init+0xc4>)
 8001254:	222f      	movs	r2, #47	@ 0x2f
 8001256:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <MX_TIM5_Init+0xc4>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800125e:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <MX_TIM5_Init+0xc4>)
 8001260:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001264:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <MX_TIM5_Init+0xc4>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <MX_TIM5_Init+0xc4>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001272:	481e      	ldr	r0, [pc, #120]	@ (80012ec <MX_TIM5_Init+0xc4>)
 8001274:	f003 f83f 	bl	80042f6 <HAL_TIM_PWM_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800127e:	f7ff fd19 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4816      	ldr	r0, [pc, #88]	@ (80012ec <MX_TIM5_Init+0xc4>)
 8001292:	f003 fe7b 	bl	8004f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800129c:	f7ff fd0a 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a0:	2360      	movs	r3, #96	@ 0x60
 80012a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	4619      	mov	r1, r3
 80012b6:	480d      	ldr	r0, [pc, #52]	@ (80012ec <MX_TIM5_Init+0xc4>)
 80012b8:	f003 fa22 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80012c2:	f7ff fcf7 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	220c      	movs	r2, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	4807      	ldr	r0, [pc, #28]	@ (80012ec <MX_TIM5_Init+0xc4>)
 80012ce:	f003 fa17 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80012d8:	f7ff fcec 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012dc:	4803      	ldr	r0, [pc, #12]	@ (80012ec <MX_TIM5_Init+0xc4>)
 80012de:	f000 faad 	bl	800183c <HAL_TIM_MspPostInit>

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000218 	.word	0x20000218
 80012f0:	40000c00 	.word	0x40000c00

080012f4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_TIM6_Init+0x68>)
 8001306:	4a16      	ldr	r2, [pc, #88]	@ (8001360 <MX_TIM6_Init+0x6c>)
 8001308:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_TIM6_Init+0x68>)
 800130c:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001310:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_TIM6_Init+0x68>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001318:	4b10      	ldr	r3, [pc, #64]	@ (800135c <MX_TIM6_Init+0x68>)
 800131a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800131e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_TIM6_Init+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001326:	480d      	ldr	r0, [pc, #52]	@ (800135c <MX_TIM6_Init+0x68>)
 8001328:	f002 ff8e 	bl	8004248 <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001332:	f7ff fcbf 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_TIM6_Init+0x68>)
 8001344:	f003 fe22 	bl	8004f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800134e:	f7ff fcb1 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000264 	.word	0x20000264
 8001360:	40001000 	.word	0x40001000

08001364 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	@ 0x30
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2224      	movs	r2, #36	@ 0x24
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fb68 	bl	8007a48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001382:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <MX_TIM8_Init+0xac>)
 8001384:	4a23      	ldr	r2, [pc, #140]	@ (8001414 <MX_TIM8_Init+0xb0>)
 8001386:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001388:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <MX_TIM8_Init+0xac>)
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <MX_TIM8_Init+0xac>)
 8001390:	2210      	movs	r2, #16
 8001392:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <MX_TIM8_Init+0xac>)
 8001396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800139a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <MX_TIM8_Init+0xac>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <MX_TIM8_Init+0xac>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_TIM8_Init+0xac>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ae:	2303      	movs	r3, #3
 80013b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013b6:	2301      	movs	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013be:	230f      	movs	r3, #15
 80013c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013c6:	2301      	movs	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80013ce:	230f      	movs	r3, #15
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	4619      	mov	r1, r3
 80013d8:	480d      	ldr	r0, [pc, #52]	@ (8001410 <MX_TIM8_Init+0xac>)
 80013da:	f002 ffe3 	bl	80043a4 <HAL_TIM_Encoder_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80013e4:	f7ff fc66 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_TIM8_Init+0xac>)
 80013fa:	f003 fdc7 	bl	8004f8c <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001404:	f7ff fc56 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3730      	adds	r7, #48	@ 0x30
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200002b0 	.word	0x200002b0
 8001414:	40010400 	.word	0x40010400

08001418 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	615a      	str	r2, [r3, #20]
 800142e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_TIM12_Init+0x84>)
 8001432:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <MX_TIM12_Init+0x88>)
 8001434:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_TIM12_Init+0x84>)
 8001438:	225f      	movs	r2, #95	@ 0x5f
 800143a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_TIM12_Init+0x84>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_TIM12_Init+0x84>)
 8001444:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001448:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_TIM12_Init+0x84>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_TIM12_Init+0x84>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001456:	4811      	ldr	r0, [pc, #68]	@ (800149c <MX_TIM12_Init+0x84>)
 8001458:	f002 ff4d 	bl	80042f6 <HAL_TIM_PWM_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001462:	f7ff fc27 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001466:	2360      	movs	r3, #96	@ 0x60
 8001468:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2204      	movs	r2, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4807      	ldr	r0, [pc, #28]	@ (800149c <MX_TIM12_Init+0x84>)
 800147e:	f003 f93f 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001488:	f7ff fc14 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800148c:	4803      	ldr	r0, [pc, #12]	@ (800149c <MX_TIM12_Init+0x84>)
 800148e:	f000 f9d5 	bl	800183c <HAL_TIM_MspPostInit>

}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200002fc 	.word	0x200002fc
 80014a0:	40001800 	.word	0x40001800

080014a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b090      	sub	sp, #64	@ 0x40
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a93      	ldr	r2, [pc, #588]	@ (8001710 <HAL_TIM_Encoder_MspInit+0x26c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d149      	bne.n	800155a <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c6:	4b93      	ldr	r3, [pc, #588]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a92      	ldr	r2, [pc, #584]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b90      	ldr	r3, [pc, #576]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014de:	4b8d      	ldr	r3, [pc, #564]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a8c      	ldr	r2, [pc, #560]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 80014e4:	f043 0310 	orr.w	r3, r3, #16
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b8a      	ldr	r3, [pc, #552]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 80014f6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001508:	2301      	movs	r3, #1
 800150a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001510:	4619      	mov	r1, r3
 8001512:	4881      	ldr	r0, [pc, #516]	@ (8001718 <HAL_TIM_Encoder_MspInit+0x274>)
 8001514:	f001 fa22 	bl	800295c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2018      	movs	r0, #24
 800151e:	f000 fdd0 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001522:	2018      	movs	r0, #24
 8001524:	f000 fde9 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2019      	movs	r0, #25
 800152e:	f000 fdc8 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001532:	2019      	movs	r0, #25
 8001534:	f000 fde1 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	201a      	movs	r0, #26
 800153e:	f000 fdc0 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001542:	201a      	movs	r0, #26
 8001544:	f000 fdd9 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	201b      	movs	r0, #27
 800154e:	f000 fdb8 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001552:	201b      	movs	r0, #27
 8001554:	f000 fdd1 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001558:	e0d5      	b.n	8001706 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6f      	ldr	r2, [pc, #444]	@ (800171c <HAL_TIM_Encoder_MspInit+0x278>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d14c      	bne.n	80015fe <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001564:	4b6b      	ldr	r3, [pc, #428]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	4a6a      	ldr	r2, [pc, #424]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001570:	4b68      	ldr	r3, [pc, #416]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	623b      	str	r3, [r7, #32]
 800157a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b65      	ldr	r3, [pc, #404]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	4a64      	ldr	r2, [pc, #400]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6313      	str	r3, [r2, #48]	@ 0x30
 8001588:	4b62      	ldr	r3, [pc, #392]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001594:	4b5f      	ldr	r3, [pc, #380]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	4a5e      	ldr	r2, [pc, #376]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 80015ac:	2340      	movs	r3, #64	@ 0x40
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015bc:	2302      	movs	r3, #2
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015c4:	4619      	mov	r1, r3
 80015c6:	4856      	ldr	r0, [pc, #344]	@ (8001720 <HAL_TIM_Encoder_MspInit+0x27c>)
 80015c8:	f001 f9c8 	bl	800295c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 80015cc:	2320      	movs	r3, #32
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015dc:	2302      	movs	r3, #2
 80015de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015e4:	4619      	mov	r1, r3
 80015e6:	484f      	ldr	r0, [pc, #316]	@ (8001724 <HAL_TIM_Encoder_MspInit+0x280>)
 80015e8:	f001 f9b8 	bl	800295c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	201d      	movs	r0, #29
 80015f2:	f000 fd66 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015f6:	201d      	movs	r0, #29
 80015f8:	f000 fd7f 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 80015fc:	e083      	b.n	8001706 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a49      	ldr	r2, [pc, #292]	@ (8001728 <HAL_TIM_Encoder_MspInit+0x284>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d131      	bne.n	800166c <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001608:	4b42      	ldr	r3, [pc, #264]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	4a41      	ldr	r2, [pc, #260]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6413      	str	r3, [r2, #64]	@ 0x40
 8001614:	4b3f      	ldr	r3, [pc, #252]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001620:	4b3c      	ldr	r3, [pc, #240]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	4a3b      	ldr	r2, [pc, #236]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6313      	str	r3, [r2, #48]	@ 0x30
 800162c:	4b39      	ldr	r3, [pc, #228]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8001638:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800164a:	2302      	movs	r3, #2
 800164c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001652:	4619      	mov	r1, r3
 8001654:	4835      	ldr	r0, [pc, #212]	@ (800172c <HAL_TIM_Encoder_MspInit+0x288>)
 8001656:	f001 f981 	bl	800295c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	201e      	movs	r0, #30
 8001660:	f000 fd2f 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001664:	201e      	movs	r0, #30
 8001666:	f000 fd48 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 800166a:	e04c      	b.n	8001706 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2f      	ldr	r2, [pc, #188]	@ (8001730 <HAL_TIM_Encoder_MspInit+0x28c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d147      	bne.n	8001706 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001676:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	4a26      	ldr	r2, [pc, #152]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6453      	str	r3, [r2, #68]	@ 0x44
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a20      	ldr	r2, [pc, #128]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x270>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 80016a6:	23c0      	movs	r3, #192	@ 0xc0
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016b6:	2303      	movs	r3, #3
 80016b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016be:	4619      	mov	r1, r3
 80016c0:	481c      	ldr	r0, [pc, #112]	@ (8001734 <HAL_TIM_Encoder_MspInit+0x290>)
 80016c2:	f001 f94b 	bl	800295c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	202b      	movs	r0, #43	@ 0x2b
 80016cc:	f000 fcf9 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80016d0:	202b      	movs	r0, #43	@ 0x2b
 80016d2:	f000 fd12 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	202c      	movs	r0, #44	@ 0x2c
 80016dc:	f000 fcf1 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80016e0:	202c      	movs	r0, #44	@ 0x2c
 80016e2:	f000 fd0a 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	202d      	movs	r0, #45	@ 0x2d
 80016ec:	f000 fce9 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80016f0:	202d      	movs	r0, #45	@ 0x2d
 80016f2:	f000 fd02 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	202e      	movs	r0, #46	@ 0x2e
 80016fc:	f000 fce1 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001700:	202e      	movs	r0, #46	@ 0x2e
 8001702:	f000 fcfa 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3740      	adds	r7, #64	@ 0x40
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40010000 	.word	0x40010000
 8001714:	40023800 	.word	0x40023800
 8001718:	40021000 	.word	0x40021000
 800171c:	40000400 	.word	0x40000400
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	40000800 	.word	0x40000800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40010400 	.word	0x40010400
 8001734:	40020800 	.word	0x40020800

08001738 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001748:	d114      	bne.n	8001774 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <HAL_TIM_PWM_MspInit+0xac>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a25      	ldr	r2, [pc, #148]	@ (80017e4 <HAL_TIM_PWM_MspInit+0xac>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <HAL_TIM_PWM_MspInit+0xac>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	201c      	movs	r0, #28
 8001768:	f000 fcab 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800176c:	201c      	movs	r0, #28
 800176e:	f000 fcc4 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001772:	e032      	b.n	80017da <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1b      	ldr	r2, [pc, #108]	@ (80017e8 <HAL_TIM_PWM_MspInit+0xb0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d114      	bne.n	80017a8 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_TIM_PWM_MspInit+0xac>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <HAL_TIM_PWM_MspInit+0xac>)
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_TIM_PWM_MspInit+0xac>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2032      	movs	r0, #50	@ 0x32
 800179c:	f000 fc91 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80017a0:	2032      	movs	r0, #50	@ 0x32
 80017a2:	f000 fcaa 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 80017a6:	e018      	b.n	80017da <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <HAL_TIM_PWM_MspInit+0xb4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d113      	bne.n	80017da <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_TIM_PWM_MspInit+0xac>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <HAL_TIM_PWM_MspInit+0xac>)
 80017b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <HAL_TIM_PWM_MspInit+0xac>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	202b      	movs	r0, #43	@ 0x2b
 80017d0:	f000 fc77 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80017d4:	202b      	movs	r0, #43	@ 0x2b
 80017d6:	f000 fc90 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40000c00 	.word	0x40000c00
 80017ec:	40001800 	.word	0x40001800

080017f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <HAL_TIM_Base_MspInit+0x44>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d113      	bne.n	800182a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001802:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <HAL_TIM_Base_MspInit+0x48>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	4a0c      	ldr	r2, [pc, #48]	@ (8001838 <HAL_TIM_Base_MspInit+0x48>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6413      	str	r3, [r2, #64]	@ 0x40
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <HAL_TIM_Base_MspInit+0x48>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2036      	movs	r0, #54	@ 0x36
 8001820:	f000 fc4f 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001824:	2036      	movs	r0, #54	@ 0x36
 8001826:	f000 fc68 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40001000 	.word	0x40001000
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	@ 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800185c:	d139      	bne.n	80018d2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a40      	ldr	r2, [pc, #256]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b3e      	ldr	r3, [pc, #248]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b3b      	ldr	r3, [pc, #236]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a3a      	ldr	r2, [pc, #232]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 800188e:	2320      	movs	r3, #32
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800189e:	2301      	movs	r3, #1
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	482f      	ldr	r0, [pc, #188]	@ (8001968 <HAL_TIM_MspPostInit+0x12c>)
 80018aa:	f001 f857 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 80018ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	4828      	ldr	r0, [pc, #160]	@ (800196c <HAL_TIM_MspPostInit+0x130>)
 80018cc:	f001 f846 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80018d0:	e043      	b.n	800195a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a26      	ldr	r2, [pc, #152]	@ (8001970 <HAL_TIM_MspPostInit+0x134>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d11c      	bne.n	8001916 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	4a20      	ldr	r2, [pc, #128]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 80018f4:	2309      	movs	r3, #9
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001904:	2302      	movs	r3, #2
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	4816      	ldr	r0, [pc, #88]	@ (8001968 <HAL_TIM_MspPostInit+0x12c>)
 8001910:	f001 f824 	bl	800295c <HAL_GPIO_Init>
}
 8001914:	e021      	b.n	800195a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <HAL_TIM_MspPostInit+0x138>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d11c      	bne.n	800195a <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001924:	4a0f      	ldr	r2, [pc, #60]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	6313      	str	r3, [r2, #48]	@ 0x30
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_TIM_MspPostInit+0x128>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800194a:	2309      	movs	r3, #9
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	@ (800196c <HAL_TIM_MspPostInit+0x130>)
 8001956:	f001 f801 	bl	800295c <HAL_GPIO_Init>
}
 800195a:	bf00      	nop
 800195c:	3730      	adds	r7, #48	@ 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400
 8001970:	40000c00 	.word	0x40000c00
 8001974:	40001800 	.word	0x40001800

08001978 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800197c:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 800197e:	4a15      	ldr	r2, [pc, #84]	@ (80019d4 <MX_USART2_UART_Init+0x5c>)
 8001980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001982:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 8001984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <MX_USART2_UART_Init+0x58>)
 80019bc:	f003 fb92 	bl	80050e4 <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019c6:	f7ff f975 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000348 	.word	0x20000348
 80019d4:	40004400 	.word	0x40004400

080019d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019de:	4a15      	ldr	r2, [pc, #84]	@ (8001a34 <MX_USART3_UART_Init+0x5c>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <MX_USART3_UART_Init+0x58>)
 8001a1c:	f003 fb62 	bl	80050e4 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a26:	f7ff f945 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200003d0 	.word	0x200003d0
 8001a34:	40004800 	.word	0x40004800

08001a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0b0      	sub	sp, #192	@ 0xc0
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2290      	movs	r2, #144	@ 0x90
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f005 fff5 	bl	8007a48 <memset>
  if(uartHandle->Instance==USART2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a79      	ldr	r2, [pc, #484]	@ (8001c48 <HAL_UART_MspInit+0x210>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	f040 80a0 	bne.w	8001baa <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 ffbe 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a82:	f7ff f917 	bl	8000cb4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a86:	4b71      	ldr	r3, [pc, #452]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a70      	ldr	r2, [pc, #448]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4b6e      	ldr	r3, [pc, #440]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a6a      	ldr	r2, [pc, #424]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b68      	ldr	r3, [pc, #416]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ab6:	2360      	movs	r3, #96	@ 0x60
 8001ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ad8:	4619      	mov	r1, r3
 8001ada:	485d      	ldr	r0, [pc, #372]	@ (8001c50 <HAL_UART_MspInit+0x218>)
 8001adc:	f000 ff3e 	bl	800295c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ae0:	4b5c      	ldr	r3, [pc, #368]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001ae2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c58 <HAL_UART_MspInit+0x220>)
 8001ae4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001ae8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aee:	4b59      	ldr	r3, [pc, #356]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b57      	ldr	r3, [pc, #348]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b56      	ldr	r3, [pc, #344]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b00:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b02:	4b54      	ldr	r3, [pc, #336]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b08:	4b52      	ldr	r3, [pc, #328]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b0e:	4b51      	ldr	r3, [pc, #324]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b14:	4b4f      	ldr	r3, [pc, #316]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b20:	484c      	ldr	r0, [pc, #304]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001b22:	f000 fb05 	bl	8002130 <HAL_DMA_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001b2c:	f7ff f8c2 	bl	8000cb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a48      	ldr	r2, [pc, #288]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001b34:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b36:	4a47      	ldr	r2, [pc, #284]	@ (8001c54 <HAL_UART_MspInit+0x21c>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b3c:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b3e:	4a48      	ldr	r2, [pc, #288]	@ (8001c60 <HAL_UART_MspInit+0x228>)
 8001b40:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b42:	4b46      	ldr	r3, [pc, #280]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b4a:	4b44      	ldr	r3, [pc, #272]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b4c:	2240      	movs	r2, #64	@ 0x40
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b42      	ldr	r3, [pc, #264]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b64:	4b3d      	ldr	r3, [pc, #244]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b76:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b7c:	4837      	ldr	r0, [pc, #220]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b7e:	f000 fad7 	bl	8002130 <HAL_DMA_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001b88:	f7ff f894 	bl	8000cb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a33      	ldr	r2, [pc, #204]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b90:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b92:	4a32      	ldr	r2, [pc, #200]	@ (8001c5c <HAL_UART_MspInit+0x224>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2026      	movs	r0, #38	@ 0x26
 8001b9e:	f000 fa90 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ba2:	2026      	movs	r0, #38	@ 0x26
 8001ba4:	f000 faa9 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ba8:	e049      	b.n	8001c3e <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2d      	ldr	r2, [pc, #180]	@ (8001c64 <HAL_UART_MspInit+0x22c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d144      	bne.n	8001c3e <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bb8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 ff18 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001bce:	f7ff f871 	bl	8000cb4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_UART_MspInit+0x214>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c22:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c26:	4619      	mov	r1, r3
 8001c28:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <HAL_UART_MspInit+0x218>)
 8001c2a:	f000 fe97 	bl	800295c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	2027      	movs	r0, #39	@ 0x27
 8001c34:	f000 fa45 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c38:	2027      	movs	r0, #39	@ 0x27
 8001c3a:	f000 fa5e 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	37c0      	adds	r7, #192	@ 0xc0
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	20000458 	.word	0x20000458
 8001c58:	40026088 	.word	0x40026088
 8001c5c:	200004b8 	.word	0x200004b8
 8001c60:	400260a0 	.word	0x400260a0
 8001c64:	40004800 	.word	0x40004800

08001c68 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001c74:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c76:	2206      	movs	r2, #6
 8001c78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c88:	2202      	movs	r2, #2
 8001c8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cac:	f001 f835 	bl	8002d1a <HAL_PCD_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001cb6:	f7fe fffd 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000518 	.word	0x20000518

08001cc4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0ae      	sub	sp, #184	@ 0xb8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2290      	movs	r2, #144	@ 0x90
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 feaf 	bl	8007a48 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cf2:	d159      	bne.n	8001da8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001cf4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cf8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fe77 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001d10:	f7fe ffd0 	bl	8000cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <HAL_PCD_MspInit+0xec>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	4a25      	ldr	r2, [pc, #148]	@ (8001db0 <HAL_PCD_MspInit+0xec>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d20:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <HAL_PCD_MspInit+0xec>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d2c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d46:	230a      	movs	r3, #10
 8001d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4818      	ldr	r0, [pc, #96]	@ (8001db4 <HAL_PCD_MspInit+0xf0>)
 8001d54:	f000 fe02 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4810      	ldr	r0, [pc, #64]	@ (8001db4 <HAL_PCD_MspInit+0xf0>)
 8001d74:	f000 fdf2 	bl	800295c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d78:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HAL_PCD_MspInit+0xec>)
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001db0 <HAL_PCD_MspInit+0xec>)
 8001d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d82:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d84:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_PCD_MspInit+0xec>)
 8001d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <HAL_PCD_MspInit+0xec>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	4a06      	ldr	r2, [pc, #24]	@ (8001db0 <HAL_PCD_MspInit+0xec>)
 8001d96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9c:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <HAL_PCD_MspInit+0xec>)
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001da8:	bf00      	nop
 8001daa:	37b8      	adds	r7, #184	@ 0xb8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001df0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dbc:	f7ff f8b8 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc0:	480c      	ldr	r0, [pc, #48]	@ (8001df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dc2:	490d      	ldr	r1, [pc, #52]	@ (8001df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f005 fe83 	bl	8007af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7fe fe59 	bl	8000aa0 <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001dfc:	08007d04 	.word	0x08007d04
  ldr r2, =_sbss
 8001e00:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e04:	20000b44 	.word	0x20000b44

08001e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC_IRQHandler>

08001e0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f000 f94c 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f000 f805 	bl	8001e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1a:	f7fe ff51 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_InitTick+0x54>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_InitTick+0x58>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f967 	bl	8002116 <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d80a      	bhi.n	8001e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f000 f92f 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4a06      	ldr	r2, [pc, #24]	@ (8001e80 <HAL_InitTick+0x5c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	200009f8 	.word	0x200009f8

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200009f8 	.word	0x200009f8

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <HAL_Delay+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffde 	bl	8001eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000008 	.word	0x20000008

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x40>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x40>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00
 8001f50:	05fa0000 	.word	0x05fa0000

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	@ (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	@ (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	@ (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff feb6 	bl	8001eac <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e099      	b.n	8002280 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216c:	e00f      	b.n	800218e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216e:	f7ff fe9d 	bl	8001eac <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b05      	cmp	r3, #5
 800217a:	d908      	bls.n	800218e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2203      	movs	r2, #3
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e078      	b.n	8002280 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e8      	bne.n	800216e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4b38      	ldr	r3, [pc, #224]	@ (8002288 <HAL_DMA_Init+0x158>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d107      	bne.n	80021f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	4313      	orrs	r3, r2
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f023 0307 	bic.w	r3, r3, #7
 800220e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	2b04      	cmp	r3, #4
 8002220:	d117      	bne.n	8002252 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00e      	beq.n	8002252 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fb15 	bl	8002864 <DMA_CheckFifoParam>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2240      	movs	r2, #64	@ 0x40
 8002244:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800224e:	2301      	movs	r3, #1
 8002250:	e016      	b.n	8002280 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 facc 	bl	80027f8 <DMA_CalcBaseAndBitshift>
 8002260:	4603      	mov	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	223f      	movs	r2, #63	@ 0x3f
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	e010803f 	.word	0xe010803f

0800228c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_DMA_Start_IT+0x26>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e048      	b.n	8002344 <HAL_DMA_Start_IT+0xb8>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d137      	bne.n	8002336 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fa5e 	bl	800279c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e4:	223f      	movs	r2, #63	@ 0x3f
 80022e6:	409a      	lsls	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0216 	orr.w	r2, r2, #22
 80022fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800230a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0208 	orr.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e005      	b.n	8002342 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800235a:	f7ff fda7 	bl	8001eac <HAL_GetTick>
 800235e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d008      	beq.n	800237e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2280      	movs	r2, #128	@ 0x80
 8002370:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e052      	b.n	8002424 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0216 	bic.w	r2, r2, #22
 800238c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800239c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_DMA_Abort+0x62>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0208 	bic.w	r2, r2, #8
 80023bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ce:	e013      	b.n	80023f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d0:	f7ff fd6c 	bl	8001eac <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d90c      	bls.n	80023f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2203      	movs	r2, #3
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e015      	b.n	8002424 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e4      	bne.n	80023d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	223f      	movs	r2, #63	@ 0x3f
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d004      	beq.n	800244a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2280      	movs	r2, #128	@ 0x80
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00c      	b.n	8002464 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2205      	movs	r2, #5
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800247c:	4b8e      	ldr	r3, [pc, #568]	@ (80026b8 <HAL_DMA_IRQHandler+0x248>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a8e      	ldr	r2, [pc, #568]	@ (80026bc <HAL_DMA_IRQHandler+0x24c>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0a9b      	lsrs	r3, r3, #10
 8002488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249a:	2208      	movs	r2, #8
 800249c:	409a      	lsls	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01a      	beq.n	80024dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0204 	bic.w	r2, r2, #4
 80024c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c8:	2208      	movs	r2, #8
 80024ca:	409a      	lsls	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	2201      	movs	r2, #1
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d012      	beq.n	8002512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	2201      	movs	r2, #1
 8002500:	409a      	lsls	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250a:	f043 0202 	orr.w	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002516:	2204      	movs	r2, #4
 8002518:	409a      	lsls	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d012      	beq.n	8002548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002534:	2204      	movs	r2, #4
 8002536:	409a      	lsls	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002540:	f043 0204 	orr.w	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254c:	2210      	movs	r2, #16
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d043      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d03c      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	2210      	movs	r2, #16
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d024      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
 800259e:	e01f      	b.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	e016      	b.n	80025e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0208 	bic.w	r2, r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e4:	2220      	movs	r2, #32
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 808f 	beq.w	8002710 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8087 	beq.w	8002710 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002606:	2220      	movs	r2, #32
 8002608:	409a      	lsls	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b05      	cmp	r3, #5
 8002618:	d136      	bne.n	8002688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0216 	bic.w	r2, r2, #22
 8002628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_DMA_IRQHandler+0x1da>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0208 	bic.w	r2, r2, #8
 8002658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	223f      	movs	r2, #63	@ 0x3f
 8002660:	409a      	lsls	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800267a:	2b00      	cmp	r3, #0
 800267c:	d07e      	beq.n	800277c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
        }
        return;
 8002686:	e079      	b.n	800277c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01d      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d031      	beq.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	e02c      	b.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000
 80026bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d023      	beq.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
 80026d0:	e01e      	b.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0210 	bic.w	r2, r2, #16
 80026ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	2b00      	cmp	r3, #0
 8002716:	d032      	beq.n	800277e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d022      	beq.n	800276a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2205      	movs	r2, #5
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3301      	adds	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	d307      	bcc.n	8002758 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f2      	bne.n	800273c <HAL_DMA_IRQHandler+0x2cc>
 8002756:	e000      	b.n	800275a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002758:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
 800277a:	e000      	b.n	800277e <HAL_DMA_IRQHandler+0x30e>
        return;
 800277c:	bf00      	nop
    }
  }
}
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b40      	cmp	r3, #64	@ 0x40
 80027c8:	d108      	bne.n	80027dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027da:	e007      	b.n	80027ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3b10      	subs	r3, #16
 8002808:	4a13      	ldr	r2, [pc, #76]	@ (8002858 <DMA_CalcBaseAndBitshift+0x60>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002812:	4a12      	ldr	r2, [pc, #72]	@ (800285c <DMA_CalcBaseAndBitshift+0x64>)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d908      	bls.n	8002838 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <DMA_CalcBaseAndBitshift+0x68>)
 800282e:	4013      	ands	r3, r2
 8002830:	1d1a      	adds	r2, r3, #4
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	659a      	str	r2, [r3, #88]	@ 0x58
 8002836:	e006      	b.n	8002846 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <DMA_CalcBaseAndBitshift+0x68>)
 8002840:	4013      	ands	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	aaaaaaab 	.word	0xaaaaaaab
 800285c:	08007cec 	.word	0x08007cec
 8002860:	fffffc00 	.word	0xfffffc00

08002864 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11f      	bne.n	80028be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d856      	bhi.n	8002932 <DMA_CheckFifoParam+0xce>
 8002884:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <DMA_CheckFifoParam+0x28>)
 8002886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	0800289d 	.word	0x0800289d
 8002890:	080028af 	.word	0x080028af
 8002894:	0800289d 	.word	0x0800289d
 8002898:	08002933 	.word	0x08002933
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d046      	beq.n	8002936 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e043      	b.n	8002936 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028b6:	d140      	bne.n	800293a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e03d      	b.n	800293a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c6:	d121      	bne.n	800290c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d837      	bhi.n	800293e <DMA_CheckFifoParam+0xda>
 80028ce:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <DMA_CheckFifoParam+0x70>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028eb 	.word	0x080028eb
 80028dc:	080028e5 	.word	0x080028e5
 80028e0:	080028fd 	.word	0x080028fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      break;
 80028e8:	e030      	b.n	800294c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d025      	beq.n	8002942 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fa:	e022      	b.n	8002942 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002904:	d11f      	bne.n	8002946 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800290a:	e01c      	b.n	8002946 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d903      	bls.n	800291a <DMA_CheckFifoParam+0xb6>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d003      	beq.n	8002920 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002918:	e018      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      break;
 800291e:	e015      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e00b      	b.n	800294a <DMA_CheckFifoParam+0xe6>
      break;
 8002932:	bf00      	nop
 8002934:	e00a      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e008      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e006      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e004      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;   
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
    }
  } 
  
  return status; 
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	@ 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	e175      	b.n	8002c68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	f040 8164 	bne.w	8002c62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d005      	beq.n	80029b2 <HAL_GPIO_Init+0x56>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d130      	bne.n	8002a14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 0201 	and.w	r2, r3, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d017      	beq.n	8002a50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d123      	bne.n	8002aa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	08da      	lsrs	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3208      	adds	r2, #8
 8002a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	08da      	lsrs	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3208      	adds	r2, #8
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80be 	beq.w	8002c62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	4b66      	ldr	r3, [pc, #408]	@ (8002c80 <HAL_GPIO_Init+0x324>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	4a65      	ldr	r2, [pc, #404]	@ (8002c80 <HAL_GPIO_Init+0x324>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002af2:	4b63      	ldr	r3, [pc, #396]	@ (8002c80 <HAL_GPIO_Init+0x324>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002afe:	4a61      	ldr	r2, [pc, #388]	@ (8002c84 <HAL_GPIO_Init+0x328>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a58      	ldr	r2, [pc, #352]	@ (8002c88 <HAL_GPIO_Init+0x32c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d037      	beq.n	8002b9a <HAL_GPIO_Init+0x23e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a57      	ldr	r2, [pc, #348]	@ (8002c8c <HAL_GPIO_Init+0x330>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_GPIO_Init+0x23a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a56      	ldr	r2, [pc, #344]	@ (8002c90 <HAL_GPIO_Init+0x334>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02b      	beq.n	8002b92 <HAL_GPIO_Init+0x236>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a55      	ldr	r2, [pc, #340]	@ (8002c94 <HAL_GPIO_Init+0x338>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d025      	beq.n	8002b8e <HAL_GPIO_Init+0x232>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a54      	ldr	r2, [pc, #336]	@ (8002c98 <HAL_GPIO_Init+0x33c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01f      	beq.n	8002b8a <HAL_GPIO_Init+0x22e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a53      	ldr	r2, [pc, #332]	@ (8002c9c <HAL_GPIO_Init+0x340>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d019      	beq.n	8002b86 <HAL_GPIO_Init+0x22a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a52      	ldr	r2, [pc, #328]	@ (8002ca0 <HAL_GPIO_Init+0x344>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_GPIO_Init+0x226>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a51      	ldr	r2, [pc, #324]	@ (8002ca4 <HAL_GPIO_Init+0x348>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00d      	beq.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a50      	ldr	r2, [pc, #320]	@ (8002ca8 <HAL_GPIO_Init+0x34c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_GPIO_Init+0x21e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002cac <HAL_GPIO_Init+0x350>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_GPIO_Init+0x21a>
 8002b72:	2309      	movs	r3, #9
 8002b74:	e012      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b76:	230a      	movs	r3, #10
 8002b78:	e010      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	e00e      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b7e:	2307      	movs	r3, #7
 8002b80:	e00c      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b82:	2306      	movs	r3, #6
 8002b84:	e00a      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b86:	2305      	movs	r3, #5
 8002b88:	e008      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e004      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4093      	lsls	r3, r2
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bac:	4935      	ldr	r1, [pc, #212]	@ (8002c84 <HAL_GPIO_Init+0x328>)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bba:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bde:	4a34      	ldr	r2, [pc, #208]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be4:	4b32      	ldr	r3, [pc, #200]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c08:	4a29      	ldr	r2, [pc, #164]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0e:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c32:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c5c:	4a14      	ldr	r2, [pc, #80]	@ (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3301      	adds	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	f67f ae86 	bls.w	800297c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3724      	adds	r7, #36	@ 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40021400 	.word	0x40021400
 8002ca0:	40021800 	.word	0x40021800
 8002ca4:	40021c00 	.word	0x40021c00
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40022400 	.word	0x40022400
 8002cb0:	40013c00 	.word	0x40013c00

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cf8:	887a      	ldrh	r2, [r7, #2]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	041a      	lsls	r2, r3, #16
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	400b      	ands	r3, r1
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af02      	add	r7, sp, #8
 8002d20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e108      	b.n	8002f3e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe ffbc 	bl	8001cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2203      	movs	r2, #3
 8002d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d5a:	d102      	bne.n	8002d62 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 feee 	bl	8006b48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7c1a      	ldrb	r2, [r3, #16]
 8002d74:	f88d 2000 	strb.w	r2, [sp]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7c:	f003 fe8a 	bl	8006a94 <USB_CoreInit>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0d5      	b.n	8002f3e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fee6 	bl	8006b6a <USB_SetCurrentMode>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0c6      	b.n	8002f3e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	e04a      	b.n	8002e4c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3315      	adds	r3, #21
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3314      	adds	r3, #20
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	b298      	uxth	r0, r3
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	332e      	adds	r3, #46	@ 0x2e
 8002df2:	4602      	mov	r2, r0
 8002df4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3318      	adds	r3, #24
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	331c      	adds	r3, #28
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3320      	adds	r3, #32
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3324      	adds	r3, #36	@ 0x24
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	791b      	ldrb	r3, [r3, #4]
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d3af      	bcc.n	8002db6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e044      	b.n	8002ee6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	791b      	ldrb	r3, [r3, #4]
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d3b5      	bcc.n	8002e5c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7c1a      	ldrb	r2, [r3, #16]
 8002ef8:	f88d 2000 	strb.w	r2, [sp]
 8002efc:	3304      	adds	r3, #4
 8002efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f00:	f003 fe80 	bl	8006c04 <USB_DevInit>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e013      	b.n	8002f3e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7b1b      	ldrb	r3, [r3, #12]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d102      	bne.n	8002f32 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f80b 	bl	8002f48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 f83b 	bl	8006fb2 <USB_DevDisconnect>

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f76:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_PCDEx_ActivateLPM+0x44>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	10000003 	.word	0x10000003

08002f90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f94:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a04      	ldr	r2, [pc, #16]	@ (8002fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40007000 	.word	0x40007000

08002fb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b23      	ldr	r3, [pc, #140]	@ (8003048 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	4a22      	ldr	r2, [pc, #136]	@ (8003048 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc6:	4b20      	ldr	r3, [pc, #128]	@ (8003048 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fde:	f7fe ff65 	bl	8001eac <HAL_GetTick>
 8002fe2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fe4:	e009      	b.n	8002ffa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fe6:	f7fe ff61 	bl	8001eac <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ff4:	d901      	bls.n	8002ffa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e022      	b.n	8003040 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ffa:	4b14      	ldr	r3, [pc, #80]	@ (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003006:	d1ee      	bne.n	8002fe6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003008:	4b10      	ldr	r3, [pc, #64]	@ (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0f      	ldr	r2, [pc, #60]	@ (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 800300e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003012:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003014:	f7fe ff4a 	bl	8001eac <HAL_GetTick>
 8003018:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800301a:	e009      	b.n	8003030 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800301c:	f7fe ff46 	bl	8001eac <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800302a:	d901      	bls.n	8003030 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e007      	b.n	8003040 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003030:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800303c:	d1ee      	bne.n	800301c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000

08003050 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e29b      	b.n	800359e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8087 	beq.w	8003182 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003074:	4b96      	ldr	r3, [pc, #600]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b04      	cmp	r3, #4
 800307e:	d00c      	beq.n	800309a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003080:	4b93      	ldr	r3, [pc, #588]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d112      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
 800308c:	4b90      	ldr	r3, [pc, #576]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003098:	d10b      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309a:	4b8d      	ldr	r3, [pc, #564]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d06c      	beq.n	8003180 <HAL_RCC_OscConfig+0x130>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d168      	bne.n	8003180 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e275      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x7a>
 80030bc:	4b84      	ldr	r3, [pc, #528]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a83      	ldr	r2, [pc, #524]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e02e      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x9c>
 80030d2:	4b7f      	ldr	r3, [pc, #508]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7e      	ldr	r2, [pc, #504]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b7c      	ldr	r3, [pc, #496]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7b      	ldr	r2, [pc, #492]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e01d      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0xc0>
 80030f6:	4b76      	ldr	r3, [pc, #472]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a75      	ldr	r2, [pc, #468]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b73      	ldr	r3, [pc, #460]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a72      	ldr	r2, [pc, #456]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 8003110:	4b6f      	ldr	r3, [pc, #444]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6e      	ldr	r2, [pc, #440]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b6c      	ldr	r3, [pc, #432]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6b      	ldr	r2, [pc, #428]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe febc 	bl	8001eac <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe feb8 	bl	8001eac <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	@ 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e229      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b61      	ldr	r3, [pc, #388]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fea8 	bl	8001eac <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe fea4 	bl	8001eac <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	@ 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e215      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	4b57      	ldr	r3, [pc, #348]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x110>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d069      	beq.n	8003262 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800318e:	4b50      	ldr	r3, [pc, #320]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319a:	4b4d      	ldr	r3, [pc, #308]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d11c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x190>
 80031a6:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	4b47      	ldr	r3, [pc, #284]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_RCC_OscConfig+0x17a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1e9      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ca:	4b41      	ldr	r3, [pc, #260]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	493d      	ldr	r1, [pc, #244]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	e040      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d023      	beq.n	8003230 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e8:	4b39      	ldr	r3, [pc, #228]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a38      	ldr	r2, [pc, #224]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe fe5a 	bl	8001eac <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fc:	f7fe fe56 	bl	8001eac <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1c7      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b30      	ldr	r3, [pc, #192]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321a:	4b2d      	ldr	r3, [pc, #180]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4929      	ldr	r1, [pc, #164]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
 800322e:	e018      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003230:	4b27      	ldr	r3, [pc, #156]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a26      	ldr	r2, [pc, #152]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fe36 	bl	8001eac <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe fe32 	bl	8001eac <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1a3      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d038      	beq.n	80032e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d019      	beq.n	80032aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003276:	4b16      	ldr	r3, [pc, #88]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327a:	4a15      	ldr	r2, [pc, #84]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe fe13 	bl	8001eac <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe fe0f 	bl	8001eac <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e180      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329c:	4b0c      	ldr	r3, [pc, #48]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x23a>
 80032a8:	e01a      	b.n	80032e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ae:	4a08      	ldr	r2, [pc, #32]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe fdf9 	bl	8001eac <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032be:	f7fe fdf5 	bl	8001eac <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d903      	bls.n	80032d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e166      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
 80032d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b92      	ldr	r3, [pc, #584]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a4 	beq.w	8003436 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	4b89      	ldr	r3, [pc, #548]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	4a88      	ldr	r2, [pc, #544]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003304:	6413      	str	r3, [r2, #64]	@ 0x40
 8003306:	4b86      	ldr	r3, [pc, #536]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003316:	4b83      	ldr	r3, [pc, #524]	@ (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003322:	4b80      	ldr	r3, [pc, #512]	@ (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7f      	ldr	r2, [pc, #508]	@ (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fe fdbd 	bl	8001eac <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fe fdb9 	bl	8001eac <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b64      	cmp	r3, #100	@ 0x64
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e12a      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	4b76      	ldr	r3, [pc, #472]	@ (8003524 <HAL_RCC_OscConfig+0x4d4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x31a>
 800335c:	4b70      	ldr	r3, [pc, #448]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	4a6f      	ldr	r2, [pc, #444]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	@ 0x70
 8003368:	e02d      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x33c>
 8003372:	4b6b      	ldr	r3, [pc, #428]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003376:	4a6a      	ldr	r2, [pc, #424]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6713      	str	r3, [r2, #112]	@ 0x70
 800337e:	4b68      	ldr	r3, [pc, #416]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	4a67      	ldr	r2, [pc, #412]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6713      	str	r3, [r2, #112]	@ 0x70
 800338a:	e01c      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b05      	cmp	r3, #5
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x35e>
 8003394:	4b62      	ldr	r3, [pc, #392]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4a61      	ldr	r2, [pc, #388]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a0:	4b5f      	ldr	r3, [pc, #380]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ac:	e00b      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
 80033ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ba:	4b59      	ldr	r3, [pc, #356]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033be:	4a58      	ldr	r2, [pc, #352]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d015      	beq.n	80033fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe fd6d 	bl	8001eac <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fe fd69 	bl	8001eac <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0d8      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ee      	beq.n	80033d6 <HAL_RCC_OscConfig+0x386>
 80033f8:	e014      	b.n	8003424 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe fd57 	bl	8001eac <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fd53 	bl	8001eac <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0c2      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003418:	4b41      	ldr	r3, [pc, #260]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ee      	bne.n	8003402 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b3d      	ldr	r3, [pc, #244]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	4a3c      	ldr	r2, [pc, #240]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80ae 	beq.w	800359c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	4b37      	ldr	r3, [pc, #220]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d06d      	beq.n	8003528 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d14b      	bne.n	80034ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b32      	ldr	r3, [pc, #200]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a31      	ldr	r2, [pc, #196]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800345a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800345e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fd24 	bl	8001eac <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003468:	f7fe fd20 	bl	8001eac <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e091      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	019b      	lsls	r3, r3, #6
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	3b01      	subs	r3, #1
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	491b      	ldr	r1, [pc, #108]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a18      	ldr	r2, [pc, #96]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe fcf2 	bl	8001eac <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe fcee 	bl	8001eac <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e05f      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b10      	ldr	r3, [pc, #64]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x47c>
 80034ea:	e057      	b.n	800359c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fcd8 	bl	8001eac <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe fcd4 	bl	8001eac <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e045      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x4b0>
 800351e:	e03d      	b.n	800359c <HAL_RCC_OscConfig+0x54c>
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003528:	4b1f      	ldr	r3, [pc, #124]	@ (80035a8 <HAL_RCC_OscConfig+0x558>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d030      	beq.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d129      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d122      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800355e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003560:	4293      	cmp	r3, r2
 8003562:	d119      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	3b01      	subs	r3, #1
 8003572:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d10f      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d107      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d0      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b67      	ldr	r3, [pc, #412]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	4965      	ldr	r1, [pc, #404]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b63      	ldr	r3, [pc, #396]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0b8      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800360c:	4b59      	ldr	r3, [pc, #356]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a58      	ldr	r2, [pc, #352]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003612:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003624:	4b53      	ldr	r3, [pc, #332]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a52      	ldr	r2, [pc, #328]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800362e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b50      	ldr	r3, [pc, #320]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	494d      	ldr	r1, [pc, #308]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d040      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b47      	ldr	r3, [pc, #284]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d115      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e073      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3d      	ldr	r3, [pc, #244]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06b      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b39      	ldr	r3, [pc, #228]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4936      	ldr	r1, [pc, #216]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a0:	f7fe fc04 	bl	8001eac <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fe fc00 	bl	8001eac <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e053      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	4922      	ldr	r1, [pc, #136]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e032      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4916      	ldr	r1, [pc, #88]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372a:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	490e      	ldr	r1, [pc, #56]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373e:	f000 f821 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	490a      	ldr	r1, [pc, #40]	@ (8003778 <HAL_RCC_ClockConfig+0x1cc>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	4a09      	ldr	r2, [pc, #36]	@ (800377c <HAL_RCC_ClockConfig+0x1d0>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <HAL_RCC_ClockConfig+0x1d4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fb60 	bl	8001e24 <HAL_InitTick>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023c00 	.word	0x40023c00
 8003774:	40023800 	.word	0x40023800
 8003778:	08007cd4 	.word	0x08007cd4
 800377c:	20000000 	.word	0x20000000
 8003780:	20000004 	.word	0x20000004

08003784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003788:	b094      	sub	sp, #80	@ 0x50
 800378a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003790:	2300      	movs	r3, #0
 8003792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003794:	2300      	movs	r3, #0
 8003796:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379c:	4b79      	ldr	r3, [pc, #484]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d00d      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x40>
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	f200 80e1 	bhi.w	8003970 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x34>
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d003      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0x3a>
 80037b6:	e0db      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b73      	ldr	r3, [pc, #460]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037bc:	e0db      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037be:	4b73      	ldr	r3, [pc, #460]	@ (800398c <HAL_RCC_GetSysClockFreq+0x208>)
 80037c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c2:	e0d8      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037da:	4b6a      	ldr	r3, [pc, #424]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	099b      	lsrs	r3, r3, #6
 80037e0:	2200      	movs	r2, #0
 80037e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	f04f 0000 	mov.w	r0, #0
 80037fe:	f04f 0100 	mov.w	r1, #0
 8003802:	0159      	lsls	r1, r3, #5
 8003804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003808:	0150      	lsls	r0, r2, #5
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4621      	mov	r1, r4
 8003810:	1a51      	subs	r1, r2, r1
 8003812:	6139      	str	r1, [r7, #16]
 8003814:	4629      	mov	r1, r5
 8003816:	eb63 0301 	sbc.w	r3, r3, r1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003828:	4659      	mov	r1, fp
 800382a:	018b      	lsls	r3, r1, #6
 800382c:	4651      	mov	r1, sl
 800382e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003832:	4651      	mov	r1, sl
 8003834:	018a      	lsls	r2, r1, #6
 8003836:	4651      	mov	r1, sl
 8003838:	ebb2 0801 	subs.w	r8, r2, r1
 800383c:	4659      	mov	r1, fp
 800383e:	eb63 0901 	sbc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	462b      	mov	r3, r5
 8003864:	eb49 0303 	adc.w	r3, r9, r3
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003876:	4629      	mov	r1, r5
 8003878:	024b      	lsls	r3, r1, #9
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003880:	4621      	mov	r1, r4
 8003882:	024a      	lsls	r2, r1, #9
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388a:	2200      	movs	r2, #0
 800388c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800388e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003894:	f7fc fce2 	bl	800025c <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038a0:	e058      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b38      	ldr	r3, [pc, #224]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	2200      	movs	r2, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	4611      	mov	r1, r2
 80038ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	f04f 0000 	mov.w	r0, #0
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	0159      	lsls	r1, r3, #5
 80038ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ce:	0150      	lsls	r0, r2, #5
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4641      	mov	r1, r8
 80038d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038da:	4649      	mov	r1, r9
 80038dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f4:	ebb2 040a 	subs.w	r4, r2, sl
 80038f8:	eb63 050b 	sbc.w	r5, r3, fp
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	00eb      	lsls	r3, r5, #3
 8003906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390a:	00e2      	lsls	r2, r4, #3
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4643      	mov	r3, r8
 8003912:	18e3      	adds	r3, r4, r3
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	464b      	mov	r3, r9
 8003918:	eb45 0303 	adc.w	r3, r5, r3
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392a:	4629      	mov	r1, r5
 800392c:	028b      	lsls	r3, r1, #10
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003934:	4621      	mov	r1, r4
 8003936:	028a      	lsls	r2, r1, #10
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	61fa      	str	r2, [r7, #28]
 8003944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003948:	f7fc fc88 	bl	800025c <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003954:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	3301      	adds	r3, #1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003964:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800396e:	e002      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x204>)
 8003972:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003978:	4618      	mov	r0, r3
 800397a:	3750      	adds	r7, #80	@ 0x50
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	00f42400 	.word	0x00f42400
 800398c:	007a1200 	.word	0x007a1200

08003990 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b03      	ldr	r3, [pc, #12]	@ (80039a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039ac:	f7ff fff0 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4903      	ldr	r1, [pc, #12]	@ (80039cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	08007ce4 	.word	0x08007ce4

080039d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d4:	f7ff ffdc 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0b5b      	lsrs	r3, r3, #13
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	@ (80039f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08007ce4 	.word	0x08007ce4

080039f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a20:	4b69      	ldr	r3, [pc, #420]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a68      	ldr	r2, [pc, #416]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a2a:	6093      	str	r3, [r2, #8]
 8003a2c:	4b66      	ldr	r3, [pc, #408]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a34:	4964      	ldr	r1, [pc, #400]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d017      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a52:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a60:	4959      	ldr	r1, [pc, #356]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a70:	d101      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d017      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	494a      	ldr	r1, [pc, #296]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 808b 	beq.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	4a39      	ldr	r2, [pc, #228]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae8:	4b37      	ldr	r3, [pc, #220]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003af4:	4b35      	ldr	r3, [pc, #212]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a34      	ldr	r2, [pc, #208]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fe f9d4 	bl	8001eac <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7fe f9d0 	bl	8001eac <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	@ 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e38f      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b26:	4b28      	ldr	r3, [pc, #160]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d035      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d02e      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b44:	4b20      	ldr	r3, [pc, #128]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b52:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b58:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b66:	4a18      	ldr	r2, [pc, #96]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b6c:	4b16      	ldr	r3, [pc, #88]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d114      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe f998 	bl	8001eac <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fe f994 	bl	8001eac <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e351      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ee      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bae:	d111      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bb0:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bbc:	4b04      	ldr	r3, [pc, #16]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	4901      	ldr	r1, [pc, #4]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	0ffffcff 	.word	0x0ffffcff
 8003bd4:	4bac      	ldr	r3, [pc, #688]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4aab      	ldr	r2, [pc, #684]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bda:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bde:	6093      	str	r3, [r2, #8]
 8003be0:	4ba9      	ldr	r3, [pc, #676]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	49a6      	ldr	r1, [pc, #664]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d010      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfe:	4ba2      	ldr	r3, [pc, #648]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c04:	4aa0      	ldr	r2, [pc, #640]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c0e:	4b9e      	ldr	r3, [pc, #632]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c18:	499b      	ldr	r1, [pc, #620]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2c:	4b96      	ldr	r3, [pc, #600]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c3a:	4993      	ldr	r1, [pc, #588]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4e:	4b8e      	ldr	r3, [pc, #568]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c5c:	498a      	ldr	r1, [pc, #552]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c70:	4b85      	ldr	r3, [pc, #532]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7e:	4982      	ldr	r1, [pc, #520]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c92:	4b7d      	ldr	r3, [pc, #500]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca0:	4979      	ldr	r1, [pc, #484]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb4:	4b74      	ldr	r3, [pc, #464]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	4971      	ldr	r1, [pc, #452]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	f023 020c 	bic.w	r2, r3, #12
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce4:	4968      	ldr	r1, [pc, #416]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf8:	4b63      	ldr	r3, [pc, #396]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d06:	4960      	ldr	r1, [pc, #384]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d20:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d28:	4957      	ldr	r1, [pc, #348]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d3c:	4b52      	ldr	r3, [pc, #328]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	494f      	ldr	r1, [pc, #316]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6c:	4946      	ldr	r1, [pc, #280]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d80:	4b41      	ldr	r3, [pc, #260]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8e:	493e      	ldr	r1, [pc, #248]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003da2:	4b39      	ldr	r3, [pc, #228]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db0:	4935      	ldr	r1, [pc, #212]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc4:	4b30      	ldr	r3, [pc, #192]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dd2:	492d      	ldr	r1, [pc, #180]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003de6:	4b28      	ldr	r3, [pc, #160]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df4:	4924      	ldr	r1, [pc, #144]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e26:	4b18      	ldr	r3, [pc, #96]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e34:	4914      	ldr	r1, [pc, #80]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e48:	4b0f      	ldr	r3, [pc, #60]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e58:	490b      	ldr	r1, [pc, #44]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00f      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e6c:	4b06      	ldr	r3, [pc, #24]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e72:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e7c:	4902      	ldr	r1, [pc, #8]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e84:	e002      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e98:	4b8a      	ldr	r3, [pc, #552]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea8:	4986      	ldr	r1, [pc, #536]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ebc:	4b81      	ldr	r3, [pc, #516]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ec2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ecc:	497d      	ldr	r1, [pc, #500]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d006      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80d6 	beq.w	8004094 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ee8:	4b76      	ldr	r3, [pc, #472]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a75      	ldr	r2, [pc, #468]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef4:	f7fd ffda 	bl	8001eac <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003efc:	f7fd ffd6 	bl	8001eac <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	@ 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e195      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d021      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11d      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f2e:	4b65      	ldr	r3, [pc, #404]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f3c:	4b61      	ldr	r3, [pc, #388]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f42:	0e1b      	lsrs	r3, r3, #24
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	019a      	lsls	r2, r3, #6
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	071b      	lsls	r3, r3, #28
 8003f62:	4958      	ldr	r1, [pc, #352]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02e      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f94:	d129      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f96:	4b4b      	ldr	r3, [pc, #300]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fa4:	4b47      	ldr	r3, [pc, #284]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003faa:	0f1b      	lsrs	r3, r3, #28
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	019a      	lsls	r2, r3, #6
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	493e      	ldr	r1, [pc, #248]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd8:	f023 021f 	bic.w	r2, r3, #31
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	4938      	ldr	r1, [pc, #224]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01d      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff6:	4b33      	ldr	r3, [pc, #204]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ffc:	0e1b      	lsrs	r3, r3, #24
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004004:	4b2f      	ldr	r3, [pc, #188]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800400a:	0f1b      	lsrs	r3, r3, #28
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	019a      	lsls	r2, r3, #6
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	431a      	orrs	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	071b      	lsls	r3, r3, #28
 800402a:	4926      	ldr	r1, [pc, #152]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d011      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	019a      	lsls	r2, r3, #6
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	071b      	lsls	r3, r3, #28
 800405a:	491a      	ldr	r1, [pc, #104]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004062:	4b18      	ldr	r3, [pc, #96]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a17      	ldr	r2, [pc, #92]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004068:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800406c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406e:	f7fd ff1d 	bl	8001eac <HAL_GetTick>
 8004072:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004076:	f7fd ff19 	bl	8001eac <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b64      	cmp	r3, #100	@ 0x64
 8004082:	d901      	bls.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0d8      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004088:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	f040 80ce 	bne.w	8004238 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800409c:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a08      	ldr	r2, [pc, #32]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a8:	f7fd ff00 	bl	8001eac <HAL_GetTick>
 80040ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040ae:	e00b      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040b0:	f7fd fefc 	bl	8001eac <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	@ 0x64
 80040bc:	d904      	bls.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0bb      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d4:	d0ec      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d02e      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d12a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040fe:	4b51      	ldr	r3, [pc, #324]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800410c:	4b4d      	ldr	r3, [pc, #308]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	0f1b      	lsrs	r3, r3, #28
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	019a      	lsls	r2, r3, #6
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	4944      	ldr	r1, [pc, #272]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800413a:	4b42      	ldr	r3, [pc, #264]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004140:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	493d      	ldr	r1, [pc, #244]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d022      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004168:	d11d      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800416a:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004170:	0e1b      	lsrs	r3, r3, #24
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004178:	4b32      	ldr	r3, [pc, #200]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	0f1b      	lsrs	r3, r3, #28
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	019a      	lsls	r2, r3, #6
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	431a      	orrs	r2, r3
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	061b      	lsls	r3, r3, #24
 8004198:	431a      	orrs	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	071b      	lsls	r3, r3, #28
 800419e:	4929      	ldr	r1, [pc, #164]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d028      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041b2:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b8:	0e1b      	lsrs	r3, r3, #24
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041c0:	4b20      	ldr	r3, [pc, #128]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	0c1b      	lsrs	r3, r3, #16
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	019a      	lsls	r2, r3, #6
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	431a      	orrs	r2, r3
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	4917      	ldr	r1, [pc, #92]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041ee:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	4911      	ldr	r1, [pc, #68]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004204:	4b0f      	ldr	r3, [pc, #60]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0e      	ldr	r2, [pc, #56]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fd fe4c 	bl	8001eac <HAL_GetTick>
 8004214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004218:	f7fd fe48 	bl	8001eac <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	@ 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e007      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004236:	d1ef      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800

08004248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e049      	b.n	80042ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fd fabe 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f000 fb76 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e049      	b.n	800439c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fd fa0b 	bl	8001738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f000 fb1f 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e08f      	b.n	80044d8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fd f869 	bl	80014a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6899      	ldr	r1, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b3e      	ldr	r3, [pc, #248]	@ (80044e0 <HAL_TIM_Encoder_Init+0x13c>)
 80043e6:	400b      	ands	r3, r1
 80043e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f000 fabf 	bl	8004978 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4b31      	ldr	r3, [pc, #196]	@ (80044e4 <HAL_TIM_Encoder_Init+0x140>)
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	4313      	orrs	r3, r2
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4b2b      	ldr	r3, [pc, #172]	@ (80044e8 <HAL_TIM_Encoder_Init+0x144>)
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4b2a      	ldr	r3, [pc, #168]	@ (80044ec <HAL_TIM_Encoder_Init+0x148>)
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	4313      	orrs	r3, r2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	011a      	lsls	r2, r3, #4
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	031b      	lsls	r3, r3, #12
 8004464:	4313      	orrs	r3, r2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	4313      	orrs	r3, r2
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	fffebff8 	.word	0xfffebff8
 80044e4:	fffffcfc 	.word	0xfffffcfc
 80044e8:	fffff3f3 	.word	0xfffff3f3
 80044ec:	ffff0f0f 	.word	0xffff0f0f

080044f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d020      	beq.n	8004554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01b      	beq.n	8004554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0202 	mvn.w	r2, #2
 8004524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9fe 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9f0 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fa01 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d020      	beq.n	80045a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01b      	beq.n	80045a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0204 	mvn.w	r2, #4
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f9d8 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9ca 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f9db 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d020      	beq.n	80045ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0208 	mvn.w	r2, #8
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2204      	movs	r2, #4
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9b2 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f9a4 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f9b5 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d020      	beq.n	8004638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01b      	beq.n	8004638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0210 	mvn.w	r2, #16
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2208      	movs	r2, #8
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f98c 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f97e 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f98f 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0201 	mvn.w	r2, #1
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc f99c 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d104      	bne.n	8004670 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00c      	beq.n	800468a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fd19 	bl	80050bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fd11 	bl	80050d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00c      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f949 	bl	8004964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00c      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f06f 0220 	mvn.w	r2, #32
 80046ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fcd9 	bl	80050a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800471a:	2302      	movs	r3, #2
 800471c:	e0ff      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b14      	cmp	r3, #20
 800472a:	f200 80f0 	bhi.w	800490e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800472e:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004789 	.word	0x08004789
 8004738:	0800490f 	.word	0x0800490f
 800473c:	0800490f 	.word	0x0800490f
 8004740:	0800490f 	.word	0x0800490f
 8004744:	080047c9 	.word	0x080047c9
 8004748:	0800490f 	.word	0x0800490f
 800474c:	0800490f 	.word	0x0800490f
 8004750:	0800490f 	.word	0x0800490f
 8004754:	0800480b 	.word	0x0800480b
 8004758:	0800490f 	.word	0x0800490f
 800475c:	0800490f 	.word	0x0800490f
 8004760:	0800490f 	.word	0x0800490f
 8004764:	0800484b 	.word	0x0800484b
 8004768:	0800490f 	.word	0x0800490f
 800476c:	0800490f 	.word	0x0800490f
 8004770:	0800490f 	.word	0x0800490f
 8004774:	0800488d 	.word	0x0800488d
 8004778:	0800490f 	.word	0x0800490f
 800477c:	0800490f 	.word	0x0800490f
 8004780:	0800490f 	.word	0x0800490f
 8004784:	080048cd 	.word	0x080048cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f99e 	bl	8004ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0208 	orr.w	r2, r2, #8
 80047a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0204 	bic.w	r2, r2, #4
 80047b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6999      	ldr	r1, [r3, #24]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	619a      	str	r2, [r3, #24]
      break;
 80047c6:	e0a5      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f9f0 	bl	8004bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6999      	ldr	r1, [r3, #24]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	021a      	lsls	r2, r3, #8
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	619a      	str	r2, [r3, #24]
      break;
 8004808:	e084      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fa47 	bl	8004ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0208 	orr.w	r2, r2, #8
 8004824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0204 	bic.w	r2, r2, #4
 8004834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69d9      	ldr	r1, [r3, #28]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	61da      	str	r2, [r3, #28]
      break;
 8004848:	e064      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fa9d 	bl	8004d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69d9      	ldr	r1, [r3, #28]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	021a      	lsls	r2, r3, #8
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	61da      	str	r2, [r3, #28]
      break;
 800488a:	e043      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fad4 	bl	8004e40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0208 	orr.w	r2, r2, #8
 80048a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0204 	bic.w	r2, r2, #4
 80048b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048ca:	e023      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fb06 	bl	8004ee4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	021a      	lsls	r2, r3, #8
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800490c:	e002      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
      break;
 8004912:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop

08004928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a46      	ldr	r2, [pc, #280]	@ (8004aa4 <TIM_Base_SetConfig+0x12c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004996:	d00f      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a43      	ldr	r2, [pc, #268]	@ (8004aa8 <TIM_Base_SetConfig+0x130>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00b      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a42      	ldr	r2, [pc, #264]	@ (8004aac <TIM_Base_SetConfig+0x134>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d007      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a41      	ldr	r2, [pc, #260]	@ (8004ab0 <TIM_Base_SetConfig+0x138>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a40      	ldr	r2, [pc, #256]	@ (8004ab4 <TIM_Base_SetConfig+0x13c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d108      	bne.n	80049ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a35      	ldr	r2, [pc, #212]	@ (8004aa4 <TIM_Base_SetConfig+0x12c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d02b      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d8:	d027      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a32      	ldr	r2, [pc, #200]	@ (8004aa8 <TIM_Base_SetConfig+0x130>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d023      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a31      	ldr	r2, [pc, #196]	@ (8004aac <TIM_Base_SetConfig+0x134>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01f      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a30      	ldr	r2, [pc, #192]	@ (8004ab0 <TIM_Base_SetConfig+0x138>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01b      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab4 <TIM_Base_SetConfig+0x13c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d017      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab8 <TIM_Base_SetConfig+0x140>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2d      	ldr	r2, [pc, #180]	@ (8004abc <TIM_Base_SetConfig+0x144>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ac0 <TIM_Base_SetConfig+0x148>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac4 <TIM_Base_SetConfig+0x14c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ac8 <TIM_Base_SetConfig+0x150>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a29      	ldr	r2, [pc, #164]	@ (8004acc <TIM_Base_SetConfig+0x154>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a10      	ldr	r2, [pc, #64]	@ (8004aa4 <TIM_Base_SetConfig+0x12c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0xf8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a12      	ldr	r2, [pc, #72]	@ (8004ab4 <TIM_Base_SetConfig+0x13c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d103      	bne.n	8004a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d105      	bne.n	8004a96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f023 0201 	bic.w	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	611a      	str	r2, [r3, #16]
  }
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	40000c00 	.word	0x40000c00
 8004ab4:	40010400 	.word	0x40010400
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800
 8004ac4:	40001800 	.word	0x40001800
 8004ac8:	40001c00 	.word	0x40001c00
 8004acc:	40002000 	.word	0x40002000

08004ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f023 0201 	bic.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba8 <TIM_OC1_SetConfig+0xd8>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0302 	bic.w	r3, r3, #2
 8004b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a21      	ldr	r2, [pc, #132]	@ (8004bac <TIM_OC1_SetConfig+0xdc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC1_SetConfig+0x64>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a20      	ldr	r2, [pc, #128]	@ (8004bb0 <TIM_OC1_SetConfig+0xe0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10c      	bne.n	8004b4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0308 	bic.w	r3, r3, #8
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a16      	ldr	r2, [pc, #88]	@ (8004bac <TIM_OC1_SetConfig+0xdc>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_OC1_SetConfig+0x8e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a15      	ldr	r2, [pc, #84]	@ (8004bb0 <TIM_OC1_SetConfig+0xe0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d111      	bne.n	8004b82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	621a      	str	r2, [r3, #32]
}
 8004b9c:	bf00      	nop
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	fffeff8f 	.word	0xfffeff8f
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40010400 	.word	0x40010400

08004bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f023 0210 	bic.w	r2, r3, #16
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4b2e      	ldr	r3, [pc, #184]	@ (8004c98 <TIM_OC2_SetConfig+0xe4>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0320 	bic.w	r3, r3, #32
 8004bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a23      	ldr	r2, [pc, #140]	@ (8004c9c <TIM_OC2_SetConfig+0xe8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_OC2_SetConfig+0x68>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a22      	ldr	r2, [pc, #136]	@ (8004ca0 <TIM_OC2_SetConfig+0xec>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d10d      	bne.n	8004c38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <TIM_OC2_SetConfig+0xe8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_OC2_SetConfig+0x94>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <TIM_OC2_SetConfig+0xec>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d113      	bne.n	8004c70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	feff8fff 	.word	0xfeff8fff
 8004c9c:	40010000 	.word	0x40010000
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4b2d      	ldr	r3, [pc, #180]	@ (8004d84 <TIM_OC3_SetConfig+0xe0>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a22      	ldr	r2, [pc, #136]	@ (8004d88 <TIM_OC3_SetConfig+0xe4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_OC3_SetConfig+0x66>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a21      	ldr	r2, [pc, #132]	@ (8004d8c <TIM_OC3_SetConfig+0xe8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d10d      	bne.n	8004d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a17      	ldr	r2, [pc, #92]	@ (8004d88 <TIM_OC3_SetConfig+0xe4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_OC3_SetConfig+0x92>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a16      	ldr	r2, [pc, #88]	@ (8004d8c <TIM_OC3_SetConfig+0xe8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d113      	bne.n	8004d5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	621a      	str	r2, [r3, #32]
}
 8004d78:	bf00      	nop
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	fffeff8f 	.word	0xfffeff8f
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40010400 	.word	0x40010400

08004d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4b1e      	ldr	r3, [pc, #120]	@ (8004e34 <TIM_OC4_SetConfig+0xa4>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	031b      	lsls	r3, r3, #12
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a13      	ldr	r2, [pc, #76]	@ (8004e38 <TIM_OC4_SetConfig+0xa8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_OC4_SetConfig+0x68>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a12      	ldr	r2, [pc, #72]	@ (8004e3c <TIM_OC4_SetConfig+0xac>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d109      	bne.n	8004e0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	019b      	lsls	r3, r3, #6
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	feff8fff 	.word	0xfeff8fff
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40010400 	.word	0x40010400

08004e40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <TIM_OC5_SetConfig+0x98>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a12      	ldr	r2, [pc, #72]	@ (8004edc <TIM_OC5_SetConfig+0x9c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_OC5_SetConfig+0x5e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a11      	ldr	r2, [pc, #68]	@ (8004ee0 <TIM_OC5_SetConfig+0xa0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d109      	bne.n	8004eb2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	621a      	str	r2, [r3, #32]
}
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	fffeff8f 	.word	0xfffeff8f
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40010400 	.word	0x40010400

08004ee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004f80 <TIM_OC6_SetConfig+0x9c>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	051b      	lsls	r3, r3, #20
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a13      	ldr	r2, [pc, #76]	@ (8004f84 <TIM_OC6_SetConfig+0xa0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_OC6_SetConfig+0x60>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a12      	ldr	r2, [pc, #72]	@ (8004f88 <TIM_OC6_SetConfig+0xa4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d109      	bne.n	8004f58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	029b      	lsls	r3, r3, #10
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	feff8fff 	.word	0xfeff8fff
 8004f84:	40010000 	.word	0x40010000
 8004f88:	40010400 	.word	0x40010400

08004f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e06d      	b.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a30      	ldr	r2, [pc, #192]	@ (800508c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d108      	bne.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004fde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a20      	ldr	r2, [pc, #128]	@ (800508c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d022      	beq.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005016:	d01d      	beq.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d018      	beq.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1a      	ldr	r2, [pc, #104]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a15      	ldr	r2, [pc, #84]	@ (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a15      	ldr	r2, [pc, #84]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d10c      	bne.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800505a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	4313      	orrs	r3, r2
 8005064:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40010000 	.word	0x40010000
 8005090:	40010400 	.word	0x40010400
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40001800 	.word	0x40001800

080050a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e040      	b.n	8005178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fc fc96 	bl	8001a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2224      	movs	r2, #36	@ 0x24
 8005110:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fff0 	bl	8006110 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fd89 	bl	8005c48 <UART_SetConfig>
 8005136:	4603      	mov	r3, r0
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e01b      	b.n	8005178 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800514e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800515e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 f86f 	bl	8006254 <UART_CheckIdleState>
 8005176:	4603      	mov	r3, r0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08a      	sub	sp, #40	@ 0x28
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005194:	2b20      	cmp	r3, #32
 8005196:	d177      	bne.n	8005288 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_UART_Transmit+0x24>
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e070      	b.n	800528a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2221      	movs	r2, #33	@ 0x21
 80051b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051b6:	f7fc fe79 	bl	8001eac <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d4:	d108      	bne.n	80051e8 <HAL_UART_Transmit+0x68>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	e003      	b.n	80051f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051f0:	e02f      	b.n	8005252 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2200      	movs	r2, #0
 80051fa:	2180      	movs	r1, #128	@ 0x80
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f001 f8d1 	bl	80063a4 <UART_WaitOnFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e03b      	b.n	800528a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005226:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	3302      	adds	r3, #2
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	e007      	b.n	8005240 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	781a      	ldrb	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1c9      	bne.n	80051f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2200      	movs	r2, #0
 8005266:	2140      	movs	r1, #64	@ 0x40
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f001 f89b 	bl	80063a4 <UART_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d004      	beq.n	800527e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e005      	b.n	800528a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	e000      	b.n	800528a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005288:	2302      	movs	r3, #2
  }
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	@ 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d165      	bne.n	8005376 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <HAL_UART_Transmit_DMA+0x22>
 80052b0:	88fb      	ldrh	r3, [r7, #6]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e05e      	b.n	8005378 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	88fa      	ldrh	r2, [r7, #6]
 80052cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2221      	movs	r2, #33	@ 0x21
 80052dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d027      	beq.n	8005336 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ea:	4a25      	ldr	r2, [pc, #148]	@ (8005380 <HAL_UART_Transmit_DMA+0xec>)
 80052ec:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	4a24      	ldr	r2, [pc, #144]	@ (8005384 <HAL_UART_Transmit_DMA+0xf0>)
 80052f4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fa:	4a23      	ldr	r2, [pc, #140]	@ (8005388 <HAL_UART_Transmit_DMA+0xf4>)
 80052fc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	2200      	movs	r2, #0
 8005304:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530e:	4619      	mov	r1, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3328      	adds	r3, #40	@ 0x28
 8005316:	461a      	mov	r2, r3
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	f7fc ffb7 	bl	800228c <HAL_DMA_Start_IT>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2210      	movs	r2, #16
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e020      	b.n	8005378 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2240      	movs	r2, #64	@ 0x40
 800533c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	613b      	str	r3, [r7, #16]
   return(result);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005354:	627b      	str	r3, [r7, #36]	@ 0x24
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3308      	adds	r3, #8
 800535c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535e:	623a      	str	r2, [r7, #32]
 8005360:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	69f9      	ldr	r1, [r7, #28]
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	61bb      	str	r3, [r7, #24]
   return(result);
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e000      	b.n	8005378 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005376:	2302      	movs	r3, #2
  }
}
 8005378:	4618      	mov	r0, r3
 800537a:	3728      	adds	r7, #40	@ 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	080066d5 	.word	0x080066d5
 8005384:	0800676b 	.word	0x0800676b
 8005388:	080068ed 	.word	0x080068ed

0800538c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08e      	sub	sp, #56	@ 0x38
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80053a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e6      	bne.n	8005394 <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d0:	2b80      	cmp	r3, #128	@ 0x80
 80053d2:	d137      	bne.n	8005444 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3308      	adds	r3, #8
 80053da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3308      	adds	r3, #8
 80053f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f4:	61ba      	str	r2, [r7, #24]
 80053f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	613b      	str	r3, [r7, #16]
   return(result);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e5      	bne.n	80053d4 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540c:	2b00      	cmp	r3, #0
 800540e:	d019      	beq.n	8005444 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005414:	2200      	movs	r2, #0
 8005416:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541c:	4618      	mov	r0, r3
 800541e:	f7fc ff95 	bl	800234c <HAL_DMA_Abort>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542c:	4618      	mov	r0, r3
 800542e:	f7fd f9a9 	bl	8002784 <HAL_DMA_GetError>
 8005432:	4603      	mov	r3, r0
 8005434:	2b20      	cmp	r3, #32
 8005436:	d105      	bne.n	8005444 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2210      	movs	r2, #16
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e007      	b.n	8005454 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3738      	adds	r7, #56	@ 0x38
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b09a      	sub	sp, #104	@ 0x68
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005478:	667b      	str	r3, [r7, #100]	@ 0x64
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005482:	657b      	str	r3, [r7, #84]	@ 0x54
 8005484:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005488:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e6      	bne.n	8005464 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3308      	adds	r3, #8
 800549c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80054b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e5      	bne.n	8005496 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d118      	bne.n	8005504 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	61fb      	str	r3, [r7, #28]
   return(result);
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e6      	bne.n	80054d2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550e:	2b40      	cmp	r3, #64	@ 0x40
 8005510:	d137      	bne.n	8005582 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3308      	adds	r3, #8
 8005518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	60bb      	str	r3, [r7, #8]
   return(result);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005528:	65bb      	str	r3, [r7, #88]	@ 0x58
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3308      	adds	r3, #8
 8005530:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005532:	61ba      	str	r2, [r7, #24]
 8005534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6979      	ldr	r1, [r7, #20]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	613b      	str	r3, [r7, #16]
   return(result);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554a:	2b00      	cmp	r3, #0
 800554c:	d019      	beq.n	8005582 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005552:	2200      	movs	r2, #0
 8005554:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800555a:	4618      	mov	r0, r3
 800555c:	f7fc fef6 	bl	800234c <HAL_DMA_Abort>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00d      	beq.n	8005582 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd f90a 	bl	8002784 <HAL_DMA_GetError>
 8005570:	4603      	mov	r3, r0
 8005572:	2b20      	cmp	r3, #32
 8005574:	d105      	bne.n	8005582 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2210      	movs	r2, #16
 800557a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e017      	b.n	80055b2 <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	220f      	movs	r2, #15
 8005590:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0208 	orr.w	r2, r2, #8
 80055a0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3768      	adds	r7, #104	@ 0x68
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b0ba      	sub	sp, #232	@ 0xe8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80055e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80055ea:	4013      	ands	r3, r2
 80055ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80055f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d115      	bne.n	8005624 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00f      	beq.n	8005624 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 82ac 	beq.w	8005b72 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
      }
      return;
 8005622:	e2a6      	b.n	8005b72 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8117 	beq.w	800585c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800562e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800563a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800563e:	4b85      	ldr	r3, [pc, #532]	@ (8005854 <HAL_UART_IRQHandler+0x298>)
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 810a 	beq.w	800585c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d011      	beq.n	8005678 <HAL_UART_IRQHandler+0xbc>
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566e:	f043 0201 	orr.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d011      	beq.n	80056a8 <HAL_UART_IRQHandler+0xec>
 8005684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2202      	movs	r2, #2
 8005696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800569e:	f043 0204 	orr.w	r2, r3, #4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d011      	beq.n	80056d8 <HAL_UART_IRQHandler+0x11c>
 80056b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2204      	movs	r2, #4
 80056c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ce:	f043 0202 	orr.w	r2, r3, #2
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d017      	beq.n	8005714 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2208      	movs	r2, #8
 8005702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570a:	f043 0208 	orr.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800571c:	2b00      	cmp	r3, #0
 800571e:	d012      	beq.n	8005746 <HAL_UART_IRQHandler+0x18a>
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573c:	f043 0220 	orr.w	r2, r3, #32
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8212 	beq.w	8005b76 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005780:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	d005      	beq.n	800579e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005796:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800579a:	2b00      	cmp	r3, #0
 800579c:	d04f      	beq.n	800583e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 ff34 	bl	800660c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ae:	2b40      	cmp	r3, #64	@ 0x40
 80057b0:	d141      	bne.n	8005836 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3308      	adds	r3, #8
 80057da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1d9      	bne.n	80057b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005802:	2b00      	cmp	r3, #0
 8005804:	d013      	beq.n	800582e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580a:	4a13      	ldr	r2, [pc, #76]	@ (8005858 <HAL_UART_IRQHandler+0x29c>)
 800580c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005812:	4618      	mov	r0, r3
 8005814:	f7fc fe0a 	bl	800242c <HAL_DMA_Abort_IT>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d017      	beq.n	800584e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582c:	e00f      	b.n	800584e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f9d4 	bl	8005bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	e00b      	b.n	800584e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f9d0 	bl	8005bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	e007      	b.n	800584e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f9cc 	bl	8005bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800584c:	e193      	b.n	8005b76 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584e:	bf00      	nop
    return;
 8005850:	e191      	b.n	8005b76 <HAL_UART_IRQHandler+0x5ba>
 8005852:	bf00      	nop
 8005854:	04000120 	.word	0x04000120
 8005858:	0800696b 	.word	0x0800696b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005860:	2b01      	cmp	r3, #1
 8005862:	f040 814c 	bne.w	8005afe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 8145 	beq.w	8005afe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 813e 	beq.w	8005afe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2210      	movs	r2, #16
 8005888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005894:	2b40      	cmp	r3, #64	@ 0x40
 8005896:	f040 80b6 	bne.w	8005a06 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8165 	beq.w	8005b7a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f080 815d 	bcs.w	8005b7a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d4:	f000 8086 	beq.w	80059e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005906:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800590e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800591a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1da      	bne.n	80058d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3308      	adds	r3, #8
 8005942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005946:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800594a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800594e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e1      	bne.n	8005922 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3308      	adds	r3, #8
 8005964:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800596e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005974:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005982:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005984:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005988:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e3      	bne.n	800595e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059b4:	f023 0310 	bic.w	r3, r3, #16
 80059b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e4      	bne.n	80059a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fc fcb4 	bl	800234c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fa fed0 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a04:	e0b9      	b.n	8005b7a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80ab 	beq.w	8005b7e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80a6 	beq.w	8005b7e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e4      	bne.n	8005a32 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	623b      	str	r3, [r7, #32]
   return(result);
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e3      	bne.n	8005a68 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f023 0310 	bic.w	r3, r3, #16
 8005ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	69b9      	ldr	r1, [r7, #24]
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e4      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fa fe54 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005afc:	e03f      	b.n	8005b7e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00e      	beq.n	8005b28 <HAL_UART_IRQHandler+0x56c>
 8005b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f865 	bl	8005bf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b26:	e02d      	b.n	8005b84 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01c      	beq.n	8005b82 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	4798      	blx	r3
    }
    return;
 8005b50:	e017      	b.n	8005b82 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d012      	beq.n	8005b84 <HAL_UART_IRQHandler+0x5c8>
 8005b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00c      	beq.n	8005b84 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 ff13 	bl	8006996 <UART_EndTransmit_IT>
    return;
 8005b70:	e008      	b.n	8005b84 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b72:	bf00      	nop
 8005b74:	e006      	b.n	8005b84 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b76:	bf00      	nop
 8005b78:	e004      	b.n	8005b84 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b7a:	bf00      	nop
 8005b7c:	e002      	b.n	8005b84 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b7e:	bf00      	nop
 8005b80:	e000      	b.n	8005b84 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b82:	bf00      	nop
  }

}
 8005b84:	37e8      	adds	r7, #232	@ 0xe8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop

08005b8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c10:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c18:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4313      	orrs	r3, r2
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4ba6      	ldr	r3, [pc, #664]	@ (8005f0c <UART_SetConfig+0x2c4>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6812      	ldr	r2, [r2, #0]
 8005c7a:	6979      	ldr	r1, [r7, #20]
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a94      	ldr	r2, [pc, #592]	@ (8005f10 <UART_SetConfig+0x2c8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d120      	bne.n	8005d06 <UART_SetConfig+0xbe>
 8005cc4:	4b93      	ldr	r3, [pc, #588]	@ (8005f14 <UART_SetConfig+0x2cc>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d816      	bhi.n	8005d00 <UART_SetConfig+0xb8>
 8005cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <UART_SetConfig+0x90>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005ce9 	.word	0x08005ce9
 8005cdc:	08005cf5 	.word	0x08005cf5
 8005ce0:	08005cef 	.word	0x08005cef
 8005ce4:	08005cfb 	.word	0x08005cfb
 8005ce8:	2301      	movs	r3, #1
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e150      	b.n	8005f90 <UART_SetConfig+0x348>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e14d      	b.n	8005f90 <UART_SetConfig+0x348>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e14a      	b.n	8005f90 <UART_SetConfig+0x348>
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e147      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d00:	2310      	movs	r3, #16
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e144      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a83      	ldr	r2, [pc, #524]	@ (8005f18 <UART_SetConfig+0x2d0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d132      	bne.n	8005d76 <UART_SetConfig+0x12e>
 8005d10:	4b80      	ldr	r3, [pc, #512]	@ (8005f14 <UART_SetConfig+0x2cc>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d16:	f003 030c 	and.w	r3, r3, #12
 8005d1a:	2b0c      	cmp	r3, #12
 8005d1c:	d828      	bhi.n	8005d70 <UART_SetConfig+0x128>
 8005d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d24 <UART_SetConfig+0xdc>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08005d71 	.word	0x08005d71
 8005d2c:	08005d71 	.word	0x08005d71
 8005d30:	08005d71 	.word	0x08005d71
 8005d34:	08005d65 	.word	0x08005d65
 8005d38:	08005d71 	.word	0x08005d71
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005d71 	.word	0x08005d71
 8005d44:	08005d5f 	.word	0x08005d5f
 8005d48:	08005d71 	.word	0x08005d71
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d71 	.word	0x08005d71
 8005d54:	08005d6b 	.word	0x08005d6b
 8005d58:	2300      	movs	r3, #0
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e118      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	77fb      	strb	r3, [r7, #31]
 8005d62:	e115      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d64:	2304      	movs	r3, #4
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e112      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	77fb      	strb	r3, [r7, #31]
 8005d6e:	e10f      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d70:	2310      	movs	r3, #16
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e10c      	b.n	8005f90 <UART_SetConfig+0x348>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a68      	ldr	r2, [pc, #416]	@ (8005f1c <UART_SetConfig+0x2d4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d120      	bne.n	8005dc2 <UART_SetConfig+0x17a>
 8005d80:	4b64      	ldr	r3, [pc, #400]	@ (8005f14 <UART_SetConfig+0x2cc>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d86:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d8a:	2b30      	cmp	r3, #48	@ 0x30
 8005d8c:	d013      	beq.n	8005db6 <UART_SetConfig+0x16e>
 8005d8e:	2b30      	cmp	r3, #48	@ 0x30
 8005d90:	d814      	bhi.n	8005dbc <UART_SetConfig+0x174>
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d009      	beq.n	8005daa <UART_SetConfig+0x162>
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d810      	bhi.n	8005dbc <UART_SetConfig+0x174>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <UART_SetConfig+0x15c>
 8005d9e:	2b10      	cmp	r3, #16
 8005da0:	d006      	beq.n	8005db0 <UART_SetConfig+0x168>
 8005da2:	e00b      	b.n	8005dbc <UART_SetConfig+0x174>
 8005da4:	2300      	movs	r3, #0
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e0f2      	b.n	8005f90 <UART_SetConfig+0x348>
 8005daa:	2302      	movs	r3, #2
 8005dac:	77fb      	strb	r3, [r7, #31]
 8005dae:	e0ef      	b.n	8005f90 <UART_SetConfig+0x348>
 8005db0:	2304      	movs	r3, #4
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e0ec      	b.n	8005f90 <UART_SetConfig+0x348>
 8005db6:	2308      	movs	r3, #8
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e0e9      	b.n	8005f90 <UART_SetConfig+0x348>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e0e6      	b.n	8005f90 <UART_SetConfig+0x348>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a56      	ldr	r2, [pc, #344]	@ (8005f20 <UART_SetConfig+0x2d8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d120      	bne.n	8005e0e <UART_SetConfig+0x1c6>
 8005dcc:	4b51      	ldr	r3, [pc, #324]	@ (8005f14 <UART_SetConfig+0x2cc>)
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dd8:	d013      	beq.n	8005e02 <UART_SetConfig+0x1ba>
 8005dda:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ddc:	d814      	bhi.n	8005e08 <UART_SetConfig+0x1c0>
 8005dde:	2b80      	cmp	r3, #128	@ 0x80
 8005de0:	d009      	beq.n	8005df6 <UART_SetConfig+0x1ae>
 8005de2:	2b80      	cmp	r3, #128	@ 0x80
 8005de4:	d810      	bhi.n	8005e08 <UART_SetConfig+0x1c0>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <UART_SetConfig+0x1a8>
 8005dea:	2b40      	cmp	r3, #64	@ 0x40
 8005dec:	d006      	beq.n	8005dfc <UART_SetConfig+0x1b4>
 8005dee:	e00b      	b.n	8005e08 <UART_SetConfig+0x1c0>
 8005df0:	2300      	movs	r3, #0
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e0cc      	b.n	8005f90 <UART_SetConfig+0x348>
 8005df6:	2302      	movs	r3, #2
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e0c9      	b.n	8005f90 <UART_SetConfig+0x348>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e0c6      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e02:	2308      	movs	r3, #8
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e0c3      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e0c0      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a44      	ldr	r2, [pc, #272]	@ (8005f24 <UART_SetConfig+0x2dc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d125      	bne.n	8005e64 <UART_SetConfig+0x21c>
 8005e18:	4b3e      	ldr	r3, [pc, #248]	@ (8005f14 <UART_SetConfig+0x2cc>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e26:	d017      	beq.n	8005e58 <UART_SetConfig+0x210>
 8005e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e2c:	d817      	bhi.n	8005e5e <UART_SetConfig+0x216>
 8005e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e32:	d00b      	beq.n	8005e4c <UART_SetConfig+0x204>
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e38:	d811      	bhi.n	8005e5e <UART_SetConfig+0x216>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <UART_SetConfig+0x1fe>
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e42:	d006      	beq.n	8005e52 <UART_SetConfig+0x20a>
 8005e44:	e00b      	b.n	8005e5e <UART_SetConfig+0x216>
 8005e46:	2300      	movs	r3, #0
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e0a1      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e09e      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e52:	2304      	movs	r3, #4
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e09b      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e098      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e5e:	2310      	movs	r3, #16
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e095      	b.n	8005f90 <UART_SetConfig+0x348>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a2f      	ldr	r2, [pc, #188]	@ (8005f28 <UART_SetConfig+0x2e0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d125      	bne.n	8005eba <UART_SetConfig+0x272>
 8005e6e:	4b29      	ldr	r3, [pc, #164]	@ (8005f14 <UART_SetConfig+0x2cc>)
 8005e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e7c:	d017      	beq.n	8005eae <UART_SetConfig+0x266>
 8005e7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e82:	d817      	bhi.n	8005eb4 <UART_SetConfig+0x26c>
 8005e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e88:	d00b      	beq.n	8005ea2 <UART_SetConfig+0x25a>
 8005e8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e8e:	d811      	bhi.n	8005eb4 <UART_SetConfig+0x26c>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <UART_SetConfig+0x254>
 8005e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e98:	d006      	beq.n	8005ea8 <UART_SetConfig+0x260>
 8005e9a:	e00b      	b.n	8005eb4 <UART_SetConfig+0x26c>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e076      	b.n	8005f90 <UART_SetConfig+0x348>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e073      	b.n	8005f90 <UART_SetConfig+0x348>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e070      	b.n	8005f90 <UART_SetConfig+0x348>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e06d      	b.n	8005f90 <UART_SetConfig+0x348>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e06a      	b.n	8005f90 <UART_SetConfig+0x348>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8005f2c <UART_SetConfig+0x2e4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d138      	bne.n	8005f36 <UART_SetConfig+0x2ee>
 8005ec4:	4b13      	ldr	r3, [pc, #76]	@ (8005f14 <UART_SetConfig+0x2cc>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005ece:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ed2:	d017      	beq.n	8005f04 <UART_SetConfig+0x2bc>
 8005ed4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ed8:	d82a      	bhi.n	8005f30 <UART_SetConfig+0x2e8>
 8005eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ede:	d00b      	beq.n	8005ef8 <UART_SetConfig+0x2b0>
 8005ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ee4:	d824      	bhi.n	8005f30 <UART_SetConfig+0x2e8>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <UART_SetConfig+0x2aa>
 8005eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eee:	d006      	beq.n	8005efe <UART_SetConfig+0x2b6>
 8005ef0:	e01e      	b.n	8005f30 <UART_SetConfig+0x2e8>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e04b      	b.n	8005f90 <UART_SetConfig+0x348>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e048      	b.n	8005f90 <UART_SetConfig+0x348>
 8005efe:	2304      	movs	r3, #4
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e045      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f04:	2308      	movs	r3, #8
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e042      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f0a:	bf00      	nop
 8005f0c:	efff69f3 	.word	0xefff69f3
 8005f10:	40011000 	.word	0x40011000
 8005f14:	40023800 	.word	0x40023800
 8005f18:	40004400 	.word	0x40004400
 8005f1c:	40004800 	.word	0x40004800
 8005f20:	40004c00 	.word	0x40004c00
 8005f24:	40005000 	.word	0x40005000
 8005f28:	40011400 	.word	0x40011400
 8005f2c:	40007800 	.word	0x40007800
 8005f30:	2310      	movs	r3, #16
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e02c      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a72      	ldr	r2, [pc, #456]	@ (8006104 <UART_SetConfig+0x4bc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d125      	bne.n	8005f8c <UART_SetConfig+0x344>
 8005f40:	4b71      	ldr	r3, [pc, #452]	@ (8006108 <UART_SetConfig+0x4c0>)
 8005f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f46:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f4a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f4e:	d017      	beq.n	8005f80 <UART_SetConfig+0x338>
 8005f50:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f54:	d817      	bhi.n	8005f86 <UART_SetConfig+0x33e>
 8005f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f5a:	d00b      	beq.n	8005f74 <UART_SetConfig+0x32c>
 8005f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f60:	d811      	bhi.n	8005f86 <UART_SetConfig+0x33e>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <UART_SetConfig+0x326>
 8005f66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f6a:	d006      	beq.n	8005f7a <UART_SetConfig+0x332>
 8005f6c:	e00b      	b.n	8005f86 <UART_SetConfig+0x33e>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e00d      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f74:	2302      	movs	r3, #2
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e00a      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	77fb      	strb	r3, [r7, #31]
 8005f7e:	e007      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f80:	2308      	movs	r3, #8
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	e004      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f86:	2310      	movs	r3, #16
 8005f88:	77fb      	strb	r3, [r7, #31]
 8005f8a:	e001      	b.n	8005f90 <UART_SetConfig+0x348>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f98:	d15b      	bne.n	8006052 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f9a:	7ffb      	ldrb	r3, [r7, #31]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d828      	bhi.n	8005ff2 <UART_SetConfig+0x3aa>
 8005fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x360>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd fcec 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61b8      	str	r0, [r7, #24]
        break;
 8005fd2:	e013      	b.n	8005ffc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fd fcfc 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	61b8      	str	r0, [r7, #24]
        break;
 8005fda:	e00f      	b.n	8005ffc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800610c <UART_SetConfig+0x4c4>)
 8005fde:	61bb      	str	r3, [r7, #24]
        break;
 8005fe0:	e00c      	b.n	8005ffc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fd fbcf 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61b8      	str	r0, [r7, #24]
        break;
 8005fe8:	e008      	b.n	8005ffc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fee:	61bb      	str	r3, [r7, #24]
        break;
 8005ff0:	e004      	b.n	8005ffc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	77bb      	strb	r3, [r7, #30]
        break;
 8005ffa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d074      	beq.n	80060ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	005a      	lsls	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	441a      	add	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d916      	bls.n	800604c <UART_SetConfig+0x404>
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006024:	d212      	bcs.n	800604c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f023 030f 	bic.w	r3, r3, #15
 800602e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	b29b      	uxth	r3, r3
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	b29a      	uxth	r2, r3
 800603c:	89fb      	ldrh	r3, [r7, #14]
 800603e:	4313      	orrs	r3, r2
 8006040:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	89fa      	ldrh	r2, [r7, #14]
 8006048:	60da      	str	r2, [r3, #12]
 800604a:	e04f      	b.n	80060ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	77bb      	strb	r3, [r7, #30]
 8006050:	e04c      	b.n	80060ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006052:	7ffb      	ldrb	r3, [r7, #31]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d828      	bhi.n	80060aa <UART_SetConfig+0x462>
 8006058:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <UART_SetConfig+0x418>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	080060ab 	.word	0x080060ab
 8006070:	0800609b 	.word	0x0800609b
 8006074:	080060ab 	.word	0x080060ab
 8006078:	080060ab 	.word	0x080060ab
 800607c:	080060ab 	.word	0x080060ab
 8006080:	080060a3 	.word	0x080060a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fd fc90 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8006088:	61b8      	str	r0, [r7, #24]
        break;
 800608a:	e013      	b.n	80060b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fd fca0 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 8006090:	61b8      	str	r0, [r7, #24]
        break;
 8006092:	e00f      	b.n	80060b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006094:	4b1d      	ldr	r3, [pc, #116]	@ (800610c <UART_SetConfig+0x4c4>)
 8006096:	61bb      	str	r3, [r7, #24]
        break;
 8006098:	e00c      	b.n	80060b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609a:	f7fd fb73 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 800609e:	61b8      	str	r0, [r7, #24]
        break;
 80060a0:	e008      	b.n	80060b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060a6:	61bb      	str	r3, [r7, #24]
        break;
 80060a8:	e004      	b.n	80060b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	77bb      	strb	r3, [r7, #30]
        break;
 80060b2:	bf00      	nop
    }

    if (pclk != 0U)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d018      	beq.n	80060ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	085a      	lsrs	r2, r3, #1
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	441a      	add	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b0f      	cmp	r3, #15
 80060d2:	d909      	bls.n	80060e8 <UART_SetConfig+0x4a0>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060da:	d205      	bcs.n	80060e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60da      	str	r2, [r3, #12]
 80060e6:	e001      	b.n	80060ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80060f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40007c00 	.word	0x40007c00
 8006108:	40023800 	.word	0x40023800
 800610c:	00f42400 	.word	0x00f42400

08006110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01a      	beq.n	8006226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800620e:	d10a      	bne.n	8006226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	605a      	str	r2, [r3, #4]
  }
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b098      	sub	sp, #96	@ 0x60
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006264:	f7fb fe22 	bl	8001eac <HAL_GetTick>
 8006268:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b08      	cmp	r3, #8
 8006276:	d12e      	bne.n	80062d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006278:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006280:	2200      	movs	r2, #0
 8006282:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f88c 	bl	80063a4 <UART_WaitOnFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d021      	beq.n	80062d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e6      	bne.n	8006292 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e062      	b.n	800639c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d149      	bne.n	8006378 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062ec:	2200      	movs	r2, #0
 80062ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f856 	bl	80063a4 <UART_WaitOnFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d03c      	beq.n	8006378 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	623b      	str	r3, [r7, #32]
   return(result);
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631c:	633b      	str	r3, [r7, #48]	@ 0x30
 800631e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e6      	bne.n	80062fe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3308      	adds	r3, #8
 8006336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0301 	bic.w	r3, r3, #1
 8006346:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006350:	61fa      	str	r2, [r7, #28]
 8006352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	69b9      	ldr	r1, [r7, #24]
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	617b      	str	r3, [r7, #20]
   return(result);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e5      	bne.n	8006330 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e011      	b.n	800639c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3758      	adds	r7, #88	@ 0x58
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b4:	e04f      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063bc:	d04b      	beq.n	8006456 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063be:	f7fb fd75 	bl	8001eac <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d302      	bcc.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e04e      	b.n	8006476 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d037      	beq.n	8006456 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b80      	cmp	r3, #128	@ 0x80
 80063ea:	d034      	beq.n	8006456 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b40      	cmp	r3, #64	@ 0x40
 80063f0:	d031      	beq.n	8006456 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d110      	bne.n	8006422 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2208      	movs	r2, #8
 8006406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f8ff 	bl	800660c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2208      	movs	r2, #8
 8006412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e029      	b.n	8006476 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800642c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006430:	d111      	bne.n	8006456 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800643a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f8e5 	bl	800660c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e00f      	b.n	8006476 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4013      	ands	r3, r2
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	429a      	cmp	r2, r3
 8006464:	bf0c      	ite	eq
 8006466:	2301      	moveq	r3, #1
 8006468:	2300      	movne	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	429a      	cmp	r2, r3
 8006472:	d0a0      	beq.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b096      	sub	sp, #88	@ 0x58
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2222      	movs	r2, #34	@ 0x22
 80064a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d028      	beq.n	8006506 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064b8:	4a3e      	ldr	r2, [pc, #248]	@ (80065b4 <UART_Start_Receive_DMA+0x134>)
 80064ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c0:	4a3d      	ldr	r2, [pc, #244]	@ (80065b8 <UART_Start_Receive_DMA+0x138>)
 80064c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c8:	4a3c      	ldr	r2, [pc, #240]	@ (80065bc <UART_Start_Receive_DMA+0x13c>)
 80064ca:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d0:	2200      	movs	r2, #0
 80064d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3324      	adds	r3, #36	@ 0x24
 80064de:	4619      	mov	r1, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e4:	461a      	mov	r2, r3
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	f7fb fed0 	bl	800228c <HAL_DMA_Start_IT>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2210      	movs	r2, #16
 80064f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e051      	b.n	80065aa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d018      	beq.n	8006540 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006522:	657b      	str	r3, [r7, #84]	@ 0x54
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800652c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800652e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800653a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e6      	bne.n	800650e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3308      	adds	r3, #8
 8006546:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	653b      	str	r3, [r7, #80]	@ 0x50
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3308      	adds	r3, #8
 800655e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006560:	637a      	str	r2, [r7, #52]	@ 0x34
 8006562:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006566:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800656e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e5      	bne.n	8006540 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3308      	adds	r3, #8
 800657a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	613b      	str	r3, [r7, #16]
   return(result);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800658a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3308      	adds	r3, #8
 8006592:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006594:	623a      	str	r2, [r7, #32]
 8006596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	69f9      	ldr	r1, [r7, #28]
 800659a:	6a3a      	ldr	r2, [r7, #32]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e5      	bne.n	8006574 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3758      	adds	r7, #88	@ 0x58
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	08006787 	.word	0x08006787
 80065b8:	080068af 	.word	0x080068af
 80065bc:	080068ed 	.word	0x080068ed

080065c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b089      	sub	sp, #36	@ 0x24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	6979      	ldr	r1, [r7, #20]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	613b      	str	r3, [r7, #16]
   return(result);
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e6      	bne.n	80065c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006600:	bf00      	nop
 8006602:	3724      	adds	r7, #36	@ 0x24
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b095      	sub	sp, #84	@ 0x54
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006632:	643b      	str	r3, [r7, #64]	@ 0x40
 8006634:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006638:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e6      	bne.n	8006614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3308      	adds	r3, #8
 800664c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	61fb      	str	r3, [r7, #28]
   return(result);
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f023 0301 	bic.w	r3, r3, #1
 800665c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006668:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800666c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e5      	bne.n	8006646 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800667e:	2b01      	cmp	r3, #1
 8006680:	d118      	bne.n	80066b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f023 0310 	bic.w	r3, r3, #16
 8006696:	647b      	str	r3, [r7, #68]	@ 0x44
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6979      	ldr	r1, [r7, #20]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	613b      	str	r3, [r7, #16]
   return(result);
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e6      	bne.n	8006682 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066c8:	bf00      	nop
 80066ca:	3754      	adds	r7, #84	@ 0x54
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b090      	sub	sp, #64	@ 0x40
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ea:	d037      	beq.n	800675c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80066ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3308      	adds	r3, #8
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	623b      	str	r3, [r7, #32]
   return(result);
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800670a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800670c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006714:	633a      	str	r2, [r7, #48]	@ 0x30
 8006716:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800671a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e5      	bne.n	80066f4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	60fb      	str	r3, [r7, #12]
   return(result);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800673c:	637b      	str	r3, [r7, #52]	@ 0x34
 800673e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	69b9      	ldr	r1, [r7, #24]
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	617b      	str	r3, [r7, #20]
   return(result);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e6      	bne.n	8006728 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800675a:	e002      	b.n	8006762 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800675c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800675e:	f7ff fa15 	bl	8005b8c <HAL_UART_TxCpltCallback>
}
 8006762:	bf00      	nop
 8006764:	3740      	adds	r7, #64	@ 0x40
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006776:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff fa11 	bl	8005ba0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b09c      	sub	sp, #112	@ 0x70
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006792:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800679c:	d071      	beq.n	8006882 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800679e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e6      	bne.n	80067a6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80067f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3308      	adds	r3, #8
 80067f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067f8:	647a      	str	r2, [r7, #68]	@ 0x44
 80067fa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3308      	adds	r3, #8
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	623b      	str	r3, [r7, #32]
   return(result);
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006822:	663b      	str	r3, [r7, #96]	@ 0x60
 8006824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3308      	adds	r3, #8
 800682a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800682c:	633a      	str	r2, [r7, #48]	@ 0x30
 800682e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800683a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006842:	2220      	movs	r2, #32
 8006844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800684a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800684c:	2b01      	cmp	r3, #1
 800684e:	d118      	bne.n	8006882 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	60fb      	str	r3, [r7, #12]
   return(result);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0310 	bic.w	r3, r3, #16
 8006864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	69b9      	ldr	r1, [r7, #24]
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	617b      	str	r3, [r7, #20]
   return(result);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e6      	bne.n	8006850 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006884:	2200      	movs	r2, #0
 8006886:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800688a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800688c:	2b01      	cmp	r3, #1
 800688e:	d107      	bne.n	80068a0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006892:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006896:	4619      	mov	r1, r3
 8006898:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800689a:	f7f9 ff83 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800689e:	e002      	b.n	80068a6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80068a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80068a2:	f7ff f987 	bl	8005bb4 <HAL_UART_RxCpltCallback>
}
 80068a6:	bf00      	nop
 80068a8:	3770      	adds	r7, #112	@ 0x70
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2201      	movs	r2, #1
 80068c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d109      	bne.n	80068de <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	4619      	mov	r1, r3
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7f9 ff64 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068dc:	e002      	b.n	80068e4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff f972 	bl	8005bc8 <HAL_UART_RxHalfCpltCallback>
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006906:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006912:	2b80      	cmp	r3, #128	@ 0x80
 8006914:	d109      	bne.n	800692a <UART_DMAError+0x3e>
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b21      	cmp	r3, #33	@ 0x21
 800691a:	d106      	bne.n	800692a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006924:	6978      	ldr	r0, [r7, #20]
 8006926:	f7ff fe4b 	bl	80065c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006934:	2b40      	cmp	r3, #64	@ 0x40
 8006936:	d109      	bne.n	800694c <UART_DMAError+0x60>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b22      	cmp	r3, #34	@ 0x22
 800693c:	d106      	bne.n	800694c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2200      	movs	r2, #0
 8006942:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006946:	6978      	ldr	r0, [r7, #20]
 8006948:	f7ff fe60 	bl	800660c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006952:	f043 0210 	orr.w	r2, r3, #16
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695c:	6978      	ldr	r0, [r7, #20]
 800695e:	f7ff f93d 	bl	8005bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006962:	bf00      	nop
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff f927 	bl	8005bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b088      	sub	sp, #32
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6979      	ldr	r1, [r7, #20]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff f8d5 	bl	8005b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e2:	bf00      	nop
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b08c      	sub	sp, #48	@ 0x30
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	4613      	mov	r3, r2
 80069f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d142      	bne.n	8006a88 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e03b      	b.n	8006a8a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	461a      	mov	r2, r3
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff fd2b 	bl	8006480 <UART_Start_Receive_DMA>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006a30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d124      	bne.n	8006a82 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d11d      	bne.n	8006a7c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2210      	movs	r2, #16
 8006a46:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	617b      	str	r3, [r7, #20]
   return(result);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f043 0310 	orr.w	r3, r3, #16
 8006a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a68:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6a39      	ldr	r1, [r7, #32]
 8006a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e6      	bne.n	8006a48 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8006a7a:	e002      	b.n	8006a82 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006a82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006a86:	e000      	b.n	8006a8a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a88:	2302      	movs	r3, #2
  }
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3730      	adds	r7, #48	@ 0x30
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a94:	b084      	sub	sp, #16
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	f107 001c 	add.w	r0, r7, #28
 8006aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aa6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d121      	bne.n	8006af2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	4b21      	ldr	r3, [pc, #132]	@ (8006b44 <USB_CoreInit+0xb0>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ad2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d105      	bne.n	8006ae6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa92 	bl	8007010 <USB_CoreReset>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	e010      	b.n	8006b14 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa86 	bl	8007010 <USB_CoreReset>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006b14:	7fbb      	ldrb	r3, [r7, #30]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d10b      	bne.n	8006b32 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f043 0206 	orr.w	r2, r3, #6
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f043 0220 	orr.w	r2, r3, #32
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b3e:	b004      	add	sp, #16
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	ffbdffbf 	.word	0xffbdffbf

08006b48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f023 0201 	bic.w	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d115      	bne.n	8006bb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b98:	200a      	movs	r0, #10
 8006b9a:	f7fb f993 	bl	8001ec4 <HAL_Delay>
      ms += 10U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	330a      	adds	r3, #10
 8006ba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fa25 	bl	8006ff4 <USB_GetMode>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d01e      	beq.n	8006bee <USB_SetCurrentMode+0x84>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bb4:	d9f0      	bls.n	8006b98 <USB_SetCurrentMode+0x2e>
 8006bb6:	e01a      	b.n	8006bee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d115      	bne.n	8006bea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bca:	200a      	movs	r0, #10
 8006bcc:	f7fb f97a 	bl	8001ec4 <HAL_Delay>
      ms += 10U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	330a      	adds	r3, #10
 8006bd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa0c 	bl	8006ff4 <USB_GetMode>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <USB_SetCurrentMode+0x84>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006be6:	d9f0      	bls.n	8006bca <USB_SetCurrentMode+0x60>
 8006be8:	e001      	b.n	8006bee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e005      	b.n	8006bfa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2bc8      	cmp	r3, #200	@ 0xc8
 8006bf2:	d101      	bne.n	8006bf8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c04:	b084      	sub	sp, #16
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b086      	sub	sp, #24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	e009      	b.n	8006c38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	3340      	adds	r3, #64	@ 0x40
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3301      	adds	r3, #1
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b0e      	cmp	r3, #14
 8006c3c:	d9f2      	bls.n	8006c24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d11c      	bne.n	8006c80 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c54:	f043 0302 	orr.w	r3, r3, #2
 8006c58:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e005      	b.n	8006c8c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c92:	461a      	mov	r2, r3
 8006c94:	2300      	movs	r3, #0
 8006c96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10d      	bne.n	8006cbc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ca8:	2100      	movs	r1, #0
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f968 	bl	8006f80 <USB_SetDevSpeed>
 8006cb0:	e008      	b.n	8006cc4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f963 	bl	8006f80 <USB_SetDevSpeed>
 8006cba:	e003      	b.n	8006cc4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cbc:	2103      	movs	r1, #3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f95e 	bl	8006f80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cc4:	2110      	movs	r1, #16
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f8fa 	bl	8006ec0 <USB_FlushTxFifo>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f924 	bl	8006f24 <USB_FlushRxFifo>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cec:	461a      	mov	r2, r3
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d04:	461a      	mov	r2, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	e043      	b.n	8006d98 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d26:	d118      	bne.n	8006d5a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e013      	b.n	8006d6c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d50:	461a      	mov	r2, r3
 8006d52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	e008      	b.n	8006d6c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d66:	461a      	mov	r2, r3
 8006d68:	2300      	movs	r3, #0
 8006d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d78:	461a      	mov	r2, r3
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	3301      	adds	r3, #1
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d3b5      	bcc.n	8006d10 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	e043      	b.n	8006e32 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dc0:	d118      	bne.n	8006df4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	e013      	b.n	8006e06 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dea:	461a      	mov	r2, r3
 8006dec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e008      	b.n	8006e06 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e00:	461a      	mov	r2, r3
 8006e02:	2300      	movs	r3, #0
 8006e04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e12:	461a      	mov	r2, r3
 8006e14:	2300      	movs	r3, #0
 8006e16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e24:	461a      	mov	r2, r3
 8006e26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e36:	461a      	mov	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d3b5      	bcc.n	8006daa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d105      	bne.n	8006e74 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f043 0210 	orr.w	r2, r3, #16
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb8 <USB_DevInit+0x2b4>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f043 0208 	orr.w	r2, r3, #8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d105      	bne.n	8006ea8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699a      	ldr	r2, [r3, #24]
 8006ea0:	4b06      	ldr	r3, [pc, #24]	@ (8006ebc <USB_DevInit+0x2b8>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eb4:	b004      	add	sp, #16
 8006eb6:	4770      	bx	lr
 8006eb8:	803c3800 	.word	0x803c3800
 8006ebc:	40000004 	.word	0x40000004

08006ec0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eda:	d901      	bls.n	8006ee0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e01b      	b.n	8006f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	daf2      	bge.n	8006ece <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	019b      	lsls	r3, r3, #6
 8006ef0:	f043 0220 	orr.w	r2, r3, #32
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f04:	d901      	bls.n	8006f0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e006      	b.n	8006f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d0f0      	beq.n	8006ef8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f3c:	d901      	bls.n	8006f42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e018      	b.n	8006f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	daf2      	bge.n	8006f30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2210      	movs	r2, #16
 8006f52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f60:	d901      	bls.n	8006f66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e006      	b.n	8006f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d0f0      	beq.n	8006f54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	68f9      	ldr	r1, [r7, #12]
 8006f9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006fcc:	f023 0303 	bic.w	r3, r3, #3
 8006fd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fe0:	f043 0302 	orr.w	r3, r3, #2
 8006fe4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	f003 0301 	and.w	r3, r3, #1
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007028:	d901      	bls.n	800702e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e01b      	b.n	8007066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	daf2      	bge.n	800701c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f043 0201 	orr.w	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3301      	adds	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007052:	d901      	bls.n	8007058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e006      	b.n	8007066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b01      	cmp	r3, #1
 8007062:	d0f0      	beq.n	8007046 <USB_CoreReset+0x36>

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fc24 	bl	80078cc <malloc>
 8007084:	4603      	mov	r3, r0
 8007086:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8007088:	68fb      	ldr	r3, [r7, #12]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <ATC_Free+0x26>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d007      	beq.n	80070b8 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fc15 	bl	80078dc <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
  }
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	8a9b      	ldrh	r3, [r3, #20]
 80070d6:	461a      	mov	r2, r3
 80070d8:	2100      	movs	r1, #0
 80070da:	f000 fcb5 	bl	8007a48 <memset>
}
 80070de:	bf00      	nop
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b086      	sub	sp, #24
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	4613      	mov	r3, r2
 80070f2:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 80070f4:	2300      	movs	r3, #0
 80070f6:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	88fa      	ldrh	r2, [r7, #6]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe f8c4 	bl	8005294 <HAL_UART_Transmit_DMA>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d102      	bne.n	8007118 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 8007112:	2301      	movs	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
 8007116:	e000      	b.n	800711a <ATC_TxRaw+0x34>
      break;
 8007118:	bf00      	nop

  } while (0);

  return answer;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fd67 	bl	8005c04 <HAL_UART_GetState>
 8007136:	4603      	mov	r3, r0
 8007138:	2b21      	cmp	r3, #33	@ 0x21
 800713a:	d007      	beq.n	800714c <ATC_TxBusy+0x28>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fd5f 	bl	8005c04 <HAL_UART_GetState>
 8007146:	4603      	mov	r3, r0
 8007148:	2b23      	cmp	r3, #35	@ 0x23
 800714a:	d101      	bne.n	8007150 <ATC_TxBusy+0x2c>
  {
    return true;
 800714c:	2301      	movs	r3, #1
 800714e:	e000      	b.n	8007152 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8007150:	2300      	movs	r3, #0
  }
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8007164:	2300      	movs	r3, #0
 8007166:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 8007168:	f7fa fea0 	bl	8001eac <HAL_GetTick>
 800716c:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 800716e:	2001      	movs	r0, #1
 8007170:	f000 fba1 	bl	80078b6 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe fd43 	bl	8005c04 <HAL_UART_GetState>
 800717e:	4603      	mov	r3, r0
 8007180:	2b22      	cmp	r3, #34	@ 0x22
 8007182:	d007      	beq.n	8007194 <ATC_TxWait+0x3a>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fd3b 	bl	8005c04 <HAL_UART_GetState>
 800718e:	4603      	mov	r3, r0
 8007190:	2b20      	cmp	r3, #32
 8007192:	d102      	bne.n	800719a <ATC_TxWait+0x40>
    {
      answer = true;
 8007194:	2301      	movs	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
      break;
 8007198:	e01c      	b.n	80071d4 <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fd30 	bl	8005c04 <HAL_UART_GetState>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2be0      	cmp	r3, #224	@ 0xe0
 80071a8:	d014      	beq.n	80071d4 <ATC_TxWait+0x7a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fd28 	bl	8005c04 <HAL_UART_GetState>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80071b8:	d00c      	beq.n	80071d4 <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 80071ba:	f7fa fe77 	bl	8001eac <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d8d1      	bhi.n	800716e <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe f8dc 	bl	800538c <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	8b1b      	ldrh	r3, [r3, #24]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d024      	beq.n	8007238 <ATC_CheckEvents+0x5a>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	e019      	b.n	8007228 <ATC_CheckEvents+0x4a>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	4413      	add	r3, r2
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4619      	mov	r1, r3
 8007206:	f000 fc47 	bl	8007a98 <strstr>
 800720a:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <ATC_CheckEvents+0x44>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	4413      	add	r3, r2
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68b8      	ldr	r0, [r7, #8]
 8007220:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	429a      	cmp	r2, r3
 8007230:	d3e0      	bcc.n	80071f4 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff ff44 	bl	80070c0 <ATC_RxFlush>
  }
}
 8007238:	bf00      	nop
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	8b1b      	ldrh	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d023      	beq.n	800729e <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007256:	2300      	movs	r3, #0
 8007258:	81bb      	strh	r3, [r7, #12]
 800725a:	e01b      	b.n	8007294 <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007260:	89ba      	ldrh	r2, [r7, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	320a      	adds	r2, #10
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	4619      	mov	r1, r3
 800726c:	f000 fc14 	bl	8007a98 <strstr>
 8007270:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8007284:	89bb      	ldrh	r3, [r7, #12]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	3301      	adds	r3, #1
 800728a:	73fb      	strb	r3, [r7, #15]
        break;
 800728c:	e007      	b.n	800729e <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800728e:	89bb      	ldrh	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	81bb      	strh	r3, [r7, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8adb      	ldrh	r3, [r3, #22]
 8007298:	89ba      	ldrh	r2, [r7, #12]
 800729a:	429a      	cmp	r2, r3
 800729c:	d3de      	bcc.n	800725c <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe fcb9 	bl	8005c2c <HAL_UART_GetError>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01f      	beq.n	8007300 <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ca:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe f8c3 	bl	800545c <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69d9      	ldr	r1, [r3, #28]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	8a9b      	ldrh	r3, [r3, #20]
 80072e2:	461a      	mov	r2, r3
 80072e4:	f7ff fb81 	bl	80069ea <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0208 	bic.w	r2, r2, #8
 80072fe:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe fc7d 	bl	8005c04 <HAL_UART_GetState>
 800730a:	4603      	mov	r3, r0
 800730c:	2b22      	cmp	r3, #34	@ 0x22
 800730e:	d027      	beq.n	8007360 <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fc75 	bl	8005c04 <HAL_UART_GetState>
 800731a:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800731c:	2b23      	cmp	r3, #35	@ 0x23
 800731e:	d01f      	beq.n	8007360 <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f04f 32ff 	mov.w	r2, #4294967295
 800732a:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe f893 	bl	800545c <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69d9      	ldr	r1, [r3, #28]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	8a9b      	ldrh	r3, [r3, #20]
 8007342:	461a      	mov	r2, r3
 8007344:	f7ff fb51 	bl	80069ea <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0208 	bic.w	r2, r2, #8
 800735e:	601a      	str	r2, [r3, #0]
  }
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	4613      	mov	r3, r2
 8007376:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007378:	2300      	movs	r3, #0
 800737a:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d075      	beq.n	800746e <ATC_Init+0x106>
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d072      	beq.n	800746e <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007388:	223c      	movs	r2, #60	@ 0x3c
 800738a:	2100      	movs	r1, #0
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fb5b 	bl	8007a48 <memset>
    if (pName != NULL)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3304      	adds	r3, #4
 800739c:	2207      	movs	r2, #7
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fb66 	bl	8007a72 <strncpy>
    }
    hAtc->hUart = hUart;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff fe5f 	bl	8007072 <ATC_Malloc>
 80073b4:	4602      	mov	r2, r0
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d04e      	beq.n	8007460 <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fb3c 	bl	8007a48 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff fe4d 	bl	8007072 <ATC_Malloc>
 80073d8:	4602      	mov	r2, r0
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d03e      	beq.n	8007464 <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	88fa      	ldrh	r2, [r7, #6]
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fb2a 	bl	8007a48 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 80073f4:	88fb      	ldrh	r3, [r7, #6]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fe3b 	bl	8007072 <ATC_Malloc>
 80073fc:	4602      	mov	r2, r0
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d02e      	beq.n	8007468 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fb18 	bl	8007a48 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f04f 32ff 	mov.w	r2, #4294967295
 8007428:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	69d9      	ldr	r1, [r3, #28]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8a9b      	ldrh	r3, [r3, #20]
 8007436:	461a      	mov	r2, r3
 8007438:	f7ff fad7 	bl	80069ea <HAL_UARTEx_ReceiveToIdle_DMA>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d114      	bne.n	800746c <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0208 	bic.w	r2, r2, #8
 8007458:	601a      	str	r2, [r3, #0]
    answer = true;
 800745a:	2301      	movs	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]
 800745e:	e006      	b.n	800746e <ATC_Init+0x106>
      break;
 8007460:	bf00      	nop
 8007462:	e004      	b.n	800746e <ATC_Init+0x106>
      break;
 8007464:	bf00      	nop
 8007466:	e002      	b.n	800746e <ATC_Init+0x106>
      break;
 8007468:	bf00      	nop
 800746a:	e000      	b.n	800746e <ATC_Init+0x106>
      break;
 800746c:	bf00      	nop

  } while (0);

  if (answer == false)
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	f083 0301 	eor.w	r3, r3, #1
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d016      	beq.n	80074a8 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	331c      	adds	r3, #28
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff fe03 	bl	8007092 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3324      	adds	r3, #36	@ 0x24
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fdfa 	bl	8007092 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800749e:	223c      	movs	r2, #60	@ 0x3c
 80074a0:	2100      	movs	r1, #0
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fad0 	bl	8007a48 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff fef4 	bl	80072a8 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fe8c 	bl	80071de <ATC_CheckEvents>
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 80074ce:	b590      	push	{r4, r7, lr}
 80074d0:	b08d      	sub	sp, #52	@ 0x34
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	607a      	str	r2, [r7, #4]
 80074da:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 80074dc:	2300      	movs	r3, #0
 80074de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f7ff fe1f 	bl	8007124 <ATC_TxBusy>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 80074ec:	f06f 0303 	mvn.w	r3, #3
 80074f0:	e0c8      	b.n	8007684 <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 80074f2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	d902      	bls.n	8007500 <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 80074fa:	f06f 0304 	mvn.w	r3, #4
 80074fe:	e0c1      	b.n	8007684 <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7ff fed1 	bl	80072a8 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8007506:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800750a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800750c:	2300      	movs	r3, #0
 800750e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007510:	e04b      	b.n	80075aa <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	617a      	str	r2, [r7, #20]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800751c:	69b8      	ldr	r0, [r7, #24]
 800751e:	f7f8 fe95 	bl	800024c <strlen>
 8007522:	4603      	mov	r3, r0
 8007524:	3301      	adds	r3, #1
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fda3 	bl	8007072 <ATC_Malloc>
 800752c:	4601      	mov	r1, r0
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007532:	320a      	adds	r2, #10
 8007534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800753c:	320a      	adds	r2, #10
 800753e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d119      	bne.n	800757a <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 8007546:	2300      	movs	r3, #0
 8007548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800754c:	e00d      	b.n	800756a <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800754e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007552:	330a      	adds	r3, #10
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fd99 	bl	8007092 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8007560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007564:	3301      	adds	r3, #1
 8007566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800756a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800756e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007570:	429a      	cmp	r2, r3
 8007572:	dcec      	bgt.n	800754e <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 8007574:	f06f 0302 	mvn.w	r3, #2
 8007578:	e084      	b.n	8007684 <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800757e:	320a      	adds	r2, #10
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	69b9      	ldr	r1, [r7, #24]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fad8 	bl	8007b3c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007590:	320a      	adds	r2, #10
 8007592:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007596:	69b8      	ldr	r0, [r7, #24]
 8007598:	f7f8 fe58 	bl	800024c <strlen>
 800759c:	4603      	mov	r3, r0
 800759e:	4423      	add	r3, r4
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 80075a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a6:	3301      	adds	r3, #1
 80075a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075aa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80075ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075b0:	429a      	cmp	r2, r3
 80075b2:	dbae      	blt.n	8007512 <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff fd83 	bl	80070c0 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 80075ba:	68b8      	ldr	r0, [r7, #8]
 80075bc:	f7f8 fe46 	bl	800024c <strlen>
 80075c0:	4603      	mov	r3, r0
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f7ff fd8c 	bl	80070e6 <ATC_TxRaw>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f083 0301 	eor.w	r3, r3, #1
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 80075da:	f04f 33ff 	mov.w	r3, #4294967295
 80075de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80075e0:	e00d      	b.n	80075fe <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f7ff fdb8 	bl	800715a <ATC_TxWait>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f083 0301 	eor.w	r3, r3, #1
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 80075f6:	f06f 0301 	mvn.w	r3, #1
 80075fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80075fc:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 80075fe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007602:	2b00      	cmp	r3, #0
 8007604:	d022      	beq.n	800764c <ATC_SendReceive+0x17e>
 8007606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007608:	2b00      	cmp	r3, #0
 800760a:	d11f      	bne.n	800764c <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 800760c:	f7fa fc4e 	bl	8001eac <HAL_GetTick>
 8007610:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 8007612:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800761c:	e00e      	b.n	800763c <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 800761e:	2001      	movs	r0, #1
 8007620:	f000 f949 	bl	80078b6 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7ff fe0a 	bl	8007240 <ATC_CheckResponse>
 800762c:	4603      	mov	r3, r0
 800762e:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 8007630:	7ffb      	ldrb	r3, [r7, #31]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 8007636:	7ffb      	ldrb	r3, [r7, #31]
 8007638:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800763a:	e007      	b.n	800764c <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 800763c:	f7fa fc36 	bl	8001eac <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007648:	429a      	cmp	r2, r3
 800764a:	d8e8      	bhi.n	800761e <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007658:	e00d      	b.n	8007676 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800765a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800765e:	330a      	adds	r3, #10
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fd13 	bl	8007092 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800766c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007670:	3301      	adds	r3, #1
 8007672:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007676:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800767a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800767e:	429a      	cmp	r2, r3
 8007680:	d3eb      	bcc.n	800765a <ATC_SendReceive+0x18c>
  }
  return answer;
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007684:	4618      	mov	r0, r3
 8007686:	3734      	adds	r7, #52	@ 0x34
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}

0800768c <ATC_Receive>:
  * @param  Items: Number of searching strings
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_Receive(ATC_HandleTypeDef *hAtc, char **ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800768c:	b408      	push	{r3}
 800768e:	b590      	push	{r4, r7, lr}
 8007690:	b08c      	sub	sp, #48	@ 0x30
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
  int answer = ATC_RESP_NOT_FOUND;
 800769a:	2300      	movs	r3, #0
 800769c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (Items > ATC_RESP_MAX)
 800769e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80076a2:	2b05      	cmp	r3, #5
 80076a4:	d902      	bls.n	80076ac <ATC_Receive+0x20>
  {
    return ATC_RESP_ITEMS;
 80076a6:	f06f 0304 	mvn.w	r3, #4
 80076aa:	e099      	b.n	80077e0 <ATC_Receive+0x154>
  }
  ATC_CheckErrors(hAtc);
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7ff fdfb 	bl	80072a8 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 80076b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80076b6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 80076b8:	2300      	movs	r3, #0
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076bc:	e04b      	b.n	8007756 <ATC_Receive+0xca>
  {
    char *arg = va_arg(args, char*);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	1d1a      	adds	r2, r3, #4
 80076c2:	617a      	str	r2, [r7, #20]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 80076c8:	69b8      	ldr	r0, [r7, #24]
 80076ca:	f7f8 fdbf 	bl	800024c <strlen>
 80076ce:	4603      	mov	r3, r0
 80076d0:	3301      	adds	r3, #1
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff fccd 	bl	8007072 <ATC_Malloc>
 80076d8:	4601      	mov	r1, r0
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076de:	320a      	adds	r2, #10
 80076e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076e8:	320a      	adds	r2, #10
 80076ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d119      	bne.n	8007726 <ATC_Receive+0x9a>
    {
      for (uint8_t j = 0; j < i; j++)
 80076f2:	2300      	movs	r3, #0
 80076f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80076f8:	e00d      	b.n	8007716 <ATC_Receive+0x8a>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 80076fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076fe:	330a      	adds	r3, #10
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4413      	add	r3, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff fcc3 	bl	8007092 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800770c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007710:	3301      	adds	r3, #1
 8007712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800771a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800771c:	429a      	cmp	r2, r3
 800771e:	dcec      	bgt.n	80076fa <ATC_Receive+0x6e>
      }
      return ATC_RESP_MEM_ERROR;
 8007720:	f06f 0302 	mvn.w	r3, #2
 8007724:	e05c      	b.n	80077e0 <ATC_Receive+0x154>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800772a:	320a      	adds	r2, #10
 800772c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007730:	69b9      	ldr	r1, [r7, #24]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fa02 	bl	8007b3c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800773c:	320a      	adds	r2, #10
 800773e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007742:	69b8      	ldr	r0, [r7, #24]
 8007744:	f7f8 fd82 	bl	800024c <strlen>
 8007748:	4603      	mov	r3, r0
 800774a:	4423      	add	r3, r4
 800774c:	2200      	movs	r2, #0
 800774e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	3301      	adds	r3, #1
 8007754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007756:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800775a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800775c:	429a      	cmp	r2, r3
 800775e:	dbae      	blt.n	80076be <ATC_Receive+0x32>
  }
  va_end(args);

  if (Items > 0)
 8007760:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01f      	beq.n	80077a8 <ATC_Receive+0x11c>
  {
    uint32_t start_time = HAL_GetTick();
 8007768:	f7fa fba0 	bl	8001eac <HAL_GetTick>
 800776c:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800776e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8007778:	e00e      	b.n	8007798 <ATC_Receive+0x10c>
    {
      ATC_Delay(1);
 800777a:	2001      	movs	r0, #1
 800777c:	f000 f89b 	bl	80078b6 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff fd5c 	bl	8007240 <ATC_CheckResponse>
 8007788:	4603      	mov	r3, r0
 800778a:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800778c:	7ffb      	ldrb	r3, [r7, #31]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <ATC_Receive+0x10c>
      {
        answer = found_index;
 8007792:	7ffb      	ldrb	r3, [r7, #31]
 8007794:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007796:	e007      	b.n	80077a8 <ATC_Receive+0x11c>
    while (HAL_GetTick() - start_time < RxTimeout)
 8007798:	f7fa fb88 	bl	8001eac <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d8e8      	bhi.n	800777a <ATC_Receive+0xee>
      }
    }
  }
  hAtc->RespCount = 0;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80077b4:	e00d      	b.n	80077d2 <ATC_Receive+0x146>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 80077b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077ba:	330a      	adds	r3, #10
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff fc65 	bl	8007092 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 80077c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077cc:	3301      	adds	r3, #1
 80077ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80077d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80077d6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80077da:	429a      	cmp	r2, r3
 80077dc:	d3eb      	bcc.n	80077b6 <ATC_Receive+0x12a>
  }
  return answer;
 80077de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3730      	adds	r7, #48	@ 0x30
 80077e4:	46bd      	mov	sp, r7
 80077e6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80077ea:	b001      	add	sp, #4
 80077ec:	4770      	bx	lr

080077ee <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 80077fa:	887a      	ldrh	r2, [r7, #2]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	8a9b      	ldrh	r3, [r3, #20]
 8007800:	4619      	mov	r1, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	8b1b      	ldrh	r3, [r3, #24]
 8007806:	1acb      	subs	r3, r1, r3
 8007808:	429a      	cmp	r2, r3
 800780a:	dd05      	ble.n	8007818 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	8a9a      	ldrh	r2, [r3, #20]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	8b1b      	ldrh	r3, [r3, #24]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	8b12      	ldrh	r2, [r2, #24]
 8007820:	1898      	adds	r0, r3, r2
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	887a      	ldrh	r2, [r7, #2]
 8007828:	4619      	mov	r1, r3
 800782a:	f000 f98f 	bl	8007b4c <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	8b1a      	ldrh	r2, [r3, #24]
 8007832:	887b      	ldrh	r3, [r7, #2]
 8007834:	4413      	add	r3, r2
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69d9      	ldr	r1, [r3, #28]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8a9b      	ldrh	r3, [r3, #20]
 8007848:	461a      	mov	r2, r3
 800784a:	f7ff f8ce 	bl	80069ea <HAL_UARTEx_ReceiveToIdle_DMA>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10c      	bne.n	800786e <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0208 	bic.w	r2, r2, #8
 800786a:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 800786c:	e01f      	b.n	80078ae <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f04f 32ff 	mov.w	r2, #4294967295
 8007878:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f7fd fdec 	bl	800545c <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69d9      	ldr	r1, [r3, #28]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	8a9b      	ldrh	r3, [r3, #20]
 8007890:	461a      	mov	r2, r3
 8007892:	f7ff f8aa 	bl	80069ea <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0208 	bic.w	r2, r2, #8
 80078ac:	601a      	str	r2, [r3, #0]
}
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fa fb00 	bl	8001ec4 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <malloc>:
 80078cc:	4b02      	ldr	r3, [pc, #8]	@ (80078d8 <malloc+0xc>)
 80078ce:	4601      	mov	r1, r0
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	f000 b82d 	b.w	8007930 <_malloc_r>
 80078d6:	bf00      	nop
 80078d8:	2000000c 	.word	0x2000000c

080078dc <free>:
 80078dc:	4b02      	ldr	r3, [pc, #8]	@ (80078e8 <free+0xc>)
 80078de:	4601      	mov	r1, r0
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	f000 b941 	b.w	8007b68 <_free_r>
 80078e6:	bf00      	nop
 80078e8:	2000000c 	.word	0x2000000c

080078ec <sbrk_aligned>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	4e0f      	ldr	r6, [pc, #60]	@ (800792c <sbrk_aligned+0x40>)
 80078f0:	460c      	mov	r4, r1
 80078f2:	6831      	ldr	r1, [r6, #0]
 80078f4:	4605      	mov	r5, r0
 80078f6:	b911      	cbnz	r1, 80078fe <sbrk_aligned+0x12>
 80078f8:	f000 f8e4 	bl	8007ac4 <_sbrk_r>
 80078fc:	6030      	str	r0, [r6, #0]
 80078fe:	4621      	mov	r1, r4
 8007900:	4628      	mov	r0, r5
 8007902:	f000 f8df 	bl	8007ac4 <_sbrk_r>
 8007906:	1c43      	adds	r3, r0, #1
 8007908:	d103      	bne.n	8007912 <sbrk_aligned+0x26>
 800790a:	f04f 34ff 	mov.w	r4, #4294967295
 800790e:	4620      	mov	r0, r4
 8007910:	bd70      	pop	{r4, r5, r6, pc}
 8007912:	1cc4      	adds	r4, r0, #3
 8007914:	f024 0403 	bic.w	r4, r4, #3
 8007918:	42a0      	cmp	r0, r4
 800791a:	d0f8      	beq.n	800790e <sbrk_aligned+0x22>
 800791c:	1a21      	subs	r1, r4, r0
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f8d0 	bl	8007ac4 <_sbrk_r>
 8007924:	3001      	adds	r0, #1
 8007926:	d1f2      	bne.n	800790e <sbrk_aligned+0x22>
 8007928:	e7ef      	b.n	800790a <sbrk_aligned+0x1e>
 800792a:	bf00      	nop
 800792c:	200009fc 	.word	0x200009fc

08007930 <_malloc_r>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	1ccd      	adds	r5, r1, #3
 8007936:	f025 0503 	bic.w	r5, r5, #3
 800793a:	3508      	adds	r5, #8
 800793c:	2d0c      	cmp	r5, #12
 800793e:	bf38      	it	cc
 8007940:	250c      	movcc	r5, #12
 8007942:	2d00      	cmp	r5, #0
 8007944:	4606      	mov	r6, r0
 8007946:	db01      	blt.n	800794c <_malloc_r+0x1c>
 8007948:	42a9      	cmp	r1, r5
 800794a:	d904      	bls.n	8007956 <_malloc_r+0x26>
 800794c:	230c      	movs	r3, #12
 800794e:	6033      	str	r3, [r6, #0]
 8007950:	2000      	movs	r0, #0
 8007952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007956:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a2c <_malloc_r+0xfc>
 800795a:	f000 f869 	bl	8007a30 <__malloc_lock>
 800795e:	f8d8 3000 	ldr.w	r3, [r8]
 8007962:	461c      	mov	r4, r3
 8007964:	bb44      	cbnz	r4, 80079b8 <_malloc_r+0x88>
 8007966:	4629      	mov	r1, r5
 8007968:	4630      	mov	r0, r6
 800796a:	f7ff ffbf 	bl	80078ec <sbrk_aligned>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	4604      	mov	r4, r0
 8007972:	d158      	bne.n	8007a26 <_malloc_r+0xf6>
 8007974:	f8d8 4000 	ldr.w	r4, [r8]
 8007978:	4627      	mov	r7, r4
 800797a:	2f00      	cmp	r7, #0
 800797c:	d143      	bne.n	8007a06 <_malloc_r+0xd6>
 800797e:	2c00      	cmp	r4, #0
 8007980:	d04b      	beq.n	8007a1a <_malloc_r+0xea>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	4639      	mov	r1, r7
 8007986:	4630      	mov	r0, r6
 8007988:	eb04 0903 	add.w	r9, r4, r3
 800798c:	f000 f89a 	bl	8007ac4 <_sbrk_r>
 8007990:	4581      	cmp	r9, r0
 8007992:	d142      	bne.n	8007a1a <_malloc_r+0xea>
 8007994:	6821      	ldr	r1, [r4, #0]
 8007996:	1a6d      	subs	r5, r5, r1
 8007998:	4629      	mov	r1, r5
 800799a:	4630      	mov	r0, r6
 800799c:	f7ff ffa6 	bl	80078ec <sbrk_aligned>
 80079a0:	3001      	adds	r0, #1
 80079a2:	d03a      	beq.n	8007a1a <_malloc_r+0xea>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	442b      	add	r3, r5
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	f8d8 3000 	ldr.w	r3, [r8]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	bb62      	cbnz	r2, 8007a0c <_malloc_r+0xdc>
 80079b2:	f8c8 7000 	str.w	r7, [r8]
 80079b6:	e00f      	b.n	80079d8 <_malloc_r+0xa8>
 80079b8:	6822      	ldr	r2, [r4, #0]
 80079ba:	1b52      	subs	r2, r2, r5
 80079bc:	d420      	bmi.n	8007a00 <_malloc_r+0xd0>
 80079be:	2a0b      	cmp	r2, #11
 80079c0:	d917      	bls.n	80079f2 <_malloc_r+0xc2>
 80079c2:	1961      	adds	r1, r4, r5
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	6025      	str	r5, [r4, #0]
 80079c8:	bf18      	it	ne
 80079ca:	6059      	strne	r1, [r3, #4]
 80079cc:	6863      	ldr	r3, [r4, #4]
 80079ce:	bf08      	it	eq
 80079d0:	f8c8 1000 	streq.w	r1, [r8]
 80079d4:	5162      	str	r2, [r4, r5]
 80079d6:	604b      	str	r3, [r1, #4]
 80079d8:	4630      	mov	r0, r6
 80079da:	f000 f82f 	bl	8007a3c <__malloc_unlock>
 80079de:	f104 000b 	add.w	r0, r4, #11
 80079e2:	1d23      	adds	r3, r4, #4
 80079e4:	f020 0007 	bic.w	r0, r0, #7
 80079e8:	1ac2      	subs	r2, r0, r3
 80079ea:	bf1c      	itt	ne
 80079ec:	1a1b      	subne	r3, r3, r0
 80079ee:	50a3      	strne	r3, [r4, r2]
 80079f0:	e7af      	b.n	8007952 <_malloc_r+0x22>
 80079f2:	6862      	ldr	r2, [r4, #4]
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	bf0c      	ite	eq
 80079f8:	f8c8 2000 	streq.w	r2, [r8]
 80079fc:	605a      	strne	r2, [r3, #4]
 80079fe:	e7eb      	b.n	80079d8 <_malloc_r+0xa8>
 8007a00:	4623      	mov	r3, r4
 8007a02:	6864      	ldr	r4, [r4, #4]
 8007a04:	e7ae      	b.n	8007964 <_malloc_r+0x34>
 8007a06:	463c      	mov	r4, r7
 8007a08:	687f      	ldr	r7, [r7, #4]
 8007a0a:	e7b6      	b.n	800797a <_malloc_r+0x4a>
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d1fb      	bne.n	8007a0c <_malloc_r+0xdc>
 8007a14:	2300      	movs	r3, #0
 8007a16:	6053      	str	r3, [r2, #4]
 8007a18:	e7de      	b.n	80079d8 <_malloc_r+0xa8>
 8007a1a:	230c      	movs	r3, #12
 8007a1c:	6033      	str	r3, [r6, #0]
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f000 f80c 	bl	8007a3c <__malloc_unlock>
 8007a24:	e794      	b.n	8007950 <_malloc_r+0x20>
 8007a26:	6005      	str	r5, [r0, #0]
 8007a28:	e7d6      	b.n	80079d8 <_malloc_r+0xa8>
 8007a2a:	bf00      	nop
 8007a2c:	20000a00 	.word	0x20000a00

08007a30 <__malloc_lock>:
 8007a30:	4801      	ldr	r0, [pc, #4]	@ (8007a38 <__malloc_lock+0x8>)
 8007a32:	f000 b881 	b.w	8007b38 <__retarget_lock_acquire_recursive>
 8007a36:	bf00      	nop
 8007a38:	20000b40 	.word	0x20000b40

08007a3c <__malloc_unlock>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	@ (8007a44 <__malloc_unlock+0x8>)
 8007a3e:	f000 b87c 	b.w	8007b3a <__retarget_lock_release_recursive>
 8007a42:	bf00      	nop
 8007a44:	20000b40 	.word	0x20000b40

08007a48 <memset>:
 8007a48:	4402      	add	r2, r0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <strchr>:
 8007a58:	b2c9      	uxtb	r1, r1
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a62:	b112      	cbz	r2, 8007a6a <strchr+0x12>
 8007a64:	428a      	cmp	r2, r1
 8007a66:	d1f9      	bne.n	8007a5c <strchr+0x4>
 8007a68:	4770      	bx	lr
 8007a6a:	2900      	cmp	r1, #0
 8007a6c:	bf18      	it	ne
 8007a6e:	2000      	movne	r0, #0
 8007a70:	4770      	bx	lr

08007a72 <strncpy>:
 8007a72:	b510      	push	{r4, lr}
 8007a74:	3901      	subs	r1, #1
 8007a76:	4603      	mov	r3, r0
 8007a78:	b132      	cbz	r2, 8007a88 <strncpy+0x16>
 8007a7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a7e:	f803 4b01 	strb.w	r4, [r3], #1
 8007a82:	3a01      	subs	r2, #1
 8007a84:	2c00      	cmp	r4, #0
 8007a86:	d1f7      	bne.n	8007a78 <strncpy+0x6>
 8007a88:	441a      	add	r2, r3
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d100      	bne.n	8007a92 <strncpy+0x20>
 8007a90:	bd10      	pop	{r4, pc}
 8007a92:	f803 1b01 	strb.w	r1, [r3], #1
 8007a96:	e7f9      	b.n	8007a8c <strncpy+0x1a>

08007a98 <strstr>:
 8007a98:	780a      	ldrb	r2, [r1, #0]
 8007a9a:	b570      	push	{r4, r5, r6, lr}
 8007a9c:	b96a      	cbnz	r2, 8007aba <strstr+0x22>
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d109      	bne.n	8007ab8 <strstr+0x20>
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0f6      	beq.n	8007a9e <strstr+0x6>
 8007ab0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007ab4:	429e      	cmp	r6, r3
 8007ab6:	d0f7      	beq.n	8007aa8 <strstr+0x10>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	7803      	ldrb	r3, [r0, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1ef      	bne.n	8007aa0 <strstr+0x8>
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	e7ec      	b.n	8007a9e <strstr+0x6>

08007ac4 <_sbrk_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d06      	ldr	r5, [pc, #24]	@ (8007ae0 <_sbrk_r+0x1c>)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	602b      	str	r3, [r5, #0]
 8007ad0:	f7f9 f9f8 	bl	8000ec4 <_sbrk>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_sbrk_r+0x1a>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_sbrk_r+0x1a>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20000b3c 	.word	0x20000b3c

08007ae4 <__errno>:
 8007ae4:	4b01      	ldr	r3, [pc, #4]	@ (8007aec <__errno+0x8>)
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	2000000c 	.word	0x2000000c

08007af0 <__libc_init_array>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	4d0d      	ldr	r5, [pc, #52]	@ (8007b28 <__libc_init_array+0x38>)
 8007af4:	4c0d      	ldr	r4, [pc, #52]	@ (8007b2c <__libc_init_array+0x3c>)
 8007af6:	1b64      	subs	r4, r4, r5
 8007af8:	10a4      	asrs	r4, r4, #2
 8007afa:	2600      	movs	r6, #0
 8007afc:	42a6      	cmp	r6, r4
 8007afe:	d109      	bne.n	8007b14 <__libc_init_array+0x24>
 8007b00:	4d0b      	ldr	r5, [pc, #44]	@ (8007b30 <__libc_init_array+0x40>)
 8007b02:	4c0c      	ldr	r4, [pc, #48]	@ (8007b34 <__libc_init_array+0x44>)
 8007b04:	f000 f87a 	bl	8007bfc <_init>
 8007b08:	1b64      	subs	r4, r4, r5
 8007b0a:	10a4      	asrs	r4, r4, #2
 8007b0c:	2600      	movs	r6, #0
 8007b0e:	42a6      	cmp	r6, r4
 8007b10:	d105      	bne.n	8007b1e <__libc_init_array+0x2e>
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b18:	4798      	blx	r3
 8007b1a:	3601      	adds	r6, #1
 8007b1c:	e7ee      	b.n	8007afc <__libc_init_array+0xc>
 8007b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b22:	4798      	blx	r3
 8007b24:	3601      	adds	r6, #1
 8007b26:	e7f2      	b.n	8007b0e <__libc_init_array+0x1e>
 8007b28:	08007cfc 	.word	0x08007cfc
 8007b2c:	08007cfc 	.word	0x08007cfc
 8007b30:	08007cfc 	.word	0x08007cfc
 8007b34:	08007d00 	.word	0x08007d00

08007b38 <__retarget_lock_acquire_recursive>:
 8007b38:	4770      	bx	lr

08007b3a <__retarget_lock_release_recursive>:
 8007b3a:	4770      	bx	lr

08007b3c <strcpy>:
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b42:	f803 2b01 	strb.w	r2, [r3], #1
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	d1f9      	bne.n	8007b3e <strcpy+0x2>
 8007b4a:	4770      	bx	lr

08007b4c <memcpy>:
 8007b4c:	440a      	add	r2, r1
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b54:	d100      	bne.n	8007b58 <memcpy+0xc>
 8007b56:	4770      	bx	lr
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b62:	4291      	cmp	r1, r2
 8007b64:	d1f9      	bne.n	8007b5a <memcpy+0xe>
 8007b66:	bd10      	pop	{r4, pc}

08007b68 <_free_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d041      	beq.n	8007bf4 <_free_r+0x8c>
 8007b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b74:	1f0c      	subs	r4, r1, #4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bfb8      	it	lt
 8007b7a:	18e4      	addlt	r4, r4, r3
 8007b7c:	f7ff ff58 	bl	8007a30 <__malloc_lock>
 8007b80:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf8 <_free_r+0x90>)
 8007b82:	6813      	ldr	r3, [r2, #0]
 8007b84:	b933      	cbnz	r3, 8007b94 <_free_r+0x2c>
 8007b86:	6063      	str	r3, [r4, #4]
 8007b88:	6014      	str	r4, [r2, #0]
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b90:	f7ff bf54 	b.w	8007a3c <__malloc_unlock>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d908      	bls.n	8007baa <_free_r+0x42>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	1821      	adds	r1, r4, r0
 8007b9c:	428b      	cmp	r3, r1
 8007b9e:	bf01      	itttt	eq
 8007ba0:	6819      	ldreq	r1, [r3, #0]
 8007ba2:	685b      	ldreq	r3, [r3, #4]
 8007ba4:	1809      	addeq	r1, r1, r0
 8007ba6:	6021      	streq	r1, [r4, #0]
 8007ba8:	e7ed      	b.n	8007b86 <_free_r+0x1e>
 8007baa:	461a      	mov	r2, r3
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	b10b      	cbz	r3, 8007bb4 <_free_r+0x4c>
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	d9fa      	bls.n	8007baa <_free_r+0x42>
 8007bb4:	6811      	ldr	r1, [r2, #0]
 8007bb6:	1850      	adds	r0, r2, r1
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	d10b      	bne.n	8007bd4 <_free_r+0x6c>
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	4401      	add	r1, r0
 8007bc0:	1850      	adds	r0, r2, r1
 8007bc2:	4283      	cmp	r3, r0
 8007bc4:	6011      	str	r1, [r2, #0]
 8007bc6:	d1e0      	bne.n	8007b8a <_free_r+0x22>
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	6053      	str	r3, [r2, #4]
 8007bce:	4408      	add	r0, r1
 8007bd0:	6010      	str	r0, [r2, #0]
 8007bd2:	e7da      	b.n	8007b8a <_free_r+0x22>
 8007bd4:	d902      	bls.n	8007bdc <_free_r+0x74>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	e7d6      	b.n	8007b8a <_free_r+0x22>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	1821      	adds	r1, r4, r0
 8007be0:	428b      	cmp	r3, r1
 8007be2:	bf04      	itt	eq
 8007be4:	6819      	ldreq	r1, [r3, #0]
 8007be6:	685b      	ldreq	r3, [r3, #4]
 8007be8:	6063      	str	r3, [r4, #4]
 8007bea:	bf04      	itt	eq
 8007bec:	1809      	addeq	r1, r1, r0
 8007bee:	6021      	streq	r1, [r4, #0]
 8007bf0:	6054      	str	r4, [r2, #4]
 8007bf2:	e7ca      	b.n	8007b8a <_free_r+0x22>
 8007bf4:	bd38      	pop	{r3, r4, r5, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000a00 	.word	0x20000a00

08007bfc <_init>:
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfe:	bf00      	nop
 8007c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c02:	bc08      	pop	{r3}
 8007c04:	469e      	mov	lr, r3
 8007c06:	4770      	bx	lr

08007c08 <_fini>:
 8007c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0a:	bf00      	nop
 8007c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0e:	bc08      	pop	{r3}
 8007c10:	469e      	mov	lr, r3
 8007c12:	4770      	bx	lr
