
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800b6c8  0800b6c8  0000c6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba20  0800ba20  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba20  0800ba20  0000ca20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba28  0800ba28  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba28  0800ba28  0000ca28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba2c  0800ba2c  0000ca2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800ba30  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054e8  20000060  0800ba90  0000d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005548  0800ba90  0000d548  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002282f  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ead  00000000  00000000  0002f8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00034770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001540  00000000  00000000  000362c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bcb4  00000000  00000000  00037808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230eb  00000000  00000000  000634bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001088be  00000000  00000000  000865a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018ee65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072f4  00000000  00000000  0018eea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0019619c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b6b0 	.word	0x0800b6b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800b6b0 	.word	0x0800b6b0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <MX_DMA_Init+0x48>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a0f      	ldr	r2, [pc, #60]	@ (800059c <MX_DMA_Init+0x48>)
 8000560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <MX_DMA_Init+0x48>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2010      	movs	r0, #16
 8000578:	f002 fc53 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800057c:	2010      	movs	r0, #16
 800057e:	f002 fc6c 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	2011      	movs	r0, #17
 8000588:	f002 fc4b 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800058c:	2011      	movs	r0, #17
 800058e:	f002 fc64 	bl	8002e5a <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	StartMultiThreads();
 80005a4:	f001 f9a6 	bl	80018f4 <StartMultiThreads>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	@ 0x30
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c2:	4b85      	ldr	r3, [pc, #532]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a84      	ldr	r2, [pc, #528]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 80005c8:	f043 0310 	orr.w	r3, r3, #16
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b82      	ldr	r3, [pc, #520]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0310 	and.w	r3, r3, #16
 80005d6:	61bb      	str	r3, [r7, #24]
 80005d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b7f      	ldr	r3, [pc, #508]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a7e      	ldr	r2, [pc, #504]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b7c      	ldr	r3, [pc, #496]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	4b79      	ldr	r3, [pc, #484]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a78      	ldr	r2, [pc, #480]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b76      	ldr	r3, [pc, #472]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b73      	ldr	r3, [pc, #460]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a72      	ldr	r2, [pc, #456]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b70      	ldr	r3, [pc, #448]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b6d      	ldr	r3, [pc, #436]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a6c      	ldr	r2, [pc, #432]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b6a      	ldr	r3, [pc, #424]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063a:	4b67      	ldr	r3, [pc, #412]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a66      	ldr	r2, [pc, #408]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b64      	ldr	r3, [pc, #400]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000652:	4b61      	ldr	r3, [pc, #388]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a60      	ldr	r2, [pc, #384]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b5e      	ldr	r3, [pc, #376]	@ (80007d8 <MX_GPIO_Init+0x22c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DETECTOR_TRIGGER_Pin|DISTANCE_INDICATOR_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2141      	movs	r1, #65	@ 0x41
 800066e:	485b      	ldr	r0, [pc, #364]	@ (80007dc <MX_GPIO_Init+0x230>)
 8000670:	f003 f94e 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f244 0181 	movw	r1, #16513	@ 0x4081
 800067a:	4859      	ldr	r0, [pc, #356]	@ (80007e0 <MX_GPIO_Init+0x234>)
 800067c:	f003 f948 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2141      	movs	r1, #65	@ 0x41
 8000684:	4857      	ldr	r0, [pc, #348]	@ (80007e4 <MX_GPIO_Init+0x238>)
 8000686:	f003 f943 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2110      	movs	r1, #16
 800068e:	4856      	ldr	r0, [pc, #344]	@ (80007e8 <MX_GPIO_Init+0x23c>)
 8000690:	f003 f93e 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DETECTOR_TRIGGER_Pin DISTANCE_INDICATOR_Pin */
  GPIO_InitStruct.Pin = DETECTOR_TRIGGER_Pin|DISTANCE_INDICATOR_Pin;
 8000694:	2341      	movs	r3, #65	@ 0x41
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	484c      	ldr	r0, [pc, #304]	@ (80007dc <MX_GPIO_Init+0x230>)
 80006ac:	f002 ff6c 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	4849      	ldr	r0, [pc, #292]	@ (80007ec <MX_GPIO_Init+0x240>)
 80006c8:	f002 ff5e 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006cc:	2332      	movs	r3, #50	@ 0x32
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006dc:	230b      	movs	r3, #11
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4841      	ldr	r0, [pc, #260]	@ (80007ec <MX_GPIO_Init+0x240>)
 80006e8:	f002 ff4e 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006ec:	2386      	movs	r3, #134	@ 0x86
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fc:	230b      	movs	r3, #11
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	483a      	ldr	r0, [pc, #232]	@ (80007f0 <MX_GPIO_Init+0x244>)
 8000708:	f002 ff3e 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800070c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	482e      	ldr	r0, [pc, #184]	@ (80007e0 <MX_GPIO_Init+0x234>)
 8000726:	f002 ff2f 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 800072a:	2341      	movs	r3, #65	@ 0x41
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4828      	ldr	r0, [pc, #160]	@ (80007e4 <MX_GPIO_Init+0x238>)
 8000742:	f002 ff21 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000746:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000754:	2303      	movs	r3, #3
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000758:	230b      	movs	r3, #11
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	481f      	ldr	r0, [pc, #124]	@ (80007e0 <MX_GPIO_Init+0x234>)
 8000764:	f002 ff10 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000768:	2380      	movs	r3, #128	@ 0x80
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	481a      	ldr	r0, [pc, #104]	@ (80007e4 <MX_GPIO_Init+0x238>)
 800077c:	f002 ff04 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000780:	2310      	movs	r3, #16
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	4814      	ldr	r0, [pc, #80]	@ (80007e8 <MX_GPIO_Init+0x23c>)
 8000798:	f002 fef6 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800079c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ae:	230b      	movs	r3, #11
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	480a      	ldr	r0, [pc, #40]	@ (80007e4 <MX_GPIO_Init+0x238>)
 80007ba:	f002 fee5 	bl	8003588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2105      	movs	r1, #5
 80007c2:	2028      	movs	r0, #40	@ 0x28
 80007c4:	f002 fb2d 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007c8:	2028      	movs	r0, #40	@ 0x28
 80007ca:	f002 fb46 	bl	8002e5a <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3730      	adds	r7, #48	@ 0x30
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40021800 	.word	0x40021800
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020000 	.word	0x40020000

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f002 f9b6 	bl	8002b6a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f841 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f7ff fed3 	bl	80005ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000806:	f7ff fea5 	bl	8000554 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800080a:	f001 ff95 	bl	8002738 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800080e:	f002 f8db 	bl	80029c8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000812:	f001 ff61 	bl	80026d8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000816:	f001 f9af 	bl	8001b78 <MX_TIM1_Init>
  MX_TIM3_Init();
 800081a:	f001 fa6b 	bl	8001cf4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800081e:	f001 fabf 	bl	8001da0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000822:	f001 fbb1 	bl	8001f88 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000826:	f001 fa01 	bl	8001c2c <MX_TIM2_Init>
  MX_TIM6_Init();
 800082a:	f001 fb75 	bl	8001f18 <MX_TIM6_Init>
  MX_TIM5_Init();
 800082e:	f001 fb0d 	bl	8001e4c <MX_TIM5_Init>
  MX_TIM12_Init();
 8000832:	f001 fc5f 	bl	80020f4 <MX_TIM12_Init>
  MX_TIM9_Init();
 8000836:	f001 fc01 	bl	800203c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <main+0x80>)
 800083c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fd08 	bl	8000254 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	480a      	ldr	r0, [pc, #40]	@ (8000878 <main+0x84>)
 8000850:	f006 fa54 	bl	8006cfc <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	4909      	ldr	r1, [pc, #36]	@ (800087c <main+0x88>)
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <main+0x8c>)
 800085a:	f006 fad8 	bl	8006e0e <HAL_UART_Receive_IT>

  Init_MotorSystem();
 800085e:	f000 fe0b 	bl	8001478 <Init_MotorSystem>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000862:	f008 f84f 	bl	8008904 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000866:	f7ff fe9b 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800086a:	f008 f87f 	bl	800896c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <main+0x7a>
 8000872:	bf00      	nop
 8000874:	0800b6c8 	.word	0x0800b6c8
 8000878:	2000049c 	.word	0x2000049c
 800087c:	2000007c 	.word	0x2000007c
 8000880:	20000414 	.word	0x20000414

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	@ 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2234      	movs	r2, #52	@ 0x34
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f00a feba 	bl	800b60c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008a8:	f003 f9b8 	bl	8003c1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <SystemClock_Config+0xdc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000960 <SystemClock_Config+0xdc>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b8:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <SystemClock_Config+0xdc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008c4:	4b27      	ldr	r3, [pc, #156]	@ (8000964 <SystemClock_Config+0xe0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008cc:	4a25      	ldr	r2, [pc, #148]	@ (8000964 <SystemClock_Config+0xe0>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <SystemClock_Config+0xe0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008f8:	2360      	movs	r3, #96	@ 0x60
 80008fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4618      	mov	r0, r3
 800090e:	f003 f9e5 	bl	8003cdc <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000918:	f000 f826 	bl	8000968 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800091c:	f003 f98e 	bl	8003c3c <HAL_PWREx_EnableOverDrive>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000926:	f000 f81f 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092e:	2302      	movs	r3, #2
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2103      	movs	r1, #3
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fc76 	bl	8004238 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000952:	f000 f809 	bl	8000968 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	@ 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <Set_PWM_Frequency>:
/**
 * @brief Ustawia częstotliwość PWM dla sygnału dźwiękowego.
 * @param _frequency Żądana częstotliwość w Hz.
 */
void Set_PWM_Frequency(uint32_t _frequency)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

    if (_frequency == 0) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d104      	bne.n	800098c <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000982:	2104      	movs	r1, #4
 8000984:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <Set_PWM_Frequency+0x5c>)
 8000986:	f004 fd65 	bl	8005454 <HAL_TIM_PWM_Stop>
        return;
 800098a:	e01e      	b.n	80009ca <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <Set_PWM_Frequency+0x60>)
 800098e:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <Set_PWM_Frequency+0x5c>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * _frequency)) - 1;
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	fb02 f303 	mul.w	r3, r2, r3
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	3b01      	subs	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim12, period);
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <Set_PWM_Frequency+0x5c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009b2:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <Set_PWM_Frequency+0x5c>)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <Set_PWM_Frequency+0x5c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	0852      	lsrs	r2, r2, #1
 80009c0:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80009c2:	2104      	movs	r1, #4
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <Set_PWM_Frequency+0x5c>)
 80009c6:	f004 fc4b 	bl	8005260 <HAL_TIM_PWM_Start>
}
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200003c8 	.word	0x200003c8
 80009d4:	05b8d800 	.word	0x05b8d800

080009d8 <Command_Init>:

/** @brief Komenda inicjalizująca po nawiązaniu połączenia. */
void Command_Init(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	// Brak komunikatu o nawiązaniu połączenia
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <Command_Engine>:

/** @brief Włącza lub wyłącza silnik. */
void Command_Engine(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

	if (!engineOn) {
 80009ec:	4b2f      	ldr	r3, [pc, #188]	@ (8000aac <Command_Engine+0xc4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d126      	bne.n	8000a42 <Command_Engine+0x5a>
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80009f4:	213c      	movs	r1, #60	@ 0x3c
 80009f6:	482e      	ldr	r0, [pc, #184]	@ (8000ab0 <Command_Engine+0xc8>)
 80009f8:	f004 feb4 	bl	8005764 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80009fc:	213c      	movs	r1, #60	@ 0x3c
 80009fe:	482d      	ldr	r0, [pc, #180]	@ (8000ab4 <Command_Engine+0xcc>)
 8000a00:	f004 feb0 	bl	8005764 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000a04:	213c      	movs	r1, #60	@ 0x3c
 8000a06:	482c      	ldr	r0, [pc, #176]	@ (8000ab8 <Command_Engine+0xd0>)
 8000a08:	f004 feac 	bl	8005764 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000a0c:	213c      	movs	r1, #60	@ 0x3c
 8000a0e:	482b      	ldr	r0, [pc, #172]	@ (8000abc <Command_Engine+0xd4>)
 8000a10:	f004 fea8 	bl	8005764 <HAL_TIM_Encoder_Start>

		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a14:	2100      	movs	r1, #0
 8000a16:	482a      	ldr	r0, [pc, #168]	@ (8000ac0 <Command_Engine+0xd8>)
 8000a18:	f004 fc22 	bl	8005260 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a1c:	210c      	movs	r1, #12
 8000a1e:	4828      	ldr	r0, [pc, #160]	@ (8000ac0 <Command_Engine+0xd8>)
 8000a20:	f004 fc1e 	bl	8005260 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000a24:	2100      	movs	r1, #0
 8000a26:	4827      	ldr	r0, [pc, #156]	@ (8000ac4 <Command_Engine+0xdc>)
 8000a28:	f004 fc1a 	bl	8005260 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8000a2c:	210c      	movs	r1, #12
 8000a2e:	4825      	ldr	r0, [pc, #148]	@ (8000ac4 <Command_Engine+0xdc>)
 8000a30:	f004 fc16 	bl	8005260 <HAL_TIM_PWM_Start>

		HAL_TIM_Base_Start_IT(&htim6);
 8000a34:	4824      	ldr	r0, [pc, #144]	@ (8000ac8 <Command_Engine+0xe0>)
 8000a36:	f004 fb15 	bl	8005064 <HAL_TIM_Base_Start_IT>
		engineOn = 1;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <Command_Engine+0xc4>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	e02b      	b.n	8000a9a <Command_Engine+0xb2>
	}

	else {
		ResetMotor(&motorA);
 8000a42:	4822      	ldr	r0, [pc, #136]	@ (8000acc <Command_Engine+0xe4>)
 8000a44:	f000 fac6 	bl	8000fd4 <ResetMotor>
		ResetMotor(&motorB);
 8000a48:	4821      	ldr	r0, [pc, #132]	@ (8000ad0 <Command_Engine+0xe8>)
 8000a4a:	f000 fac3 	bl	8000fd4 <ResetMotor>

		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8000a4e:	213c      	movs	r1, #60	@ 0x3c
 8000a50:	4817      	ldr	r0, [pc, #92]	@ (8000ab0 <Command_Engine+0xc8>)
 8000a52:	f004 ff15 	bl	8005880 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8000a56:	213c      	movs	r1, #60	@ 0x3c
 8000a58:	4816      	ldr	r0, [pc, #88]	@ (8000ab4 <Command_Engine+0xcc>)
 8000a5a:	f004 ff11 	bl	8005880 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8000a5e:	213c      	movs	r1, #60	@ 0x3c
 8000a60:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <Command_Engine+0xd0>)
 8000a62:	f004 ff0d 	bl	8005880 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim8, TIM_CHANNEL_ALL);
 8000a66:	213c      	movs	r1, #60	@ 0x3c
 8000a68:	4814      	ldr	r0, [pc, #80]	@ (8000abc <Command_Engine+0xd4>)
 8000a6a:	f004 ff09 	bl	8005880 <HAL_TIM_Encoder_Stop>

		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4813      	ldr	r0, [pc, #76]	@ (8000ac0 <Command_Engine+0xd8>)
 8000a72:	f004 fcef 	bl	8005454 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000a76:	210c      	movs	r1, #12
 8000a78:	4811      	ldr	r0, [pc, #68]	@ (8000ac0 <Command_Engine+0xd8>)
 8000a7a:	f004 fceb 	bl	8005454 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4810      	ldr	r0, [pc, #64]	@ (8000ac4 <Command_Engine+0xdc>)
 8000a82:	f004 fce7 	bl	8005454 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8000a86:	210c      	movs	r1, #12
 8000a88:	480e      	ldr	r0, [pc, #56]	@ (8000ac4 <Command_Engine+0xdc>)
 8000a8a:	f004 fce3 	bl	8005454 <HAL_TIM_PWM_Stop>

		HAL_TIM_Base_Stop_IT(&htim6);
 8000a8e:	480e      	ldr	r0, [pc, #56]	@ (8000ac8 <Command_Engine+0xe0>)
 8000a90:	f004 fb60 	bl	8005154 <HAL_TIM_Base_Stop_IT>
		engineOn = 0;
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <Command_Engine+0xc4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Transmit(&huart3, (uint8_t*)"\nENGINE COMMAND\r\n", 17, HAL_MAX_DELAY);
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	2211      	movs	r2, #17
 8000aa0:	490c      	ldr	r1, [pc, #48]	@ (8000ad4 <Command_Engine+0xec>)
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <Command_Engine+0xf0>)
 8000aa4:	f006 f92a 	bl	8006cfc <HAL_UART_Transmit>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000dc 	.word	0x200000dc
 8000ab0:	20000168 	.word	0x20000168
 8000ab4:	20000200 	.word	0x20000200
 8000ab8:	2000024c 	.word	0x2000024c
 8000abc:	20000330 	.word	0x20000330
 8000ac0:	200001b4 	.word	0x200001b4
 8000ac4:	20000298 	.word	0x20000298
 8000ac8:	200002e4 	.word	0x200002e4
 8000acc:	200000e4 	.word	0x200000e4
 8000ad0:	20000120 	.word	0x20000120
 8000ad4:	0800b6f4 	.word	0x0800b6f4
 8000ad8:	2000049c 	.word	0x2000049c

08000adc <Command_Lights>:

/** @brief Przełącza światła. */
void Command_Lights(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4806      	ldr	r0, [pc, #24]	@ (8000afc <Command_Lights+0x20>)
 8000ae4:	f002 ff2d 	bl	8003942 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart3, (uint8_t*)"\nLIGHTS COMMAND\r\n", 17, HAL_MAX_DELAY);
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	2211      	movs	r2, #17
 8000aee:	4904      	ldr	r1, [pc, #16]	@ (8000b00 <Command_Lights+0x24>)
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <Command_Lights+0x28>)
 8000af2:	f006 f903 	bl	8006cfc <HAL_UART_Transmit>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021800 	.word	0x40021800
 8000b00:	0800b708 	.word	0x0800b708
 8000b04:	2000049c 	.word	0x2000049c

08000b08 <Command_Horn>:

/** @brief Włącza lub wyłącza klakson. */
void Command_Horn(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

	if (!hornOn) {
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <Command_Horn+0x3c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d107      	bne.n	8000b24 <Command_Horn+0x1c>
		Set_PWM_Frequency(1000);
 8000b14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b18:	f7ff ff2c 	bl	8000974 <Set_PWM_Frequency>
		hornOn = 1;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <Command_Horn+0x3c>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	e005      	b.n	8000b30 <Command_Horn+0x28>
	}

	else {
		Set_PWM_Frequency(0);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff ff25 	bl	8000974 <Set_PWM_Frequency>
		hornOn = 0;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <Command_Horn+0x3c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Transmit(&huart3, (uint8_t*)"\nHORN COMMAND\r\n", 15, HAL_MAX_DELAY);
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	220f      	movs	r2, #15
 8000b36:	4904      	ldr	r1, [pc, #16]	@ (8000b48 <Command_Horn+0x40>)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <Command_Horn+0x44>)
 8000b3a:	f006 f8df 	bl	8006cfc <HAL_UART_Transmit>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000d4 	.word	0x200000d4
 8000b48:	0800b71c 	.word	0x0800b71c
 8000b4c:	2000049c 	.word	0x2000049c

08000b50 <Command_ABS>:

/** @brief Wymusza hamowanie silników (ABS). */
void Command_ABS(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	ResetMotor(&motorA);
 8000b54:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <Command_ABS+0x24>)
 8000b56:	f000 fa3d 	bl	8000fd4 <ResetMotor>
	ResetMotor(&motorB);
 8000b5a:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <Command_ABS+0x28>)
 8000b5c:	f000 fa3a 	bl	8000fd4 <ResetMotor>
	HAL_UART_Transmit(&huart3, (uint8_t*)"\nABS COMMAND\r\n", 14, HAL_MAX_DELAY);
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	220e      	movs	r2, #14
 8000b66:	4905      	ldr	r1, [pc, #20]	@ (8000b7c <Command_ABS+0x2c>)
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <Command_ABS+0x30>)
 8000b6a:	f006 f8c7 	bl	8006cfc <HAL_UART_Transmit>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000e4 	.word	0x200000e4
 8000b78:	20000120 	.word	0x20000120
 8000b7c:	0800b72c 	.word	0x0800b72c
 8000b80:	2000049c 	.word	0x2000049c

08000b84 <Command_Motors>:
/**
 * @brief Obsługuje komendy sterujące silnikami.
 * @param _cmd Komenda w postaci ciągu znaków.
 */
void Command_Motors(uint8_t* _cmd)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	char* modeStr = (char*)_cmd + 3;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3303      	adds	r3, #3
 8000b90:	60fb      	str	r3, [r7, #12]
	int mode = atoi(modeStr);
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f00a fcb2 	bl	800b4fc <atoi>
 8000b98:	60b8      	str	r0, [r7, #8]

	if (mode >= 1 && mode <= 9) {
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f340 80c3 	ble.w	8000d28 <Command_Motors+0x1a4>
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	2b09      	cmp	r3, #9
 8000ba6:	f300 80bf 	bgt.w	8000d28 <Command_Motors+0x1a4>
		switch (mode) {
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	2b08      	cmp	r3, #8
 8000bb0:	f200 80b8 	bhi.w	8000d24 <Command_Motors+0x1a0>
 8000bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bbc <Command_Motors+0x38>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000be1 	.word	0x08000be1
 8000bc0:	08000c05 	.word	0x08000c05
 8000bc4:	08000c29 	.word	0x08000c29
 8000bc8:	08000c4d 	.word	0x08000c4d
 8000bcc:	08000c71 	.word	0x08000c71
 8000bd0:	08000c95 	.word	0x08000c95
 8000bd4:	08000cb9 	.word	0x08000cb9
 8000bd8:	08000cdd 	.word	0x08000cdd
 8000bdc:	08000d01 	.word	0x08000d01

			case 1:
		    // Operacja dla MOTOR0
		    HAL_UART_Transmit(&huart3, (uint8_t *)"\nMOTOR0 selected\r\n", 19, HAL_MAX_DELAY);
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	2213      	movs	r2, #19
 8000be6:	4956      	ldr	r1, [pc, #344]	@ (8000d40 <Command_Motors+0x1bc>)
 8000be8:	4856      	ldr	r0, [pc, #344]	@ (8000d44 <Command_Motors+0x1c0>)
 8000bea:	f006 f887 	bl	8006cfc <HAL_UART_Transmit>
		    motor_set_speed(&motorA, DEFAULT, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4855      	ldr	r0, [pc, #340]	@ (8000d48 <Command_Motors+0x1c4>)
 8000bf4:	f000 fa8d 	bl	8001112 <motor_set_speed>
		    motor_set_speed(&motorB, DEFAULT, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4853      	ldr	r0, [pc, #332]	@ (8000d4c <Command_Motors+0x1c8>)
 8000bfe:	f000 fa88 	bl	8001112 <motor_set_speed>
		    break;
 8000c02:	e090      	b.n	8000d26 <Command_Motors+0x1a2>

			case 2:
		    // Operacja dla MOTORF
		    HAL_UART_Transmit(&huart3, (uint8_t *)"\nMOTOR1 selected\r\n", 19, HAL_MAX_DELAY);
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	2213      	movs	r2, #19
 8000c0a:	4951      	ldr	r1, [pc, #324]	@ (8000d50 <Command_Motors+0x1cc>)
 8000c0c:	484d      	ldr	r0, [pc, #308]	@ (8000d44 <Command_Motors+0x1c0>)
 8000c0e:	f006 f875 	bl	8006cfc <HAL_UART_Transmit>
		    motor_set_speed(&motorA, FRONT, 93);
 8000c12:	225d      	movs	r2, #93	@ 0x5d
 8000c14:	2101      	movs	r1, #1
 8000c16:	484c      	ldr	r0, [pc, #304]	@ (8000d48 <Command_Motors+0x1c4>)
 8000c18:	f000 fa7b 	bl	8001112 <motor_set_speed>
		    motor_set_speed(&motorB, FRONT, 100);
 8000c1c:	2264      	movs	r2, #100	@ 0x64
 8000c1e:	2101      	movs	r1, #1
 8000c20:	484a      	ldr	r0, [pc, #296]	@ (8000d4c <Command_Motors+0x1c8>)
 8000c22:	f000 fa76 	bl	8001112 <motor_set_speed>
		    break;
 8000c26:	e07e      	b.n	8000d26 <Command_Motors+0x1a2>

			case 3:
		    // Operacja dla MOTORFR
		    HAL_UART_Transmit(&huart3, (uint8_t *)"\nMOTOR2 selected\r\n", 19, HAL_MAX_DELAY);
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	2213      	movs	r2, #19
 8000c2e:	4949      	ldr	r1, [pc, #292]	@ (8000d54 <Command_Motors+0x1d0>)
 8000c30:	4844      	ldr	r0, [pc, #272]	@ (8000d44 <Command_Motors+0x1c0>)
 8000c32:	f006 f863 	bl	8006cfc <HAL_UART_Transmit>
		    motor_set_speed(&motorA, FRONT, 50);
 8000c36:	2232      	movs	r2, #50	@ 0x32
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4843      	ldr	r0, [pc, #268]	@ (8000d48 <Command_Motors+0x1c4>)
 8000c3c:	f000 fa69 	bl	8001112 <motor_set_speed>
		    motor_set_speed(&motorB, FRONT, 100);
 8000c40:	2264      	movs	r2, #100	@ 0x64
 8000c42:	2101      	movs	r1, #1
 8000c44:	4841      	ldr	r0, [pc, #260]	@ (8000d4c <Command_Motors+0x1c8>)
 8000c46:	f000 fa64 	bl	8001112 <motor_set_speed>
		    break;
 8000c4a:	e06c      	b.n	8000d26 <Command_Motors+0x1a2>

			case 4:
		    // Operacja dla MOTORR
		    HAL_UART_Transmit(&huart3, (uint8_t *)"\nMOTOR3 selected\r\n", 19, HAL_MAX_DELAY);
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	2213      	movs	r2, #19
 8000c52:	4941      	ldr	r1, [pc, #260]	@ (8000d58 <Command_Motors+0x1d4>)
 8000c54:	483b      	ldr	r0, [pc, #236]	@ (8000d44 <Command_Motors+0x1c0>)
 8000c56:	f006 f851 	bl	8006cfc <HAL_UART_Transmit>
		    motor_set_speed(&motorA, BACK, 100);
 8000c5a:	2264      	movs	r2, #100	@ 0x64
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	483a      	ldr	r0, [pc, #232]	@ (8000d48 <Command_Motors+0x1c4>)
 8000c60:	f000 fa57 	bl	8001112 <motor_set_speed>
		    motor_set_speed(&motorB, FRONT, 100);
 8000c64:	2264      	movs	r2, #100	@ 0x64
 8000c66:	2101      	movs	r1, #1
 8000c68:	4838      	ldr	r0, [pc, #224]	@ (8000d4c <Command_Motors+0x1c8>)
 8000c6a:	f000 fa52 	bl	8001112 <motor_set_speed>
		    break;
 8000c6e:	e05a      	b.n	8000d26 <Command_Motors+0x1a2>

			case 5:
		    // Operacja dla MOTORBR
		    HAL_UART_Transmit(&huart3, (uint8_t *)"\nMOTOR4 selected\r\n", 19, HAL_MAX_DELAY);
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	2213      	movs	r2, #19
 8000c76:	4939      	ldr	r1, [pc, #228]	@ (8000d5c <Command_Motors+0x1d8>)
 8000c78:	4832      	ldr	r0, [pc, #200]	@ (8000d44 <Command_Motors+0x1c0>)
 8000c7a:	f006 f83f 	bl	8006cfc <HAL_UART_Transmit>
		    motor_set_speed(&motorA, BACK, 50);
 8000c7e:	2232      	movs	r2, #50	@ 0x32
 8000c80:	2102      	movs	r1, #2
 8000c82:	4831      	ldr	r0, [pc, #196]	@ (8000d48 <Command_Motors+0x1c4>)
 8000c84:	f000 fa45 	bl	8001112 <motor_set_speed>
		    motor_set_speed(&motorB, BACK, 100);
 8000c88:	2264      	movs	r2, #100	@ 0x64
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	482f      	ldr	r0, [pc, #188]	@ (8000d4c <Command_Motors+0x1c8>)
 8000c8e:	f000 fa40 	bl	8001112 <motor_set_speed>
		    break;
 8000c92:	e048      	b.n	8000d26 <Command_Motors+0x1a2>

			case 6:
		    // Operacja dla MOTORB
		    HAL_UART_Transmit(&huart3, (uint8_t *)"\nMOTOR5 selected\r\n", 19, HAL_MAX_DELAY);
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	2213      	movs	r2, #19
 8000c9a:	4931      	ldr	r1, [pc, #196]	@ (8000d60 <Command_Motors+0x1dc>)
 8000c9c:	4829      	ldr	r0, [pc, #164]	@ (8000d44 <Command_Motors+0x1c0>)
 8000c9e:	f006 f82d 	bl	8006cfc <HAL_UART_Transmit>
		    motor_set_speed(&motorA, BACK, 100);
 8000ca2:	2264      	movs	r2, #100	@ 0x64
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4828      	ldr	r0, [pc, #160]	@ (8000d48 <Command_Motors+0x1c4>)
 8000ca8:	f000 fa33 	bl	8001112 <motor_set_speed>
		    motor_set_speed(&motorB, BACK, 100);
 8000cac:	2264      	movs	r2, #100	@ 0x64
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4826      	ldr	r0, [pc, #152]	@ (8000d4c <Command_Motors+0x1c8>)
 8000cb2:	f000 fa2e 	bl	8001112 <motor_set_speed>
		    break;
 8000cb6:	e036      	b.n	8000d26 <Command_Motors+0x1a2>

			case 7:
		    // Operacja dla MOTORBL
		    HAL_UART_Transmit(&huart3, (uint8_t *)"\nMOTOR6 selected\r\n", 19, HAL_MAX_DELAY);
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	2213      	movs	r2, #19
 8000cbe:	4929      	ldr	r1, [pc, #164]	@ (8000d64 <Command_Motors+0x1e0>)
 8000cc0:	4820      	ldr	r0, [pc, #128]	@ (8000d44 <Command_Motors+0x1c0>)
 8000cc2:	f006 f81b 	bl	8006cfc <HAL_UART_Transmit>
		    motor_set_speed(&motorA, BACK, 100);
 8000cc6:	2264      	movs	r2, #100	@ 0x64
 8000cc8:	2102      	movs	r1, #2
 8000cca:	481f      	ldr	r0, [pc, #124]	@ (8000d48 <Command_Motors+0x1c4>)
 8000ccc:	f000 fa21 	bl	8001112 <motor_set_speed>
		    motor_set_speed(&motorB, BACK, 50);
 8000cd0:	2232      	movs	r2, #50	@ 0x32
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	481d      	ldr	r0, [pc, #116]	@ (8000d4c <Command_Motors+0x1c8>)
 8000cd6:	f000 fa1c 	bl	8001112 <motor_set_speed>
		    break;
 8000cda:	e024      	b.n	8000d26 <Command_Motors+0x1a2>

			case 8:
		    // Operacja dla MOTORL
		    HAL_UART_Transmit(&huart3, (uint8_t *)"\nMOTOR7 selected\r\n", 19, HAL_MAX_DELAY);
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	2213      	movs	r2, #19
 8000ce2:	4921      	ldr	r1, [pc, #132]	@ (8000d68 <Command_Motors+0x1e4>)
 8000ce4:	4817      	ldr	r0, [pc, #92]	@ (8000d44 <Command_Motors+0x1c0>)
 8000ce6:	f006 f809 	bl	8006cfc <HAL_UART_Transmit>
		    motor_set_speed(&motorA, FRONT, 100);
 8000cea:	2264      	movs	r2, #100	@ 0x64
 8000cec:	2101      	movs	r1, #1
 8000cee:	4816      	ldr	r0, [pc, #88]	@ (8000d48 <Command_Motors+0x1c4>)
 8000cf0:	f000 fa0f 	bl	8001112 <motor_set_speed>
		    motor_set_speed(&motorB, BACK, 100);
 8000cf4:	2264      	movs	r2, #100	@ 0x64
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4814      	ldr	r0, [pc, #80]	@ (8000d4c <Command_Motors+0x1c8>)
 8000cfa:	f000 fa0a 	bl	8001112 <motor_set_speed>
		    break;
 8000cfe:	e012      	b.n	8000d26 <Command_Motors+0x1a2>

			case 9:
		    // Operacja dla MOTORFL
		    HAL_UART_Transmit(&huart3, (uint8_t *)"\nMOTOR8 selected\r\n", 19, HAL_MAX_DELAY);
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2213      	movs	r2, #19
 8000d06:	4919      	ldr	r1, [pc, #100]	@ (8000d6c <Command_Motors+0x1e8>)
 8000d08:	480e      	ldr	r0, [pc, #56]	@ (8000d44 <Command_Motors+0x1c0>)
 8000d0a:	f005 fff7 	bl	8006cfc <HAL_UART_Transmit>
		    motor_set_speed(&motorA, FRONT, 100);
 8000d0e:	2264      	movs	r2, #100	@ 0x64
 8000d10:	2101      	movs	r1, #1
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <Command_Motors+0x1c4>)
 8000d14:	f000 f9fd 	bl	8001112 <motor_set_speed>
		    motor_set_speed(&motorB, FRONT, 50);
 8000d18:	2232      	movs	r2, #50	@ 0x32
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <Command_Motors+0x1c8>)
 8000d1e:	f000 f9f8 	bl	8001112 <motor_set_speed>
		    break;
 8000d22:	e000      	b.n	8000d26 <Command_Motors+0x1a2>

			default:
		    break;
 8000d24:	bf00      	nop
		switch (mode) {
 8000d26:	e007      	b.n	8000d38 <Command_Motors+0x1b4>

		}

	}

	else HAL_UART_Transmit(&huart3, (uint8_t *)"\nInvalid MOTOR mode\r\n", 22, HAL_MAX_DELAY);
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	2216      	movs	r2, #22
 8000d2e:	4910      	ldr	r1, [pc, #64]	@ (8000d70 <Command_Motors+0x1ec>)
 8000d30:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <Command_Motors+0x1c0>)
 8000d32:	f005 ffe3 	bl	8006cfc <HAL_UART_Transmit>
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	0800b73c 	.word	0x0800b73c
 8000d44:	2000049c 	.word	0x2000049c
 8000d48:	200000e4 	.word	0x200000e4
 8000d4c:	20000120 	.word	0x20000120
 8000d50:	0800b750 	.word	0x0800b750
 8000d54:	0800b764 	.word	0x0800b764
 8000d58:	0800b778 	.word	0x0800b778
 8000d5c:	0800b78c 	.word	0x0800b78c
 8000d60:	0800b7a0 	.word	0x0800b7a0
 8000d64:	0800b7b4 	.word	0x0800b7b4
 8000d68:	0800b7c8 	.word	0x0800b7c8
 8000d6c:	0800b7dc 	.word	0x0800b7dc
 8000d70:	0800b7f0 	.word	0x0800b7f0

08000d74 <ProcessCommand>:
/**
 * @brief Przetwarza otrzymaną komendę.
 * @param _cmd Ciąg znaków zawierający komendę.
 */
void ProcessCommand(uint8_t* _cmd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	if (strcmp((char*)_cmd, "INIT") == 0)
 8000d7c:	4924      	ldr	r1, [pc, #144]	@ (8000e10 <ProcessCommand+0x9c>)
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fa5e 	bl	8000240 <strcmp>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <ProcessCommand+0x1c>
		Command_Init();
 8000d8a:	f7ff fe25 	bl	80009d8 <Command_Init>

	else if (strncmp((char*)_cmd, "CMD", 3) == 0)
		Command_Motors(_cmd);

	else HAL_UART_Transmit(&huart3, (uint8_t *)"\nUnknown command\r\n", 18, HAL_MAX_DELAY);
}
 8000d8e:	e03a      	b.n	8000e06 <ProcessCommand+0x92>
	else if (strcmp((char*)_cmd, "CMD0") == 0)
 8000d90:	4920      	ldr	r1, [pc, #128]	@ (8000e14 <ProcessCommand+0xa0>)
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fa54 	bl	8000240 <strcmp>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d102      	bne.n	8000da4 <ProcessCommand+0x30>
		Command_Engine();
 8000d9e:	f7ff fe23 	bl	80009e8 <Command_Engine>
}
 8000da2:	e030      	b.n	8000e06 <ProcessCommand+0x92>
	else if (strcmp((char*)_cmd, "CMDA") == 0)
 8000da4:	491c      	ldr	r1, [pc, #112]	@ (8000e18 <ProcessCommand+0xa4>)
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fa4a 	bl	8000240 <strcmp>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <ProcessCommand+0x44>
		Command_Lights();
 8000db2:	f7ff fe93 	bl	8000adc <Command_Lights>
}
 8000db6:	e026      	b.n	8000e06 <ProcessCommand+0x92>
	else if (strcmp((char*)_cmd, "CMDB") == 0)
 8000db8:	4918      	ldr	r1, [pc, #96]	@ (8000e1c <ProcessCommand+0xa8>)
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fa40 	bl	8000240 <strcmp>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <ProcessCommand+0x58>
		Command_Horn();
 8000dc6:	f7ff fe9f 	bl	8000b08 <Command_Horn>
}
 8000dca:	e01c      	b.n	8000e06 <ProcessCommand+0x92>
	else if (strcmp((char*)_cmd, "CMDC") == 0)
 8000dcc:	4914      	ldr	r1, [pc, #80]	@ (8000e20 <ProcessCommand+0xac>)
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fa36 	bl	8000240 <strcmp>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <ProcessCommand+0x6c>
		Command_ABS();
 8000dda:	f7ff feb9 	bl	8000b50 <Command_ABS>
}
 8000dde:	e012      	b.n	8000e06 <ProcessCommand+0x92>
	else if (strncmp((char*)_cmd, "CMD", 3) == 0)
 8000de0:	2203      	movs	r2, #3
 8000de2:	4910      	ldr	r1, [pc, #64]	@ (8000e24 <ProcessCommand+0xb0>)
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f00a fc19 	bl	800b61c <strncmp>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d103      	bne.n	8000df8 <ProcessCommand+0x84>
		Command_Motors(_cmd);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fec7 	bl	8000b84 <Command_Motors>
}
 8000df6:	e006      	b.n	8000e06 <ProcessCommand+0x92>
	else HAL_UART_Transmit(&huart3, (uint8_t *)"\nUnknown command\r\n", 18, HAL_MAX_DELAY);
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	2212      	movs	r2, #18
 8000dfe:	490a      	ldr	r1, [pc, #40]	@ (8000e28 <ProcessCommand+0xb4>)
 8000e00:	480a      	ldr	r0, [pc, #40]	@ (8000e2c <ProcessCommand+0xb8>)
 8000e02:	f005 ff7b 	bl	8006cfc <HAL_UART_Transmit>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	0800b808 	.word	0x0800b808
 8000e14:	0800b810 	.word	0x0800b810
 8000e18:	0800b818 	.word	0x0800b818
 8000e1c:	0800b820 	.word	0x0800b820
 8000e20:	0800b828 	.word	0x0800b828
 8000e24:	0800b830 	.word	0x0800b830
 8000e28:	0800b834 	.word	0x0800b834
 8000e2c:	2000049c 	.word	0x2000049c

08000e30 <HAL_UART_RxCpltCallback>:
/**
 * @brief Obsługa przerwania odbioru UART.
 * @param _huart Uchwyt struktury UART.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* _huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

	if (_huart->Instance==USART2) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <HAL_UART_RxCpltCallback+0x5c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d120      	bne.n	8000e84 <HAL_UART_RxCpltCallback+0x54>
		HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	2201      	movs	r2, #1
 8000e48:	4911      	ldr	r1, [pc, #68]	@ (8000e90 <HAL_UART_RxCpltCallback+0x60>)
 8000e4a:	4812      	ldr	r0, [pc, #72]	@ (8000e94 <HAL_UART_RxCpltCallback+0x64>)
 8000e4c:	f005 ff56 	bl	8006cfc <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	490f      	ldr	r1, [pc, #60]	@ (8000e90 <HAL_UART_RxCpltCallback+0x60>)
 8000e54:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <HAL_UART_RxCpltCallback+0x68>)
 8000e56:	f005 ffda 	bl	8006e0e <HAL_UART_Receive_IT>
		rxBuff[rxIdx++] = rxData[0];
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <HAL_UART_RxCpltCallback+0x6c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	b2d1      	uxtb	r1, r2
 8000e62:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <HAL_UART_RxCpltCallback+0x6c>)
 8000e64:	7011      	strb	r1, [r2, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <HAL_UART_RxCpltCallback+0x60>)
 8000e6a:	7819      	ldrb	r1, [r3, #0]
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <HAL_UART_RxCpltCallback+0x70>)
 8000e6e:	5499      	strb	r1, [r3, r2]

		if (rxIdx == 4) {
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_UART_RxCpltCallback+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d105      	bne.n	8000e84 <HAL_UART_RxCpltCallback+0x54>
			ProcessCommand(&rxBuff);
 8000e78:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <HAL_UART_RxCpltCallback+0x70>)
 8000e7a:	f7ff ff7b 	bl	8000d74 <ProcessCommand>
			rxIdx = 0;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <HAL_UART_RxCpltCallback+0x6c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	2000007c 	.word	0x2000007c
 8000e94:	2000049c 	.word	0x2000049c
 8000e98:	20000414 	.word	0x20000414
 8000e9c:	200000c0 	.word	0x200000c0
 8000ea0:	20000080 	.word	0x20000080

08000ea4 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Obsługa przerwania przycisku GPIO.
 * @param GPIO_Pin Numer pinu, który wywołał przerwanie.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]

	static uint32_t lastPressTime = 0;

	if (GPIO_Pin == GPIO_PIN_13) {
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eb4:	d123      	bne.n	8000efe <HAL_GPIO_EXTI_Callback+0x5a>
		uint32_t currentTime = HAL_GetTick();
 8000eb6:	f001 fea9 	bl	8002c0c <HAL_GetTick>
 8000eba:	60f8      	str	r0, [r7, #12]

		if (currentTime - lastPressTime > 500) {  // 500 ms debounce
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ec8:	d919      	bls.n	8000efe <HAL_GPIO_EXTI_Callback+0x5a>
			indicationOverride = !indicationOverride;
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <HAL_GPIO_EXTI_Callback+0x68>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <HAL_GPIO_EXTI_Callback+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]

			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ede:	2101      	movs	r1, #1
 8000ee0:	480b      	ldr	r0, [pc, #44]	@ (8000f10 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ee2:	f002 fd2e 	bl	8003942 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ee6:	2180      	movs	r1, #128	@ 0x80
 8000ee8:	4809      	ldr	r0, [pc, #36]	@ (8000f10 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000eea:	f002 fd2a 	bl	8003942 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000eee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ef4:	f002 fd25 	bl	8003942 <HAL_GPIO_TogglePin>

			lastPressTime = currentTime;
 8000ef8:	4a03      	ldr	r2, [pc, #12]	@ (8000f08 <HAL_GPIO_EXTI_Callback+0x64>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000e0 	.word	0x200000e0
 8000f0c:	200000d8 	.word	0x200000d8
 8000f10:	40020400 	.word	0x40020400

08000f14 <Init_Motor>:
 * @param _axis Kanał timera sterującego osią.
 * @param _front Wskaźnik na timer przedniego silnika.
 * @param _back Wskaźnik na timer tylnego silnika.
 */
void Init_Motor(MOTOR* _motor, TIM_HandleTypeDef* _encoder, uint32_t _axis, TIM_HandleTypeDef* _front, TIM_HandleTypeDef* _back)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	603b      	str	r3, [r7, #0]
    _motor->encoder = _encoder;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	601a      	str	r2, [r3, #0]
    _motor->axisTimer = _axis;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	60da      	str	r2, [r3, #12]
    _motor->motorFront = _front;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	609a      	str	r2, [r3, #8]
    _motor->motorBack = _back;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	605a      	str	r2, [r3, #4]

    _motor->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000f40:	825a      	strh	r2, [r3, #18]

    _motor->pulse_count = 0;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
    _motor->measured_speed = 0;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
    _motor->set_speed = 0;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
    _motor->actual_PWM = 0;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <motor_calculate_speed>:
/**
 * @brief Oblicza prędkość silnika i aktualizuje wartość PWM.
 * @param _motor Wskaźnik na strukturę silnika.
 */
void motor_calculate_speed(MOTOR* _motor)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
    motor_update_count(_motor);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f8b8 	bl	80010e4 <motor_update_count>

    _motor->measured_speed = abs((_motor->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / _motor->resolution);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000f7c:	fb02 f303 	mul.w	r3, r2, r3
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	8a52      	ldrh	r2, [r2, #18]
 8000f84:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f88:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f8c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	619a      	str	r2, [r3, #24]

    int output = pid_calculate(&(_motor->pid_controller), _motor->set_speed, _motor->measured_speed);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69d9      	ldr	r1, [r3, #28]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f000 fb0d 	bl	80015c2 <pid_calculate>
 8000fa8:	60f8      	str	r0, [r7, #12]

    _motor->actual_PWM += output;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a1a      	ldr	r2, [r3, #32]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	621a      	str	r2, [r3, #32]

    if (_motor->actual_PWM >= 0)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db06      	blt.n	8000fcc <motor_calculate_speed+0x66>
        SetMotorSpeed(_motor, _motor->actual_PWM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f8be 	bl	8001148 <SetMotorSpeed>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <ResetMotor>:
/**
 * @brief Resetuje ustawienia silnika.
 * @param _motor Wskaźnik na strukturę silnika.
 */
void ResetMotor(MOTOR* _motor)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    _motor->set_speed = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
    _motor->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(_motor->encoder);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COUNTER(_motor->encoder, 0);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, 0);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <ResetMotor+0x3c>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34
 800100e:	e02c      	b.n	800106a <ResetMotor+0x96>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b04      	cmp	r3, #4
 8001016:	d105      	bne.n	8001024 <ResetMotor+0x50>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	2300      	movs	r3, #0
 8001020:	6393      	str	r3, [r2, #56]	@ 0x38
 8001022:	e022      	b.n	800106a <ResetMotor+0x96>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	2b08      	cmp	r3, #8
 800102a:	d105      	bne.n	8001038 <ResetMotor+0x64>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	2300      	movs	r3, #0
 8001034:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001036:	e018      	b.n	800106a <ResetMotor+0x96>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	2b0c      	cmp	r3, #12
 800103e:	d105      	bne.n	800104c <ResetMotor+0x78>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	e00e      	b.n	800106a <ResetMotor+0x96>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b10      	cmp	r3, #16
 8001052:	d105      	bne.n	8001060 <ResetMotor+0x8c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	6593      	str	r3, [r2, #88]	@ 0x58
 800105e:	e004      	b.n	800106a <ResetMotor+0x96>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	2300      	movs	r3, #0
 8001068:	65d3      	str	r3, [r2, #92]	@ 0x5c
    __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <ResetMotor+0xaa>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800107c:	e02c      	b.n	80010d8 <ResetMotor+0x104>
    __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b04      	cmp	r3, #4
 8001084:	d105      	bne.n	8001092 <ResetMotor+0xbe>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2300      	movs	r3, #0
 800108e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001090:	e022      	b.n	80010d8 <ResetMotor+0x104>
    __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d105      	bne.n	80010a6 <ResetMotor+0xd2>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80010a4:	e018      	b.n	80010d8 <ResetMotor+0x104>
    __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d105      	bne.n	80010ba <ResetMotor+0xe6>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2300      	movs	r3, #0
 80010b6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80010b8:	e00e      	b.n	80010d8 <ResetMotor+0x104>
    __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b10      	cmp	r3, #16
 80010c0:	d105      	bne.n	80010ce <ResetMotor+0xfa>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2300      	movs	r3, #0
 80010ca:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80010cc:	e004      	b.n	80010d8 <ResetMotor+0x104>
    __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2300      	movs	r3, #0
 80010d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <motor_update_count>:
/**
 * @brief Aktualizuje licznik impulsów enkodera.
 * @param _motor Wskaźnik na strukturę silnika.
 */
void motor_update_count(MOTOR* _motor)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    _motor->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(_motor->encoder);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COUNTER(_motor->encoder, 0);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <motor_set_speed>:
 * @param _motor Wskaźnik na strukturę silnika.
 * @param _direction Kierunek obrotów (FRONT/BACK/DEFAULT).
 * @param _set_speed Zadana prędkość obrotowa.
 */
void motor_set_speed(MOTOR* _motor, short _direction, int _set_speed)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	460b      	mov	r3, r1
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	817b      	strh	r3, [r7, #10]
    if (_set_speed != _motor->set_speed)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d004      	beq.n	8001134 <motor_set_speed+0x22>
        pid_reset(&(_motor->pid_controller));
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3324      	adds	r3, #36	@ 0x24
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fa37 	bl	80015a2 <pid_reset>

    _motor->set_speed = _set_speed;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	61da      	str	r2, [r3, #28]
    _motor->direction = _direction;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	897a      	ldrh	r2, [r7, #10]
 800113e:	821a      	strh	r2, [r3, #16]
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <SetMotorSpeed>:
 * @brief Ustawia prędkość silnika na podstawie kierunku obrotów.
 * @param _motor Wskaźnik na strukturę silnika.
 * @param _speed Żądana wartość PWM.
 */
void SetMotorSpeed(MOTOR* _motor, uint16_t _speed)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
    switch (_motor->direction) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800115a:	2b02      	cmp	r3, #2
 800115c:	f000 810b 	beq.w	8001376 <SetMotorSpeed+0x22e>
 8001160:	2b02      	cmp	r3, #2
 8001162:	f300 8183 	bgt.w	800146c <SetMotorSpeed+0x324>
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <SetMotorSpeed+0x2a>
 800116a:	2b01      	cmp	r3, #1
 800116c:	f000 8088 	beq.w	8001280 <SetMotorSpeed+0x138>
            _speed = _motor->motorBack->Instance->ARR;
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, _speed);
        __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
        break;
    }
}
 8001170:	e17c      	b.n	800146c <SetMotorSpeed+0x324>
        if (_speed >= _motor->motorFront->Instance->ARR)
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117c:	429a      	cmp	r2, r3
 800117e:	d304      	bcc.n	800118a <SetMotorSpeed+0x42>
            _speed = _motor->motorFront->Instance->ARR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001188:	807b      	strh	r3, [r7, #2]
        __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, _speed);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d105      	bne.n	800119e <SetMotorSpeed+0x56>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	887a      	ldrh	r2, [r7, #2]
 800119a:	635a      	str	r2, [r3, #52]	@ 0x34
 800119c:	e02c      	b.n	80011f8 <SetMotorSpeed+0xb0>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d105      	bne.n	80011b2 <SetMotorSpeed+0x6a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	6393      	str	r3, [r2, #56]	@ 0x38
 80011b0:	e022      	b.n	80011f8 <SetMotorSpeed+0xb0>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d105      	bne.n	80011c6 <SetMotorSpeed+0x7e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80011c4:	e018      	b.n	80011f8 <SetMotorSpeed+0xb0>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	d105      	bne.n	80011da <SetMotorSpeed+0x92>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d8:	e00e      	b.n	80011f8 <SetMotorSpeed+0xb0>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d105      	bne.n	80011ee <SetMotorSpeed+0xa6>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ec:	e004      	b.n	80011f8 <SetMotorSpeed+0xb0>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
        if (_speed >= _motor->motorBack->Instance->ARR)
 80011f8:	887a      	ldrh	r2, [r7, #2]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001202:	429a      	cmp	r2, r3
 8001204:	d304      	bcc.n	8001210 <SetMotorSpeed+0xc8>
            _speed = _motor->motorBack->Instance->ARR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120e:	807b      	strh	r3, [r7, #2]
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, _speed);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <SetMotorSpeed+0xdc>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8001222:	e123      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, _speed);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d105      	bne.n	8001238 <SetMotorSpeed+0xf0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	6393      	str	r3, [r2, #56]	@ 0x38
        break;
 8001236:	e119      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, _speed);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b08      	cmp	r3, #8
 800123e:	d105      	bne.n	800124c <SetMotorSpeed+0x104>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	63d3      	str	r3, [r2, #60]	@ 0x3c
        break;
 800124a:	e10f      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, _speed);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d105      	bne.n	8001260 <SetMotorSpeed+0x118>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
        break;
 800125e:	e105      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, _speed);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b10      	cmp	r3, #16
 8001266:	d105      	bne.n	8001274 <SetMotorSpeed+0x12c>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8001272:	e0fb      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, _speed);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	65d3      	str	r3, [r2, #92]	@ 0x5c
        break;
 800127e:	e0f5      	b.n	800146c <SetMotorSpeed+0x324>
        if (_speed >= _motor->motorFront->Instance->ARR)
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800128a:	429a      	cmp	r2, r3
 800128c:	d304      	bcc.n	8001298 <SetMotorSpeed+0x150>
            _speed = _motor->motorFront->Instance->ARR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001296:	807b      	strh	r3, [r7, #2]
        __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, _speed);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d105      	bne.n	80012ac <SetMotorSpeed+0x164>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012aa:	e02c      	b.n	8001306 <SetMotorSpeed+0x1be>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d105      	bne.n	80012c0 <SetMotorSpeed+0x178>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	6393      	str	r3, [r2, #56]	@ 0x38
 80012be:	e022      	b.n	8001306 <SetMotorSpeed+0x1be>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d105      	bne.n	80012d4 <SetMotorSpeed+0x18c>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80012d2:	e018      	b.n	8001306 <SetMotorSpeed+0x1be>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d105      	bne.n	80012e8 <SetMotorSpeed+0x1a0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	e00e      	b.n	8001306 <SetMotorSpeed+0x1be>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b10      	cmp	r3, #16
 80012ee:	d105      	bne.n	80012fc <SetMotorSpeed+0x1b4>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012fa:	e004      	b.n	8001306 <SetMotorSpeed+0x1be>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	65d3      	str	r3, [r2, #92]	@ 0x5c
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, 0);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <SetMotorSpeed+0x1d2>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8001318:	e0a8      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, 0);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b04      	cmp	r3, #4
 8001320:	d105      	bne.n	800132e <SetMotorSpeed+0x1e6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	6393      	str	r3, [r2, #56]	@ 0x38
        break;
 800132c:	e09e      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, 0);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b08      	cmp	r3, #8
 8001334:	d105      	bne.n	8001342 <SetMotorSpeed+0x1fa>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2300      	movs	r3, #0
 800133e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        break;
 8001340:	e094      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, 0);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d105      	bne.n	8001356 <SetMotorSpeed+0x20e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	6413      	str	r3, [r2, #64]	@ 0x40
        break;
 8001354:	e08a      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, 0);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b10      	cmp	r3, #16
 800135c:	d105      	bne.n	800136a <SetMotorSpeed+0x222>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8001368:	e080      	b.n	800146c <SetMotorSpeed+0x324>
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, 0);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	65d3      	str	r3, [r2, #92]	@ 0x5c
        break;
 8001374:	e07a      	b.n	800146c <SetMotorSpeed+0x324>
        if (_speed >= _motor->motorBack->Instance->ARR)
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001380:	429a      	cmp	r2, r3
 8001382:	d304      	bcc.n	800138e <SetMotorSpeed+0x246>
            _speed = _motor->motorBack->Instance->ARR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138c:	807b      	strh	r3, [r7, #2]
        __HAL_TIM_SetCompare(_motor->motorBack, _motor->axisTimer, _speed);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <SetMotorSpeed+0x25a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	635a      	str	r2, [r3, #52]	@ 0x34
 80013a0:	e02c      	b.n	80013fc <SetMotorSpeed+0x2b4>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d105      	bne.n	80013b6 <SetMotorSpeed+0x26e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	6393      	str	r3, [r2, #56]	@ 0x38
 80013b4:	e022      	b.n	80013fc <SetMotorSpeed+0x2b4>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d105      	bne.n	80013ca <SetMotorSpeed+0x282>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013c8:	e018      	b.n	80013fc <SetMotorSpeed+0x2b4>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d105      	bne.n	80013de <SetMotorSpeed+0x296>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	6413      	str	r3, [r2, #64]	@ 0x40
 80013dc:	e00e      	b.n	80013fc <SetMotorSpeed+0x2b4>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d105      	bne.n	80013f2 <SetMotorSpeed+0x2aa>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f0:	e004      	b.n	80013fc <SetMotorSpeed+0x2b4>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	65d3      	str	r3, [r2, #92]	@ 0x5c
        __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <SetMotorSpeed+0x2c8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800140e:	e02c      	b.n	800146a <SetMotorSpeed+0x322>
        __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b04      	cmp	r3, #4
 8001416:	d105      	bne.n	8001424 <SetMotorSpeed+0x2dc>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	6393      	str	r3, [r2, #56]	@ 0x38
        break;
 8001422:	e022      	b.n	800146a <SetMotorSpeed+0x322>
        __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b08      	cmp	r3, #8
 800142a:	d105      	bne.n	8001438 <SetMotorSpeed+0x2f0>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	63d3      	str	r3, [r2, #60]	@ 0x3c
        break;
 8001436:	e018      	b.n	800146a <SetMotorSpeed+0x322>
        __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d105      	bne.n	800144c <SetMotorSpeed+0x304>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	6413      	str	r3, [r2, #64]	@ 0x40
        break;
 800144a:	e00e      	b.n	800146a <SetMotorSpeed+0x322>
        __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b10      	cmp	r3, #16
 8001452:	d105      	bne.n	8001460 <SetMotorSpeed+0x318>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2300      	movs	r3, #0
 800145c:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 800145e:	e004      	b.n	800146a <SetMotorSpeed+0x322>
        __HAL_TIM_SetCompare(_motor->motorFront, _motor->axisTimer, 0);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	65d3      	str	r3, [r2, #92]	@ 0x5c
        break;
 800146a:	bf00      	nop
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <Init_MotorSystem>:

/**
 * @brief Inicjalizuje system sterowania silnikami.
 */
void Init_MotorSystem()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af02      	add	r7, sp, #8
    Init_Motor(&motorA, &htim8, TIM_CHANNEL_1, &htim2, &htim5);
 800147e:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <Init_MotorSystem+0x60>)
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <Init_MotorSystem+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	4916      	ldr	r1, [pc, #88]	@ (80014e0 <Init_MotorSystem+0x68>)
 8001488:	4816      	ldr	r0, [pc, #88]	@ (80014e4 <Init_MotorSystem+0x6c>)
 800148a:	f7ff fd43 	bl	8000f14 <Init_Motor>
    Init_Motor(&motorB, &htim3, TIM_CHANNEL_4, &htim2, &htim5);
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <Init_MotorSystem+0x60>)
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <Init_MotorSystem+0x64>)
 8001494:	220c      	movs	r2, #12
 8001496:	4914      	ldr	r1, [pc, #80]	@ (80014e8 <Init_MotorSystem+0x70>)
 8001498:	4814      	ldr	r0, [pc, #80]	@ (80014ec <Init_MotorSystem+0x74>)
 800149a:	f7ff fd3b 	bl	8000f14 <Init_Motor>

    pid_init(&(motorA.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 800149e:	2101      	movs	r1, #1
 80014a0:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 80014f0 <Init_MotorSystem+0x78>
 80014a4:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80014f0 <Init_MotorSystem+0x78>
 80014a8:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <Init_MotorSystem+0x7c>)
 80014ae:	f000 f855 	bl	800155c <pid_init>
    pid_init(&(motorB.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 80014b2:	2101      	movs	r1, #1
 80014b4:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80014f0 <Init_MotorSystem+0x78>
 80014b8:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80014f0 <Init_MotorSystem+0x78>
 80014bc:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80014c0:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <Init_MotorSystem+0x80>)
 80014c2:	f000 f84b 	bl	800155c <pid_init>

    ResetMotor(&motorA);
 80014c6:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <Init_MotorSystem+0x6c>)
 80014c8:	f7ff fd84 	bl	8000fd4 <ResetMotor>
    ResetMotor(&motorB);
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <Init_MotorSystem+0x74>)
 80014ce:	f7ff fd81 	bl	8000fd4 <ResetMotor>
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000298 	.word	0x20000298
 80014dc:	200001b4 	.word	0x200001b4
 80014e0:	20000330 	.word	0x20000330
 80014e4:	200000e4 	.word	0x200000e4
 80014e8:	20000200 	.word	0x20000200
 80014ec:	20000120 	.word	0x20000120
 80014f0:	3d4ccccd 	.word	0x3d4ccccd
 80014f4:	20000108 	.word	0x20000108
 80014f8:	20000144 	.word	0x20000144

080014fc <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Obsługuje przerwania timera.
 * @param _htim Wskaźnik na strukturę timera.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* _htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    if (_htim->Instance == TIM6) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a10      	ldr	r2, [pc, #64]	@ (800154c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d11a      	bne.n	8001544 <HAL_TIM_PeriodElapsedCallback+0x48>
        if (motorA.direction == BACK &&
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001510:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d10f      	bne.n	8001538 <HAL_TIM_PeriodElapsedCallback+0x3c>
            motorB.direction == BACK &&
 8001518:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800151a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
        if (motorA.direction == BACK &&
 800151e:	2b02      	cmp	r3, #2
 8001520:	d10a      	bne.n	8001538 <HAL_TIM_PeriodElapsedCallback+0x3c>
            Distance <= 10) {
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001524:	681b      	ldr	r3, [r3, #0]
            motorB.direction == BACK &&
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d806      	bhi.n	8001538 <HAL_TIM_PeriodElapsedCallback+0x3c>
            ResetMotor(&motorA);
 800152a:	4809      	ldr	r0, [pc, #36]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800152c:	f7ff fd52 	bl	8000fd4 <ResetMotor>
            ResetMotor(&motorB);
 8001530:	4808      	ldr	r0, [pc, #32]	@ (8001554 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001532:	f7ff fd4f 	bl	8000fd4 <ResetMotor>
            return;
 8001536:	e005      	b.n	8001544 <HAL_TIM_PeriodElapsedCallback+0x48>
        }

        motor_calculate_speed(&motorA);
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800153a:	f7ff fd14 	bl	8000f66 <motor_calculate_speed>
        motor_calculate_speed(&motorB);
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001540:	f7ff fd11 	bl	8000f66 <motor_calculate_speed>
    }
}
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40001000 	.word	0x40001000
 8001550:	200000e4 	.word	0x200000e4
 8001554:	20000120 	.word	0x20000120
 8001558:	200000d0 	.word	0x200000d0

0800155c <pid_init>:
 * @param _ki_init Wartość nastawy ki
 * @param _kd_init Wartość nastawy kd
 * @param _anti_windup_limit_init Wartość parametru AntiWindup
 */
void pid_init(PID* _pid_data, float _kp_init, float _ki_init, float _kd_init, int _anti_windup_limit_init)
{
 800155c:	b480      	push	{r7}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6178      	str	r0, [r7, #20]
 8001564:	ed87 0a04 	vstr	s0, [r7, #16]
 8001568:	edc7 0a03 	vstr	s1, [r7, #12]
 800156c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001570:	6079      	str	r1, [r7, #4]
	_pid_data->previous_error = 0;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
	_pid_data->total_error = 0;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]

	_pid_data->Kp = _kp_init;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	609a      	str	r2, [r3, #8]
	_pid_data->Ki = _ki_init;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	60da      	str	r2, [r3, #12]
	_pid_data->Kd = _kd_init;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	611a      	str	r2, [r3, #16]

	_pid_data->anti_windup_limit = _anti_windup_limit_init;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	615a      	str	r2, [r3, #20]
}
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <pid_reset>:
/**
 * @brief Resetowanie wartości błędu w regulatorze PID
 * @param pid_data Uchwyt struktury PID
 */
void pid_reset(PID *_pid_data)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
	_pid_data->total_error = 0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
	_pid_data->previous_error = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <pid_calculate>:
 * @param pid_data Uchwyt struktury PID
 * @param _setpoint Wartość zadana
 * @param _process_variable Wartość zmierzona
 */
int pid_calculate(PID *_pid_data, int _setpoint, int _process_variable)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b089      	sub	sp, #36	@ 0x24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = _setpoint - _process_variable;
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	61bb      	str	r3, [r7, #24]
	_pid_data->total_error += error;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	441a      	add	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	605a      	str	r2, [r3, #4]

	p_term = (float)(_pid_data->Kp * error);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f6:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(_pid_data->Ki * _pid_data->total_error);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(_pid_data->Kd * (error - _pid_data->previous_error));
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	ed93 7a04 	vldr	s14, [r3, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162e:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= _pid_data->anti_windup_limit) i_term = _pid_data->anti_windup_limit;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	db08      	blt.n	800165e <pid_calculate+0x9c>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001658:	edc7 7a07 	vstr	s15, [r7, #28]
 800165c:	e016      	b.n	800168c <pid_calculate+0xca>
	else if(i_term <= -_pid_data->anti_windup_limit) i_term = -_pid_data->anti_windup_limit;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	425b      	negs	r3, r3
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	d808      	bhi.n	800168c <pid_calculate+0xca>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	425b      	negs	r3, r3
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001688:	edc7 7a07 	vstr	s15, [r7, #28]

	_pid_data->previous_error = error;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8001692:	ed97 7a05 	vldr	s14, [r7, #20]
 8001696:	edd7 7a07 	vldr	s15, [r7, #28]
 800169a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800169e:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016aa:	ee17 3a90 	vmov	r3, s15
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	@ 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <HAL_MspInit+0x4c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <HAL_MspInit+0x4c>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <HAL_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	210f      	movs	r1, #15
 80016f6:	f06f 0001 	mvn.w	r0, #1
 80016fa:	f001 fb92 	bl	8002e22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001746:	f001 fa4d 	bl	8002be4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800174a:	f008 fe65 	bl	800a418 <xTaskGetSchedulerState>
 800174e:	4603      	mov	r3, r0
 8001750:	2b01      	cmp	r3, #1
 8001752:	d001      	beq.n	8001758 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001754:	f009 fc50 	bl	800aff8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <DMA1_Stream5_IRQHandler+0x10>)
 8001762:	f001 fcd5 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000524 	.word	0x20000524

08001770 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA1_Stream6_IRQHandler+0x10>)
 8001776:	f001 fccb 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000584 	.word	0x20000584

08001784 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800178a:	f004 f920 	bl	80059ce <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800178e:	4803      	ldr	r0, [pc, #12]	@ (800179c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001790:	f004 f91d 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000168 	.word	0x20000168
 800179c:	2000037c 	.word	0x2000037c

080017a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017a6:	f004 f912 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000168 	.word	0x20000168

080017b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80017ba:	f004 f908 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000168 	.word	0x20000168

080017c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <TIM1_CC_IRQHandler+0x10>)
 80017ce:	f004 f8fe 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000168 	.word	0x20000168

080017dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <TIM2_IRQHandler+0x10>)
 80017e2:	f004 f8f4 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200001b4 	.word	0x200001b4

080017f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <TIM3_IRQHandler+0x10>)
 80017f6:	f004 f8ea 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000200 	.word	0x20000200

08001804 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <TIM4_IRQHandler+0x10>)
 800180a:	f004 f8e0 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000024c 	.word	0x2000024c

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f005 fb3b 	bl	8006e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000414 	.word	0x20000414

0800182c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <USART3_IRQHandler+0x10>)
 8001832:	f005 fb31 	bl	8006e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000049c 	.word	0x2000049c

08001840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001844:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001848:	f002 f896 	bl	8003978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001854:	4803      	ldr	r0, [pc, #12]	@ (8001864 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8001856:	f004 f8ba 	bl	80059ce <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800185a:	4803      	ldr	r0, [pc, #12]	@ (8001868 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800185c:	f004 f8b7 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000330 	.word	0x20000330
 8001868:	200003c8 	.word	0x200003c8

0800186c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001872:	f004 f8ac 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000330 	.word	0x20000330

08001880 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001886:	f004 f8a2 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000330 	.word	0x20000330

08001894 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <TIM8_CC_IRQHandler+0x10>)
 800189a:	f004 f898 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000330 	.word	0x20000330

080018a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <TIM5_IRQHandler+0x10>)
 80018ae:	f004 f88e 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000298 	.word	0x20000298

080018bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <TIM6_DAC_IRQHandler+0x10>)
 80018c2:	f004 f884 	bl	80059ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002e4 	.word	0x200002e4

080018d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <SystemInit+0x20>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <SystemInit+0x20>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <StartMultiThreads>:
osThreadId_t distanceIndicatorHandle;

/**
 * @brief Funkcja inicjalizująca i uruchamiająca wątki RTOS.
 */
void StartMultiThreads() {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 80018f8:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <StartMultiThreads+0x38>)
 80018fa:	2100      	movs	r1, #0
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <StartMultiThreads+0x3c>)
 80018fe:	f007 f86b 	bl	80089d8 <osThreadNew>
 8001902:	4603      	mov	r3, r0
 8001904:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <StartMultiThreads+0x40>)
 8001906:	6013      	str	r3, [r2, #0]
	distanceSensorHandle = osThreadNew(DistanceSensor, NULL, &distanceSensor_attributes);
 8001908:	4a0b      	ldr	r2, [pc, #44]	@ (8001938 <StartMultiThreads+0x44>)
 800190a:	2100      	movs	r1, #0
 800190c:	480b      	ldr	r0, [pc, #44]	@ (800193c <StartMultiThreads+0x48>)
 800190e:	f007 f863 	bl	80089d8 <osThreadNew>
 8001912:	4603      	mov	r3, r0
 8001914:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <StartMultiThreads+0x4c>)
 8001916:	6013      	str	r3, [r2, #0]
	distanceIndicatorHandle = osThreadNew(DistanceIndicator, NULL, &distanceIndicator_attributes);
 8001918:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <StartMultiThreads+0x50>)
 800191a:	2100      	movs	r1, #0
 800191c:	480a      	ldr	r0, [pc, #40]	@ (8001948 <StartMultiThreads+0x54>)
 800191e:	f007 f85b 	bl	80089d8 <osThreadNew>
 8001922:	4603      	mov	r3, r0
 8001924:	4a09      	ldr	r2, [pc, #36]	@ (800194c <StartMultiThreads+0x58>)
 8001926:	6013      	str	r3, [r2, #0]
};
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	0800b8a8 	.word	0x0800b8a8
 8001930:	08001b11 	.word	0x08001b11
 8001934:	2000015c 	.word	0x2000015c
 8001938:	0800b8cc 	.word	0x0800b8cc
 800193c:	08001a11 	.word	0x08001a11
 8001940:	20000160 	.word	0x20000160
 8001944:	0800b8f0 	.word	0x0800b8f0
 8001948:	08001951 	.word	0x08001951
 800194c:	20000164 	.word	0x20000164

08001950 <DistanceIndicator>:
/**
 * @brief Wątek obsługujący wskaźnik odległości.
 * @details Steruje sygnalizacją świetlną oraz dźwiękową w zależności od zmierzonej odległości.
 * @param[in] argument Nie używane.
 */
void DistanceIndicator(void*) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

	while (1) {

		if (!indicationOverride)
 8001958:	4b29      	ldr	r3, [pc, #164]	@ (8001a00 <DistanceIndicator+0xb0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d04a      	beq.n	80019f6 <DistanceIndicator+0xa6>
			continue;

		if (hornOn)
 8001960:	4b28      	ldr	r3, [pc, #160]	@ (8001a04 <DistanceIndicator+0xb4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d148      	bne.n	80019fa <DistanceIndicator+0xaa>
			continue;

		if (Distance > 10 && Distance <= 30) {
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <DistanceIndicator+0xb8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b0a      	cmp	r3, #10
 800196e:	d91b      	bls.n	80019a8 <DistanceIndicator+0x58>
 8001970:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <DistanceIndicator+0xb8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b1e      	cmp	r3, #30
 8001976:	d817      	bhi.n	80019a8 <DistanceIndicator+0x58>
		    Set_PWM_Frequency(1000);
 8001978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800197c:	f7fe fffa 	bl	8000974 <Set_PWM_Frequency>
		    HAL_GPIO_TogglePin(DISTANCE_INDICATOR_GPIO_Port, DISTANCE_INDICATOR_Pin);
 8001980:	2101      	movs	r1, #1
 8001982:	4822      	ldr	r0, [pc, #136]	@ (8001a0c <DistanceIndicator+0xbc>)
 8001984:	f001 ffdd 	bl	8003942 <HAL_GPIO_TogglePin>
		    osDelay(500);
 8001988:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800198c:	f007 f8ca 	bl	8008b24 <osDelay>
		    Set_PWM_Frequency(0);
 8001990:	2000      	movs	r0, #0
 8001992:	f7fe ffef 	bl	8000974 <Set_PWM_Frequency>
		    HAL_GPIO_TogglePin(DISTANCE_INDICATOR_GPIO_Port, DISTANCE_INDICATOR_Pin);
 8001996:	2101      	movs	r1, #1
 8001998:	481c      	ldr	r0, [pc, #112]	@ (8001a0c <DistanceIndicator+0xbc>)
 800199a:	f001 ffd2 	bl	8003942 <HAL_GPIO_TogglePin>
		    osDelay(500);
 800199e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019a2:	f007 f8bf 	bl	8008b24 <osDelay>
 80019a6:	e029      	b.n	80019fc <DistanceIndicator+0xac>
		}

		else if (Distance > 0 && Distance <= 10) {
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <DistanceIndicator+0xb8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d019      	beq.n	80019e4 <DistanceIndicator+0x94>
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <DistanceIndicator+0xb8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	d815      	bhi.n	80019e4 <DistanceIndicator+0x94>
		    Set_PWM_Frequency(1000);
 80019b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019bc:	f7fe ffda 	bl	8000974 <Set_PWM_Frequency>
		    HAL_GPIO_TogglePin(DISTANCE_INDICATOR_GPIO_Port, DISTANCE_INDICATOR_Pin);
 80019c0:	2101      	movs	r1, #1
 80019c2:	4812      	ldr	r0, [pc, #72]	@ (8001a0c <DistanceIndicator+0xbc>)
 80019c4:	f001 ffbd 	bl	8003942 <HAL_GPIO_TogglePin>
		    osDelay(100);
 80019c8:	2064      	movs	r0, #100	@ 0x64
 80019ca:	f007 f8ab 	bl	8008b24 <osDelay>
		    Set_PWM_Frequency(0);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7fe ffd0 	bl	8000974 <Set_PWM_Frequency>
		    HAL_GPIO_TogglePin(DISTANCE_INDICATOR_GPIO_Port, DISTANCE_INDICATOR_Pin);
 80019d4:	2101      	movs	r1, #1
 80019d6:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <DistanceIndicator+0xbc>)
 80019d8:	f001 ffb3 	bl	8003942 <HAL_GPIO_TogglePin>
		    osDelay(100);
 80019dc:	2064      	movs	r0, #100	@ 0x64
 80019de:	f007 f8a1 	bl	8008b24 <osDelay>
 80019e2:	e00b      	b.n	80019fc <DistanceIndicator+0xac>
		}

		else {
		    HAL_GPIO_WritePin(DISTANCE_INDICATOR_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2101      	movs	r1, #1
 80019e8:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <DistanceIndicator+0xbc>)
 80019ea:	f001 ff91 	bl	8003910 <HAL_GPIO_WritePin>
		    Set_PWM_Frequency(0);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7fe ffc0 	bl	8000974 <Set_PWM_Frequency>
 80019f4:	e7b0      	b.n	8001958 <DistanceIndicator+0x8>
			continue;
 80019f6:	bf00      	nop
 80019f8:	e7ae      	b.n	8001958 <DistanceIndicator+0x8>
			continue;
 80019fa:	bf00      	nop
		if (!indicationOverride)
 80019fc:	e7ac      	b.n	8001958 <DistanceIndicator+0x8>
 80019fe:	bf00      	nop
 8001a00:	200000d8 	.word	0x200000d8
 8001a04:	200000d4 	.word	0x200000d4
 8001a08:	200000d0 	.word	0x200000d0
 8001a0c:	40021000 	.word	0x40021000

08001a10 <DistanceSensor>:
/**
 * @brief Wątek obsługujący czujnik odległości.
 * @details Odczytuje czas trwania impulsu echa i przelicza go na odległość.
 * @param[in] argument Nie używane.
 */
void DistanceSensor(void*) {
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Start(&htim9);
 8001a18:	4837      	ldr	r0, [pc, #220]	@ (8001af8 <DistanceSensor+0xe8>)
 8001a1a:	f003 fab3 	bl	8004f84 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2140      	movs	r1, #64	@ 0x40
 8001a22:	4836      	ldr	r0, [pc, #216]	@ (8001afc <DistanceSensor+0xec>)
 8001a24:	f001 ff74 	bl	8003910 <HAL_GPIO_WritePin>

    while (1) {

        HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2140      	movs	r1, #64	@ 0x40
 8001a2c:	4833      	ldr	r0, [pc, #204]	@ (8001afc <DistanceSensor+0xec>)
 8001a2e:	f001 ff6f 	bl	8003910 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COUNTER(&htim9, 0);
 8001a32:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <DistanceSensor+0xe8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
        while (__HAL_TIM_GET_COUNTER(&htim9) < 10);
 8001a3a:	bf00      	nop
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <DistanceSensor+0xe8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	2b09      	cmp	r3, #9
 8001a44:	d9fa      	bls.n	8001a3c <DistanceSensor+0x2c>
        HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2140      	movs	r1, #64	@ 0x40
 8001a4a:	482c      	ldr	r0, [pc, #176]	@ (8001afc <DistanceSensor+0xec>)
 8001a4c:	f001 ff60 	bl	8003910 <HAL_GPIO_WritePin>

        pMillis = HAL_GetTick();
 8001a50:	f001 f8dc 	bl	8002c0c <HAL_GetTick>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a2a      	ldr	r2, [pc, #168]	@ (8001b00 <DistanceSensor+0xf0>)
 8001a58:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DETECTOR_ECHO_GPIO_Port, DETECTOR_ECHO_Pin)) && pMillis + 10 > HAL_GetTick());
 8001a5a:	bf00      	nop
 8001a5c:	2120      	movs	r1, #32
 8001a5e:	4827      	ldr	r0, [pc, #156]	@ (8001afc <DistanceSensor+0xec>)
 8001a60:	f001 ff3e 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d108      	bne.n	8001a7c <DistanceSensor+0x6c>
 8001a6a:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <DistanceSensor+0xf0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f103 040a 	add.w	r4, r3, #10
 8001a72:	f001 f8cb 	bl	8002c0c <HAL_GetTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	429c      	cmp	r4, r3
 8001a7a:	d8ef      	bhi.n	8001a5c <DistanceSensor+0x4c>
        Value1 = __HAL_TIM_GET_COUNTER(&htim9);
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <DistanceSensor+0xe8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	4a20      	ldr	r2, [pc, #128]	@ (8001b04 <DistanceSensor+0xf4>)
 8001a84:	6013      	str	r3, [r2, #0]

        pMillis = HAL_GetTick();
 8001a86:	f001 f8c1 	bl	8002c0c <HAL_GetTick>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b00 <DistanceSensor+0xf0>)
 8001a8e:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DETECTOR_ECHO_GPIO_Port, DETECTOR_ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 8001a90:	bf00      	nop
 8001a92:	2120      	movs	r1, #32
 8001a94:	4819      	ldr	r0, [pc, #100]	@ (8001afc <DistanceSensor+0xec>)
 8001a96:	f001 ff23 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <DistanceSensor+0xa2>
 8001aa0:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <DistanceSensor+0xf0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8001aa8:	f001 f8b0 	bl	8002c0c <HAL_GetTick>
 8001aac:	4603      	mov	r3, r0
 8001aae:	429c      	cmp	r4, r3
 8001ab0:	d8ef      	bhi.n	8001a92 <DistanceSensor+0x82>
        Value2 = __HAL_TIM_GET_COUNTER(&htim9);
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <DistanceSensor+0xe8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab8:	4a13      	ldr	r2, [pc, #76]	@ (8001b08 <DistanceSensor+0xf8>)
 8001aba:	6013      	str	r3, [r2, #0]

        Distance = (Value2 - Value1) * 0.034 / 2;
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <DistanceSensor+0xf8>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <DistanceSensor+0xf4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ace:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001af0 <DistanceSensor+0xe0>
 8001ad2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ad6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001ada:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ade:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ae2:	ee17 2a90 	vmov	r2, s15
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <DistanceSensor+0xfc>)
 8001ae8:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_SET);
 8001aea:	e79d      	b.n	8001a28 <DistanceSensor+0x18>
 8001aec:	f3af 8000 	nop.w
 8001af0:	b020c49c 	.word	0xb020c49c
 8001af4:	3fa16872 	.word	0x3fa16872
 8001af8:	2000037c 	.word	0x2000037c
 8001afc:	40021000 	.word	0x40021000
 8001b00:	200000c4 	.word	0x200000c4
 8001b04:	200000c8 	.word	0x200000c8
 8001b08:	200000cc 	.word	0x200000cc
 8001b0c:	200000d0 	.word	0x200000d0

08001b10 <ProcessHeartBeat>:
/**
 * @brief Wątek wysyłający dane telemetryczne.
 * @details Wysyła prędkości silników i odległość przez UART co 100ms.
 * @param[in] argument Nie używane.
 */
void ProcessHeartBeat(void* argument) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    for (;;) {

    	if (!engineOn)
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <ProcessHeartBeat+0x54>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01f      	beq.n	8001b60 <ProcessHeartBeat+0x50>
    		continue;

    	int16_t data[5] = {motorA.measured_speed, motorB.measured_speed, motorA.set_speed, motorB.set_speed, Distance};
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <ProcessHeartBeat+0x58>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	81bb      	strh	r3, [r7, #12]
 8001b28:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <ProcessHeartBeat+0x5c>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	81fb      	strh	r3, [r7, #14]
 8001b30:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <ProcessHeartBeat+0x58>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	823b      	strh	r3, [r7, #16]
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <ProcessHeartBeat+0x5c>)
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	827b      	strh	r3, [r7, #18]
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <ProcessHeartBeat+0x60>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	82bb      	strh	r3, [r7, #20]
    	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), HAL_MAX_DELAY);
 8001b48:	f107 010c 	add.w	r1, r7, #12
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	220a      	movs	r2, #10
 8001b52:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <ProcessHeartBeat+0x64>)
 8001b54:	f005 f8d2 	bl	8006cfc <HAL_UART_Transmit>

        osDelay(100);
 8001b58:	2064      	movs	r0, #100	@ 0x64
 8001b5a:	f006 ffe3 	bl	8008b24 <osDelay>
 8001b5e:	e7db      	b.n	8001b18 <ProcessHeartBeat+0x8>
    		continue;
 8001b60:	bf00      	nop
    for (;;) {
 8001b62:	e7d9      	b.n	8001b18 <ProcessHeartBeat+0x8>
 8001b64:	200000dc 	.word	0x200000dc
 8001b68:	200000e4 	.word	0x200000e4
 8001b6c:	20000120 	.word	0x20000120
 8001b70:	200000d0 	.word	0x200000d0
 8001b74:	20000414 	.word	0x20000414

08001b78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	2224      	movs	r2, #36	@ 0x24
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f009 fd40 	bl	800b60c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b96:	4b23      	ldr	r3, [pc, #140]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001b98:	4a23      	ldr	r2, [pc, #140]	@ (8001c28 <MX_TIM1_Init+0xb0>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b9c:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001be2:	230f      	movs	r3, #15
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	480d      	ldr	r0, [pc, #52]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001bee:	f003 fd13 	bl	8005618 <HAL_TIM_Encoder_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001bf8:	f7fe feb6 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001c0e:	f004 ff7b 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c18:	f7fe fea6 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	3730      	adds	r7, #48	@ 0x30
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000168 	.word	0x20000168
 8001c28:	40010000 	.word	0x40010000

08001c2c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	@ 0x28
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
 8001c4c:	615a      	str	r2, [r3, #20]
 8001c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c50:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001c52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001c58:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001c5a:	222f      	movs	r2, #47	@ 0x2f
 8001c5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c64:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001c66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c78:	481d      	ldr	r0, [pc, #116]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001c7a:	f003 fa9a 	bl	80051b2 <HAL_TIM_PWM_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001c84:	f7fe fe70 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4816      	ldr	r0, [pc, #88]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001c98:	f004 ff36 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ca2:	f7fe fe61 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca6:	2360      	movs	r3, #96	@ 0x60
 8001ca8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001cbe:	f004 f829 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001cc8:	f7fe fe4e 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001cd4:	f004 f81e 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001cde:	f7fe fe43 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ce2:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <MX_TIM2_Init+0xc4>)
 8001ce4:	f000 fc5a 	bl	800259c <HAL_TIM_MspPostInit>

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	@ 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200001b4 	.word	0x200001b4

08001cf4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	@ 0x30
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2224      	movs	r2, #36	@ 0x24
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f009 fc82 	bl	800b60c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d12:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <MX_TIM3_Init+0xa4>)
 8001d14:	4a21      	ldr	r2, [pc, #132]	@ (8001d9c <MX_TIM3_Init+0xa8>)
 8001d16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d18:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <MX_TIM3_Init+0xa4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <MX_TIM3_Init+0xa4>)
 8001d20:	2210      	movs	r2, #16
 8001d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <MX_TIM3_Init+0xa4>)
 8001d26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <MX_TIM3_Init+0xa4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d32:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <MX_TIM3_Init+0xa4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d40:	2301      	movs	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001d48:	230f      	movs	r3, #15
 8001d4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d50:	2301      	movs	r3, #1
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	4619      	mov	r1, r3
 8001d62:	480d      	ldr	r0, [pc, #52]	@ (8001d98 <MX_TIM3_Init+0xa4>)
 8001d64:	f003 fc58 	bl	8005618 <HAL_TIM_Encoder_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001d6e:	f7fe fdfb 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4806      	ldr	r0, [pc, #24]	@ (8001d98 <MX_TIM3_Init+0xa4>)
 8001d80:	f004 fec2 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001d8a:	f7fe fded 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	3730      	adds	r7, #48	@ 0x30
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000200 	.word	0x20000200
 8001d9c:	40000400 	.word	0x40000400

08001da0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	@ 0x30
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	2224      	movs	r2, #36	@ 0x24
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f009 fc2c 	bl	800b60c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db4:	463b      	mov	r3, r7
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <MX_TIM4_Init+0xa4>)
 8001dc0:	4a21      	ldr	r2, [pc, #132]	@ (8001e48 <MX_TIM4_Init+0xa8>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <MX_TIM4_Init+0xa4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001dca:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <MX_TIM4_Init+0xa4>)
 8001dcc:	2210      	movs	r2, #16
 8001dce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <MX_TIM4_Init+0xa4>)
 8001dd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <MX_TIM4_Init+0xa4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <MX_TIM4_Init+0xa4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001de4:	2303      	movs	r3, #3
 8001de6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dec:	2301      	movs	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001df4:	230f      	movs	r3, #15
 8001df6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001e04:	230f      	movs	r3, #15
 8001e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <MX_TIM4_Init+0xa4>)
 8001e10:	f003 fc02 	bl	8005618 <HAL_TIM_Encoder_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e1a:	f7fe fda5 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e26:	463b      	mov	r3, r7
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	@ (8001e44 <MX_TIM4_Init+0xa4>)
 8001e2c:	f004 fe6c 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e36:	f7fe fd97 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3730      	adds	r7, #48	@ 0x30
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000024c 	.word	0x2000024c
 8001e48:	40000800 	.word	0x40000800

08001e4c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	615a      	str	r2, [r3, #20]
 8001e6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e70:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001e72:	4a28      	ldr	r2, [pc, #160]	@ (8001f14 <MX_TIM5_Init+0xc8>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001e76:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001e78:	222f      	movs	r2, #47	@ 0x2f
 8001e7a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001e82:	4b23      	ldr	r3, [pc, #140]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001e84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e88:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e96:	481e      	ldr	r0, [pc, #120]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001e98:	f003 f98b 	bl	80051b2 <HAL_TIM_PWM_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001ea2:	f7fe fd61 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4816      	ldr	r0, [pc, #88]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001eb6:	f004 fe27 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001ec0:	f7fe fd52 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec4:	2360      	movs	r3, #96	@ 0x60
 8001ec6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480d      	ldr	r0, [pc, #52]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001edc:	f003 ff1a 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001ee6:	f7fe fd3f 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eea:	463b      	mov	r3, r7
 8001eec:	220c      	movs	r2, #12
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4807      	ldr	r0, [pc, #28]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001ef2:	f003 ff0f 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001efc:	f7fe fd34 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f00:	4803      	ldr	r0, [pc, #12]	@ (8001f10 <MX_TIM5_Init+0xc4>)
 8001f02:	f000 fb4b 	bl	800259c <HAL_TIM_MspPostInit>

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	@ 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000298 	.word	0x20000298
 8001f14:	40000c00 	.word	0x40000c00

08001f18 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f28:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <MX_TIM6_Init+0x68>)
 8001f2a:	4a16      	ldr	r2, [pc, #88]	@ (8001f84 <MX_TIM6_Init+0x6c>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <MX_TIM6_Init+0x68>)
 8001f30:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001f34:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f36:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <MX_TIM6_Init+0x68>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <MX_TIM6_Init+0x68>)
 8001f3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <MX_TIM6_Init+0x68>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f4a:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <MX_TIM6_Init+0x68>)
 8001f4c:	f002 ffc2 	bl	8004ed4 <HAL_TIM_Base_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001f56:	f7fe fd07 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4806      	ldr	r0, [pc, #24]	@ (8001f80 <MX_TIM6_Init+0x68>)
 8001f68:	f004 fdce 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001f72:	f7fe fcf9 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200002e4 	.word	0x200002e4
 8001f84:	40001000 	.word	0x40001000

08001f88 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	@ 0x30
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2224      	movs	r2, #36	@ 0x24
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f009 fb38 	bl	800b60c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fa6:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <MX_TIM8_Init+0xac>)
 8001fa8:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <MX_TIM8_Init+0xb0>)
 8001faa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <MX_TIM8_Init+0xac>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <MX_TIM8_Init+0xac>)
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <MX_TIM8_Init+0xac>)
 8001fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fbe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <MX_TIM8_Init+0xac>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <MX_TIM8_Init+0xac>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <MX_TIM8_Init+0xac>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fea:	2301      	movs	r3, #1
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001ff2:	230f      	movs	r3, #15
 8001ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	480d      	ldr	r0, [pc, #52]	@ (8002034 <MX_TIM8_Init+0xac>)
 8001ffe:	f003 fb0b 	bl	8005618 <HAL_TIM_Encoder_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002008:	f7fe fcae 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002018:	463b      	mov	r3, r7
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MX_TIM8_Init+0xac>)
 800201e:	f004 fd73 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002028:	f7fe fc9e 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	3730      	adds	r7, #48	@ 0x30
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000330 	.word	0x20000330
 8002038:	40010400 	.word	0x40010400

0800203c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002050:	463b      	mov	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800205c:	4b23      	ldr	r3, [pc, #140]	@ (80020ec <MX_TIM9_Init+0xb0>)
 800205e:	4a24      	ldr	r2, [pc, #144]	@ (80020f0 <MX_TIM9_Init+0xb4>)
 8002060:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 95;
 8002062:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <MX_TIM9_Init+0xb0>)
 8002064:	225f      	movs	r2, #95	@ 0x5f
 8002066:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b20      	ldr	r3, [pc, #128]	@ (80020ec <MX_TIM9_Init+0xb0>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800206e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <MX_TIM9_Init+0xb0>)
 8002070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002074:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002076:	4b1d      	ldr	r3, [pc, #116]	@ (80020ec <MX_TIM9_Init+0xb0>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <MX_TIM9_Init+0xb0>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002082:	481a      	ldr	r0, [pc, #104]	@ (80020ec <MX_TIM9_Init+0xb0>)
 8002084:	f002 ff26 	bl	8004ed4 <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 800208e:	f7fe fc6b 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002096:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	4813      	ldr	r0, [pc, #76]	@ (80020ec <MX_TIM9_Init+0xb0>)
 80020a0:	f003 ff4c 	bl	8005f3c <HAL_TIM_ConfigClockSource>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 80020aa:	f7fe fc5d 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80020ae:	480f      	ldr	r0, [pc, #60]	@ (80020ec <MX_TIM9_Init+0xb0>)
 80020b0:	f003 fa50 	bl	8005554 <HAL_TIM_IC_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 80020ba:	f7fe fc55 	bl	8000968 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020c2:	2301      	movs	r3, #1
 80020c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020ce:	463b      	mov	r3, r7
 80020d0:	2200      	movs	r2, #0
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	@ (80020ec <MX_TIM9_Init+0xb0>)
 80020d6:	f003 fd81 	bl	8005bdc <HAL_TIM_IC_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 80020e0:	f7fe fc42 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000037c 	.word	0x2000037c
 80020f0:	40014000 	.word	0x40014000

080020f4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
 8002108:	615a      	str	r2, [r3, #20]
 800210a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800210c:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <MX_TIM12_Init+0x84>)
 800210e:	4a1b      	ldr	r2, [pc, #108]	@ (800217c <MX_TIM12_Init+0x88>)
 8002110:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <MX_TIM12_Init+0x84>)
 8002114:	225f      	movs	r2, #95	@ 0x5f
 8002116:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <MX_TIM12_Init+0x84>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 800211e:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <MX_TIM12_Init+0x84>)
 8002120:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002124:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <MX_TIM12_Init+0x84>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <MX_TIM12_Init+0x84>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002132:	4811      	ldr	r0, [pc, #68]	@ (8002178 <MX_TIM12_Init+0x84>)
 8002134:	f003 f83d 	bl	80051b2 <HAL_TIM_PWM_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800213e:	f7fe fc13 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002142:	2360      	movs	r3, #96	@ 0x60
 8002144:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2204      	movs	r2, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4807      	ldr	r0, [pc, #28]	@ (8002178 <MX_TIM12_Init+0x84>)
 800215a:	f003 fddb 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002164:	f7fe fc00 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002168:	4803      	ldr	r0, [pc, #12]	@ (8002178 <MX_TIM12_Init+0x84>)
 800216a:	f000 fa17 	bl	800259c <HAL_TIM_MspPostInit>

}
 800216e:	bf00      	nop
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200003c8 	.word	0x200003c8
 800217c:	40001800 	.word	0x40001800

08002180 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b090      	sub	sp, #64	@ 0x40
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a93      	ldr	r2, [pc, #588]	@ (80023ec <HAL_TIM_Encoder_MspInit+0x26c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d149      	bne.n	8002236 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021a2:	4b93      	ldr	r3, [pc, #588]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	4a92      	ldr	r2, [pc, #584]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ae:	4b90      	ldr	r3, [pc, #576]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ba:	4b8d      	ldr	r3, [pc, #564]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	4a8c      	ldr	r2, [pc, #560]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80021c0:	f043 0310 	orr.w	r3, r3, #16
 80021c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c6:	4b8a      	ldr	r3, [pc, #552]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 80021d2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80021d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021e4:	2301      	movs	r3, #1
 80021e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ec:	4619      	mov	r1, r3
 80021ee:	4881      	ldr	r0, [pc, #516]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x274>)
 80021f0:	f001 f9ca 	bl	8003588 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2105      	movs	r1, #5
 80021f8:	2018      	movs	r0, #24
 80021fa:	f000 fe12 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80021fe:	2018      	movs	r0, #24
 8002200:	f000 fe2b 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2105      	movs	r1, #5
 8002208:	2019      	movs	r0, #25
 800220a:	f000 fe0a 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800220e:	2019      	movs	r0, #25
 8002210:	f000 fe23 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2105      	movs	r1, #5
 8002218:	201a      	movs	r0, #26
 800221a:	f000 fe02 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800221e:	201a      	movs	r0, #26
 8002220:	f000 fe1b 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2105      	movs	r1, #5
 8002228:	201b      	movs	r0, #27
 800222a:	f000 fdfa 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800222e:	201b      	movs	r0, #27
 8002230:	f000 fe13 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002234:	e0d5      	b.n	80023e2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6f      	ldr	r2, [pc, #444]	@ (80023f8 <HAL_TIM_Encoder_MspInit+0x278>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d14c      	bne.n	80022da <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002240:	4b6b      	ldr	r3, [pc, #428]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	4a6a      	ldr	r2, [pc, #424]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	6413      	str	r3, [r2, #64]	@ 0x40
 800224c:	4b68      	ldr	r3, [pc, #416]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	623b      	str	r3, [r7, #32]
 8002256:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002258:	4b65      	ldr	r3, [pc, #404]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	4a64      	ldr	r2, [pc, #400]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6313      	str	r3, [r2, #48]	@ 0x30
 8002264:	4b62      	ldr	r3, [pc, #392]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002270:	4b5f      	ldr	r3, [pc, #380]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	4a5e      	ldr	r2, [pc, #376]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	6313      	str	r3, [r2, #48]	@ 0x30
 800227c:	4b5c      	ldr	r3, [pc, #368]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8002288:	2340      	movs	r3, #64	@ 0x40
 800228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002298:	2302      	movs	r3, #2
 800229a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022a0:	4619      	mov	r1, r3
 80022a2:	4856      	ldr	r0, [pc, #344]	@ (80023fc <HAL_TIM_Encoder_MspInit+0x27c>)
 80022a4:	f001 f970 	bl	8003588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 80022a8:	2320      	movs	r3, #32
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b8:	2302      	movs	r3, #2
 80022ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022c0:	4619      	mov	r1, r3
 80022c2:	484f      	ldr	r0, [pc, #316]	@ (8002400 <HAL_TIM_Encoder_MspInit+0x280>)
 80022c4:	f001 f960 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2105      	movs	r1, #5
 80022cc:	201d      	movs	r0, #29
 80022ce:	f000 fda8 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022d2:	201d      	movs	r0, #29
 80022d4:	f000 fdc1 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 80022d8:	e083      	b.n	80023e2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a49      	ldr	r2, [pc, #292]	@ (8002404 <HAL_TIM_Encoder_MspInit+0x284>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d131      	bne.n	8002348 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022e4:	4b42      	ldr	r3, [pc, #264]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	4a41      	ldr	r2, [pc, #260]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f0:	4b3f      	ldr	r3, [pc, #252]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fc:	4b3c      	ldr	r3, [pc, #240]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002300:	4a3b      	ldr	r2, [pc, #236]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	6313      	str	r3, [r2, #48]	@ 0x30
 8002308:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8002314:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002326:	2302      	movs	r3, #2
 8002328:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	4835      	ldr	r0, [pc, #212]	@ (8002408 <HAL_TIM_Encoder_MspInit+0x288>)
 8002332:	f001 f929 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2105      	movs	r1, #5
 800233a:	201e      	movs	r0, #30
 800233c:	f000 fd71 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002340:	201e      	movs	r0, #30
 8002342:	f000 fd8a 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 8002346:	e04c      	b.n	80023e2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a2f      	ldr	r2, [pc, #188]	@ (800240c <HAL_TIM_Encoder_MspInit+0x28c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d147      	bne.n	80023e2 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002352:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	4a26      	ldr	r2, [pc, #152]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6453      	str	r3, [r2, #68]	@ 0x44
 800235e:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a20      	ldr	r2, [pc, #128]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8002382:	23c0      	movs	r3, #192	@ 0xc0
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002392:	2303      	movs	r3, #3
 8002394:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002396:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800239a:	4619      	mov	r1, r3
 800239c:	481c      	ldr	r0, [pc, #112]	@ (8002410 <HAL_TIM_Encoder_MspInit+0x290>)
 800239e:	f001 f8f3 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2105      	movs	r1, #5
 80023a6:	202b      	movs	r0, #43	@ 0x2b
 80023a8:	f000 fd3b 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80023ac:	202b      	movs	r0, #43	@ 0x2b
 80023ae:	f000 fd54 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2105      	movs	r1, #5
 80023b6:	202c      	movs	r0, #44	@ 0x2c
 80023b8:	f000 fd33 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80023bc:	202c      	movs	r0, #44	@ 0x2c
 80023be:	f000 fd4c 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2105      	movs	r1, #5
 80023c6:	202d      	movs	r0, #45	@ 0x2d
 80023c8:	f000 fd2b 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80023cc:	202d      	movs	r0, #45	@ 0x2d
 80023ce:	f000 fd44 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2105      	movs	r1, #5
 80023d6:	202e      	movs	r0, #46	@ 0x2e
 80023d8:	f000 fd23 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80023dc:	202e      	movs	r0, #46	@ 0x2e
 80023de:	f000 fd3c 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3740      	adds	r7, #64	@ 0x40
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40020000 	.word	0x40020000
 8002400:	40020400 	.word	0x40020400
 8002404:	40000800 	.word	0x40000800
 8002408:	40020c00 	.word	0x40020c00
 800240c:	40010400 	.word	0x40010400
 8002410:	40020800 	.word	0x40020800

08002414 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002424:	d114      	bne.n	8002450 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002426:	4b26      	ldr	r3, [pc, #152]	@ (80024c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	4a25      	ldr	r2, [pc, #148]	@ (80024c0 <HAL_TIM_PWM_MspInit+0xac>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6413      	str	r3, [r2, #64]	@ 0x40
 8002432:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2105      	movs	r1, #5
 8002442:	201c      	movs	r0, #28
 8002444:	f000 fced 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002448:	201c      	movs	r0, #28
 800244a:	f000 fd06 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800244e:	e032      	b.n	80024b6 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1b      	ldr	r2, [pc, #108]	@ (80024c4 <HAL_TIM_PWM_MspInit+0xb0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d114      	bne.n	8002484 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800245a:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_TIM_PWM_MspInit+0xac>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	4a18      	ldr	r2, [pc, #96]	@ (80024c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	6413      	str	r3, [r2, #64]	@ 0x40
 8002466:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2105      	movs	r1, #5
 8002476:	2032      	movs	r0, #50	@ 0x32
 8002478:	f000 fcd3 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800247c:	2032      	movs	r0, #50	@ 0x32
 800247e:	f000 fcec 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 8002482:	e018      	b.n	80024b6 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0f      	ldr	r2, [pc, #60]	@ (80024c8 <HAL_TIM_PWM_MspInit+0xb4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d113      	bne.n	80024b6 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800248e:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	4a0b      	ldr	r2, [pc, #44]	@ (80024c0 <HAL_TIM_PWM_MspInit+0xac>)
 8002494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002498:	6413      	str	r3, [r2, #64]	@ 0x40
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <HAL_TIM_PWM_MspInit+0xac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2105      	movs	r1, #5
 80024aa:	202b      	movs	r0, #43	@ 0x2b
 80024ac:	f000 fcb9 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80024b0:	202b      	movs	r0, #43	@ 0x2b
 80024b2:	f000 fcd2 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40000c00 	.word	0x40000c00
 80024c8:	40001800 	.word	0x40001800

080024cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM6)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a28      	ldr	r2, [pc, #160]	@ (800258c <HAL_TIM_Base_MspInit+0xc0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d114      	bne.n	8002518 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024ee:	4b28      	ldr	r3, [pc, #160]	@ (8002590 <HAL_TIM_Base_MspInit+0xc4>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	4a27      	ldr	r2, [pc, #156]	@ (8002590 <HAL_TIM_Base_MspInit+0xc4>)
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fa:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <HAL_TIM_Base_MspInit+0xc4>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2105      	movs	r1, #5
 800250a:	2036      	movs	r0, #54	@ 0x36
 800250c:	f000 fc89 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002510:	2036      	movs	r0, #54	@ 0x36
 8002512:	f000 fca2 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002516:	e034      	b.n	8002582 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM9)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1d      	ldr	r2, [pc, #116]	@ (8002594 <HAL_TIM_Base_MspInit+0xc8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d12f      	bne.n	8002582 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002522:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <HAL_TIM_Base_MspInit+0xc4>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	4a1a      	ldr	r2, [pc, #104]	@ (8002590 <HAL_TIM_Base_MspInit+0xc4>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6453      	str	r3, [r2, #68]	@ 0x44
 800252e:	4b18      	ldr	r3, [pc, #96]	@ (8002590 <HAL_TIM_Base_MspInit+0xc4>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800253a:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <HAL_TIM_Base_MspInit+0xc4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a14      	ldr	r2, [pc, #80]	@ (8002590 <HAL_TIM_Base_MspInit+0xc4>)
 8002540:	f043 0310 	orr.w	r3, r3, #16
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_TIM_Base_MspInit+0xc4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DETECTOR_ECHO_Pin;
 8002552:	2320      	movs	r3, #32
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002562:	2303      	movs	r3, #3
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DETECTOR_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	480a      	ldr	r0, [pc, #40]	@ (8002598 <HAL_TIM_Base_MspInit+0xcc>)
 800256e:	f001 f80b 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	2105      	movs	r1, #5
 8002576:	2018      	movs	r0, #24
 8002578:	f000 fc53 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800257c:	2018      	movs	r0, #24
 800257e:	f000 fc6c 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3728      	adds	r7, #40	@ 0x28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40001000 	.word	0x40001000
 8002590:	40023800 	.word	0x40023800
 8002594:	40014000 	.word	0x40014000
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	@ 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025bc:	d139      	bne.n	8002632 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b41      	ldr	r3, [pc, #260]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4a40      	ldr	r2, [pc, #256]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4b3e      	ldr	r3, [pc, #248]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	4a3a      	ldr	r2, [pc, #232]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e2:	4b38      	ldr	r3, [pc, #224]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 80025ee:	2320      	movs	r3, #32
 80025f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025fe:	2301      	movs	r3, #1
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8002602:	f107 031c 	add.w	r3, r7, #28
 8002606:	4619      	mov	r1, r3
 8002608:	482f      	ldr	r0, [pc, #188]	@ (80026c8 <HAL_TIM_MspPostInit+0x12c>)
 800260a:	f000 ffbd 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 800260e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002620:	2301      	movs	r3, #1
 8002622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4619      	mov	r1, r3
 800262a:	4828      	ldr	r0, [pc, #160]	@ (80026cc <HAL_TIM_MspPostInit+0x130>)
 800262c:	f000 ffac 	bl	8003588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002630:	e043      	b.n	80026ba <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a26      	ldr	r2, [pc, #152]	@ (80026d0 <HAL_TIM_MspPostInit+0x134>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d11c      	bne.n	8002676 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263c:	4b21      	ldr	r3, [pc, #132]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	4a20      	ldr	r2, [pc, #128]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6313      	str	r3, [r2, #48]	@ 0x30
 8002648:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8002654:	2309      	movs	r3, #9
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002664:	2302      	movs	r3, #2
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002668:	f107 031c 	add.w	r3, r7, #28
 800266c:	4619      	mov	r1, r3
 800266e:	4816      	ldr	r0, [pc, #88]	@ (80026c8 <HAL_TIM_MspPostInit+0x12c>)
 8002670:	f000 ff8a 	bl	8003588 <HAL_GPIO_Init>
}
 8002674:	e021      	b.n	80026ba <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a16      	ldr	r2, [pc, #88]	@ (80026d4 <HAL_TIM_MspPostInit+0x138>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d11c      	bne.n	80026ba <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002680:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	4a0f      	ldr	r2, [pc, #60]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	6313      	str	r3, [r2, #48]	@ 0x30
 800268c:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_TIM_MspPostInit+0x128>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002698:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80026aa:	2309      	movs	r3, #9
 80026ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 031c 	add.w	r3, r7, #28
 80026b2:	4619      	mov	r1, r3
 80026b4:	4805      	ldr	r0, [pc, #20]	@ (80026cc <HAL_TIM_MspPostInit+0x130>)
 80026b6:	f000 ff67 	bl	8003588 <HAL_GPIO_Init>
}
 80026ba:	bf00      	nop
 80026bc:	3730      	adds	r7, #48	@ 0x30
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40000c00 	.word	0x40000c00
 80026d4:	40001800 	.word	0x40001800

080026d8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026dc:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 80026de:	4a15      	ldr	r2, [pc, #84]	@ (8002734 <MX_USART2_UART_Init+0x5c>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80026e2:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 80026e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80026e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270e:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800271a:	4805      	ldr	r0, [pc, #20]	@ (8002730 <MX_USART2_UART_Init+0x58>)
 800271c:	f004 faa0 	bl	8006c60 <HAL_UART_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002726:	f7fe f91f 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000414 	.word	0x20000414
 8002734:	40004400 	.word	0x40004400

08002738 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800273c:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 800273e:	4a15      	ldr	r2, [pc, #84]	@ (8002794 <MX_USART3_UART_Init+0x5c>)
 8002740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002742:	4b13      	ldr	r3, [pc, #76]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800277a:	4805      	ldr	r0, [pc, #20]	@ (8002790 <MX_USART3_UART_Init+0x58>)
 800277c:	f004 fa70 	bl	8006c60 <HAL_UART_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002786:	f7fe f8ef 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000049c 	.word	0x2000049c
 8002794:	40004800 	.word	0x40004800

08002798 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0b0      	sub	sp, #192	@ 0xc0
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	2290      	movs	r2, #144	@ 0x90
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f008 ff27 	bl	800b60c <memset>
  if(uartHandle->Instance==USART2)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a79      	ldr	r2, [pc, #484]	@ (80029a8 <HAL_UART_MspInit+0x210>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	f040 80a0 	bne.w	800290a <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027ce:	2300      	movs	r3, #0
 80027d0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d2:	f107 031c 	add.w	r3, r7, #28
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 ff54 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027e2:	f7fe f8c1 	bl	8000968 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027e6:	4b71      	ldr	r3, [pc, #452]	@ (80029ac <HAL_UART_MspInit+0x214>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	4a70      	ldr	r2, [pc, #448]	@ (80029ac <HAL_UART_MspInit+0x214>)
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f2:	4b6e      	ldr	r3, [pc, #440]	@ (80029ac <HAL_UART_MspInit+0x214>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027fe:	4b6b      	ldr	r3, [pc, #428]	@ (80029ac <HAL_UART_MspInit+0x214>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4a6a      	ldr	r2, [pc, #424]	@ (80029ac <HAL_UART_MspInit+0x214>)
 8002804:	f043 0308 	orr.w	r3, r3, #8
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4b68      	ldr	r3, [pc, #416]	@ (80029ac <HAL_UART_MspInit+0x214>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002816:	2360      	movs	r3, #96	@ 0x60
 8002818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800282e:	2307      	movs	r3, #7
 8002830:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002834:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002838:	4619      	mov	r1, r3
 800283a:	485d      	ldr	r0, [pc, #372]	@ (80029b0 <HAL_UART_MspInit+0x218>)
 800283c:	f000 fea4 	bl	8003588 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002840:	4b5c      	ldr	r3, [pc, #368]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002842:	4a5d      	ldr	r2, [pc, #372]	@ (80029b8 <HAL_UART_MspInit+0x220>)
 8002844:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002846:	4b5b      	ldr	r3, [pc, #364]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002848:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800284c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800284e:	4b59      	ldr	r3, [pc, #356]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002854:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800285a:	4b56      	ldr	r3, [pc, #344]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 800285c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002860:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002862:	4b54      	ldr	r3, [pc, #336]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002868:	4b52      	ldr	r3, [pc, #328]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800286e:	4b51      	ldr	r3, [pc, #324]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002870:	2200      	movs	r2, #0
 8002872:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002874:	4b4f      	ldr	r3, [pc, #316]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287a:	4b4e      	ldr	r3, [pc, #312]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 800287c:	2200      	movs	r2, #0
 800287e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002880:	484c      	ldr	r0, [pc, #304]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002882:	f000 fb05 	bl	8002e90 <HAL_DMA_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800288c:	f7fe f86c 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a48      	ldr	r2, [pc, #288]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002894:	675a      	str	r2, [r3, #116]	@ 0x74
 8002896:	4a47      	ldr	r2, [pc, #284]	@ (80029b4 <HAL_UART_MspInit+0x21c>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800289c:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <HAL_UART_MspInit+0x224>)
 800289e:	4a48      	ldr	r2, [pc, #288]	@ (80029c0 <HAL_UART_MspInit+0x228>)
 80028a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80028a2:	4b46      	ldr	r3, [pc, #280]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028aa:	4b44      	ldr	r3, [pc, #272]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028ac:	2240      	movs	r2, #64	@ 0x40
 80028ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b0:	4b42      	ldr	r3, [pc, #264]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028b6:	4b41      	ldr	r3, [pc, #260]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028be:	4b3f      	ldr	r3, [pc, #252]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c4:	4b3d      	ldr	r3, [pc, #244]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028ca:	4b3c      	ldr	r3, [pc, #240]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028d0:	4b3a      	ldr	r3, [pc, #232]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d6:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028d8:	2200      	movs	r2, #0
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028dc:	4837      	ldr	r0, [pc, #220]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028de:	f000 fad7 	bl	8002e90 <HAL_DMA_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 80028e8:	f7fe f83e 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a33      	ldr	r2, [pc, #204]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80028f2:	4a32      	ldr	r2, [pc, #200]	@ (80029bc <HAL_UART_MspInit+0x224>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2105      	movs	r1, #5
 80028fc:	2026      	movs	r0, #38	@ 0x26
 80028fe:	f000 fa90 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002902:	2026      	movs	r0, #38	@ 0x26
 8002904:	f000 faa9 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002908:	e049      	b.n	800299e <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2d      	ldr	r2, [pc, #180]	@ (80029c4 <HAL_UART_MspInit+0x22c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d144      	bne.n	800299e <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002914:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002918:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800291a:	2300      	movs	r3, #0
 800291c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	4618      	mov	r0, r3
 8002924:	f001 feae 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 800292e:	f7fe f81b 	bl	8000968 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002932:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <HAL_UART_MspInit+0x214>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a1d      	ldr	r2, [pc, #116]	@ (80029ac <HAL_UART_MspInit+0x214>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_UART_MspInit+0x214>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800294a:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <HAL_UART_MspInit+0x214>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a17      	ldr	r2, [pc, #92]	@ (80029ac <HAL_UART_MspInit+0x214>)
 8002950:	f043 0308 	orr.w	r3, r3, #8
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_UART_MspInit+0x214>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002962:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002976:	2303      	movs	r3, #3
 8002978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800297c:	2307      	movs	r3, #7
 800297e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002982:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002986:	4619      	mov	r1, r3
 8002988:	4809      	ldr	r0, [pc, #36]	@ (80029b0 <HAL_UART_MspInit+0x218>)
 800298a:	f000 fdfd 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2105      	movs	r1, #5
 8002992:	2027      	movs	r0, #39	@ 0x27
 8002994:	f000 fa45 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002998:	2027      	movs	r0, #39	@ 0x27
 800299a:	f000 fa5e 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 800299e:	bf00      	nop
 80029a0:	37c0      	adds	r7, #192	@ 0xc0
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40004400 	.word	0x40004400
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	20000524 	.word	0x20000524
 80029b8:	40026088 	.word	0x40026088
 80029bc:	20000584 	.word	0x20000584
 80029c0:	400260a0 	.word	0x400260a0
 80029c4:	40004800 	.word	0x40004800

080029c8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80029cc:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80029d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80029d4:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029d6:	2206      	movs	r2, #6
 80029d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80029da:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029dc:	2202      	movs	r2, #2
 80029de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029e8:	2202      	movs	r2, #2
 80029ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80029f8:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80029fe:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a0a:	4805      	ldr	r0, [pc, #20]	@ (8002a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a0c:	f000 ffcc 	bl	80039a8 <HAL_PCD_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002a16:	f7fd ffa7 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200005e4 	.word	0x200005e4

08002a24 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0ae      	sub	sp, #184	@ 0xb8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2290      	movs	r2, #144	@ 0x90
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f008 fde1 	bl	800b60c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a52:	d159      	bne.n	8002b08 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002a54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 fe0d 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002a70:	f7fd ff7a 	bl	8000968 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a74:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_PCD_MspInit+0xec>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	4a25      	ldr	r2, [pc, #148]	@ (8002b10 <HAL_PCD_MspInit+0xec>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a80:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_PCD_MspInit+0xec>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002a8c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002a90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002aa6:	230a      	movs	r3, #10
 8002aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4818      	ldr	r0, [pc, #96]	@ (8002b14 <HAL_PCD_MspInit+0xf0>)
 8002ab4:	f000 fd68 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002ab8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002abc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002acc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4810      	ldr	r0, [pc, #64]	@ (8002b14 <HAL_PCD_MspInit+0xf0>)
 8002ad4:	f000 fd58 	bl	8003588 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <HAL_PCD_MspInit+0xec>)
 8002ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002adc:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <HAL_PCD_MspInit+0xec>)
 8002ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ae2:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_PCD_MspInit+0xec>)
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <HAL_PCD_MspInit+0xec>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af4:	4a06      	ldr	r2, [pc, #24]	@ (8002b10 <HAL_PCD_MspInit+0xec>)
 8002af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002afa:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afc:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <HAL_PCD_MspInit+0xec>)
 8002afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002b08:	bf00      	nop
 8002b0a:	37b8      	adds	r7, #184	@ 0xb8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020000 	.word	0x40020000

08002b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b1c:	f7fe fed8 	bl	80018d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b20:	480c      	ldr	r0, [pc, #48]	@ (8002b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b22:	490d      	ldr	r1, [pc, #52]	@ (8002b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b24:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b28:	e002      	b.n	8002b30 <LoopCopyDataInit>

08002b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2e:	3304      	adds	r3, #4

08002b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b34:	d3f9      	bcc.n	8002b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b36:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b38:	4c0a      	ldr	r4, [pc, #40]	@ (8002b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b3c:	e001      	b.n	8002b42 <LoopFillZerobss>

08002b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b40:	3204      	adds	r2, #4

08002b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b44:	d3fb      	bcc.n	8002b3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b46:	f008 fd81 	bl	800b64c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b4a:	f7fd fe53 	bl	80007f4 <main>
  bx  lr    
 8002b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b58:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002b5c:	0800ba30 	.word	0x0800ba30
  ldr r2, =_sbss
 8002b60:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002b64:	20005548 	.word	0x20005548

08002b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b68:	e7fe      	b.n	8002b68 <ADC_IRQHandler>

08002b6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6e:	2003      	movs	r0, #3
 8002b70:	f000 f94c 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b74:	200f      	movs	r0, #15
 8002b76:	f000 f805 	bl	8002b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b7a:	f7fe fd9f 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b8c:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_InitTick+0x54>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_InitTick+0x58>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f967 	bl	8002e76 <HAL_SYSTICK_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00e      	b.n	8002bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d80a      	bhi.n	8002bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f000 f92f 	bl	8002e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc4:	4a06      	ldr	r2, [pc, #24]	@ (8002be0 <HAL_InitTick+0x5c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_IncTick+0x20>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_IncTick+0x24>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <HAL_IncTick+0x24>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000008 	.word	0x20000008
 8002c08:	20000ac4 	.word	0x20000ac4

08002c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <HAL_GetTick+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000ac4 	.word	0x20000ac4

08002c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7ff ffee 	bl	8002c0c <HAL_GetTick>
 8002c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d005      	beq.n	8002c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_Delay+0x44>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c4a:	bf00      	nop
 8002c4c:	f7ff ffde 	bl	8002c0c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d8f7      	bhi.n	8002c4c <HAL_Delay+0x28>
  {
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000008 	.word	0x20000008

08002c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <__NVIC_SetPriorityGrouping+0x40>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <__NVIC_SetPriorityGrouping+0x40>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00
 8002cb0:	05fa0000 	.word	0x05fa0000

08002cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <__NVIC_GetPriorityGrouping+0x18>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0307 	and.w	r3, r3, #7
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	db0b      	blt.n	8002cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	4907      	ldr	r1, [pc, #28]	@ (8002d08 <__NVIC_EnableIRQ+0x38>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	@ (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	@ (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	@ 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	@ 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd8:	d301      	bcc.n	8002dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00f      	b.n	8002dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dde:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <SysTick_Config+0x40>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de6:	210f      	movs	r1, #15
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f7ff ff8e 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <SysTick_Config+0x40>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df6:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <SysTick_Config+0x40>)
 8002df8:	2207      	movs	r2, #7
 8002dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000e010 	.word	0xe000e010

08002e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff29 	bl	8002c6c <__NVIC_SetPriorityGrouping>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e34:	f7ff ff3e 	bl	8002cb4 <__NVIC_GetPriorityGrouping>
 8002e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	6978      	ldr	r0, [r7, #20]
 8002e40:	f7ff ff8e 	bl	8002d60 <NVIC_EncodePriority>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff5d 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff31 	bl	8002cd0 <__NVIC_EnableIRQ>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ffa2 	bl	8002dc8 <SysTick_Config>
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff feb6 	bl	8002c0c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e099      	b.n	8002fe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ecc:	e00f      	b.n	8002eee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ece:	f7ff fe9d 	bl	8002c0c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d908      	bls.n	8002eee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e078      	b.n	8002fe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e8      	bne.n	8002ece <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4b38      	ldr	r3, [pc, #224]	@ (8002fe8 <HAL_DMA_Init+0x158>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d107      	bne.n	8002f58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	4313      	orrs	r3, r2
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0307 	bic.w	r3, r3, #7
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d117      	bne.n	8002fb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fa7b 	bl	8003490 <DMA_CheckFifoParam>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2240      	movs	r2, #64	@ 0x40
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e016      	b.n	8002fe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa32 	bl	8003424 <DMA_CalcBaseAndBitshift>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc8:	223f      	movs	r2, #63	@ 0x3f
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	e010803f 	.word	0xe010803f

08002fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ffa:	f7ff fe07 	bl	8002c0c <HAL_GetTick>
 8002ffe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d008      	beq.n	800301e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2280      	movs	r2, #128	@ 0x80
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e052      	b.n	80030c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0216 	bic.w	r2, r2, #22
 800302c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800303c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <HAL_DMA_Abort+0x62>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0208 	bic.w	r2, r2, #8
 800305c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306e:	e013      	b.n	8003098 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003070:	f7ff fdcc 	bl	8002c0c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b05      	cmp	r3, #5
 800307c:	d90c      	bls.n	8003098 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2203      	movs	r2, #3
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e015      	b.n	80030c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e4      	bne.n	8003070 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	223f      	movs	r2, #63	@ 0x3f
 80030ac:	409a      	lsls	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d004      	beq.n	80030ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00c      	b.n	8003104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2205      	movs	r2, #5
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800311c:	4b8e      	ldr	r3, [pc, #568]	@ (8003358 <HAL_DMA_IRQHandler+0x248>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a8e      	ldr	r2, [pc, #568]	@ (800335c <HAL_DMA_IRQHandler+0x24c>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0a9b      	lsrs	r3, r3, #10
 8003128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	2208      	movs	r2, #8
 800313c:	409a      	lsls	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01a      	beq.n	800317c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0204 	bic.w	r2, r2, #4
 8003162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003168:	2208      	movs	r2, #8
 800316a:	409a      	lsls	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319e:	2201      	movs	r2, #1
 80031a0:	409a      	lsls	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031aa:	f043 0202 	orr.w	r2, r3, #2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b6:	2204      	movs	r2, #4
 80031b8:	409a      	lsls	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d4:	2204      	movs	r2, #4
 80031d6:	409a      	lsls	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	f043 0204 	orr.w	r2, r3, #4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	2210      	movs	r2, #16
 80031ee:	409a      	lsls	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d043      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d03c      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	2210      	movs	r2, #16
 800320c:	409a      	lsls	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d018      	beq.n	8003252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d024      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
 800323e:	e01f      	b.n	8003280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01b      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	e016      	b.n	8003280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0208 	bic.w	r2, r2, #8
 800326e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	2220      	movs	r2, #32
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 808f 	beq.w	80033b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8087 	beq.w	80033b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	2220      	movs	r2, #32
 80032a8:	409a      	lsls	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d136      	bne.n	8003328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0216 	bic.w	r2, r2, #22
 80032c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_DMA_IRQHandler+0x1da>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0208 	bic.w	r2, r2, #8
 80032f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fe:	223f      	movs	r2, #63	@ 0x3f
 8003300:	409a      	lsls	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331a:	2b00      	cmp	r3, #0
 800331c:	d07e      	beq.n	800341c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
        }
        return;
 8003326:	e079      	b.n	800341c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01d      	beq.n	8003372 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10d      	bne.n	8003360 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003348:	2b00      	cmp	r3, #0
 800334a:	d031      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
 8003354:	e02c      	b.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
 8003356:	bf00      	nop
 8003358:	20000000 	.word	0x20000000
 800335c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d023      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e01e      	b.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10f      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0210 	bic.w	r2, r2, #16
 800338e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d032      	beq.n	800341e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d022      	beq.n	800340a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2205      	movs	r2, #5
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	3301      	adds	r3, #1
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d307      	bcc.n	80033f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f2      	bne.n	80033dc <HAL_DMA_IRQHandler+0x2cc>
 80033f6:	e000      	b.n	80033fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
 800341a:	e000      	b.n	800341e <HAL_DMA_IRQHandler+0x30e>
        return;
 800341c:	bf00      	nop
    }
  }
}
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	3b10      	subs	r3, #16
 8003434:	4a13      	ldr	r2, [pc, #76]	@ (8003484 <DMA_CalcBaseAndBitshift+0x60>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800343e:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <DMA_CalcBaseAndBitshift+0x64>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d908      	bls.n	8003464 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <DMA_CalcBaseAndBitshift+0x68>)
 800345a:	4013      	ands	r3, r2
 800345c:	1d1a      	adds	r2, r3, #4
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	659a      	str	r2, [r3, #88]	@ 0x58
 8003462:	e006      	b.n	8003472 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	4b08      	ldr	r3, [pc, #32]	@ (800348c <DMA_CalcBaseAndBitshift+0x68>)
 800346c:	4013      	ands	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	aaaaaaab 	.word	0xaaaaaaab
 8003488:	0800b914 	.word	0x0800b914
 800348c:	fffffc00 	.word	0xfffffc00

08003490 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11f      	bne.n	80034ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d856      	bhi.n	800355e <DMA_CheckFifoParam+0xce>
 80034b0:	a201      	add	r2, pc, #4	@ (adr r2, 80034b8 <DMA_CheckFifoParam+0x28>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	080034db 	.word	0x080034db
 80034c0:	080034c9 	.word	0x080034c9
 80034c4:	0800355f 	.word	0x0800355f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d046      	beq.n	8003562 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d8:	e043      	b.n	8003562 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034e2:	d140      	bne.n	8003566 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e8:	e03d      	b.n	8003566 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f2:	d121      	bne.n	8003538 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d837      	bhi.n	800356a <DMA_CheckFifoParam+0xda>
 80034fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <DMA_CheckFifoParam+0x70>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003511 	.word	0x08003511
 8003504:	08003517 	.word	0x08003517
 8003508:	08003511 	.word	0x08003511
 800350c:	08003529 	.word	0x08003529
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      break;
 8003514:	e030      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d025      	beq.n	800356e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003526:	e022      	b.n	800356e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003530:	d11f      	bne.n	8003572 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003536:	e01c      	b.n	8003572 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d903      	bls.n	8003546 <DMA_CheckFifoParam+0xb6>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d003      	beq.n	800354c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003544:	e018      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      break;
 800354a:	e015      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      break;
 800355c:	e00b      	b.n	8003576 <DMA_CheckFifoParam+0xe6>
      break;
 800355e:	bf00      	nop
 8003560:	e00a      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 8003562:	bf00      	nop
 8003564:	e008      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 8003566:	bf00      	nop
 8003568:	e006      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 800356a:	bf00      	nop
 800356c:	e004      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;   
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 8003576:	bf00      	nop
    }
  } 
  
  return status; 
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop

08003588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	@ 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e175      	b.n	8003894 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	f040 8164 	bne.w	800388e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d005      	beq.n	80035de <HAL_GPIO_Init+0x56>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d130      	bne.n	8003640 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	2203      	movs	r2, #3
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003614:	2201      	movs	r2, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0201 	and.w	r2, r3, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b03      	cmp	r3, #3
 800364a:	d017      	beq.n	800367c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d123      	bne.n	80036d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	08da      	lsrs	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3208      	adds	r2, #8
 8003690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	220f      	movs	r2, #15
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	08da      	lsrs	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3208      	adds	r2, #8
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80be 	beq.w	800388e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003712:	4b66      	ldr	r3, [pc, #408]	@ (80038ac <HAL_GPIO_Init+0x324>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	4a65      	ldr	r2, [pc, #404]	@ (80038ac <HAL_GPIO_Init+0x324>)
 8003718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800371c:	6453      	str	r3, [r2, #68]	@ 0x44
 800371e:	4b63      	ldr	r3, [pc, #396]	@ (80038ac <HAL_GPIO_Init+0x324>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800372a:	4a61      	ldr	r2, [pc, #388]	@ (80038b0 <HAL_GPIO_Init+0x328>)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	3302      	adds	r3, #2
 8003732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	220f      	movs	r2, #15
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a58      	ldr	r2, [pc, #352]	@ (80038b4 <HAL_GPIO_Init+0x32c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d037      	beq.n	80037c6 <HAL_GPIO_Init+0x23e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a57      	ldr	r2, [pc, #348]	@ (80038b8 <HAL_GPIO_Init+0x330>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d031      	beq.n	80037c2 <HAL_GPIO_Init+0x23a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a56      	ldr	r2, [pc, #344]	@ (80038bc <HAL_GPIO_Init+0x334>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d02b      	beq.n	80037be <HAL_GPIO_Init+0x236>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a55      	ldr	r2, [pc, #340]	@ (80038c0 <HAL_GPIO_Init+0x338>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d025      	beq.n	80037ba <HAL_GPIO_Init+0x232>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a54      	ldr	r2, [pc, #336]	@ (80038c4 <HAL_GPIO_Init+0x33c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01f      	beq.n	80037b6 <HAL_GPIO_Init+0x22e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a53      	ldr	r2, [pc, #332]	@ (80038c8 <HAL_GPIO_Init+0x340>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d019      	beq.n	80037b2 <HAL_GPIO_Init+0x22a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a52      	ldr	r2, [pc, #328]	@ (80038cc <HAL_GPIO_Init+0x344>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_GPIO_Init+0x226>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a51      	ldr	r2, [pc, #324]	@ (80038d0 <HAL_GPIO_Init+0x348>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00d      	beq.n	80037aa <HAL_GPIO_Init+0x222>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a50      	ldr	r2, [pc, #320]	@ (80038d4 <HAL_GPIO_Init+0x34c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <HAL_GPIO_Init+0x21e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4f      	ldr	r2, [pc, #316]	@ (80038d8 <HAL_GPIO_Init+0x350>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_GPIO_Init+0x21a>
 800379e:	2309      	movs	r3, #9
 80037a0:	e012      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037a2:	230a      	movs	r3, #10
 80037a4:	e010      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037a6:	2308      	movs	r3, #8
 80037a8:	e00e      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037aa:	2307      	movs	r3, #7
 80037ac:	e00c      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037ae:	2306      	movs	r3, #6
 80037b0:	e00a      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037b2:	2305      	movs	r3, #5
 80037b4:	e008      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037b6:	2304      	movs	r3, #4
 80037b8:	e006      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037ba:	2303      	movs	r3, #3
 80037bc:	e004      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037be:	2302      	movs	r3, #2
 80037c0:	e002      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_GPIO_Init+0x240>
 80037c6:	2300      	movs	r3, #0
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	f002 0203 	and.w	r2, r2, #3
 80037ce:	0092      	lsls	r2, r2, #2
 80037d0:	4093      	lsls	r3, r2
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037d8:	4935      	ldr	r1, [pc, #212]	@ (80038b0 <HAL_GPIO_Init+0x328>)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	3302      	adds	r3, #2
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037e6:	4b3d      	ldr	r3, [pc, #244]	@ (80038dc <HAL_GPIO_Init+0x354>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800380a:	4a34      	ldr	r2, [pc, #208]	@ (80038dc <HAL_GPIO_Init+0x354>)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003810:	4b32      	ldr	r3, [pc, #200]	@ (80038dc <HAL_GPIO_Init+0x354>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003834:	4a29      	ldr	r2, [pc, #164]	@ (80038dc <HAL_GPIO_Init+0x354>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800383a:	4b28      	ldr	r3, [pc, #160]	@ (80038dc <HAL_GPIO_Init+0x354>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800385e:	4a1f      	ldr	r2, [pc, #124]	@ (80038dc <HAL_GPIO_Init+0x354>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003864:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <HAL_GPIO_Init+0x354>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003888:	4a14      	ldr	r2, [pc, #80]	@ (80038dc <HAL_GPIO_Init+0x354>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3301      	adds	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b0f      	cmp	r3, #15
 8003898:	f67f ae86 	bls.w	80035a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3724      	adds	r7, #36	@ 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40013800 	.word	0x40013800
 80038b4:	40020000 	.word	0x40020000
 80038b8:	40020400 	.word	0x40020400
 80038bc:	40020800 	.word	0x40020800
 80038c0:	40020c00 	.word	0x40020c00
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40021400 	.word	0x40021400
 80038cc:	40021800 	.word	0x40021800
 80038d0:	40021c00 	.word	0x40021c00
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40022400 	.word	0x40022400
 80038dc:	40013c00 	.word	0x40013c00

080038e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e001      	b.n	8003902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800392c:	e003      	b.n	8003936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	041a      	lsls	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	619a      	str	r2, [r3, #24]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003954:	887a      	ldrh	r2, [r7, #2]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4013      	ands	r3, r2
 800395a:	041a      	lsls	r2, r3, #16
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	43d9      	mvns	r1, r3
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	400b      	ands	r3, r1
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	619a      	str	r2, [r3, #24]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003982:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800398e:	4a05      	ldr	r2, [pc, #20]	@ (80039a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fa84 	bl	8000ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40013c00 	.word	0x40013c00

080039a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e108      	b.n	8003bcc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff f825 	bl	8002a24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2203      	movs	r2, #3
 80039de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e8:	d102      	bne.n	80039f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f004 fce9 	bl	80083cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7c1a      	ldrb	r2, [r3, #16]
 8003a02:	f88d 2000 	strb.w	r2, [sp]
 8003a06:	3304      	adds	r3, #4
 8003a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a0a:	f004 fc85 	bl	8008318 <USB_CoreInit>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0d5      	b.n	8003bcc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 fce1 	bl	80083ee <USB_SetCurrentMode>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0c6      	b.n	8003bcc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e04a      	b.n	8003ada <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	3315      	adds	r3, #21
 8003a54:	2201      	movs	r2, #1
 8003a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3314      	adds	r3, #20
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	b298      	uxth	r0, r3
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	332e      	adds	r3, #46	@ 0x2e
 8003a80:	4602      	mov	r2, r0
 8003a82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3318      	adds	r3, #24
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a98:	7bfa      	ldrb	r2, [r7, #15]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	331c      	adds	r3, #28
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3320      	adds	r3, #32
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3324      	adds	r3, #36	@ 0x24
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	791b      	ldrb	r3, [r3, #4]
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d3af      	bcc.n	8003a44 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e044      	b.n	8003b74 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aea:	7bfa      	ldrb	r2, [r7, #15]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	3301      	adds	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	791b      	ldrb	r3, [r3, #4]
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3b5      	bcc.n	8003aea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7c1a      	ldrb	r2, [r3, #16]
 8003b86:	f88d 2000 	strb.w	r2, [sp]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b8e:	f004 fc7b 	bl	8008488 <USB_DevInit>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e013      	b.n	8003bcc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7b1b      	ldrb	r3, [r3, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f80a 	bl	8003bd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f004 fe36 	bl	8008836 <USB_DevDisconnect>

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c02:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_PCDEx_ActivateLPM+0x44>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	10000003 	.word	0x10000003

08003c1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a04      	ldr	r2, [pc, #16]	@ (8003c38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40007000 	.word	0x40007000

08003c3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	4b23      	ldr	r3, [pc, #140]	@ (8003cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	4a22      	ldr	r2, [pc, #136]	@ (8003cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c52:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c6a:	f7fe ffcf 	bl	8002c0c <HAL_GetTick>
 8003c6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c70:	e009      	b.n	8003c86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c72:	f7fe ffcb 	bl	8002c0c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c80:	d901      	bls.n	8003c86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e022      	b.n	8003ccc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c86:	4b14      	ldr	r3, [pc, #80]	@ (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c92:	d1ee      	bne.n	8003c72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c94:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca0:	f7fe ffb4 	bl	8002c0c <HAL_GetTick>
 8003ca4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ca6:	e009      	b.n	8003cbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ca8:	f7fe ffb0 	bl	8002c0c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cb6:	d901      	bls.n	8003cbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e007      	b.n	8003ccc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cc8:	d1ee      	bne.n	8003ca8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e29b      	b.n	800422a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8087 	beq.w	8003e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d00:	4b96      	ldr	r3, [pc, #600]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 030c 	and.w	r3, r3, #12
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d00c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0c:	4b93      	ldr	r3, [pc, #588]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d112      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62>
 8003d18:	4b90      	ldr	r3, [pc, #576]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d24:	d10b      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d26:	4b8d      	ldr	r3, [pc, #564]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x130>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d168      	bne.n	8003e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e275      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x7a>
 8003d48:	4b84      	ldr	r3, [pc, #528]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a83      	ldr	r2, [pc, #524]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e02e      	b.n	8003db4 <HAL_RCC_OscConfig+0xd8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x9c>
 8003d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a7e      	ldr	r2, [pc, #504]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7b      	ldr	r2, [pc, #492]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e01d      	b.n	8003db4 <HAL_RCC_OscConfig+0xd8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0xc0>
 8003d82:	4b76      	ldr	r3, [pc, #472]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a75      	ldr	r2, [pc, #468]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b73      	ldr	r3, [pc, #460]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a72      	ldr	r2, [pc, #456]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0xd8>
 8003d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6b      	ldr	r2, [pc, #428]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe ff26 	bl	8002c0c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe ff22 	bl	8002c0c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	@ 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e229      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b61      	ldr	r3, [pc, #388]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe ff12 	bl	8002c0c <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe ff0e 	bl	8002c0c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	@ 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e215      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	4b57      	ldr	r3, [pc, #348]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x110>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d069      	beq.n	8003eee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e1a:	4b50      	ldr	r3, [pc, #320]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e26:	4b4d      	ldr	r3, [pc, #308]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d11c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x190>
 8003e32:	4b4a      	ldr	r3, [pc, #296]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d116      	bne.n	8003e6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3e:	4b47      	ldr	r3, [pc, #284]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_RCC_OscConfig+0x17a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e1e9      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e56:	4b41      	ldr	r3, [pc, #260]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	493d      	ldr	r1, [pc, #244]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	e040      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d023      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e74:	4b39      	ldr	r3, [pc, #228]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a38      	ldr	r2, [pc, #224]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fec4 	bl	8002c0c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fe fec0 	bl	8002c0c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e1c7      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b30      	ldr	r3, [pc, #192]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4929      	ldr	r1, [pc, #164]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	e018      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebc:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a26      	ldr	r2, [pc, #152]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fea0 	bl	8002c0c <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7fe fe9c 	bl	8002c0c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1a3      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d038      	beq.n	8003f6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d019      	beq.n	8003f36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f02:	4b16      	ldr	r3, [pc, #88]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f06:	4a15      	ldr	r2, [pc, #84]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fe fe7d 	bl	8002c0c <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fe fe79 	bl	8002c0c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e180      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x23a>
 8003f34:	e01a      	b.n	8003f6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f36:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f3a:	4a08      	ldr	r2, [pc, #32]	@ (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fe fe63 	bl	8002c0c <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7fe fe5f 	bl	8002c0c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d903      	bls.n	8003f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e166      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
 8003f5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	4b92      	ldr	r3, [pc, #584]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a4 	beq.w	80040c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4b8c      	ldr	r3, [pc, #560]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	4b89      	ldr	r3, [pc, #548]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	4a88      	ldr	r2, [pc, #544]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f92:	4b86      	ldr	r3, [pc, #536]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa2:	4b83      	ldr	r3, [pc, #524]	@ (80041b0 <HAL_RCC_OscConfig+0x4d4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d118      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fae:	4b80      	ldr	r3, [pc, #512]	@ (80041b0 <HAL_RCC_OscConfig+0x4d4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7f      	ldr	r2, [pc, #508]	@ (80041b0 <HAL_RCC_OscConfig+0x4d4>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fe fe27 	bl	8002c0c <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7fe fe23 	bl	8002c0c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b64      	cmp	r3, #100	@ 0x64
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e12a      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd4:	4b76      	ldr	r3, [pc, #472]	@ (80041b0 <HAL_RCC_OscConfig+0x4d4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x31a>
 8003fe8:	4b70      	ldr	r3, [pc, #448]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fec:	4a6f      	ldr	r2, [pc, #444]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff4:	e02d      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x33c>
 8003ffe:	4b6b      	ldr	r3, [pc, #428]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	4a6a      	ldr	r2, [pc, #424]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
 800400a:	4b68      	ldr	r3, [pc, #416]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	4a67      	ldr	r2, [pc, #412]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004010:	f023 0304 	bic.w	r3, r3, #4
 8004014:	6713      	str	r3, [r2, #112]	@ 0x70
 8004016:	e01c      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b05      	cmp	r3, #5
 800401e:	d10c      	bne.n	800403a <HAL_RCC_OscConfig+0x35e>
 8004020:	4b62      	ldr	r3, [pc, #392]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004024:	4a61      	ldr	r2, [pc, #388]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	6713      	str	r3, [r2, #112]	@ 0x70
 800402c:	4b5f      	ldr	r3, [pc, #380]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	4a5e      	ldr	r2, [pc, #376]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	@ 0x70
 8004038:	e00b      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
 800403a:	4b5c      	ldr	r3, [pc, #368]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	4a5b      	ldr	r2, [pc, #364]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	6713      	str	r3, [r2, #112]	@ 0x70
 8004046:	4b59      	ldr	r3, [pc, #356]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404a:	4a58      	ldr	r2, [pc, #352]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d015      	beq.n	8004086 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fe fdd7 	bl	8002c0c <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fe fdd3 	bl	8002c0c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0d8      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	4b4c      	ldr	r3, [pc, #304]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0ee      	beq.n	8004062 <HAL_RCC_OscConfig+0x386>
 8004084:	e014      	b.n	80040b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fe fdc1 	bl	8002c0c <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fe fdbd 	bl	8002c0c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0c2      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a4:	4b41      	ldr	r3, [pc, #260]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ee      	bne.n	800408e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	4a3c      	ldr	r2, [pc, #240]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80ae 	beq.w	8004228 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040cc:	4b37      	ldr	r3, [pc, #220]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d06d      	beq.n	80041b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d14b      	bne.n	8004178 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b32      	ldr	r3, [pc, #200]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a31      	ldr	r2, [pc, #196]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fe fd8e 	bl	8002c0c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fe fd8a 	bl	8002c0c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e091      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	4b29      	ldr	r3, [pc, #164]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	3b01      	subs	r3, #1
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	071b      	lsls	r3, r3, #28
 800413e:	491b      	ldr	r1, [pc, #108]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004144:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800414a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800414e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe fd5c 	bl	8002c0c <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe fd58 	bl	8002c0c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e05f      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x47c>
 8004176:	e057      	b.n	8004228 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004178:	4b0c      	ldr	r3, [pc, #48]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a0b      	ldr	r2, [pc, #44]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800417e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe fd42 	bl	8002c0c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe fd3e 	bl	8002c0c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e045      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x4b0>
 80041aa:	e03d      	b.n	8004228 <HAL_RCC_OscConfig+0x54c>
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <HAL_RCC_OscConfig+0x558>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d030      	beq.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d129      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d122      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041e4:	4013      	ands	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d119      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	3b01      	subs	r3, #1
 80041fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d10f      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d107      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800

08004238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0d0      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004250:	4b6a      	ldr	r3, [pc, #424]	@ (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d910      	bls.n	8004280 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b67      	ldr	r3, [pc, #412]	@ (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 020f 	bic.w	r2, r3, #15
 8004266:	4965      	ldr	r1, [pc, #404]	@ (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b63      	ldr	r3, [pc, #396]	@ (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0b8      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004298:	4b59      	ldr	r3, [pc, #356]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4a58      	ldr	r2, [pc, #352]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800429e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b0:	4b53      	ldr	r3, [pc, #332]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4a52      	ldr	r2, [pc, #328]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042bc:	4b50      	ldr	r3, [pc, #320]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	494d      	ldr	r1, [pc, #308]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d040      	beq.n	800435c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	4b47      	ldr	r3, [pc, #284]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d115      	bne.n	800431a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e07f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d107      	bne.n	800430a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fa:	4b41      	ldr	r3, [pc, #260]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e073      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430a:	4b3d      	ldr	r3, [pc, #244]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e06b      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431a:	4b39      	ldr	r3, [pc, #228]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f023 0203 	bic.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4936      	ldr	r1, [pc, #216]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432c:	f7fe fc6e 	bl	8002c0c <HAL_GetTick>
 8004330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	e00a      	b.n	800434a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004334:	f7fe fc6a 	bl	8002c0c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e053      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	4b2d      	ldr	r3, [pc, #180]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 020c 	and.w	r2, r3, #12
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	429a      	cmp	r2, r3
 800435a:	d1eb      	bne.n	8004334 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b27      	ldr	r3, [pc, #156]	@ (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d210      	bcs.n	800438c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b24      	ldr	r3, [pc, #144]	@ (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 020f 	bic.w	r2, r3, #15
 8004372:	4922      	ldr	r1, [pc, #136]	@ (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b20      	ldr	r3, [pc, #128]	@ (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e032      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004398:	4b19      	ldr	r3, [pc, #100]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4916      	ldr	r1, [pc, #88]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043b6:	4b12      	ldr	r3, [pc, #72]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	490e      	ldr	r1, [pc, #56]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ca:	f000 f821 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80043ce:	4602      	mov	r2, r0
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	490a      	ldr	r1, [pc, #40]	@ (8004404 <HAL_RCC_ClockConfig+0x1cc>)
 80043dc:	5ccb      	ldrb	r3, [r1, r3]
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	4a09      	ldr	r2, [pc, #36]	@ (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 80043e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043e6:	4b09      	ldr	r3, [pc, #36]	@ (800440c <HAL_RCC_ClockConfig+0x1d4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fbca 	bl	8002b84 <HAL_InitTick>

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40023c00 	.word	0x40023c00
 8004400:	40023800 	.word	0x40023800
 8004404:	0800b890 	.word	0x0800b890
 8004408:	20000000 	.word	0x20000000
 800440c:	20000004 	.word	0x20000004

08004410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004414:	b094      	sub	sp, #80	@ 0x50
 8004416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	647b      	str	r3, [r7, #68]	@ 0x44
 800441c:	2300      	movs	r3, #0
 800441e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004420:	2300      	movs	r3, #0
 8004422:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004428:	4b79      	ldr	r3, [pc, #484]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b08      	cmp	r3, #8
 8004432:	d00d      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x40>
 8004434:	2b08      	cmp	r3, #8
 8004436:	f200 80e1 	bhi.w	80045fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x34>
 800443e:	2b04      	cmp	r3, #4
 8004440:	d003      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x3a>
 8004442:	e0db      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b73      	ldr	r3, [pc, #460]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x204>)
 8004446:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004448:	e0db      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800444a:	4b73      	ldr	r3, [pc, #460]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x208>)
 800444c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800444e:	e0d8      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004450:	4b6f      	ldr	r3, [pc, #444]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004458:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800445a:	4b6d      	ldr	r3, [pc, #436]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d063      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004466:	4b6a      	ldr	r3, [pc, #424]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	099b      	lsrs	r3, r3, #6
 800446c:	2200      	movs	r2, #0
 800446e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004470:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004478:	633b      	str	r3, [r7, #48]	@ 0x30
 800447a:	2300      	movs	r3, #0
 800447c:	637b      	str	r3, [r7, #52]	@ 0x34
 800447e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004482:	4622      	mov	r2, r4
 8004484:	462b      	mov	r3, r5
 8004486:	f04f 0000 	mov.w	r0, #0
 800448a:	f04f 0100 	mov.w	r1, #0
 800448e:	0159      	lsls	r1, r3, #5
 8004490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004494:	0150      	lsls	r0, r2, #5
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4621      	mov	r1, r4
 800449c:	1a51      	subs	r1, r2, r1
 800449e:	6139      	str	r1, [r7, #16]
 80044a0:	4629      	mov	r1, r5
 80044a2:	eb63 0301 	sbc.w	r3, r3, r1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044b4:	4659      	mov	r1, fp
 80044b6:	018b      	lsls	r3, r1, #6
 80044b8:	4651      	mov	r1, sl
 80044ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044be:	4651      	mov	r1, sl
 80044c0:	018a      	lsls	r2, r1, #6
 80044c2:	4651      	mov	r1, sl
 80044c4:	ebb2 0801 	subs.w	r8, r2, r1
 80044c8:	4659      	mov	r1, fp
 80044ca:	eb63 0901 	sbc.w	r9, r3, r1
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044e2:	4690      	mov	r8, r2
 80044e4:	4699      	mov	r9, r3
 80044e6:	4623      	mov	r3, r4
 80044e8:	eb18 0303 	adds.w	r3, r8, r3
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	462b      	mov	r3, r5
 80044f0:	eb49 0303 	adc.w	r3, r9, r3
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004502:	4629      	mov	r1, r5
 8004504:	024b      	lsls	r3, r1, #9
 8004506:	4621      	mov	r1, r4
 8004508:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800450c:	4621      	mov	r1, r4
 800450e:	024a      	lsls	r2, r1, #9
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004516:	2200      	movs	r2, #0
 8004518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800451a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800451c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004520:	f7fb fea0 	bl	8000264 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4613      	mov	r3, r2
 800452a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800452c:	e058      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452e:	4b38      	ldr	r3, [pc, #224]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	2200      	movs	r2, #0
 8004536:	4618      	mov	r0, r3
 8004538:	4611      	mov	r1, r2
 800453a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
 8004544:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	f04f 0000 	mov.w	r0, #0
 8004550:	f04f 0100 	mov.w	r1, #0
 8004554:	0159      	lsls	r1, r3, #5
 8004556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800455a:	0150      	lsls	r0, r2, #5
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4641      	mov	r1, r8
 8004562:	ebb2 0a01 	subs.w	sl, r2, r1
 8004566:	4649      	mov	r1, r9
 8004568:	eb63 0b01 	sbc.w	fp, r3, r1
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004578:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800457c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004580:	ebb2 040a 	subs.w	r4, r2, sl
 8004584:	eb63 050b 	sbc.w	r5, r3, fp
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	00eb      	lsls	r3, r5, #3
 8004592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004596:	00e2      	lsls	r2, r4, #3
 8004598:	4614      	mov	r4, r2
 800459a:	461d      	mov	r5, r3
 800459c:	4643      	mov	r3, r8
 800459e:	18e3      	adds	r3, r4, r3
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	464b      	mov	r3, r9
 80045a4:	eb45 0303 	adc.w	r3, r5, r3
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045b6:	4629      	mov	r1, r5
 80045b8:	028b      	lsls	r3, r1, #10
 80045ba:	4621      	mov	r1, r4
 80045bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c0:	4621      	mov	r1, r4
 80045c2:	028a      	lsls	r2, r1, #10
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ca:	2200      	movs	r2, #0
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	61fa      	str	r2, [r7, #28]
 80045d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d4:	f7fb fe46 	bl	8000264 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	3301      	adds	r3, #1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80045f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045fa:	e002      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x204>)
 80045fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004604:	4618      	mov	r0, r3
 8004606:	3750      	adds	r7, #80	@ 0x50
 8004608:	46bd      	mov	sp, r7
 800460a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	00f42400 	.word	0x00f42400
 8004618:	007a1200 	.word	0x007a1200

0800461c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	@ (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000000 	.word	0x20000000

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004638:	f7ff fff0 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0a9b      	lsrs	r3, r3, #10
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4903      	ldr	r1, [pc, #12]	@ (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40023800 	.word	0x40023800
 8004658:	0800b8a0 	.word	0x0800b8a0

0800465c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004660:	f7ff ffdc 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	@ (800467c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0b5b      	lsrs	r3, r3, #13
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	@ (8004680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	0800b8a0 	.word	0x0800b8a0

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d012      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046ac:	4b69      	ldr	r3, [pc, #420]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a68      	ldr	r2, [pc, #416]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046b6:	6093      	str	r3, [r2, #8]
 80046b8:	4b66      	ldr	r3, [pc, #408]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c0:	4964      	ldr	r1, [pc, #400]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046ce:	2301      	movs	r3, #1
 80046d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046de:	4b5d      	ldr	r3, [pc, #372]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ec:	4959      	ldr	r1, [pc, #356]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046fc:	d101      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d017      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800471a:	4b4e      	ldr	r3, [pc, #312]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004720:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	494a      	ldr	r1, [pc, #296]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004738:	d101      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004746:	2301      	movs	r3, #1
 8004748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 808b 	beq.w	800487e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004768:	4b3a      	ldr	r3, [pc, #232]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	4a39      	ldr	r2, [pc, #228]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6413      	str	r3, [r2, #64]	@ 0x40
 8004774:	4b37      	ldr	r3, [pc, #220]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004780:	4b35      	ldr	r3, [pc, #212]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a34      	ldr	r2, [pc, #208]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478c:	f7fe fa3e 	bl	8002c0c <HAL_GetTick>
 8004790:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004794:	f7fe fa3a 	bl	8002c0c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e38f      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047b2:	4b28      	ldr	r3, [pc, #160]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d035      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d02e      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d0:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047da:	4b1e      	ldr	r3, [pc, #120]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047de:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047f2:	4a18      	ldr	r2, [pc, #96]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047f8:	4b16      	ldr	r3, [pc, #88]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d114      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fe fa02 	bl	8002c0c <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	e00a      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fe f9fe 	bl	8002c0c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e351      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004822:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0ee      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800483a:	d111      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800483c:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800484a:	400b      	ands	r3, r1
 800484c:	4901      	ldr	r1, [pc, #4]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
 8004852:	e00b      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004854:	40023800 	.word	0x40023800
 8004858:	40007000 	.word	0x40007000
 800485c:	0ffffcff 	.word	0x0ffffcff
 8004860:	4bac      	ldr	r3, [pc, #688]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4aab      	ldr	r2, [pc, #684]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004866:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800486a:	6093      	str	r3, [r2, #8]
 800486c:	4ba9      	ldr	r3, [pc, #676]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004878:	49a6      	ldr	r1, [pc, #664]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487a:	4313      	orrs	r3, r2
 800487c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d010      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800488a:	4ba2      	ldr	r3, [pc, #648]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004890:	4aa0      	ldr	r2, [pc, #640]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004896:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800489a:	4b9e      	ldr	r3, [pc, #632]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	499b      	ldr	r1, [pc, #620]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048b8:	4b96      	ldr	r3, [pc, #600]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048c6:	4993      	ldr	r1, [pc, #588]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048da:	4b8e      	ldr	r3, [pc, #568]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048e8:	498a      	ldr	r1, [pc, #552]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048fc:	4b85      	ldr	r3, [pc, #532]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490a:	4982      	ldr	r1, [pc, #520]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800491e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004924:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492c:	4979      	ldr	r1, [pc, #484]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004940:	4b74      	ldr	r3, [pc, #464]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004946:	f023 0203 	bic.w	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494e:	4971      	ldr	r1, [pc, #452]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004962:	4b6c      	ldr	r3, [pc, #432]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004968:	f023 020c 	bic.w	r2, r3, #12
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004970:	4968      	ldr	r1, [pc, #416]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004984:	4b63      	ldr	r3, [pc, #396]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004992:	4960      	ldr	r1, [pc, #384]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b4:	4957      	ldr	r1, [pc, #348]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049c8:	4b52      	ldr	r3, [pc, #328]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d6:	494f      	ldr	r1, [pc, #316]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f8:	4946      	ldr	r1, [pc, #280]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a0c:	4b41      	ldr	r3, [pc, #260]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1a:	493e      	ldr	r1, [pc, #248]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a2e:	4b39      	ldr	r3, [pc, #228]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a3c:	4935      	ldr	r1, [pc, #212]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a50:	4b30      	ldr	r3, [pc, #192]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a56:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a5e:	492d      	ldr	r1, [pc, #180]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d011      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a72:	4b28      	ldr	r3, [pc, #160]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a78:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a80:	4924      	ldr	r1, [pc, #144]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a90:	d101      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a92:	2301      	movs	r3, #1
 8004a94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ab2:	4b18      	ldr	r3, [pc, #96]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac0:	4914      	ldr	r1, [pc, #80]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00b      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ada:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ae4:	490b      	ldr	r1, [pc, #44]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00f      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004af8:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b08:	4902      	ldr	r1, [pc, #8]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b10:	e002      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b24:	4b8a      	ldr	r3, [pc, #552]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b34:	4986      	ldr	r1, [pc, #536]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b48:	4b81      	ldr	r3, [pc, #516]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b4e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b58:	497d      	ldr	r1, [pc, #500]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d006      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80d6 	beq.w	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b74:	4b76      	ldr	r3, [pc, #472]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a75      	ldr	r2, [pc, #468]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b80:	f7fe f844 	bl	8002c0c <HAL_GetTick>
 8004b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b88:	f7fe f840 	bl	8002c0c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	@ 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e195      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d021      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d11d      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bba:	4b65      	ldr	r3, [pc, #404]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc0:	0c1b      	lsrs	r3, r3, #16
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bc8:	4b61      	ldr	r3, [pc, #388]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bce:	0e1b      	lsrs	r3, r3, #24
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	019a      	lsls	r2, r3, #6
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	071b      	lsls	r3, r3, #28
 8004bee:	4958      	ldr	r1, [pc, #352]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02e      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c20:	d129      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c22:	4b4b      	ldr	r3, [pc, #300]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c28:	0c1b      	lsrs	r3, r3, #16
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c30:	4b47      	ldr	r3, [pc, #284]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c36:	0f1b      	lsrs	r3, r3, #28
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	019a      	lsls	r2, r3, #6
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	041b      	lsls	r3, r3, #16
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	061b      	lsls	r3, r3, #24
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	071b      	lsls	r3, r3, #28
 8004c56:	493e      	ldr	r1, [pc, #248]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c64:	f023 021f 	bic.w	r2, r3, #31
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4938      	ldr	r1, [pc, #224]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01d      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c82:	4b33      	ldr	r3, [pc, #204]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c88:	0e1b      	lsrs	r3, r3, #24
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c90:	4b2f      	ldr	r3, [pc, #188]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c96:	0f1b      	lsrs	r3, r3, #28
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	019a      	lsls	r2, r3, #6
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	431a      	orrs	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	061b      	lsls	r3, r3, #24
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	071b      	lsls	r3, r3, #28
 8004cb6:	4926      	ldr	r1, [pc, #152]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d011      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	019a      	lsls	r2, r3, #6
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	041b      	lsls	r3, r3, #16
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	061b      	lsls	r3, r3, #24
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	071b      	lsls	r3, r3, #28
 8004ce6:	491a      	ldr	r1, [pc, #104]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cee:	4b18      	ldr	r3, [pc, #96]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a17      	ldr	r2, [pc, #92]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cfa:	f7fd ff87 	bl	8002c0c <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d02:	f7fd ff83 	bl	8002c0c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b64      	cmp	r3, #100	@ 0x64
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e0d8      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d14:	4b0e      	ldr	r3, [pc, #56]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	f040 80ce 	bne.w	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d28:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a08      	ldr	r2, [pc, #32]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d34:	f7fd ff6a 	bl	8002c0c <HAL_GetTick>
 8004d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d3c:	f7fd ff66 	bl	8002c0c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	@ 0x64
 8004d48:	d904      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e0bb      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d54:	4b5e      	ldr	r3, [pc, #376]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d60:	d0ec      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d02e      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d12a      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d8a:	4b51      	ldr	r3, [pc, #324]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d98:	4b4d      	ldr	r3, [pc, #308]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9e:	0f1b      	lsrs	r3, r3, #28
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	019a      	lsls	r2, r3, #6
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	071b      	lsls	r3, r3, #28
 8004dbe:	4944      	ldr	r1, [pc, #272]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dc6:	4b42      	ldr	r3, [pc, #264]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dcc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	493d      	ldr	r1, [pc, #244]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d022      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004df0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004df4:	d11d      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004df6:	4b36      	ldr	r3, [pc, #216]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e04:	4b32      	ldr	r3, [pc, #200]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0a:	0f1b      	lsrs	r3, r3, #28
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	019a      	lsls	r2, r3, #6
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	061b      	lsls	r3, r3, #24
 8004e24:	431a      	orrs	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	071b      	lsls	r3, r3, #28
 8004e2a:	4929      	ldr	r1, [pc, #164]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d028      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e44:	0e1b      	lsrs	r3, r3, #24
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e4c:	4b20      	ldr	r3, [pc, #128]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e52:	0c1b      	lsrs	r3, r3, #16
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	019a      	lsls	r2, r3, #6
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	431a      	orrs	r2, r3
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	071b      	lsls	r3, r3, #28
 8004e72:	4917      	ldr	r1, [pc, #92]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	4911      	ldr	r1, [pc, #68]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e90:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9c:	f7fd feb6 	bl	8002c0c <HAL_GetTick>
 8004ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ea4:	f7fd feb2 	bl	8002c0c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	@ 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e007      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eb6:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ec2:	d1ef      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800

08004ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e049      	b.n	8004f7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fd fae6 	bl	80024cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f001 f904 	bl	8006120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d001      	beq.n	8004f9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e04c      	b.n	8005036 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a26      	ldr	r2, [pc, #152]	@ (8005044 <HAL_TIM_Base_Start+0xc0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d022      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb6:	d01d      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a22      	ldr	r2, [pc, #136]	@ (8005048 <HAL_TIM_Base_Start+0xc4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d018      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a21      	ldr	r2, [pc, #132]	@ (800504c <HAL_TIM_Base_Start+0xc8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005050 <HAL_TIM_Base_Start+0xcc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1e      	ldr	r2, [pc, #120]	@ (8005054 <HAL_TIM_Base_Start+0xd0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8005058 <HAL_TIM_Base_Start+0xd4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1b      	ldr	r2, [pc, #108]	@ (800505c <HAL_TIM_Base_Start+0xd8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d115      	bne.n	8005020 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	4b19      	ldr	r3, [pc, #100]	@ (8005060 <HAL_TIM_Base_Start+0xdc>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d015      	beq.n	8005032 <HAL_TIM_Base_Start+0xae>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800500c:	d011      	beq.n	8005032 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501e:	e008      	b.n	8005032 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e000      	b.n	8005034 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40010400 	.word	0x40010400
 8005058:	40014000 	.word	0x40014000
 800505c:	40001800 	.word	0x40001800
 8005060:	00010007 	.word	0x00010007

08005064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d001      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e054      	b.n	8005126 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a26      	ldr	r2, [pc, #152]	@ (8005134 <HAL_TIM_Base_Start_IT+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d022      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a6:	d01d      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a22      	ldr	r2, [pc, #136]	@ (8005138 <HAL_TIM_Base_Start_IT+0xd4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a21      	ldr	r2, [pc, #132]	@ (800513c <HAL_TIM_Base_Start_IT+0xd8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005140 <HAL_TIM_Base_Start_IT+0xdc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005144 <HAL_TIM_Base_Start_IT+0xe0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005148 <HAL_TIM_Base_Start_IT+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1b      	ldr	r2, [pc, #108]	@ (800514c <HAL_TIM_Base_Start_IT+0xe8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d115      	bne.n	8005110 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	4b19      	ldr	r3, [pc, #100]	@ (8005150 <HAL_TIM_Base_Start_IT+0xec>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d015      	beq.n	8005122 <HAL_TIM_Base_Start_IT+0xbe>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050fc:	d011      	beq.n	8005122 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510e:	e008      	b.n	8005122 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e000      	b.n	8005124 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005122:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	40010400 	.word	0x40010400
 8005148:	40014000 	.word	0x40014000
 800514c:	40001800 	.word	0x40001800
 8005150:	00010007 	.word	0x00010007

08005154 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10f      	bne.n	800519c <HAL_TIM_Base_Stop_IT+0x48>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a1a      	ldr	r2, [r3, #32]
 8005182:	f240 4344 	movw	r3, #1092	@ 0x444
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d107      	bne.n	800519c <HAL_TIM_Base_Stop_IT+0x48>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e049      	b.n	8005258 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fd f91b 	bl	8002414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f000 ff95 	bl	8006120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_TIM_PWM_Start+0x24>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	e03c      	b.n	80052fe <HAL_TIM_PWM_Start+0x9e>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b04      	cmp	r3, #4
 8005288:	d109      	bne.n	800529e <HAL_TIM_PWM_Start+0x3e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	bf14      	ite	ne
 8005296:	2301      	movne	r3, #1
 8005298:	2300      	moveq	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e02f      	b.n	80052fe <HAL_TIM_PWM_Start+0x9e>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d109      	bne.n	80052b8 <HAL_TIM_PWM_Start+0x58>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	bf14      	ite	ne
 80052b0:	2301      	movne	r3, #1
 80052b2:	2300      	moveq	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	e022      	b.n	80052fe <HAL_TIM_PWM_Start+0x9e>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b0c      	cmp	r3, #12
 80052bc:	d109      	bne.n	80052d2 <HAL_TIM_PWM_Start+0x72>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	bf14      	ite	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	2300      	moveq	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	e015      	b.n	80052fe <HAL_TIM_PWM_Start+0x9e>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d109      	bne.n	80052ec <HAL_TIM_PWM_Start+0x8c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	bf14      	ite	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	2300      	moveq	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	e008      	b.n	80052fe <HAL_TIM_PWM_Start+0x9e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	bf14      	ite	ne
 80052f8:	2301      	movne	r3, #1
 80052fa:	2300      	moveq	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e092      	b.n	800542c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <HAL_TIM_PWM_Start+0xb6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005314:	e023      	b.n	800535e <HAL_TIM_PWM_Start+0xfe>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d104      	bne.n	8005326 <HAL_TIM_PWM_Start+0xc6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005324:	e01b      	b.n	800535e <HAL_TIM_PWM_Start+0xfe>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b08      	cmp	r3, #8
 800532a:	d104      	bne.n	8005336 <HAL_TIM_PWM_Start+0xd6>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005334:	e013      	b.n	800535e <HAL_TIM_PWM_Start+0xfe>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Start+0xe6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005344:	e00b      	b.n	800535e <HAL_TIM_PWM_Start+0xfe>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b10      	cmp	r3, #16
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start+0xf6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005354:	e003      	b.n	800535e <HAL_TIM_PWM_Start+0xfe>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2201      	movs	r2, #1
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f001 fba8 	bl	8006abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a30      	ldr	r2, [pc, #192]	@ (8005434 <HAL_TIM_PWM_Start+0x1d4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_TIM_PWM_Start+0x120>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2f      	ldr	r2, [pc, #188]	@ (8005438 <HAL_TIM_PWM_Start+0x1d8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d101      	bne.n	8005384 <HAL_TIM_PWM_Start+0x124>
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <HAL_TIM_PWM_Start+0x126>
 8005384:	2300      	movs	r3, #0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005398:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a25      	ldr	r2, [pc, #148]	@ (8005434 <HAL_TIM_PWM_Start+0x1d4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <HAL_TIM_PWM_Start+0x18a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ac:	d01d      	beq.n	80053ea <HAL_TIM_PWM_Start+0x18a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a22      	ldr	r2, [pc, #136]	@ (800543c <HAL_TIM_PWM_Start+0x1dc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <HAL_TIM_PWM_Start+0x18a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a20      	ldr	r2, [pc, #128]	@ (8005440 <HAL_TIM_PWM_Start+0x1e0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_TIM_PWM_Start+0x18a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005444 <HAL_TIM_PWM_Start+0x1e4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_TIM_PWM_Start+0x18a>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a19      	ldr	r2, [pc, #100]	@ (8005438 <HAL_TIM_PWM_Start+0x1d8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_TIM_PWM_Start+0x18a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1b      	ldr	r2, [pc, #108]	@ (8005448 <HAL_TIM_PWM_Start+0x1e8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_TIM_PWM_Start+0x18a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a19      	ldr	r2, [pc, #100]	@ (800544c <HAL_TIM_PWM_Start+0x1ec>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d115      	bne.n	8005416 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	4b17      	ldr	r3, [pc, #92]	@ (8005450 <HAL_TIM_PWM_Start+0x1f0>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d015      	beq.n	8005428 <HAL_TIM_PWM_Start+0x1c8>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005402:	d011      	beq.n	8005428 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	e008      	b.n	8005428 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0201 	orr.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e000      	b.n	800542a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40010000 	.word	0x40010000
 8005438:	40010400 	.word	0x40010400
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40014000 	.word	0x40014000
 800544c:	40001800 	.word	0x40001800
 8005450:	00010007 	.word	0x00010007

08005454 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fb28 	bl	8006abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a36      	ldr	r2, [pc, #216]	@ (800554c <HAL_TIM_PWM_Stop+0xf8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_TIM_PWM_Stop+0x2c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a35      	ldr	r2, [pc, #212]	@ (8005550 <HAL_TIM_PWM_Stop+0xfc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d101      	bne.n	8005484 <HAL_TIM_PWM_Stop+0x30>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_TIM_PWM_Stop+0x32>
 8005484:	2300      	movs	r3, #0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d017      	beq.n	80054ba <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10f      	bne.n	80054ba <HAL_TIM_PWM_Stop+0x66>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	f240 4344 	movw	r3, #1092	@ 0x444
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <HAL_TIM_PWM_Stop+0x66>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <HAL_TIM_PWM_Stop+0x96>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	f240 4344 	movw	r3, #1092	@ 0x444
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <HAL_TIM_PWM_Stop+0x96>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Stop+0xa6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f8:	e023      	b.n	8005542 <HAL_TIM_PWM_Stop+0xee>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Stop+0xb6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005508:	e01b      	b.n	8005542 <HAL_TIM_PWM_Stop+0xee>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Stop+0xc6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005518:	e013      	b.n	8005542 <HAL_TIM_PWM_Stop+0xee>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d104      	bne.n	800552a <HAL_TIM_PWM_Stop+0xd6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005528:	e00b      	b.n	8005542 <HAL_TIM_PWM_Stop+0xee>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b10      	cmp	r3, #16
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Stop+0xe6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005538:	e003      	b.n	8005542 <HAL_TIM_PWM_Stop+0xee>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40010000 	.word	0x40010000
 8005550:	40010400 	.word	0x40010400

08005554 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e049      	b.n	80055fa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f841 	bl	8005602 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f000 fdc4 	bl	8006120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
	...

08005618 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e08f      	b.n	800574c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d106      	bne.n	8005646 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fc fd9d 	bl	8002180 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6899      	ldr	r1, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4b3e      	ldr	r3, [pc, #248]	@ (8005754 <HAL_TIM_Encoder_Init+0x13c>)
 800565a:	400b      	ands	r3, r1
 800565c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f000 fd59 	bl	8006120 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4b31      	ldr	r3, [pc, #196]	@ (8005758 <HAL_TIM_Encoder_Init+0x140>)
 8005694:	4013      	ands	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	4313      	orrs	r3, r2
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4b2b      	ldr	r3, [pc, #172]	@ (800575c <HAL_TIM_Encoder_Init+0x144>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005760 <HAL_TIM_Encoder_Init+0x148>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	4313      	orrs	r3, r2
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	011a      	lsls	r2, r3, #4
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	031b      	lsls	r3, r3, #12
 80056d8:	4313      	orrs	r3, r2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80056ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	4313      	orrs	r3, r2
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	fffebff8 	.word	0xfffebff8
 8005758:	fffffcfc 	.word	0xfffffcfc
 800575c:	fffff3f3 	.word	0xfffff3f3
 8005760:	ffff0f0f 	.word	0xffff0f0f

08005764 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005774:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800577c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005784:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800578c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d110      	bne.n	80057b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d102      	bne.n	80057a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800579a:	7b7b      	ldrb	r3, [r7, #13]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d001      	beq.n	80057a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e069      	b.n	8005878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b4:	e031      	b.n	800581a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d110      	bne.n	80057de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d102      	bne.n	80057c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057c2:	7b3b      	ldrb	r3, [r7, #12]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d001      	beq.n	80057cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e055      	b.n	8005878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057dc:	e01d      	b.n	800581a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d108      	bne.n	80057f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057e4:	7bbb      	ldrb	r3, [r7, #14]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d105      	bne.n	80057f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ea:	7b7b      	ldrb	r3, [r7, #13]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d102      	bne.n	80057f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f0:	7b3b      	ldrb	r3, [r7, #12]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d001      	beq.n	80057fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e03e      	b.n	8005878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_TIM_Encoder_Start+0xc4>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b04      	cmp	r3, #4
 8005824:	d008      	beq.n	8005838 <HAL_TIM_Encoder_Start+0xd4>
 8005826:	e00f      	b.n	8005848 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2201      	movs	r2, #1
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f001 f943 	bl	8006abc <TIM_CCxChannelCmd>
      break;
 8005836:	e016      	b.n	8005866 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2201      	movs	r2, #1
 800583e:	2104      	movs	r1, #4
 8005840:	4618      	mov	r0, r3
 8005842:	f001 f93b 	bl	8006abc <TIM_CCxChannelCmd>
      break;
 8005846:	e00e      	b.n	8005866 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2201      	movs	r2, #1
 800584e:	2100      	movs	r1, #0
 8005850:	4618      	mov	r0, r3
 8005852:	f001 f933 	bl	8006abc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2201      	movs	r2, #1
 800585c:	2104      	movs	r1, #4
 800585e:	4618      	mov	r0, r3
 8005860:	f001 f92c 	bl	8006abc <TIM_CCxChannelCmd>
      break;
 8005864:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_TIM_Encoder_Stop+0x18>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d008      	beq.n	80058a8 <HAL_TIM_Encoder_Stop+0x28>
 8005896:	e00f      	b.n	80058b8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2200      	movs	r2, #0
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 f90b 	bl	8006abc <TIM_CCxChannelCmd>
      break;
 80058a6:	e016      	b.n	80058d6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2200      	movs	r2, #0
 80058ae:	2104      	movs	r1, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 f903 	bl	8006abc <TIM_CCxChannelCmd>
      break;
 80058b6:	e00e      	b.n	80058d6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2200      	movs	r2, #0
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f8fb 	bl	8006abc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	2104      	movs	r1, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 f8f4 	bl	8006abc <TIM_CCxChannelCmd>
      break;
 80058d4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10f      	bne.n	8005906 <HAL_TIM_Encoder_Stop+0x86>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a1a      	ldr	r2, [r3, #32]
 80058ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d107      	bne.n	8005906 <HAL_TIM_Encoder_Stop+0x86>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_TIM_Encoder_Stop+0x92>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b04      	cmp	r3, #4
 8005910:	d148      	bne.n	80059a4 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <HAL_TIM_Encoder_Stop+0xa2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005920:	e023      	b.n	800596a <HAL_TIM_Encoder_Stop+0xea>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b04      	cmp	r3, #4
 8005926:	d104      	bne.n	8005932 <HAL_TIM_Encoder_Stop+0xb2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005930:	e01b      	b.n	800596a <HAL_TIM_Encoder_Stop+0xea>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d104      	bne.n	8005942 <HAL_TIM_Encoder_Stop+0xc2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005940:	e013      	b.n	800596a <HAL_TIM_Encoder_Stop+0xea>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b0c      	cmp	r3, #12
 8005946:	d104      	bne.n	8005952 <HAL_TIM_Encoder_Stop+0xd2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005950:	e00b      	b.n	800596a <HAL_TIM_Encoder_Stop+0xea>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b10      	cmp	r3, #16
 8005956:	d104      	bne.n	8005962 <HAL_TIM_Encoder_Stop+0xe2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005960:	e003      	b.n	800596a <HAL_TIM_Encoder_Stop+0xea>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_TIM_Encoder_Stop+0xfa>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005978:	e024      	b.n	80059c4 <HAL_TIM_Encoder_Stop+0x144>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d104      	bne.n	800598a <HAL_TIM_Encoder_Stop+0x10a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005988:	e01c      	b.n	80059c4 <HAL_TIM_Encoder_Stop+0x144>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d104      	bne.n	800599a <HAL_TIM_Encoder_Stop+0x11a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005998:	e014      	b.n	80059c4 <HAL_TIM_Encoder_Stop+0x144>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80059a2:	e00f      	b.n	80059c4 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d020      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01b      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f06f 0202 	mvn.w	r2, #2
 8005a02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fb63 	bl	80060e4 <HAL_TIM_IC_CaptureCallback>
 8005a1e:	e005      	b.n	8005a2c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fb55 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fb66 	bl	80060f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d020      	beq.n	8005a7e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01b      	beq.n	8005a7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0204 	mvn.w	r2, #4
 8005a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fb3d 	bl	80060e4 <HAL_TIM_IC_CaptureCallback>
 8005a6a:	e005      	b.n	8005a78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fb2f 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fb40 	bl	80060f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01b      	beq.n	8005aca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f06f 0208 	mvn.w	r2, #8
 8005a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2204      	movs	r2, #4
 8005aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fb17 	bl	80060e4 <HAL_TIM_IC_CaptureCallback>
 8005ab6:	e005      	b.n	8005ac4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fb09 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fb1a 	bl	80060f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d020      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01b      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f06f 0210 	mvn.w	r2, #16
 8005ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2208      	movs	r2, #8
 8005aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 faf1 	bl	80060e4 <HAL_TIM_IC_CaptureCallback>
 8005b02:	e005      	b.n	8005b10 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fae3 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 faf4 	bl	80060f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00c      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f06f 0201 	mvn.w	r2, #1
 8005b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fb fce1 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 f868 	bl	8006c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 f860 	bl	8006c4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00c      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 faae 	bl	800610c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00c      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0220 	mvn.w	r2, #32
 8005bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 f828 	bl	8006c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_TIM_IC_ConfigChannel+0x1e>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e088      	b.n	8005d0c <HAL_TIM_IC_ConfigChannel+0x130>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d11b      	bne.n	8005c40 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c18:	f000 fd8c 	bl	8006734 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 020c 	bic.w	r2, r2, #12
 8005c2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	619a      	str	r2, [r3, #24]
 8005c3e:	e060      	b.n	8005d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d11c      	bne.n	8005c80 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005c56:	f000 fe10 	bl	800687a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6999      	ldr	r1, [r3, #24]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	021a      	lsls	r2, r3, #8
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	619a      	str	r2, [r3, #24]
 8005c7e:	e040      	b.n	8005d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d11b      	bne.n	8005cbe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c96:	f000 fe5d 	bl	8006954 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 020c 	bic.w	r2, r2, #12
 8005ca8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69d9      	ldr	r1, [r3, #28]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	61da      	str	r2, [r3, #28]
 8005cbc:	e021      	b.n	8005d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b0c      	cmp	r3, #12
 8005cc2:	d11c      	bne.n	8005cfe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005cd4:	f000 fe7a 	bl	80069cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69da      	ldr	r2, [r3, #28]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005ce6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69d9      	ldr	r1, [r3, #28]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	021a      	lsls	r2, r3, #8
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	61da      	str	r2, [r3, #28]
 8005cfc:	e001      	b.n	8005d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0ff      	b.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b14      	cmp	r3, #20
 8005d3e:	f200 80f0 	bhi.w	8005f22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d42:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005f23 	.word	0x08005f23
 8005d50:	08005f23 	.word	0x08005f23
 8005d54:	08005f23 	.word	0x08005f23
 8005d58:	08005ddd 	.word	0x08005ddd
 8005d5c:	08005f23 	.word	0x08005f23
 8005d60:	08005f23 	.word	0x08005f23
 8005d64:	08005f23 	.word	0x08005f23
 8005d68:	08005e1f 	.word	0x08005e1f
 8005d6c:	08005f23 	.word	0x08005f23
 8005d70:	08005f23 	.word	0x08005f23
 8005d74:	08005f23 	.word	0x08005f23
 8005d78:	08005e5f 	.word	0x08005e5f
 8005d7c:	08005f23 	.word	0x08005f23
 8005d80:	08005f23 	.word	0x08005f23
 8005d84:	08005f23 	.word	0x08005f23
 8005d88:	08005ea1 	.word	0x08005ea1
 8005d8c:	08005f23 	.word	0x08005f23
 8005d90:	08005f23 	.word	0x08005f23
 8005d94:	08005f23 	.word	0x08005f23
 8005d98:	08005ee1 	.word	0x08005ee1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fa68 	bl	8006278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0208 	orr.w	r2, r2, #8
 8005db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0204 	bic.w	r2, r2, #4
 8005dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6999      	ldr	r1, [r3, #24]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	619a      	str	r2, [r3, #24]
      break;
 8005dda:	e0a5      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 faba 	bl	800635c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6999      	ldr	r1, [r3, #24]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	021a      	lsls	r2, r3, #8
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	619a      	str	r2, [r3, #24]
      break;
 8005e1c:	e084      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fb11 	bl	800644c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 0208 	orr.w	r2, r2, #8
 8005e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0204 	bic.w	r2, r2, #4
 8005e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69d9      	ldr	r1, [r3, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	61da      	str	r2, [r3, #28]
      break;
 8005e5c:	e064      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fb67 	bl	8006538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69d9      	ldr	r1, [r3, #28]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	021a      	lsls	r2, r3, #8
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	61da      	str	r2, [r3, #28]
      break;
 8005e9e:	e043      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fb9e 	bl	80065e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0208 	orr.w	r2, r2, #8
 8005eba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0204 	bic.w	r2, r2, #4
 8005eca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ede:	e023      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fbd0 	bl	800668c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005efa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	021a      	lsls	r2, r3, #8
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f20:	e002      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
      break;
 8005f26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop

08005f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_TIM_ConfigClockSource+0x1c>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e0b4      	b.n	80060c2 <HAL_TIM_ConfigClockSource+0x186>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	4b56      	ldr	r3, [pc, #344]	@ (80060cc <HAL_TIM_ConfigClockSource+0x190>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f90:	d03e      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0xd4>
 8005f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f96:	f200 8087 	bhi.w	80060a8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9e:	f000 8086 	beq.w	80060ae <HAL_TIM_ConfigClockSource+0x172>
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa6:	d87f      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b70      	cmp	r3, #112	@ 0x70
 8005faa:	d01a      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0xa6>
 8005fac:	2b70      	cmp	r3, #112	@ 0x70
 8005fae:	d87b      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb0:	2b60      	cmp	r3, #96	@ 0x60
 8005fb2:	d050      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x11a>
 8005fb4:	2b60      	cmp	r3, #96	@ 0x60
 8005fb6:	d877      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb8:	2b50      	cmp	r3, #80	@ 0x50
 8005fba:	d03c      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0xfa>
 8005fbc:	2b50      	cmp	r3, #80	@ 0x50
 8005fbe:	d873      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc0:	2b40      	cmp	r3, #64	@ 0x40
 8005fc2:	d058      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x13a>
 8005fc4:	2b40      	cmp	r3, #64	@ 0x40
 8005fc6:	d86f      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc8:	2b30      	cmp	r3, #48	@ 0x30
 8005fca:	d064      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x15a>
 8005fcc:	2b30      	cmp	r3, #48	@ 0x30
 8005fce:	d86b      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d060      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x15a>
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d867      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d05c      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x15a>
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d05a      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x15a>
 8005fe0:	e062      	b.n	80060a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ff2:	f000 fd43 	bl	8006a7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	609a      	str	r2, [r3, #8]
      break;
 800600e:	e04f      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006020:	f000 fd2c 	bl	8006a7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006032:	609a      	str	r2, [r3, #8]
      break;
 8006034:	e03c      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006042:	461a      	mov	r2, r3
 8006044:	f000 fbea 	bl	800681c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2150      	movs	r1, #80	@ 0x50
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fcf9 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8006054:	e02c      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006062:	461a      	mov	r2, r3
 8006064:	f000 fc46 	bl	80068f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2160      	movs	r1, #96	@ 0x60
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fce9 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8006074:	e01c      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006082:	461a      	mov	r2, r3
 8006084:	f000 fbca 	bl	800681c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2140      	movs	r1, #64	@ 0x40
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fcd9 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8006094:	e00c      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4619      	mov	r1, r3
 80060a0:	4610      	mov	r0, r2
 80060a2:	f000 fcd0 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 80060a6:	e003      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
      break;
 80060ac:	e000      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	fffeff88 	.word	0xfffeff88

080060d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a46      	ldr	r2, [pc, #280]	@ (800624c <TIM_Base_SetConfig+0x12c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d013      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800613e:	d00f      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a43      	ldr	r2, [pc, #268]	@ (8006250 <TIM_Base_SetConfig+0x130>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00b      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a42      	ldr	r2, [pc, #264]	@ (8006254 <TIM_Base_SetConfig+0x134>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d007      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a41      	ldr	r2, [pc, #260]	@ (8006258 <TIM_Base_SetConfig+0x138>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a40      	ldr	r2, [pc, #256]	@ (800625c <TIM_Base_SetConfig+0x13c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d108      	bne.n	8006172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a35      	ldr	r2, [pc, #212]	@ (800624c <TIM_Base_SetConfig+0x12c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d02b      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006180:	d027      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a32      	ldr	r2, [pc, #200]	@ (8006250 <TIM_Base_SetConfig+0x130>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d023      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a31      	ldr	r2, [pc, #196]	@ (8006254 <TIM_Base_SetConfig+0x134>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d01f      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a30      	ldr	r2, [pc, #192]	@ (8006258 <TIM_Base_SetConfig+0x138>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d01b      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2f      	ldr	r2, [pc, #188]	@ (800625c <TIM_Base_SetConfig+0x13c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d017      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006260 <TIM_Base_SetConfig+0x140>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d013      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006264 <TIM_Base_SetConfig+0x144>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00f      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006268 <TIM_Base_SetConfig+0x148>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00b      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2b      	ldr	r2, [pc, #172]	@ (800626c <TIM_Base_SetConfig+0x14c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d007      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006270 <TIM_Base_SetConfig+0x150>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a29      	ldr	r2, [pc, #164]	@ (8006274 <TIM_Base_SetConfig+0x154>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d108      	bne.n	80061e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a10      	ldr	r2, [pc, #64]	@ (800624c <TIM_Base_SetConfig+0x12c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_Base_SetConfig+0xf8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a12      	ldr	r2, [pc, #72]	@ (800625c <TIM_Base_SetConfig+0x13c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d103      	bne.n	8006220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b01      	cmp	r3, #1
 8006230:	d105      	bne.n	800623e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f023 0201 	bic.w	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	611a      	str	r2, [r3, #16]
  }
}
 800623e:	bf00      	nop
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40010000 	.word	0x40010000
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40010400 	.word	0x40010400
 8006260:	40014000 	.word	0x40014000
 8006264:	40014400 	.word	0x40014400
 8006268:	40014800 	.word	0x40014800
 800626c:	40001800 	.word	0x40001800
 8006270:	40001c00 	.word	0x40001c00
 8006274:	40002000 	.word	0x40002000

08006278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f023 0201 	bic.w	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006350 <TIM_OC1_SetConfig+0xd8>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0302 	bic.w	r3, r3, #2
 80062c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a21      	ldr	r2, [pc, #132]	@ (8006354 <TIM_OC1_SetConfig+0xdc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_OC1_SetConfig+0x64>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a20      	ldr	r2, [pc, #128]	@ (8006358 <TIM_OC1_SetConfig+0xe0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d10c      	bne.n	80062f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0308 	bic.w	r3, r3, #8
 80062e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 0304 	bic.w	r3, r3, #4
 80062f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a16      	ldr	r2, [pc, #88]	@ (8006354 <TIM_OC1_SetConfig+0xdc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_OC1_SetConfig+0x8e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <TIM_OC1_SetConfig+0xe0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d111      	bne.n	800632a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800630c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	621a      	str	r2, [r3, #32]
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	fffeff8f 	.word	0xfffeff8f
 8006354:	40010000 	.word	0x40010000
 8006358:	40010400 	.word	0x40010400

0800635c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f023 0210 	bic.w	r2, r3, #16
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4b2e      	ldr	r3, [pc, #184]	@ (8006440 <TIM_OC2_SetConfig+0xe4>)
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0320 	bic.w	r3, r3, #32
 80063a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a23      	ldr	r2, [pc, #140]	@ (8006444 <TIM_OC2_SetConfig+0xe8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_OC2_SetConfig+0x68>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a22      	ldr	r2, [pc, #136]	@ (8006448 <TIM_OC2_SetConfig+0xec>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d10d      	bne.n	80063e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a18      	ldr	r2, [pc, #96]	@ (8006444 <TIM_OC2_SetConfig+0xe8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_OC2_SetConfig+0x94>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a17      	ldr	r2, [pc, #92]	@ (8006448 <TIM_OC2_SetConfig+0xec>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d113      	bne.n	8006418 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	feff8fff 	.word	0xfeff8fff
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400

0800644c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4b2d      	ldr	r3, [pc, #180]	@ (800652c <TIM_OC3_SetConfig+0xe0>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a22      	ldr	r2, [pc, #136]	@ (8006530 <TIM_OC3_SetConfig+0xe4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_OC3_SetConfig+0x66>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a21      	ldr	r2, [pc, #132]	@ (8006534 <TIM_OC3_SetConfig+0xe8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10d      	bne.n	80064ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a17      	ldr	r2, [pc, #92]	@ (8006530 <TIM_OC3_SetConfig+0xe4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC3_SetConfig+0x92>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a16      	ldr	r2, [pc, #88]	@ (8006534 <TIM_OC3_SetConfig+0xe8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d113      	bne.n	8006506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	621a      	str	r2, [r3, #32]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	fffeff8f 	.word	0xfffeff8f
 8006530:	40010000 	.word	0x40010000
 8006534:	40010400 	.word	0x40010400

08006538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4b1e      	ldr	r3, [pc, #120]	@ (80065dc <TIM_OC4_SetConfig+0xa4>)
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800656e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	031b      	lsls	r3, r3, #12
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a13      	ldr	r2, [pc, #76]	@ (80065e0 <TIM_OC4_SetConfig+0xa8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC4_SetConfig+0x68>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a12      	ldr	r2, [pc, #72]	@ (80065e4 <TIM_OC4_SetConfig+0xac>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d109      	bne.n	80065b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	019b      	lsls	r3, r3, #6
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	feff8fff 	.word	0xfeff8fff
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40010400 	.word	0x40010400

080065e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4b1b      	ldr	r3, [pc, #108]	@ (8006680 <TIM_OC5_SetConfig+0x98>)
 8006614:	4013      	ands	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006628:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	041b      	lsls	r3, r3, #16
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a12      	ldr	r2, [pc, #72]	@ (8006684 <TIM_OC5_SetConfig+0x9c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_OC5_SetConfig+0x5e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a11      	ldr	r2, [pc, #68]	@ (8006688 <TIM_OC5_SetConfig+0xa0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d109      	bne.n	800665a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800664c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	621a      	str	r2, [r3, #32]
}
 8006674:	bf00      	nop
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	fffeff8f 	.word	0xfffeff8f
 8006684:	40010000 	.word	0x40010000
 8006688:	40010400 	.word	0x40010400

0800668c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006728 <TIM_OC6_SetConfig+0x9c>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	051b      	lsls	r3, r3, #20
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a13      	ldr	r2, [pc, #76]	@ (800672c <TIM_OC6_SetConfig+0xa0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC6_SetConfig+0x60>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a12      	ldr	r2, [pc, #72]	@ (8006730 <TIM_OC6_SetConfig+0xa4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d109      	bne.n	8006700 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	feff8fff 	.word	0xfeff8fff
 800672c:	40010000 	.word	0x40010000
 8006730:	40010400 	.word	0x40010400

08006734 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f023 0201 	bic.w	r2, r3, #1
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4a28      	ldr	r2, [pc, #160]	@ (8006800 <TIM_TI1_SetConfig+0xcc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01b      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006768:	d017      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a25      	ldr	r2, [pc, #148]	@ (8006804 <TIM_TI1_SetConfig+0xd0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4a24      	ldr	r2, [pc, #144]	@ (8006808 <TIM_TI1_SetConfig+0xd4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4a23      	ldr	r2, [pc, #140]	@ (800680c <TIM_TI1_SetConfig+0xd8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a22      	ldr	r2, [pc, #136]	@ (8006810 <TIM_TI1_SetConfig+0xdc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a21      	ldr	r2, [pc, #132]	@ (8006814 <TIM_TI1_SetConfig+0xe0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a20      	ldr	r2, [pc, #128]	@ (8006818 <TIM_TI1_SetConfig+0xe4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d101      	bne.n	800679e <TIM_TI1_SetConfig+0x6a>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <TIM_TI1_SetConfig+0x6c>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e003      	b.n	80067be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f023 030a 	bic.w	r3, r3, #10
 80067d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f003 030a 	and.w	r3, r3, #10
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40010000 	.word	0x40010000
 8006804:	40000400 	.word	0x40000400
 8006808:	40000800 	.word	0x40000800
 800680c:	40000c00 	.word	0x40000c00
 8006810:	40010400 	.word	0x40010400
 8006814:	40014000 	.word	0x40014000
 8006818:	40001800 	.word	0x40001800

0800681c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f023 0201 	bic.w	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f023 030a 	bic.w	r3, r3, #10
 8006858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	621a      	str	r2, [r3, #32]
}
 800686e:	bf00      	nop
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800687a:	b480      	push	{r7}
 800687c:	b087      	sub	sp, #28
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f023 0210 	bic.w	r2, r3, #16
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	031b      	lsls	r3, r3, #12
 80068be:	b29b      	uxth	r3, r3
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	621a      	str	r2, [r3, #32]
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f023 0210 	bic.w	r2, r3, #16
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800691e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	031b      	lsls	r3, r3, #12
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006930:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	621a      	str	r2, [r3, #32]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f023 0303 	bic.w	r3, r3, #3
 8006980:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006990:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	b2db      	uxtb	r3, r3
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80069a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	621a      	str	r2, [r3, #32]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	031b      	lsls	r3, r3, #12
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006a1e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	031b      	lsls	r3, r3, #12
 8006a24:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f043 0307 	orr.w	r3, r3, #7
 8006a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	609a      	str	r2, [r3, #8]
}
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	021a      	lsls	r2, r3, #8
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	609a      	str	r2, [r3, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2201      	movs	r2, #1
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1a      	ldr	r2, [r3, #32]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	43db      	mvns	r3, r3
 8006ade:	401a      	ands	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	fa01 f303 	lsl.w	r3, r1, r3
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e06d      	b.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a30      	ldr	r2, [pc, #192]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d004      	beq.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d108      	bne.n	8006b66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a20      	ldr	r2, [pc, #128]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d022      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b92:	d01d      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	@ (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d018      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1a      	ldr	r2, [pc, #104]	@ (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a15      	ldr	r2, [pc, #84]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	@ (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a15      	ldr	r2, [pc, #84]	@ (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10c      	bne.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40010400 	.word	0x40010400
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40001800 	.word	0x40001800

08006c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e040      	b.n	8006cf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fb fd88 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2224      	movs	r2, #36	@ 0x24
 8006c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fe6c 	bl	8007984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fc05 	bl	80074bc <UART_SetConfig>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e01b      	b.n	8006cf4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0201 	orr.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 feeb 	bl	8007ac8 <UART_CheckIdleState>
 8006cf2:	4603      	mov	r3, r0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	@ 0x28
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	603b      	str	r3, [r7, #0]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d177      	bne.n	8006e04 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <HAL_UART_Transmit+0x24>
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e070      	b.n	8006e06 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2221      	movs	r2, #33	@ 0x21
 8006d30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d32:	f7fb ff6b 	bl	8002c0c <HAL_GetTick>
 8006d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	88fa      	ldrh	r2, [r7, #6]
 8006d44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d50:	d108      	bne.n	8006d64 <HAL_UART_Transmit+0x68>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	e003      	b.n	8006d6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d6c:	e02f      	b.n	8006dce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2200      	movs	r2, #0
 8006d76:	2180      	movs	r1, #128	@ 0x80
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 ff4d 	bl	8007c18 <UART_WaitOnFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e03b      	b.n	8006e06 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10b      	bne.n	8006dac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	3302      	adds	r3, #2
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	e007      	b.n	8006dbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	781a      	ldrb	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	3301      	adds	r3, #1
 8006dba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1c9      	bne.n	8006d6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2200      	movs	r2, #0
 8006de2:	2140      	movs	r1, #64	@ 0x40
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 ff17 	bl	8007c18 <UART_WaitOnFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e005      	b.n	8006e06 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	e000      	b.n	8006e06 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006e04:	2302      	movs	r3, #2
  }
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3720      	adds	r7, #32
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b08a      	sub	sp, #40	@ 0x28
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d132      	bne.n	8006e8c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <HAL_UART_Receive_IT+0x24>
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e02b      	b.n	8006e8e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d018      	beq.n	8006e7c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	613b      	str	r3, [r7, #16]
   return(result);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	69f9      	ldr	r1, [r7, #28]
 8006e6e:	6a3a      	ldr	r2, [r7, #32]
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e6      	bne.n	8006e4a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 ff36 	bl	8007cf4 <UART_Start_Receive_IT>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	e000      	b.n	8006e8e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006e8c:	2302      	movs	r3, #2
  }
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3728      	adds	r7, #40	@ 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b0ba      	sub	sp, #232	@ 0xe8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ebe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ec2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d115      	bne.n	8006f00 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed8:	f003 0320 	and.w	r3, r3, #32
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00f      	beq.n	8006f00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 82ac 	beq.w	800744e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	4798      	blx	r3
      }
      return;
 8006efe:	e2a6      	b.n	800744e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8117 	beq.w	8007138 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006f1a:	4b85      	ldr	r3, [pc, #532]	@ (8007130 <HAL_UART_IRQHandler+0x298>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 810a 	beq.w	8007138 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d011      	beq.n	8006f54 <HAL_UART_IRQHandler+0xbc>
 8006f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2201      	movs	r2, #1
 8006f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f4a:	f043 0201 	orr.w	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d011      	beq.n	8006f84 <HAL_UART_IRQHandler+0xec>
 8006f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2202      	movs	r2, #2
 8006f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f7a:	f043 0204 	orr.w	r2, r3, #4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d011      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x11c>
 8006f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00b      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2204      	movs	r2, #4
 8006fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006faa:	f043 0202 	orr.w	r2, r3, #2
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d017      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fd0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fe6:	f043 0208 	orr.w	r2, r3, #8
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d012      	beq.n	8007022 <HAL_UART_IRQHandler+0x18a>
 8006ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007018:	f043 0220 	orr.w	r2, r3, #32
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 8212 	beq.w	8007452 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00d      	beq.n	8007056 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800703a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800705c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800706a:	2b40      	cmp	r3, #64	@ 0x40
 800706c:	d005      	beq.n	800707a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800706e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007072:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007076:	2b00      	cmp	r3, #0
 8007078:	d04f      	beq.n	800711a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 ff00 	bl	8007e80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708a:	2b40      	cmp	r3, #64	@ 0x40
 800708c:	d141      	bne.n	8007112 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3308      	adds	r3, #8
 80070b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1d9      	bne.n	800708e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d013      	beq.n	800710a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e6:	4a13      	ldr	r2, [pc, #76]	@ (8007134 <HAL_UART_IRQHandler+0x29c>)
 80070e8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fb ffec 	bl	80030cc <HAL_DMA_Abort_IT>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d017      	beq.n	800712a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007108:	e00f      	b.n	800712a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f9b6 	bl	800747c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007110:	e00b      	b.n	800712a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f9b2 	bl	800747c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007118:	e007      	b.n	800712a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f9ae 	bl	800747c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007128:	e193      	b.n	8007452 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712a:	bf00      	nop
    return;
 800712c:	e191      	b.n	8007452 <HAL_UART_IRQHandler+0x5ba>
 800712e:	bf00      	nop
 8007130:	04000120 	.word	0x04000120
 8007134:	08007f49 	.word	0x08007f49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800713c:	2b01      	cmp	r3, #1
 800713e:	f040 814c 	bne.w	80073da <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007146:	f003 0310 	and.w	r3, r3, #16
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 8145 	beq.w	80073da <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 813e 	beq.w	80073da <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2210      	movs	r2, #16
 8007164:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007170:	2b40      	cmp	r3, #64	@ 0x40
 8007172:	f040 80b6 	bne.w	80072e2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007182:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 8165 	beq.w	8007456 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007196:	429a      	cmp	r2, r3
 8007198:	f080 815d 	bcs.w	8007456 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b0:	f000 8086 	beq.w	80072c0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1da      	bne.n	80071b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800720e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007210:	f023 0301 	bic.w	r3, r3, #1
 8007214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3308      	adds	r3, #8
 800721e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007222:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007226:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800722a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e1      	bne.n	80071fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800724a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800724c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3308      	adds	r3, #8
 800725a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800725e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007260:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007264:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800726c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e3      	bne.n	800723a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800728e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007290:	f023 0310 	bic.w	r3, r3, #16
 8007294:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e4      	bne.n	8007280 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fb fe96 	bl	8002fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f8d8 	bl	8007490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072e0:	e0b9      	b.n	8007456 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 80ab 	beq.w	800745a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80a6 	beq.w	800745a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800731c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007322:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007330:	647b      	str	r3, [r7, #68]	@ 0x44
 8007332:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800733e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e4      	bne.n	800730e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3308      	adds	r3, #8
 800734a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	623b      	str	r3, [r7, #32]
   return(result);
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	f023 0301 	bic.w	r3, r3, #1
 800735a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007368:	633a      	str	r2, [r7, #48]	@ 0x30
 800736a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800736e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e3      	bne.n	8007344 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2220      	movs	r2, #32
 8007380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	60fb      	str	r3, [r7, #12]
   return(result);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f023 0310 	bic.w	r3, r3, #16
 80073a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	69b9      	ldr	r1, [r7, #24]
 80073b8:	69fa      	ldr	r2, [r7, #28]
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	617b      	str	r3, [r7, #20]
   return(result);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e4      	bne.n	8007390 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f85c 	bl	8007490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073d8:	e03f      	b.n	800745a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00e      	beq.n	8007404 <HAL_UART_IRQHandler+0x56c>
 80073e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d008      	beq.n	8007404 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80073fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f853 	bl	80074a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007402:	e02d      	b.n	8007460 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00e      	beq.n	800742e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01c      	beq.n	800745e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
    }
    return;
 800742c:	e017      	b.n	800745e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800742e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d012      	beq.n	8007460 <HAL_UART_IRQHandler+0x5c8>
 800743a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800743e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00c      	beq.n	8007460 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fd94 	bl	8007f74 <UART_EndTransmit_IT>
    return;
 800744c:	e008      	b.n	8007460 <HAL_UART_IRQHandler+0x5c8>
      return;
 800744e:	bf00      	nop
 8007450:	e006      	b.n	8007460 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007452:	bf00      	nop
 8007454:	e004      	b.n	8007460 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007456:	bf00      	nop
 8007458:	e002      	b.n	8007460 <HAL_UART_IRQHandler+0x5c8>
      return;
 800745a:	bf00      	nop
 800745c:	e000      	b.n	8007460 <HAL_UART_IRQHandler+0x5c8>
    return;
 800745e:	bf00      	nop
  }

}
 8007460:	37e8      	adds	r7, #232	@ 0xe8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop

08007468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	4ba6      	ldr	r3, [pc, #664]	@ (8007780 <UART_SetConfig+0x2c4>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	6979      	ldr	r1, [r7, #20]
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	430a      	orrs	r2, r1
 800752c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a94      	ldr	r2, [pc, #592]	@ (8007784 <UART_SetConfig+0x2c8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d120      	bne.n	800757a <UART_SetConfig+0xbe>
 8007538:	4b93      	ldr	r3, [pc, #588]	@ (8007788 <UART_SetConfig+0x2cc>)
 800753a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b03      	cmp	r3, #3
 8007544:	d816      	bhi.n	8007574 <UART_SetConfig+0xb8>
 8007546:	a201      	add	r2, pc, #4	@ (adr r2, 800754c <UART_SetConfig+0x90>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	0800755d 	.word	0x0800755d
 8007550:	08007569 	.word	0x08007569
 8007554:	08007563 	.word	0x08007563
 8007558:	0800756f 	.word	0x0800756f
 800755c:	2301      	movs	r3, #1
 800755e:	77fb      	strb	r3, [r7, #31]
 8007560:	e150      	b.n	8007804 <UART_SetConfig+0x348>
 8007562:	2302      	movs	r3, #2
 8007564:	77fb      	strb	r3, [r7, #31]
 8007566:	e14d      	b.n	8007804 <UART_SetConfig+0x348>
 8007568:	2304      	movs	r3, #4
 800756a:	77fb      	strb	r3, [r7, #31]
 800756c:	e14a      	b.n	8007804 <UART_SetConfig+0x348>
 800756e:	2308      	movs	r3, #8
 8007570:	77fb      	strb	r3, [r7, #31]
 8007572:	e147      	b.n	8007804 <UART_SetConfig+0x348>
 8007574:	2310      	movs	r3, #16
 8007576:	77fb      	strb	r3, [r7, #31]
 8007578:	e144      	b.n	8007804 <UART_SetConfig+0x348>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a83      	ldr	r2, [pc, #524]	@ (800778c <UART_SetConfig+0x2d0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d132      	bne.n	80075ea <UART_SetConfig+0x12e>
 8007584:	4b80      	ldr	r3, [pc, #512]	@ (8007788 <UART_SetConfig+0x2cc>)
 8007586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758a:	f003 030c 	and.w	r3, r3, #12
 800758e:	2b0c      	cmp	r3, #12
 8007590:	d828      	bhi.n	80075e4 <UART_SetConfig+0x128>
 8007592:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <UART_SetConfig+0xdc>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075cd 	.word	0x080075cd
 800759c:	080075e5 	.word	0x080075e5
 80075a0:	080075e5 	.word	0x080075e5
 80075a4:	080075e5 	.word	0x080075e5
 80075a8:	080075d9 	.word	0x080075d9
 80075ac:	080075e5 	.word	0x080075e5
 80075b0:	080075e5 	.word	0x080075e5
 80075b4:	080075e5 	.word	0x080075e5
 80075b8:	080075d3 	.word	0x080075d3
 80075bc:	080075e5 	.word	0x080075e5
 80075c0:	080075e5 	.word	0x080075e5
 80075c4:	080075e5 	.word	0x080075e5
 80075c8:	080075df 	.word	0x080075df
 80075cc:	2300      	movs	r3, #0
 80075ce:	77fb      	strb	r3, [r7, #31]
 80075d0:	e118      	b.n	8007804 <UART_SetConfig+0x348>
 80075d2:	2302      	movs	r3, #2
 80075d4:	77fb      	strb	r3, [r7, #31]
 80075d6:	e115      	b.n	8007804 <UART_SetConfig+0x348>
 80075d8:	2304      	movs	r3, #4
 80075da:	77fb      	strb	r3, [r7, #31]
 80075dc:	e112      	b.n	8007804 <UART_SetConfig+0x348>
 80075de:	2308      	movs	r3, #8
 80075e0:	77fb      	strb	r3, [r7, #31]
 80075e2:	e10f      	b.n	8007804 <UART_SetConfig+0x348>
 80075e4:	2310      	movs	r3, #16
 80075e6:	77fb      	strb	r3, [r7, #31]
 80075e8:	e10c      	b.n	8007804 <UART_SetConfig+0x348>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a68      	ldr	r2, [pc, #416]	@ (8007790 <UART_SetConfig+0x2d4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d120      	bne.n	8007636 <UART_SetConfig+0x17a>
 80075f4:	4b64      	ldr	r3, [pc, #400]	@ (8007788 <UART_SetConfig+0x2cc>)
 80075f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075fe:	2b30      	cmp	r3, #48	@ 0x30
 8007600:	d013      	beq.n	800762a <UART_SetConfig+0x16e>
 8007602:	2b30      	cmp	r3, #48	@ 0x30
 8007604:	d814      	bhi.n	8007630 <UART_SetConfig+0x174>
 8007606:	2b20      	cmp	r3, #32
 8007608:	d009      	beq.n	800761e <UART_SetConfig+0x162>
 800760a:	2b20      	cmp	r3, #32
 800760c:	d810      	bhi.n	8007630 <UART_SetConfig+0x174>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <UART_SetConfig+0x15c>
 8007612:	2b10      	cmp	r3, #16
 8007614:	d006      	beq.n	8007624 <UART_SetConfig+0x168>
 8007616:	e00b      	b.n	8007630 <UART_SetConfig+0x174>
 8007618:	2300      	movs	r3, #0
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e0f2      	b.n	8007804 <UART_SetConfig+0x348>
 800761e:	2302      	movs	r3, #2
 8007620:	77fb      	strb	r3, [r7, #31]
 8007622:	e0ef      	b.n	8007804 <UART_SetConfig+0x348>
 8007624:	2304      	movs	r3, #4
 8007626:	77fb      	strb	r3, [r7, #31]
 8007628:	e0ec      	b.n	8007804 <UART_SetConfig+0x348>
 800762a:	2308      	movs	r3, #8
 800762c:	77fb      	strb	r3, [r7, #31]
 800762e:	e0e9      	b.n	8007804 <UART_SetConfig+0x348>
 8007630:	2310      	movs	r3, #16
 8007632:	77fb      	strb	r3, [r7, #31]
 8007634:	e0e6      	b.n	8007804 <UART_SetConfig+0x348>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a56      	ldr	r2, [pc, #344]	@ (8007794 <UART_SetConfig+0x2d8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d120      	bne.n	8007682 <UART_SetConfig+0x1c6>
 8007640:	4b51      	ldr	r3, [pc, #324]	@ (8007788 <UART_SetConfig+0x2cc>)
 8007642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007646:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800764a:	2bc0      	cmp	r3, #192	@ 0xc0
 800764c:	d013      	beq.n	8007676 <UART_SetConfig+0x1ba>
 800764e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007650:	d814      	bhi.n	800767c <UART_SetConfig+0x1c0>
 8007652:	2b80      	cmp	r3, #128	@ 0x80
 8007654:	d009      	beq.n	800766a <UART_SetConfig+0x1ae>
 8007656:	2b80      	cmp	r3, #128	@ 0x80
 8007658:	d810      	bhi.n	800767c <UART_SetConfig+0x1c0>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <UART_SetConfig+0x1a8>
 800765e:	2b40      	cmp	r3, #64	@ 0x40
 8007660:	d006      	beq.n	8007670 <UART_SetConfig+0x1b4>
 8007662:	e00b      	b.n	800767c <UART_SetConfig+0x1c0>
 8007664:	2300      	movs	r3, #0
 8007666:	77fb      	strb	r3, [r7, #31]
 8007668:	e0cc      	b.n	8007804 <UART_SetConfig+0x348>
 800766a:	2302      	movs	r3, #2
 800766c:	77fb      	strb	r3, [r7, #31]
 800766e:	e0c9      	b.n	8007804 <UART_SetConfig+0x348>
 8007670:	2304      	movs	r3, #4
 8007672:	77fb      	strb	r3, [r7, #31]
 8007674:	e0c6      	b.n	8007804 <UART_SetConfig+0x348>
 8007676:	2308      	movs	r3, #8
 8007678:	77fb      	strb	r3, [r7, #31]
 800767a:	e0c3      	b.n	8007804 <UART_SetConfig+0x348>
 800767c:	2310      	movs	r3, #16
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e0c0      	b.n	8007804 <UART_SetConfig+0x348>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a44      	ldr	r2, [pc, #272]	@ (8007798 <UART_SetConfig+0x2dc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d125      	bne.n	80076d8 <UART_SetConfig+0x21c>
 800768c:	4b3e      	ldr	r3, [pc, #248]	@ (8007788 <UART_SetConfig+0x2cc>)
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800769a:	d017      	beq.n	80076cc <UART_SetConfig+0x210>
 800769c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076a0:	d817      	bhi.n	80076d2 <UART_SetConfig+0x216>
 80076a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076a6:	d00b      	beq.n	80076c0 <UART_SetConfig+0x204>
 80076a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076ac:	d811      	bhi.n	80076d2 <UART_SetConfig+0x216>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <UART_SetConfig+0x1fe>
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b6:	d006      	beq.n	80076c6 <UART_SetConfig+0x20a>
 80076b8:	e00b      	b.n	80076d2 <UART_SetConfig+0x216>
 80076ba:	2300      	movs	r3, #0
 80076bc:	77fb      	strb	r3, [r7, #31]
 80076be:	e0a1      	b.n	8007804 <UART_SetConfig+0x348>
 80076c0:	2302      	movs	r3, #2
 80076c2:	77fb      	strb	r3, [r7, #31]
 80076c4:	e09e      	b.n	8007804 <UART_SetConfig+0x348>
 80076c6:	2304      	movs	r3, #4
 80076c8:	77fb      	strb	r3, [r7, #31]
 80076ca:	e09b      	b.n	8007804 <UART_SetConfig+0x348>
 80076cc:	2308      	movs	r3, #8
 80076ce:	77fb      	strb	r3, [r7, #31]
 80076d0:	e098      	b.n	8007804 <UART_SetConfig+0x348>
 80076d2:	2310      	movs	r3, #16
 80076d4:	77fb      	strb	r3, [r7, #31]
 80076d6:	e095      	b.n	8007804 <UART_SetConfig+0x348>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a2f      	ldr	r2, [pc, #188]	@ (800779c <UART_SetConfig+0x2e0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d125      	bne.n	800772e <UART_SetConfig+0x272>
 80076e2:	4b29      	ldr	r3, [pc, #164]	@ (8007788 <UART_SetConfig+0x2cc>)
 80076e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076f0:	d017      	beq.n	8007722 <UART_SetConfig+0x266>
 80076f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076f6:	d817      	bhi.n	8007728 <UART_SetConfig+0x26c>
 80076f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076fc:	d00b      	beq.n	8007716 <UART_SetConfig+0x25a>
 80076fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007702:	d811      	bhi.n	8007728 <UART_SetConfig+0x26c>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <UART_SetConfig+0x254>
 8007708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800770c:	d006      	beq.n	800771c <UART_SetConfig+0x260>
 800770e:	e00b      	b.n	8007728 <UART_SetConfig+0x26c>
 8007710:	2301      	movs	r3, #1
 8007712:	77fb      	strb	r3, [r7, #31]
 8007714:	e076      	b.n	8007804 <UART_SetConfig+0x348>
 8007716:	2302      	movs	r3, #2
 8007718:	77fb      	strb	r3, [r7, #31]
 800771a:	e073      	b.n	8007804 <UART_SetConfig+0x348>
 800771c:	2304      	movs	r3, #4
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e070      	b.n	8007804 <UART_SetConfig+0x348>
 8007722:	2308      	movs	r3, #8
 8007724:	77fb      	strb	r3, [r7, #31]
 8007726:	e06d      	b.n	8007804 <UART_SetConfig+0x348>
 8007728:	2310      	movs	r3, #16
 800772a:	77fb      	strb	r3, [r7, #31]
 800772c:	e06a      	b.n	8007804 <UART_SetConfig+0x348>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1b      	ldr	r2, [pc, #108]	@ (80077a0 <UART_SetConfig+0x2e4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d138      	bne.n	80077aa <UART_SetConfig+0x2ee>
 8007738:	4b13      	ldr	r3, [pc, #76]	@ (8007788 <UART_SetConfig+0x2cc>)
 800773a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800773e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007742:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007746:	d017      	beq.n	8007778 <UART_SetConfig+0x2bc>
 8007748:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800774c:	d82a      	bhi.n	80077a4 <UART_SetConfig+0x2e8>
 800774e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007752:	d00b      	beq.n	800776c <UART_SetConfig+0x2b0>
 8007754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007758:	d824      	bhi.n	80077a4 <UART_SetConfig+0x2e8>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <UART_SetConfig+0x2aa>
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007762:	d006      	beq.n	8007772 <UART_SetConfig+0x2b6>
 8007764:	e01e      	b.n	80077a4 <UART_SetConfig+0x2e8>
 8007766:	2300      	movs	r3, #0
 8007768:	77fb      	strb	r3, [r7, #31]
 800776a:	e04b      	b.n	8007804 <UART_SetConfig+0x348>
 800776c:	2302      	movs	r3, #2
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e048      	b.n	8007804 <UART_SetConfig+0x348>
 8007772:	2304      	movs	r3, #4
 8007774:	77fb      	strb	r3, [r7, #31]
 8007776:	e045      	b.n	8007804 <UART_SetConfig+0x348>
 8007778:	2308      	movs	r3, #8
 800777a:	77fb      	strb	r3, [r7, #31]
 800777c:	e042      	b.n	8007804 <UART_SetConfig+0x348>
 800777e:	bf00      	nop
 8007780:	efff69f3 	.word	0xefff69f3
 8007784:	40011000 	.word	0x40011000
 8007788:	40023800 	.word	0x40023800
 800778c:	40004400 	.word	0x40004400
 8007790:	40004800 	.word	0x40004800
 8007794:	40004c00 	.word	0x40004c00
 8007798:	40005000 	.word	0x40005000
 800779c:	40011400 	.word	0x40011400
 80077a0:	40007800 	.word	0x40007800
 80077a4:	2310      	movs	r3, #16
 80077a6:	77fb      	strb	r3, [r7, #31]
 80077a8:	e02c      	b.n	8007804 <UART_SetConfig+0x348>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a72      	ldr	r2, [pc, #456]	@ (8007978 <UART_SetConfig+0x4bc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d125      	bne.n	8007800 <UART_SetConfig+0x344>
 80077b4:	4b71      	ldr	r3, [pc, #452]	@ (800797c <UART_SetConfig+0x4c0>)
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80077be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80077c2:	d017      	beq.n	80077f4 <UART_SetConfig+0x338>
 80077c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80077c8:	d817      	bhi.n	80077fa <UART_SetConfig+0x33e>
 80077ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ce:	d00b      	beq.n	80077e8 <UART_SetConfig+0x32c>
 80077d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d4:	d811      	bhi.n	80077fa <UART_SetConfig+0x33e>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <UART_SetConfig+0x326>
 80077da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077de:	d006      	beq.n	80077ee <UART_SetConfig+0x332>
 80077e0:	e00b      	b.n	80077fa <UART_SetConfig+0x33e>
 80077e2:	2300      	movs	r3, #0
 80077e4:	77fb      	strb	r3, [r7, #31]
 80077e6:	e00d      	b.n	8007804 <UART_SetConfig+0x348>
 80077e8:	2302      	movs	r3, #2
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e00a      	b.n	8007804 <UART_SetConfig+0x348>
 80077ee:	2304      	movs	r3, #4
 80077f0:	77fb      	strb	r3, [r7, #31]
 80077f2:	e007      	b.n	8007804 <UART_SetConfig+0x348>
 80077f4:	2308      	movs	r3, #8
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e004      	b.n	8007804 <UART_SetConfig+0x348>
 80077fa:	2310      	movs	r3, #16
 80077fc:	77fb      	strb	r3, [r7, #31]
 80077fe:	e001      	b.n	8007804 <UART_SetConfig+0x348>
 8007800:	2310      	movs	r3, #16
 8007802:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800780c:	d15b      	bne.n	80078c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800780e:	7ffb      	ldrb	r3, [r7, #31]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d828      	bhi.n	8007866 <UART_SetConfig+0x3aa>
 8007814:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <UART_SetConfig+0x360>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007841 	.word	0x08007841
 8007820:	08007849 	.word	0x08007849
 8007824:	08007851 	.word	0x08007851
 8007828:	08007867 	.word	0x08007867
 800782c:	08007857 	.word	0x08007857
 8007830:	08007867 	.word	0x08007867
 8007834:	08007867 	.word	0x08007867
 8007838:	08007867 	.word	0x08007867
 800783c:	0800785f 	.word	0x0800785f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007840:	f7fc fef8 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8007844:	61b8      	str	r0, [r7, #24]
        break;
 8007846:	e013      	b.n	8007870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007848:	f7fc ff08 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 800784c:	61b8      	str	r0, [r7, #24]
        break;
 800784e:	e00f      	b.n	8007870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007850:	4b4b      	ldr	r3, [pc, #300]	@ (8007980 <UART_SetConfig+0x4c4>)
 8007852:	61bb      	str	r3, [r7, #24]
        break;
 8007854:	e00c      	b.n	8007870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007856:	f7fc fddb 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 800785a:	61b8      	str	r0, [r7, #24]
        break;
 800785c:	e008      	b.n	8007870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800785e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007862:	61bb      	str	r3, [r7, #24]
        break;
 8007864:	e004      	b.n	8007870 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	77bb      	strb	r3, [r7, #30]
        break;
 800786e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d074      	beq.n	8007960 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	005a      	lsls	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	441a      	add	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	fbb2 f3f3 	udiv	r3, r2, r3
 800788a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b0f      	cmp	r3, #15
 8007890:	d916      	bls.n	80078c0 <UART_SetConfig+0x404>
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007898:	d212      	bcs.n	80078c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f023 030f 	bic.w	r3, r3, #15
 80078a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	89fb      	ldrh	r3, [r7, #14]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	89fa      	ldrh	r2, [r7, #14]
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	e04f      	b.n	8007960 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	77bb      	strb	r3, [r7, #30]
 80078c4:	e04c      	b.n	8007960 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078c6:	7ffb      	ldrb	r3, [r7, #31]
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d828      	bhi.n	800791e <UART_SetConfig+0x462>
 80078cc:	a201      	add	r2, pc, #4	@ (adr r2, 80078d4 <UART_SetConfig+0x418>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007901 	.word	0x08007901
 80078dc:	08007909 	.word	0x08007909
 80078e0:	0800791f 	.word	0x0800791f
 80078e4:	0800790f 	.word	0x0800790f
 80078e8:	0800791f 	.word	0x0800791f
 80078ec:	0800791f 	.word	0x0800791f
 80078f0:	0800791f 	.word	0x0800791f
 80078f4:	08007917 	.word	0x08007917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f8:	f7fc fe9c 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80078fc:	61b8      	str	r0, [r7, #24]
        break;
 80078fe:	e013      	b.n	8007928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007900:	f7fc feac 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 8007904:	61b8      	str	r0, [r7, #24]
        break;
 8007906:	e00f      	b.n	8007928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007908:	4b1d      	ldr	r3, [pc, #116]	@ (8007980 <UART_SetConfig+0x4c4>)
 800790a:	61bb      	str	r3, [r7, #24]
        break;
 800790c:	e00c      	b.n	8007928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800790e:	f7fc fd7f 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 8007912:	61b8      	str	r0, [r7, #24]
        break;
 8007914:	e008      	b.n	8007928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800791a:	61bb      	str	r3, [r7, #24]
        break;
 800791c:	e004      	b.n	8007928 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	77bb      	strb	r3, [r7, #30]
        break;
 8007926:	bf00      	nop
    }

    if (pclk != 0U)
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d018      	beq.n	8007960 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	085a      	lsrs	r2, r3, #1
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	441a      	add	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b0f      	cmp	r3, #15
 8007946:	d909      	bls.n	800795c <UART_SetConfig+0x4a0>
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800794e:	d205      	bcs.n	800795c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	b29a      	uxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	60da      	str	r2, [r3, #12]
 800795a:	e001      	b.n	8007960 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800796c:	7fbb      	ldrb	r3, [r7, #30]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3720      	adds	r7, #32
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40007c00 	.word	0x40007c00
 800797c:	40023800 	.word	0x40023800
 8007980:	00f42400 	.word	0x00f42400

08007984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f6:	f003 0304 	and.w	r3, r3, #4
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01a      	beq.n	8007a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a82:	d10a      	bne.n	8007a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	605a      	str	r2, [r3, #4]
  }
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b098      	sub	sp, #96	@ 0x60
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ad8:	f7fb f898 	bl	8002c0c <HAL_GetTick>
 8007adc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d12e      	bne.n	8007b4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af4:	2200      	movs	r2, #0
 8007af6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f88c 	bl	8007c18 <UART_WaitOnFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d021      	beq.n	8007b4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e6      	bne.n	8007b06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e062      	b.n	8007c10 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d149      	bne.n	8007bec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b60:	2200      	movs	r2, #0
 8007b62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f856 	bl	8007c18 <UART_WaitOnFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d03c      	beq.n	8007bec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e6      	bne.n	8007b72 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3308      	adds	r3, #8
 8007baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bc4:	61fa      	str	r2, [r7, #28]
 8007bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	69b9      	ldr	r1, [r7, #24]
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e5      	bne.n	8007ba4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e011      	b.n	8007c10 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3758      	adds	r7, #88	@ 0x58
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	603b      	str	r3, [r7, #0]
 8007c24:	4613      	mov	r3, r2
 8007c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c28:	e04f      	b.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d04b      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c32:	f7fa ffeb 	bl	8002c0c <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d302      	bcc.n	8007c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e04e      	b.n	8007cea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d037      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b80      	cmp	r3, #128	@ 0x80
 8007c5e:	d034      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b40      	cmp	r3, #64	@ 0x40
 8007c64:	d031      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d110      	bne.n	8007c96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2208      	movs	r2, #8
 8007c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 f8ff 	bl	8007e80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2208      	movs	r2, #8
 8007c86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e029      	b.n	8007cea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ca4:	d111      	bne.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f8e5 	bl	8007e80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e00f      	b.n	8007cea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69da      	ldr	r2, [r3, #28]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	bf0c      	ite	eq
 8007cda:	2301      	moveq	r3, #1
 8007cdc:	2300      	movne	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d0a0      	beq.n	8007c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b097      	sub	sp, #92	@ 0x5c
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	88fa      	ldrh	r2, [r7, #6]
 8007d0c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	88fa      	ldrh	r2, [r7, #6]
 8007d14:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d26:	d10e      	bne.n	8007d46 <UART_Start_Receive_IT+0x52>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d105      	bne.n	8007d3c <UART_Start_Receive_IT+0x48>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007d36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d3a:	e02d      	b.n	8007d98 <UART_Start_Receive_IT+0xa4>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	22ff      	movs	r2, #255	@ 0xff
 8007d40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d44:	e028      	b.n	8007d98 <UART_Start_Receive_IT+0xa4>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10d      	bne.n	8007d6a <UART_Start_Receive_IT+0x76>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d104      	bne.n	8007d60 <UART_Start_Receive_IT+0x6c>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	22ff      	movs	r2, #255	@ 0xff
 8007d5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d5e:	e01b      	b.n	8007d98 <UART_Start_Receive_IT+0xa4>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	227f      	movs	r2, #127	@ 0x7f
 8007d64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d68:	e016      	b.n	8007d98 <UART_Start_Receive_IT+0xa4>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d72:	d10d      	bne.n	8007d90 <UART_Start_Receive_IT+0x9c>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <UART_Start_Receive_IT+0x92>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	227f      	movs	r2, #127	@ 0x7f
 8007d80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d84:	e008      	b.n	8007d98 <UART_Start_Receive_IT+0xa4>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	223f      	movs	r2, #63	@ 0x3f
 8007d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d8e:	e003      	b.n	8007d98 <UART_Start_Receive_IT+0xa4>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2222      	movs	r2, #34	@ 0x22
 8007da4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3308      	adds	r3, #8
 8007dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007dc8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007dca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007dce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e5      	bne.n	8007da8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007de4:	d107      	bne.n	8007df6 <UART_Start_Receive_IT+0x102>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d103      	bne.n	8007df6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4a21      	ldr	r2, [pc, #132]	@ (8007e78 <UART_Start_Receive_IT+0x184>)
 8007df2:	669a      	str	r2, [r3, #104]	@ 0x68
 8007df4:	e002      	b.n	8007dfc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4a20      	ldr	r2, [pc, #128]	@ (8007e7c <UART_Start_Receive_IT+0x188>)
 8007dfa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d019      	beq.n	8007e38 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e24:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e6      	bne.n	8007e04 <UART_Start_Receive_IT+0x110>
 8007e36:	e018      	b.n	8007e6a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	613b      	str	r3, [r7, #16]
   return(result);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f043 0320 	orr.w	r3, r3, #32
 8007e4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e56:	623b      	str	r3, [r7, #32]
 8007e58:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	69f9      	ldr	r1, [r7, #28]
 8007e5c:	6a3a      	ldr	r2, [r7, #32]
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e6      	bne.n	8007e38 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	375c      	adds	r7, #92	@ 0x5c
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	08008171 	.word	0x08008171
 8007e7c:	08007fc9 	.word	0x08007fc9

08007e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b095      	sub	sp, #84	@ 0x54
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ea8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e6      	bne.n	8007e88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	f023 0301 	bic.w	r3, r3, #1
 8007ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e5      	bne.n	8007eba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d118      	bne.n	8007f28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f023 0310 	bic.w	r3, r3, #16
 8007f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f14:	61bb      	str	r3, [r7, #24]
 8007f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6979      	ldr	r1, [r7, #20]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	613b      	str	r3, [r7, #16]
   return(result);
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e6      	bne.n	8007ef6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f3c:	bf00      	nop
 8007f3e:	3754      	adds	r7, #84	@ 0x54
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7ff fa88 	bl	800747c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f6c:	bf00      	nop
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	61bb      	str	r3, [r7, #24]
 8007f9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6979      	ldr	r1, [r7, #20]
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff fa54 	bl	8007468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fc0:	bf00      	nop
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b09c      	sub	sp, #112	@ 0x70
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fd6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fe0:	2b22      	cmp	r3, #34	@ 0x22
 8007fe2:	f040 80b9 	bne.w	8008158 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ff0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ff4:	b2d9      	uxtb	r1, r3
 8007ff6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008000:	400a      	ands	r2, r1
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008016:	b29b      	uxth	r3, r3
 8008018:	3b01      	subs	r3, #1
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	f040 809c 	bne.w	8008168 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800803e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800804e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008050:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800805c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e6      	bne.n	8008030 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008074:	f023 0301 	bic.w	r3, r3, #1
 8008078:	667b      	str	r3, [r7, #100]	@ 0x64
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3308      	adds	r3, #8
 8008080:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008082:	647a      	str	r2, [r7, #68]	@ 0x44
 8008084:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e5      	bne.n	8008062 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d018      	beq.n	80080ea <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	623b      	str	r3, [r7, #32]
   return(result);
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80080d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e6      	bne.n	80080b8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d12e      	bne.n	8008150 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	60fb      	str	r3, [r7, #12]
   return(result);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f023 0310 	bic.w	r3, r3, #16
 800810c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008116:	61fb      	str	r3, [r7, #28]
 8008118:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	69b9      	ldr	r1, [r7, #24]
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	617b      	str	r3, [r7, #20]
   return(result);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e6      	bne.n	80080f8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b10      	cmp	r3, #16
 8008136:	d103      	bne.n	8008140 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2210      	movs	r2, #16
 800813e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7ff f9a1 	bl	8007490 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800814e:	e00b      	b.n	8008168 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7f8 fe6d 	bl	8000e30 <HAL_UART_RxCpltCallback>
}
 8008156:	e007      	b.n	8008168 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0208 	orr.w	r2, r2, #8
 8008166:	619a      	str	r2, [r3, #24]
}
 8008168:	bf00      	nop
 800816a:	3770      	adds	r7, #112	@ 0x70
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b09c      	sub	sp, #112	@ 0x70
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800817e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008188:	2b22      	cmp	r3, #34	@ 0x22
 800818a:	f040 80b9 	bne.w	8008300 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008194:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800819c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800819e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80081a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80081a6:	4013      	ands	r3, r2
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b2:	1c9a      	adds	r2, r3, #2
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081be:	b29b      	uxth	r3, r3
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 809c 	bne.w	8008310 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80081e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80081f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e6      	bne.n	80081d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3308      	adds	r3, #8
 8008210:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	f023 0301 	bic.w	r3, r3, #1
 8008220:	663b      	str	r3, [r7, #96]	@ 0x60
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800822a:	643a      	str	r2, [r7, #64]	@ 0x40
 800822c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008230:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e5      	bne.n	800820a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d018      	beq.n	8008292 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	61fb      	str	r3, [r7, #28]
   return(result);
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800827e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008280:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e6      	bne.n	8008260 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008296:	2b01      	cmp	r3, #1
 8008298:	d12e      	bne.n	80082f8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f023 0310 	bic.w	r3, r3, #16
 80082b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082be:	61bb      	str	r3, [r7, #24]
 80082c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6979      	ldr	r1, [r7, #20]
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	613b      	str	r3, [r7, #16]
   return(result);
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e6      	bne.n	80082a0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f003 0310 	and.w	r3, r3, #16
 80082dc:	2b10      	cmp	r3, #16
 80082de:	d103      	bne.n	80082e8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2210      	movs	r2, #16
 80082e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff f8cd 	bl	8007490 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f6:	e00b      	b.n	8008310 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7f8 fd99 	bl	8000e30 <HAL_UART_RxCpltCallback>
}
 80082fe:	e007      	b.n	8008310 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0208 	orr.w	r2, r2, #8
 800830e:	619a      	str	r2, [r3, #24]
}
 8008310:	bf00      	nop
 8008312:	3770      	adds	r7, #112	@ 0x70
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008318:	b084      	sub	sp, #16
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	f107 001c 	add.w	r0, r7, #28
 8008326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800832a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800832e:	2b01      	cmp	r3, #1
 8008330:	d121      	bne.n	8008376 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008336:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	4b21      	ldr	r3, [pc, #132]	@ (80083c8 <USB_CoreInit+0xb0>)
 8008344:	4013      	ands	r3, r2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008356:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800835a:	2b01      	cmp	r3, #1
 800835c:	d105      	bne.n	800836a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa92 	bl	8008894 <USB_CoreReset>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
 8008374:	e010      	b.n	8008398 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa86 	bl	8008894 <USB_CoreReset>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008390:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008398:	7fbb      	ldrb	r3, [r7, #30]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d10b      	bne.n	80083b6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f043 0206 	orr.w	r2, r3, #6
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f043 0220 	orr.w	r2, r3, #32
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083c2:	b004      	add	sp, #16
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	ffbdffbf 	.word	0xffbdffbf

080083cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f023 0201 	bic.w	r2, r3, #1
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d115      	bne.n	800843c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800841c:	200a      	movs	r0, #10
 800841e:	f7fa fc01 	bl	8002c24 <HAL_Delay>
      ms += 10U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	330a      	adds	r3, #10
 8008426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fa25 	bl	8008878 <USB_GetMode>
 800842e:	4603      	mov	r3, r0
 8008430:	2b01      	cmp	r3, #1
 8008432:	d01e      	beq.n	8008472 <USB_SetCurrentMode+0x84>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2bc7      	cmp	r3, #199	@ 0xc7
 8008438:	d9f0      	bls.n	800841c <USB_SetCurrentMode+0x2e>
 800843a:	e01a      	b.n	8008472 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d115      	bne.n	800846e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800844e:	200a      	movs	r0, #10
 8008450:	f7fa fbe8 	bl	8002c24 <HAL_Delay>
      ms += 10U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	330a      	adds	r3, #10
 8008458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa0c 	bl	8008878 <USB_GetMode>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <USB_SetCurrentMode+0x84>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2bc7      	cmp	r3, #199	@ 0xc7
 800846a:	d9f0      	bls.n	800844e <USB_SetCurrentMode+0x60>
 800846c:	e001      	b.n	8008472 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e005      	b.n	800847e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2bc8      	cmp	r3, #200	@ 0xc8
 8008476:	d101      	bne.n	800847c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e000      	b.n	800847e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008488:	b084      	sub	sp, #16
 800848a:	b580      	push	{r7, lr}
 800848c:	b086      	sub	sp, #24
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084a2:	2300      	movs	r3, #0
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	e009      	b.n	80084bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	3340      	adds	r3, #64	@ 0x40
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	2200      	movs	r2, #0
 80084b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3301      	adds	r3, #1
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	2b0e      	cmp	r3, #14
 80084c0:	d9f2      	bls.n	80084a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d11c      	bne.n	8008504 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084d8:	f043 0302 	orr.w	r3, r3, #2
 80084dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	e005      	b.n	8008510 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008508:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008516:	461a      	mov	r2, r3
 8008518:	2300      	movs	r3, #0
 800851a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800851c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008520:	2b01      	cmp	r3, #1
 8008522:	d10d      	bne.n	8008540 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800852c:	2100      	movs	r1, #0
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f968 	bl	8008804 <USB_SetDevSpeed>
 8008534:	e008      	b.n	8008548 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008536:	2101      	movs	r1, #1
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f963 	bl	8008804 <USB_SetDevSpeed>
 800853e:	e003      	b.n	8008548 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008540:	2103      	movs	r1, #3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f95e 	bl	8008804 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008548:	2110      	movs	r1, #16
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8fa 	bl	8008744 <USB_FlushTxFifo>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f924 	bl	80087a8 <USB_FlushRxFifo>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008570:	461a      	mov	r2, r3
 8008572:	2300      	movs	r3, #0
 8008574:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800857c:	461a      	mov	r2, r3
 800857e:	2300      	movs	r3, #0
 8008580:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008588:	461a      	mov	r2, r3
 800858a:	2300      	movs	r3, #0
 800858c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800858e:	2300      	movs	r3, #0
 8008590:	613b      	str	r3, [r7, #16]
 8008592:	e043      	b.n	800861c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085aa:	d118      	bne.n	80085de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085be:	461a      	mov	r2, r3
 80085c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	e013      	b.n	80085f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085d4:	461a      	mov	r2, r3
 80085d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	e008      	b.n	80085f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ea:	461a      	mov	r2, r3
 80085ec:	2300      	movs	r3, #0
 80085ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085fc:	461a      	mov	r2, r3
 80085fe:	2300      	movs	r3, #0
 8008600:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4413      	add	r3, r2
 800860a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800860e:	461a      	mov	r2, r3
 8008610:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008614:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	3301      	adds	r3, #1
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008620:	461a      	mov	r2, r3
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	4293      	cmp	r3, r2
 8008626:	d3b5      	bcc.n	8008594 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008628:	2300      	movs	r3, #0
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	e043      	b.n	80086b6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008644:	d118      	bne.n	8008678 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008658:	461a      	mov	r2, r3
 800865a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	e013      	b.n	800868a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800866e:	461a      	mov	r2, r3
 8008670:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	e008      	b.n	800868a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008684:	461a      	mov	r2, r3
 8008686:	2300      	movs	r3, #0
 8008688:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008696:	461a      	mov	r2, r3
 8008698:	2300      	movs	r3, #0
 800869a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a8:	461a      	mov	r2, r3
 80086aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80086ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	3301      	adds	r3, #1
 80086b4:	613b      	str	r3, [r7, #16]
 80086b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80086ba:	461a      	mov	r2, r3
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	4293      	cmp	r3, r2
 80086c0:	d3b5      	bcc.n	800862e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80086e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d105      	bne.n	80086f8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	f043 0210 	orr.w	r2, r3, #16
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	699a      	ldr	r2, [r3, #24]
 80086fc:	4b0f      	ldr	r3, [pc, #60]	@ (800873c <USB_DevInit+0x2b4>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008704:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	f043 0208 	orr.w	r2, r3, #8
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008718:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800871c:	2b01      	cmp	r3, #1
 800871e:	d105      	bne.n	800872c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	699a      	ldr	r2, [r3, #24]
 8008724:	4b06      	ldr	r3, [pc, #24]	@ (8008740 <USB_DevInit+0x2b8>)
 8008726:	4313      	orrs	r3, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008738:	b004      	add	sp, #16
 800873a:	4770      	bx	lr
 800873c:	803c3800 	.word	0x803c3800
 8008740:	40000004 	.word	0x40000004

08008744 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3301      	adds	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800875e:	d901      	bls.n	8008764 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e01b      	b.n	800879c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	daf2      	bge.n	8008752 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	019b      	lsls	r3, r3, #6
 8008774:	f043 0220 	orr.w	r2, r3, #32
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008788:	d901      	bls.n	800878e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e006      	b.n	800879c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b20      	cmp	r3, #32
 8008798:	d0f0      	beq.n	800877c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087c0:	d901      	bls.n	80087c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e018      	b.n	80087f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	daf2      	bge.n	80087b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2210      	movs	r2, #16
 80087d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087e4:	d901      	bls.n	80087ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e006      	b.n	80087f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d0f0      	beq.n	80087d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	78fb      	ldrb	r3, [r7, #3]
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008824:	4313      	orrs	r3, r2
 8008826:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008850:	f023 0303 	bic.w	r3, r3, #3
 8008854:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008864:	f043 0302 	orr.w	r3, r3, #2
 8008868:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	f003 0301 	and.w	r3, r3, #1
}
 8008888:	4618      	mov	r0, r3
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3301      	adds	r3, #1
 80088a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088ac:	d901      	bls.n	80088b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e01b      	b.n	80088ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	daf2      	bge.n	80088a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	f043 0201 	orr.w	r2, r3, #1
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088d6:	d901      	bls.n	80088dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e006      	b.n	80088ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d0f0      	beq.n	80088ca <USB_CoreReset+0x36>

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80088f6:	b480      	push	{r7}
 80088f8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80088fa:	bf00      	nop
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800890a:	f3ef 8305 	mrs	r3, IPSR
 800890e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008910:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10f      	bne.n	8008936 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008916:	f3ef 8310 	mrs	r3, PRIMASK
 800891a:	607b      	str	r3, [r7, #4]
  return(result);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008922:	f3ef 8311 	mrs	r3, BASEPRI
 8008926:	603b      	str	r3, [r7, #0]
  return(result);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d007      	beq.n	800893e <osKernelInitialize+0x3a>
 800892e:	4b0e      	ldr	r3, [pc, #56]	@ (8008968 <osKernelInitialize+0x64>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d103      	bne.n	800893e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008936:	f06f 0305 	mvn.w	r3, #5
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	e00c      	b.n	8008958 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800893e:	4b0a      	ldr	r3, [pc, #40]	@ (8008968 <osKernelInitialize+0x64>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d105      	bne.n	8008952 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008946:	4b08      	ldr	r3, [pc, #32]	@ (8008968 <osKernelInitialize+0x64>)
 8008948:	2201      	movs	r2, #1
 800894a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	e002      	b.n	8008958 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008952:	f04f 33ff 	mov.w	r3, #4294967295
 8008956:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008958:	68fb      	ldr	r3, [r7, #12]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	20000ac8 	.word	0x20000ac8

0800896c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008972:	f3ef 8305 	mrs	r3, IPSR
 8008976:	60bb      	str	r3, [r7, #8]
  return(result);
 8008978:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10f      	bne.n	800899e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800897e:	f3ef 8310 	mrs	r3, PRIMASK
 8008982:	607b      	str	r3, [r7, #4]
  return(result);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d105      	bne.n	8008996 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800898a:	f3ef 8311 	mrs	r3, BASEPRI
 800898e:	603b      	str	r3, [r7, #0]
  return(result);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <osKernelStart+0x3a>
 8008996:	4b0f      	ldr	r3, [pc, #60]	@ (80089d4 <osKernelStart+0x68>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d103      	bne.n	80089a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800899e:	f06f 0305 	mvn.w	r3, #5
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e010      	b.n	80089c8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089a6:	4b0b      	ldr	r3, [pc, #44]	@ (80089d4 <osKernelStart+0x68>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d109      	bne.n	80089c2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089ae:	f7ff ffa2 	bl	80088f6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089b2:	4b08      	ldr	r3, [pc, #32]	@ (80089d4 <osKernelStart+0x68>)
 80089b4:	2202      	movs	r2, #2
 80089b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089b8:	f001 f8ca 	bl	8009b50 <vTaskStartScheduler>
      stat = osOK;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e002      	b.n	80089c8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80089c2:	f04f 33ff 	mov.w	r3, #4294967295
 80089c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80089c8:	68fb      	ldr	r3, [r7, #12]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000ac8 	.word	0x20000ac8

080089d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b090      	sub	sp, #64	@ 0x40
 80089dc:	af04      	add	r7, sp, #16
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089e4:	2300      	movs	r3, #0
 80089e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089e8:	f3ef 8305 	mrs	r3, IPSR
 80089ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80089ee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f040 808f 	bne.w	8008b14 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089f6:	f3ef 8310 	mrs	r3, PRIMASK
 80089fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d105      	bne.n	8008a0e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a02:	f3ef 8311 	mrs	r3, BASEPRI
 8008a06:	617b      	str	r3, [r7, #20]
  return(result);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <osThreadNew+0x3e>
 8008a0e:	4b44      	ldr	r3, [pc, #272]	@ (8008b20 <osThreadNew+0x148>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d07e      	beq.n	8008b14 <osThreadNew+0x13c>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d07b      	beq.n	8008b14 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008a1c:	2380      	movs	r3, #128	@ 0x80
 8008a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008a20:	2318      	movs	r3, #24
 8008a22:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8008a28:	f04f 33ff 	mov.w	r3, #4294967295
 8008a2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d045      	beq.n	8008ac0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <osThreadNew+0x6a>
        name = attr->name;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d008      	beq.n	8008a68 <osThreadNew+0x90>
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	2b38      	cmp	r3, #56	@ 0x38
 8008a5a:	d805      	bhi.n	8008a68 <osThreadNew+0x90>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <osThreadNew+0x94>
        return (NULL);
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e054      	b.n	8008b16 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	089b      	lsrs	r3, r3, #2
 8008a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <osThreadNew+0xca>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	2b5b      	cmp	r3, #91	@ 0x5b
 8008a8a:	d90a      	bls.n	8008aa2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d006      	beq.n	8008aa2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <osThreadNew+0xca>
        mem = 1;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	623b      	str	r3, [r7, #32]
 8008aa0:	e010      	b.n	8008ac4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10c      	bne.n	8008ac4 <osThreadNew+0xec>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d108      	bne.n	8008ac4 <osThreadNew+0xec>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d104      	bne.n	8008ac4 <osThreadNew+0xec>
          mem = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	623b      	str	r3, [r7, #32]
 8008abe:	e001      	b.n	8008ac4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d110      	bne.n	8008aec <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ad2:	9202      	str	r2, [sp, #8]
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 fe4f 	bl	8009784 <xTaskCreateStatic>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	613b      	str	r3, [r7, #16]
 8008aea:	e013      	b.n	8008b14 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d110      	bne.n	8008b14 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	f107 0310 	add.w	r3, r7, #16
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 fea3 	bl	8009850 <xTaskCreate>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d001      	beq.n	8008b14 <osThreadNew+0x13c>
          hTask = NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b14:	693b      	ldr	r3, [r7, #16]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3730      	adds	r7, #48	@ 0x30
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20000ac8 	.word	0x20000ac8

08008b24 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b2c:	f3ef 8305 	mrs	r3, IPSR
 8008b30:	613b      	str	r3, [r7, #16]
  return(result);
 8008b32:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10f      	bne.n	8008b58 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b38:	f3ef 8310 	mrs	r3, PRIMASK
 8008b3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d105      	bne.n	8008b50 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b44:	f3ef 8311 	mrs	r3, BASEPRI
 8008b48:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d007      	beq.n	8008b60 <osDelay+0x3c>
 8008b50:	4b0a      	ldr	r3, [pc, #40]	@ (8008b7c <osDelay+0x58>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d103      	bne.n	8008b60 <osDelay+0x3c>
    stat = osErrorISR;
 8008b58:	f06f 0305 	mvn.w	r3, #5
 8008b5c:	617b      	str	r3, [r7, #20]
 8008b5e:	e007      	b.n	8008b70 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 ffb8 	bl	8009ae0 <vTaskDelay>
    }
  }

  return (stat);
 8008b70:	697b      	ldr	r3, [r7, #20]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20000ac8 	.word	0x20000ac8

08008b80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4a07      	ldr	r2, [pc, #28]	@ (8008bac <vApplicationGetIdleTaskMemory+0x2c>)
 8008b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4a06      	ldr	r2, [pc, #24]	@ (8008bb0 <vApplicationGetIdleTaskMemory+0x30>)
 8008b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2280      	movs	r2, #128	@ 0x80
 8008b9c:	601a      	str	r2, [r3, #0]
}
 8008b9e:	bf00      	nop
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000acc 	.word	0x20000acc
 8008bb0:	20000b28 	.word	0x20000b28

08008bb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a07      	ldr	r2, [pc, #28]	@ (8008be0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	4a06      	ldr	r2, [pc, #24]	@ (8008be4 <vApplicationGetTimerTaskMemory+0x30>)
 8008bca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	20000d28 	.word	0x20000d28
 8008be4:	20000d84 	.word	0x20000d84

08008be8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f103 0208 	add.w	r2, r3, #8
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008c00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f103 0208 	add.w	r2, r3, #8
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f103 0208 	add.w	r2, r3, #8
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c42:	b480      	push	{r7}
 8008c44:	b085      	sub	sp, #20
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
}
 8008c7e:	bf00      	nop
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca0:	d103      	bne.n	8008caa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e00c      	b.n	8008cc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3308      	adds	r3, #8
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	e002      	b.n	8008cb8 <vListInsert+0x2e>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d2f6      	bcs.n	8008cb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	601a      	str	r2, [r3, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6892      	ldr	r2, [r2, #8]
 8008d12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6852      	ldr	r2, [r2, #4]
 8008d1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d103      	bne.n	8008d30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	1e5a      	subs	r2, r3, #1
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10d      	bne.n	8008d80 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	b672      	cpsid	i
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	b662      	cpsie	i
 8008d78:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008d80:	f002 f8a4 	bl	800aecc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8c:	68f9      	ldr	r1, [r7, #12]
 8008d8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d90:	fb01 f303 	mul.w	r3, r1, r3
 8008d94:	441a      	add	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db0:	3b01      	subs	r3, #1
 8008db2:	68f9      	ldr	r1, [r7, #12]
 8008db4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008db6:	fb01 f303 	mul.w	r3, r1, r3
 8008dba:	441a      	add	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	22ff      	movs	r2, #255	@ 0xff
 8008dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	22ff      	movs	r2, #255	@ 0xff
 8008dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d114      	bne.n	8008e00 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d01a      	beq.n	8008e14 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3310      	adds	r3, #16
 8008de2:	4618      	mov	r0, r3
 8008de4:	f001 f950 	bl	800a088 <xTaskRemoveFromEventList>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d012      	beq.n	8008e14 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dee:	4b0d      	ldr	r3, [pc, #52]	@ (8008e24 <xQueueGenericReset+0xd4>)
 8008df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	e009      	b.n	8008e14 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3310      	adds	r3, #16
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff feef 	bl	8008be8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3324      	adds	r3, #36	@ 0x24
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7ff feea 	bl	8008be8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e14:	f002 f890 	bl	800af38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e18:	2301      	movs	r3, #1
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	e000ed04 	.word	0xe000ed04

08008e28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08e      	sub	sp, #56	@ 0x38
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10d      	bne.n	8008e58 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e40:	b672      	cpsid	i
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	b662      	cpsie	i
 8008e50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e52:	bf00      	nop
 8008e54:	bf00      	nop
 8008e56:	e7fd      	b.n	8008e54 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10d      	bne.n	8008e7a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	b672      	cpsid	i
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	b662      	cpsie	i
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	e7fd      	b.n	8008e76 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <xQueueGenericCreateStatic+0x5e>
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <xQueueGenericCreateStatic+0x62>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <xQueueGenericCreateStatic+0x64>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10d      	bne.n	8008eac <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	b672      	cpsid	i
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	b662      	cpsie	i
 8008ea4:	623b      	str	r3, [r7, #32]
}
 8008ea6:	bf00      	nop
 8008ea8:	bf00      	nop
 8008eaa:	e7fd      	b.n	8008ea8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <xQueueGenericCreateStatic+0x90>
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <xQueueGenericCreateStatic+0x94>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e000      	b.n	8008ebe <xQueueGenericCreateStatic+0x96>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10d      	bne.n	8008ede <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec6:	b672      	cpsid	i
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	b662      	cpsie	i
 8008ed6:	61fb      	str	r3, [r7, #28]
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	e7fd      	b.n	8008eda <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ede:	2350      	movs	r3, #80	@ 0x50
 8008ee0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b50      	cmp	r3, #80	@ 0x50
 8008ee6:	d00d      	beq.n	8008f04 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eec:	b672      	cpsid	i
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	b662      	cpsie	i
 8008efc:	61bb      	str	r3, [r7, #24]
}
 8008efe:	bf00      	nop
 8008f00:	bf00      	nop
 8008f02:	e7fd      	b.n	8008f00 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00d      	beq.n	8008f2c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	4613      	mov	r3, r2
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 f805 	bl	8008f36 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3730      	adds	r7, #48	@ 0x30
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607a      	str	r2, [r7, #4]
 8008f42:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d103      	bne.n	8008f52 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	e002      	b.n	8008f58 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f64:	2101      	movs	r1, #1
 8008f66:	69b8      	ldr	r0, [r7, #24]
 8008f68:	f7ff fef2 	bl	8008d50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f74:	bf00      	nop
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08e      	sub	sp, #56	@ 0x38
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10d      	bne.n	8008fb4 <xQueueGenericSend+0x38>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9c:	b672      	cpsid	i
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	b662      	cpsie	i
 8008fac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	e7fd      	b.n	8008fb0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d103      	bne.n	8008fc2 <xQueueGenericSend+0x46>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <xQueueGenericSend+0x4a>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <xQueueGenericSend+0x4c>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10d      	bne.n	8008fe8 <xQueueGenericSend+0x6c>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd0:	b672      	cpsid	i
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	b662      	cpsie	i
 8008fe0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008fe2:	bf00      	nop
 8008fe4:	bf00      	nop
 8008fe6:	e7fd      	b.n	8008fe4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d103      	bne.n	8008ff6 <xQueueGenericSend+0x7a>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <xQueueGenericSend+0x7e>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <xQueueGenericSend+0x80>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10d      	bne.n	800901c <xQueueGenericSend+0xa0>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009004:	b672      	cpsid	i
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	b662      	cpsie	i
 8009014:	623b      	str	r3, [r7, #32]
}
 8009016:	bf00      	nop
 8009018:	bf00      	nop
 800901a:	e7fd      	b.n	8009018 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800901c:	f001 f9fc 	bl	800a418 <xTaskGetSchedulerState>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d102      	bne.n	800902c <xQueueGenericSend+0xb0>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <xQueueGenericSend+0xb4>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <xQueueGenericSend+0xb6>
 8009030:	2300      	movs	r3, #0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10d      	bne.n	8009052 <xQueueGenericSend+0xd6>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	b672      	cpsid	i
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	b662      	cpsie	i
 800904a:	61fb      	str	r3, [r7, #28]
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	e7fd      	b.n	800904e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009052:	f001 ff3b 	bl	800aecc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800905e:	429a      	cmp	r2, r3
 8009060:	d302      	bcc.n	8009068 <xQueueGenericSend+0xec>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d129      	bne.n	80090bc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800906e:	f000 fa1b 	bl	80094a8 <prvCopyDataToQueue>
 8009072:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d010      	beq.n	800909e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800907c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907e:	3324      	adds	r3, #36	@ 0x24
 8009080:	4618      	mov	r0, r3
 8009082:	f001 f801 	bl	800a088 <xTaskRemoveFromEventList>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d013      	beq.n	80090b4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800908c:	4b3f      	ldr	r3, [pc, #252]	@ (800918c <xQueueGenericSend+0x210>)
 800908e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	e00a      	b.n	80090b4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800909e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d007      	beq.n	80090b4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090a4:	4b39      	ldr	r3, [pc, #228]	@ (800918c <xQueueGenericSend+0x210>)
 80090a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090b4:	f001 ff40 	bl	800af38 <vPortExitCritical>
				return pdPASS;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e063      	b.n	8009184 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d103      	bne.n	80090ca <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090c2:	f001 ff39 	bl	800af38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e05c      	b.n	8009184 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d106      	bne.n	80090de <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090d0:	f107 0314 	add.w	r3, r7, #20
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 f83d 	bl	800a154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090da:	2301      	movs	r3, #1
 80090dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090de:	f001 ff2b 	bl	800af38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090e2:	f000 fda1 	bl	8009c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090e6:	f001 fef1 	bl	800aecc <vPortEnterCritical>
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090f0:	b25b      	sxtb	r3, r3
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f6:	d103      	bne.n	8009100 <xQueueGenericSend+0x184>
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009106:	b25b      	sxtb	r3, r3
 8009108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910c:	d103      	bne.n	8009116 <xQueueGenericSend+0x19a>
 800910e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009116:	f001 ff0f 	bl	800af38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800911a:	1d3a      	adds	r2, r7, #4
 800911c:	f107 0314 	add.w	r3, r7, #20
 8009120:	4611      	mov	r1, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f001 f82c 	bl	800a180 <xTaskCheckForTimeOut>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d124      	bne.n	8009178 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800912e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009130:	f000 fab2 	bl	8009698 <prvIsQueueFull>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d018      	beq.n	800916c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	3310      	adds	r3, #16
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	4611      	mov	r1, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f000 ff4a 	bl	8009fdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800914a:	f000 fa3d 	bl	80095c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800914e:	f000 fd79 	bl	8009c44 <xTaskResumeAll>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	f47f af7c 	bne.w	8009052 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800915a:	4b0c      	ldr	r3, [pc, #48]	@ (800918c <xQueueGenericSend+0x210>)
 800915c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	e772      	b.n	8009052 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800916c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800916e:	f000 fa2b 	bl	80095c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009172:	f000 fd67 	bl	8009c44 <xTaskResumeAll>
 8009176:	e76c      	b.n	8009052 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800917a:	f000 fa25 	bl	80095c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800917e:	f000 fd61 	bl	8009c44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009182:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009184:	4618      	mov	r0, r3
 8009186:	3738      	adds	r7, #56	@ 0x38
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	e000ed04 	.word	0xe000ed04

08009190 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08e      	sub	sp, #56	@ 0x38
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10d      	bne.n	80091c4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ac:	b672      	cpsid	i
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	b662      	cpsie	i
 80091bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091be:	bf00      	nop
 80091c0:	bf00      	nop
 80091c2:	e7fd      	b.n	80091c0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d103      	bne.n	80091d2 <xQueueGenericSendFromISR+0x42>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <xQueueGenericSendFromISR+0x46>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e000      	b.n	80091d8 <xQueueGenericSendFromISR+0x48>
 80091d6:	2300      	movs	r3, #0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10d      	bne.n	80091f8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	b672      	cpsid	i
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	b662      	cpsie	i
 80091f0:	623b      	str	r3, [r7, #32]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d103      	bne.n	8009206 <xQueueGenericSendFromISR+0x76>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009202:	2b01      	cmp	r3, #1
 8009204:	d101      	bne.n	800920a <xQueueGenericSendFromISR+0x7a>
 8009206:	2301      	movs	r3, #1
 8009208:	e000      	b.n	800920c <xQueueGenericSendFromISR+0x7c>
 800920a:	2300      	movs	r3, #0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10d      	bne.n	800922c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009214:	b672      	cpsid	i
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	b662      	cpsie	i
 8009224:	61fb      	str	r3, [r7, #28]
}
 8009226:	bf00      	nop
 8009228:	bf00      	nop
 800922a:	e7fd      	b.n	8009228 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800922c:	f001 ff36 	bl	800b09c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009230:	f3ef 8211 	mrs	r2, BASEPRI
 8009234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009238:	b672      	cpsid	i
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	b662      	cpsie	i
 8009248:	61ba      	str	r2, [r7, #24]
 800924a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800924c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800924e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009258:	429a      	cmp	r2, r3
 800925a:	d302      	bcc.n	8009262 <xQueueGenericSendFromISR+0xd2>
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d12c      	bne.n	80092bc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009272:	f000 f919 	bl	80094a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009276:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800927a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927e:	d112      	bne.n	80092a6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009284:	2b00      	cmp	r3, #0
 8009286:	d016      	beq.n	80092b6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928a:	3324      	adds	r3, #36	@ 0x24
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fefb 	bl	800a088 <xTaskRemoveFromEventList>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00e      	beq.n	80092b6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	e007      	b.n	80092b6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092aa:	3301      	adds	r3, #1
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	b25a      	sxtb	r2, r3
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80092b6:	2301      	movs	r3, #1
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80092ba:	e001      	b.n	80092c0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092bc:	2300      	movs	r3, #0
 80092be:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3738      	adds	r7, #56	@ 0x38
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08c      	sub	sp, #48	@ 0x30
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10d      	bne.n	800930e <xQueueReceive+0x36>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f6:	b672      	cpsid	i
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	b662      	cpsie	i
 8009306:	623b      	str	r3, [r7, #32]
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	e7fd      	b.n	800930a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <xQueueReceive+0x44>
 8009314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <xQueueReceive+0x48>
 800931c:	2301      	movs	r3, #1
 800931e:	e000      	b.n	8009322 <xQueueReceive+0x4a>
 8009320:	2300      	movs	r3, #0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10d      	bne.n	8009342 <xQueueReceive+0x6a>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	b672      	cpsid	i
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	b662      	cpsie	i
 800933a:	61fb      	str	r3, [r7, #28]
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	e7fd      	b.n	800933e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009342:	f001 f869 	bl	800a418 <xTaskGetSchedulerState>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d102      	bne.n	8009352 <xQueueReceive+0x7a>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <xQueueReceive+0x7e>
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <xQueueReceive+0x80>
 8009356:	2300      	movs	r3, #0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10d      	bne.n	8009378 <xQueueReceive+0xa0>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009360:	b672      	cpsid	i
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	b662      	cpsie	i
 8009370:	61bb      	str	r3, [r7, #24]
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009378:	f001 fda8 	bl	800aecc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009380:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01f      	beq.n	80093c8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800938c:	f000 f8f6 	bl	800957c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009392:	1e5a      	subs	r2, r3, #1
 8009394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009396:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00f      	beq.n	80093c0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a2:	3310      	adds	r3, #16
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 fe6f 	bl	800a088 <xTaskRemoveFromEventList>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d007      	beq.n	80093c0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093b0:	4b3c      	ldr	r3, [pc, #240]	@ (80094a4 <xQueueReceive+0x1cc>)
 80093b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093c0:	f001 fdba 	bl	800af38 <vPortExitCritical>
				return pdPASS;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e069      	b.n	800949c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d103      	bne.n	80093d6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093ce:	f001 fdb3 	bl	800af38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093d2:	2300      	movs	r3, #0
 80093d4:	e062      	b.n	800949c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d106      	bne.n	80093ea <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093dc:	f107 0310 	add.w	r3, r7, #16
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 feb7 	bl	800a154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093e6:	2301      	movs	r3, #1
 80093e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093ea:	f001 fda5 	bl	800af38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093ee:	f000 fc1b 	bl	8009c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093f2:	f001 fd6b 	bl	800aecc <vPortEnterCritical>
 80093f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093fc:	b25b      	sxtb	r3, r3
 80093fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009402:	d103      	bne.n	800940c <xQueueReceive+0x134>
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800940c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009412:	b25b      	sxtb	r3, r3
 8009414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009418:	d103      	bne.n	8009422 <xQueueReceive+0x14a>
 800941a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009422:	f001 fd89 	bl	800af38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009426:	1d3a      	adds	r2, r7, #4
 8009428:	f107 0310 	add.w	r3, r7, #16
 800942c:	4611      	mov	r1, r2
 800942e:	4618      	mov	r0, r3
 8009430:	f000 fea6 	bl	800a180 <xTaskCheckForTimeOut>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d123      	bne.n	8009482 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800943a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800943c:	f000 f916 	bl	800966c <prvIsQueueEmpty>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d017      	beq.n	8009476 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009448:	3324      	adds	r3, #36	@ 0x24
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f000 fdc4 	bl	8009fdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009456:	f000 f8b7 	bl	80095c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800945a:	f000 fbf3 	bl	8009c44 <xTaskResumeAll>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d189      	bne.n	8009378 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8009464:	4b0f      	ldr	r3, [pc, #60]	@ (80094a4 <xQueueReceive+0x1cc>)
 8009466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	e780      	b.n	8009378 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009478:	f000 f8a6 	bl	80095c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800947c:	f000 fbe2 	bl	8009c44 <xTaskResumeAll>
 8009480:	e77a      	b.n	8009378 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009484:	f000 f8a0 	bl	80095c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009488:	f000 fbdc 	bl	8009c44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800948c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800948e:	f000 f8ed 	bl	800966c <prvIsQueueEmpty>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	f43f af6f 	beq.w	8009378 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800949a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800949c:	4618      	mov	r0, r3
 800949e:	3730      	adds	r7, #48	@ 0x30
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	e000ed04 	.word	0xe000ed04

080094a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094b4:	2300      	movs	r3, #0
 80094b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10d      	bne.n	80094e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d14d      	bne.n	800956a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 ffbe 	bl	800a454 <xTaskPriorityDisinherit>
 80094d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	609a      	str	r2, [r3, #8]
 80094e0:	e043      	b.n	800956a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d119      	bne.n	800951c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6858      	ldr	r0, [r3, #4]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f0:	461a      	mov	r2, r3
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	f002 f8ce 	bl	800b694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009500:	441a      	add	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	429a      	cmp	r2, r3
 8009510:	d32b      	bcc.n	800956a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	605a      	str	r2, [r3, #4]
 800951a:	e026      	b.n	800956a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	68d8      	ldr	r0, [r3, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009524:	461a      	mov	r2, r3
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	f002 f8b4 	bl	800b694 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009534:	425b      	negs	r3, r3
 8009536:	441a      	add	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	68da      	ldr	r2, [r3, #12]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	429a      	cmp	r2, r3
 8009546:	d207      	bcs.n	8009558 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009550:	425b      	negs	r3, r3
 8009552:	441a      	add	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d105      	bne.n	800956a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	3b01      	subs	r3, #1
 8009568:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009572:	697b      	ldr	r3, [r7, #20]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800958a:	2b00      	cmp	r3, #0
 800958c:	d018      	beq.n	80095c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009596:	441a      	add	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d303      	bcc.n	80095b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68d9      	ldr	r1, [r3, #12]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b8:	461a      	mov	r2, r3
 80095ba:	6838      	ldr	r0, [r7, #0]
 80095bc:	f002 f86a 	bl	800b694 <memcpy>
	}
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095d0:	f001 fc7c 	bl	800aecc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095dc:	e011      	b.n	8009602 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d012      	beq.n	800960c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3324      	adds	r3, #36	@ 0x24
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 fd4c 	bl	800a088 <xTaskRemoveFromEventList>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095f6:	f000 fe2b 	bl	800a250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009606:	2b00      	cmp	r3, #0
 8009608:	dce9      	bgt.n	80095de <prvUnlockQueue+0x16>
 800960a:	e000      	b.n	800960e <prvUnlockQueue+0x46>
					break;
 800960c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	22ff      	movs	r2, #255	@ 0xff
 8009612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009616:	f001 fc8f 	bl	800af38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800961a:	f001 fc57 	bl	800aecc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009624:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009626:	e011      	b.n	800964c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d012      	beq.n	8009656 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3310      	adds	r3, #16
 8009634:	4618      	mov	r0, r3
 8009636:	f000 fd27 	bl	800a088 <xTaskRemoveFromEventList>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009640:	f000 fe06 	bl	800a250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	3b01      	subs	r3, #1
 8009648:	b2db      	uxtb	r3, r3
 800964a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800964c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009650:	2b00      	cmp	r3, #0
 8009652:	dce9      	bgt.n	8009628 <prvUnlockQueue+0x60>
 8009654:	e000      	b.n	8009658 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009656:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	22ff      	movs	r2, #255	@ 0xff
 800965c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009660:	f001 fc6a 	bl	800af38 <vPortExitCritical>
}
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009674:	f001 fc2a 	bl	800aecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967c:	2b00      	cmp	r3, #0
 800967e:	d102      	bne.n	8009686 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	e001      	b.n	800968a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800968a:	f001 fc55 	bl	800af38 <vPortExitCritical>

	return xReturn;
 800968e:	68fb      	ldr	r3, [r7, #12]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096a0:	f001 fc14 	bl	800aecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d102      	bne.n	80096b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096b0:	2301      	movs	r3, #1
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	e001      	b.n	80096ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096b6:	2300      	movs	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096ba:	f001 fc3d 	bl	800af38 <vPortExitCritical>

	return xReturn;
 80096be:	68fb      	ldr	r3, [r7, #12]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	e014      	b.n	8009702 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096d8:	4a0f      	ldr	r2, [pc, #60]	@ (8009718 <vQueueAddToRegistry+0x50>)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10b      	bne.n	80096fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096e4:	490c      	ldr	r1, [pc, #48]	@ (8009718 <vQueueAddToRegistry+0x50>)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009718 <vQueueAddToRegistry+0x50>)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	4413      	add	r3, r2
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096fa:	e006      	b.n	800970a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2b07      	cmp	r3, #7
 8009706:	d9e7      	bls.n	80096d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	20001184 	.word	0x20001184

0800971c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800972c:	f001 fbce 	bl	800aecc <vPortEnterCritical>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009736:	b25b      	sxtb	r3, r3
 8009738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973c:	d103      	bne.n	8009746 <vQueueWaitForMessageRestricted+0x2a>
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800974c:	b25b      	sxtb	r3, r3
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009752:	d103      	bne.n	800975c <vQueueWaitForMessageRestricted+0x40>
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800975c:	f001 fbec 	bl	800af38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009764:	2b00      	cmp	r3, #0
 8009766:	d106      	bne.n	8009776 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	3324      	adds	r3, #36	@ 0x24
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fc5b 	bl	800a02c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009776:	6978      	ldr	r0, [r7, #20]
 8009778:	f7ff ff26 	bl	80095c8 <prvUnlockQueue>
	}
 800977c:	bf00      	nop
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08e      	sub	sp, #56	@ 0x38
 8009788:	af04      	add	r7, sp, #16
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10d      	bne.n	80097b4 <xTaskCreateStatic+0x30>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979c:	b672      	cpsid	i
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	b662      	cpsie	i
 80097ac:	623b      	str	r3, [r7, #32]
}
 80097ae:	bf00      	nop
 80097b0:	bf00      	nop
 80097b2:	e7fd      	b.n	80097b0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80097b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10d      	bne.n	80097d6 <xTaskCreateStatic+0x52>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	b672      	cpsid	i
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	b662      	cpsie	i
 80097ce:	61fb      	str	r3, [r7, #28]
}
 80097d0:	bf00      	nop
 80097d2:	bf00      	nop
 80097d4:	e7fd      	b.n	80097d2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097d6:	235c      	movs	r3, #92	@ 0x5c
 80097d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80097de:	d00d      	beq.n	80097fc <xTaskCreateStatic+0x78>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e4:	b672      	cpsid	i
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	b662      	cpsie	i
 80097f4:	61bb      	str	r3, [r7, #24]
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01e      	beq.n	8009842 <xTaskCreateStatic+0xbe>
 8009804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009806:	2b00      	cmp	r3, #0
 8009808:	d01b      	beq.n	8009842 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800980a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009810:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009812:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009816:	2202      	movs	r2, #2
 8009818:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800981c:	2300      	movs	r3, #0
 800981e:	9303      	str	r3, [sp, #12]
 8009820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009822:	9302      	str	r3, [sp, #8]
 8009824:	f107 0314 	add.w	r3, r7, #20
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	68b9      	ldr	r1, [r7, #8]
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 f850 	bl	80098da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800983a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800983c:	f000 f8e0 	bl	8009a00 <prvAddNewTaskToReadyList>
 8009840:	e001      	b.n	8009846 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009846:	697b      	ldr	r3, [r7, #20]
	}
 8009848:	4618      	mov	r0, r3
 800984a:	3728      	adds	r7, #40	@ 0x28
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08c      	sub	sp, #48	@ 0x30
 8009854:	af04      	add	r7, sp, #16
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	4613      	mov	r3, r2
 800985e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009860:	88fb      	ldrh	r3, [r7, #6]
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4618      	mov	r0, r3
 8009866:	f001 fc5f 	bl	800b128 <pvPortMalloc>
 800986a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00e      	beq.n	8009890 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009872:	205c      	movs	r0, #92	@ 0x5c
 8009874:	f001 fc58 	bl	800b128 <pvPortMalloc>
 8009878:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	631a      	str	r2, [r3, #48]	@ 0x30
 8009886:	e005      	b.n	8009894 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009888:	6978      	ldr	r0, [r7, #20]
 800988a:	f001 fd1b 	bl	800b2c4 <vPortFree>
 800988e:	e001      	b.n	8009894 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009890:	2300      	movs	r3, #0
 8009892:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d017      	beq.n	80098ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098a2:	88fa      	ldrh	r2, [r7, #6]
 80098a4:	2300      	movs	r3, #0
 80098a6:	9303      	str	r3, [sp, #12]
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	9302      	str	r3, [sp, #8]
 80098ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	68b9      	ldr	r1, [r7, #8]
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 f80e 	bl	80098da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098be:	69f8      	ldr	r0, [r7, #28]
 80098c0:	f000 f89e 	bl	8009a00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098c4:	2301      	movs	r3, #1
 80098c6:	61bb      	str	r3, [r7, #24]
 80098c8:	e002      	b.n	80098d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098ca:	f04f 33ff 	mov.w	r3, #4294967295
 80098ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098d0:	69bb      	ldr	r3, [r7, #24]
	}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3720      	adds	r7, #32
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b088      	sub	sp, #32
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
 80098e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	461a      	mov	r2, r3
 80098f2:	21a5      	movs	r1, #165	@ 0xa5
 80098f4:	f001 fe8a 	bl	800b60c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009902:	440b      	add	r3, r1
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	f023 0307 	bic.w	r3, r3, #7
 8009910:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	f003 0307 	and.w	r3, r3, #7
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00d      	beq.n	8009938 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009920:	b672      	cpsid	i
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	b662      	cpsie	i
 8009930:	617b      	str	r3, [r7, #20]
}
 8009932:	bf00      	nop
 8009934:	bf00      	nop
 8009936:	e7fd      	b.n	8009934 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01f      	beq.n	800997e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800993e:	2300      	movs	r3, #0
 8009940:	61fb      	str	r3, [r7, #28]
 8009942:	e012      	b.n	800996a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	7819      	ldrb	r1, [r3, #0]
 800994c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4413      	add	r3, r2
 8009952:	3334      	adds	r3, #52	@ 0x34
 8009954:	460a      	mov	r2, r1
 8009956:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4413      	add	r3, r2
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d006      	beq.n	8009972 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	3301      	adds	r3, #1
 8009968:	61fb      	str	r3, [r7, #28]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	2b0f      	cmp	r3, #15
 800996e:	d9e9      	bls.n	8009944 <prvInitialiseNewTask+0x6a>
 8009970:	e000      	b.n	8009974 <prvInitialiseNewTask+0x9a>
			{
				break;
 8009972:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800997c:	e003      	b.n	8009986 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009988:	2b37      	cmp	r3, #55	@ 0x37
 800998a:	d901      	bls.n	8009990 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800998c:	2337      	movs	r3, #55	@ 0x37
 800998e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009994:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800999a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800999c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999e:	2200      	movs	r2, #0
 80099a0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	3304      	adds	r3, #4
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff f93e 	bl	8008c28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	3318      	adds	r3, #24
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff f939 	bl	8008c28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ce:	2200      	movs	r2, #0
 80099d0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	68f9      	ldr	r1, [r7, #12]
 80099de:	69b8      	ldr	r0, [r7, #24]
 80099e0:	f001 f968 	bl	800acb4 <pxPortInitialiseStack>
 80099e4:	4602      	mov	r2, r0
 80099e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099f6:	bf00      	nop
 80099f8:	3720      	adds	r7, #32
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a08:	f001 fa60 	bl	800aecc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8009ac4 <prvAddNewTaskToReadyList+0xc4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3301      	adds	r3, #1
 8009a12:	4a2c      	ldr	r2, [pc, #176]	@ (8009ac4 <prvAddNewTaskToReadyList+0xc4>)
 8009a14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a16:	4b2c      	ldr	r3, [pc, #176]	@ (8009ac8 <prvAddNewTaskToReadyList+0xc8>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d109      	bne.n	8009a32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8009ac8 <prvAddNewTaskToReadyList+0xc8>)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a24:	4b27      	ldr	r3, [pc, #156]	@ (8009ac4 <prvAddNewTaskToReadyList+0xc4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d110      	bne.n	8009a4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a2c:	f000 fc34 	bl	800a298 <prvInitialiseTaskLists>
 8009a30:	e00d      	b.n	8009a4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a32:	4b26      	ldr	r3, [pc, #152]	@ (8009acc <prvAddNewTaskToReadyList+0xcc>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d109      	bne.n	8009a4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a3a:	4b23      	ldr	r3, [pc, #140]	@ (8009ac8 <prvAddNewTaskToReadyList+0xc8>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d802      	bhi.n	8009a4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a48:	4a1f      	ldr	r2, [pc, #124]	@ (8009ac8 <prvAddNewTaskToReadyList+0xc8>)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a4e:	4b20      	ldr	r3, [pc, #128]	@ (8009ad0 <prvAddNewTaskToReadyList+0xd0>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3301      	adds	r3, #1
 8009a54:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad0 <prvAddNewTaskToReadyList+0xd0>)
 8009a56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a58:	4b1d      	ldr	r3, [pc, #116]	@ (8009ad0 <prvAddNewTaskToReadyList+0xd0>)
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a64:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad4 <prvAddNewTaskToReadyList+0xd4>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d903      	bls.n	8009a74 <prvAddNewTaskToReadyList+0x74>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a70:	4a18      	ldr	r2, [pc, #96]	@ (8009ad4 <prvAddNewTaskToReadyList+0xd4>)
 8009a72:	6013      	str	r3, [r2, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a78:	4613      	mov	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4a15      	ldr	r2, [pc, #84]	@ (8009ad8 <prvAddNewTaskToReadyList+0xd8>)
 8009a82:	441a      	add	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3304      	adds	r3, #4
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f7ff f8d9 	bl	8008c42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a90:	f001 fa52 	bl	800af38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a94:	4b0d      	ldr	r3, [pc, #52]	@ (8009acc <prvAddNewTaskToReadyList+0xcc>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00e      	beq.n	8009aba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac8 <prvAddNewTaskToReadyList+0xc8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d207      	bcs.n	8009aba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8009adc <prvAddNewTaskToReadyList+0xdc>)
 8009aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aba:	bf00      	nop
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20001698 	.word	0x20001698
 8009ac8:	200011c4 	.word	0x200011c4
 8009acc:	200016a4 	.word	0x200016a4
 8009ad0:	200016b4 	.word	0x200016b4
 8009ad4:	200016a0 	.word	0x200016a0
 8009ad8:	200011c8 	.word	0x200011c8
 8009adc:	e000ed04 	.word	0xe000ed04

08009ae0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d01a      	beq.n	8009b28 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009af2:	4b15      	ldr	r3, [pc, #84]	@ (8009b48 <vTaskDelay+0x68>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00d      	beq.n	8009b16 <vTaskDelay+0x36>
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afe:	b672      	cpsid	i
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	b662      	cpsie	i
 8009b0e:	60bb      	str	r3, [r7, #8]
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	e7fd      	b.n	8009b12 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009b16:	f000 f887 	bl	8009c28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fd0d 	bl	800a53c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b22:	f000 f88f 	bl	8009c44 <xTaskResumeAll>
 8009b26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d107      	bne.n	8009b3e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009b2e:	4b07      	ldr	r3, [pc, #28]	@ (8009b4c <vTaskDelay+0x6c>)
 8009b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b3e:	bf00      	nop
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200016c0 	.word	0x200016c0
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08a      	sub	sp, #40	@ 0x28
 8009b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b5e:	463a      	mov	r2, r7
 8009b60:	1d39      	adds	r1, r7, #4
 8009b62:	f107 0308 	add.w	r3, r7, #8
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7ff f80a 	bl	8008b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	9202      	str	r2, [sp, #8]
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	2300      	movs	r3, #0
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	460a      	mov	r2, r1
 8009b7e:	4924      	ldr	r1, [pc, #144]	@ (8009c10 <vTaskStartScheduler+0xc0>)
 8009b80:	4824      	ldr	r0, [pc, #144]	@ (8009c14 <vTaskStartScheduler+0xc4>)
 8009b82:	f7ff fdff 	bl	8009784 <xTaskCreateStatic>
 8009b86:	4603      	mov	r3, r0
 8009b88:	4a23      	ldr	r2, [pc, #140]	@ (8009c18 <vTaskStartScheduler+0xc8>)
 8009b8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b8c:	4b22      	ldr	r3, [pc, #136]	@ (8009c18 <vTaskStartScheduler+0xc8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b94:	2301      	movs	r3, #1
 8009b96:	617b      	str	r3, [r7, #20]
 8009b98:	e001      	b.n	8009b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d102      	bne.n	8009baa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ba4:	f000 fd1e 	bl	800a5e4 <xTimerCreateTimerTask>
 8009ba8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d118      	bne.n	8009be2 <vTaskStartScheduler+0x92>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb4:	b672      	cpsid	i
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	b662      	cpsie	i
 8009bc4:	613b      	str	r3, [r7, #16]
}
 8009bc6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bc8:	4b14      	ldr	r3, [pc, #80]	@ (8009c1c <vTaskStartScheduler+0xcc>)
 8009bca:	f04f 32ff 	mov.w	r2, #4294967295
 8009bce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bd0:	4b13      	ldr	r3, [pc, #76]	@ (8009c20 <vTaskStartScheduler+0xd0>)
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bd6:	4b13      	ldr	r3, [pc, #76]	@ (8009c24 <vTaskStartScheduler+0xd4>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bdc:	f001 f8f8 	bl	800add0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009be0:	e011      	b.n	8009c06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be8:	d10d      	bne.n	8009c06 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bee:	b672      	cpsid	i
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	b662      	cpsie	i
 8009bfe:	60fb      	str	r3, [r7, #12]
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	e7fd      	b.n	8009c02 <vTaskStartScheduler+0xb2>
}
 8009c06:	bf00      	nop
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	0800b878 	.word	0x0800b878
 8009c14:	0800a269 	.word	0x0800a269
 8009c18:	200016bc 	.word	0x200016bc
 8009c1c:	200016b8 	.word	0x200016b8
 8009c20:	200016a4 	.word	0x200016a4
 8009c24:	2000169c 	.word	0x2000169c

08009c28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c2c:	4b04      	ldr	r3, [pc, #16]	@ (8009c40 <vTaskSuspendAll+0x18>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3301      	adds	r3, #1
 8009c32:	4a03      	ldr	r2, [pc, #12]	@ (8009c40 <vTaskSuspendAll+0x18>)
 8009c34:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009c36:	bf00      	nop
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	200016c0 	.word	0x200016c0

08009c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c52:	4b43      	ldr	r3, [pc, #268]	@ (8009d60 <xTaskResumeAll+0x11c>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10d      	bne.n	8009c76 <xTaskResumeAll+0x32>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5e:	b672      	cpsid	i
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	b662      	cpsie	i
 8009c6e:	603b      	str	r3, [r7, #0]
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	e7fd      	b.n	8009c72 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c76:	f001 f929 	bl	800aecc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c7a:	4b39      	ldr	r3, [pc, #228]	@ (8009d60 <xTaskResumeAll+0x11c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	4a37      	ldr	r2, [pc, #220]	@ (8009d60 <xTaskResumeAll+0x11c>)
 8009c82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c84:	4b36      	ldr	r3, [pc, #216]	@ (8009d60 <xTaskResumeAll+0x11c>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d162      	bne.n	8009d52 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c8c:	4b35      	ldr	r3, [pc, #212]	@ (8009d64 <xTaskResumeAll+0x120>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d05e      	beq.n	8009d52 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c94:	e02f      	b.n	8009cf6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c96:	4b34      	ldr	r3, [pc, #208]	@ (8009d68 <xTaskResumeAll+0x124>)
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3318      	adds	r3, #24
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff f82a 	bl	8008cfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7ff f825 	bl	8008cfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8009d6c <xTaskResumeAll+0x128>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d903      	bls.n	8009cc6 <xTaskResumeAll+0x82>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8009d6c <xTaskResumeAll+0x128>)
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4a27      	ldr	r2, [pc, #156]	@ (8009d70 <xTaskResumeAll+0x12c>)
 8009cd4:	441a      	add	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f7fe ffb0 	bl	8008c42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce6:	4b23      	ldr	r3, [pc, #140]	@ (8009d74 <xTaskResumeAll+0x130>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d302      	bcc.n	8009cf6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009cf0:	4b21      	ldr	r3, [pc, #132]	@ (8009d78 <xTaskResumeAll+0x134>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8009d68 <xTaskResumeAll+0x124>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1cb      	bne.n	8009c96 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d04:	f000 fb68 	bl	800a3d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009d08:	4b1c      	ldr	r3, [pc, #112]	@ (8009d7c <xTaskResumeAll+0x138>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d010      	beq.n	8009d36 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d14:	f000 f846 	bl	8009da4 <xTaskIncrementTick>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009d1e:	4b16      	ldr	r3, [pc, #88]	@ (8009d78 <xTaskResumeAll+0x134>)
 8009d20:	2201      	movs	r2, #1
 8009d22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1f1      	bne.n	8009d14 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009d30:	4b12      	ldr	r3, [pc, #72]	@ (8009d7c <xTaskResumeAll+0x138>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d36:	4b10      	ldr	r3, [pc, #64]	@ (8009d78 <xTaskResumeAll+0x134>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d009      	beq.n	8009d52 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d42:	4b0f      	ldr	r3, [pc, #60]	@ (8009d80 <xTaskResumeAll+0x13c>)
 8009d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d52:	f001 f8f1 	bl	800af38 <vPortExitCritical>

	return xAlreadyYielded;
 8009d56:	68bb      	ldr	r3, [r7, #8]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	200016c0 	.word	0x200016c0
 8009d64:	20001698 	.word	0x20001698
 8009d68:	20001658 	.word	0x20001658
 8009d6c:	200016a0 	.word	0x200016a0
 8009d70:	200011c8 	.word	0x200011c8
 8009d74:	200011c4 	.word	0x200011c4
 8009d78:	200016ac 	.word	0x200016ac
 8009d7c:	200016a8 	.word	0x200016a8
 8009d80:	e000ed04 	.word	0xe000ed04

08009d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d8a:	4b05      	ldr	r3, [pc, #20]	@ (8009da0 <xTaskGetTickCount+0x1c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d90:	687b      	ldr	r3, [r7, #4]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	2000169c 	.word	0x2000169c

08009da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009daa:	2300      	movs	r3, #0
 8009dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dae:	4b50      	ldr	r3, [pc, #320]	@ (8009ef0 <xTaskIncrementTick+0x14c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f040 808c 	bne.w	8009ed0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009db8:	4b4e      	ldr	r3, [pc, #312]	@ (8009ef4 <xTaskIncrementTick+0x150>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8009ef4 <xTaskIncrementTick+0x150>)
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d123      	bne.n	8009e14 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8009ef8 <xTaskIncrementTick+0x154>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00d      	beq.n	8009df2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	b672      	cpsid	i
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	b662      	cpsie	i
 8009dea:	603b      	str	r3, [r7, #0]
}
 8009dec:	bf00      	nop
 8009dee:	bf00      	nop
 8009df0:	e7fd      	b.n	8009dee <xTaskIncrementTick+0x4a>
 8009df2:	4b41      	ldr	r3, [pc, #260]	@ (8009ef8 <xTaskIncrementTick+0x154>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	4b40      	ldr	r3, [pc, #256]	@ (8009efc <xTaskIncrementTick+0x158>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8009ef8 <xTaskIncrementTick+0x154>)
 8009dfe:	6013      	str	r3, [r2, #0]
 8009e00:	4a3e      	ldr	r2, [pc, #248]	@ (8009efc <xTaskIncrementTick+0x158>)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	4b3e      	ldr	r3, [pc, #248]	@ (8009f00 <xTaskIncrementTick+0x15c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8009f00 <xTaskIncrementTick+0x15c>)
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	f000 fae2 	bl	800a3d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e14:	4b3b      	ldr	r3, [pc, #236]	@ (8009f04 <xTaskIncrementTick+0x160>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d349      	bcc.n	8009eb2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e1e:	4b36      	ldr	r3, [pc, #216]	@ (8009ef8 <xTaskIncrementTick+0x154>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e28:	4b36      	ldr	r3, [pc, #216]	@ (8009f04 <xTaskIncrementTick+0x160>)
 8009e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2e:	601a      	str	r2, [r3, #0]
					break;
 8009e30:	e03f      	b.n	8009eb2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e32:	4b31      	ldr	r3, [pc, #196]	@ (8009ef8 <xTaskIncrementTick+0x154>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d203      	bcs.n	8009e52 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8009f04 <xTaskIncrementTick+0x160>)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e50:	e02f      	b.n	8009eb2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	3304      	adds	r3, #4
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe ff50 	bl	8008cfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d004      	beq.n	8009e6e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3318      	adds	r3, #24
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe ff47 	bl	8008cfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e72:	4b25      	ldr	r3, [pc, #148]	@ (8009f08 <xTaskIncrementTick+0x164>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d903      	bls.n	8009e82 <xTaskIncrementTick+0xde>
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7e:	4a22      	ldr	r2, [pc, #136]	@ (8009f08 <xTaskIncrementTick+0x164>)
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e86:	4613      	mov	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8009f0c <xTaskIncrementTick+0x168>)
 8009e90:	441a      	add	r2, r3
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	3304      	adds	r3, #4
 8009e96:	4619      	mov	r1, r3
 8009e98:	4610      	mov	r0, r2
 8009e9a:	f7fe fed2 	bl	8008c42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f10 <xTaskIncrementTick+0x16c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d3b8      	bcc.n	8009e1e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009eac:	2301      	movs	r3, #1
 8009eae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eb0:	e7b5      	b.n	8009e1e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eb2:	4b17      	ldr	r3, [pc, #92]	@ (8009f10 <xTaskIncrementTick+0x16c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb8:	4914      	ldr	r1, [pc, #80]	@ (8009f0c <xTaskIncrementTick+0x168>)
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	440b      	add	r3, r1
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d907      	bls.n	8009eda <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	e004      	b.n	8009eda <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009ed0:	4b10      	ldr	r3, [pc, #64]	@ (8009f14 <xTaskIncrementTick+0x170>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8009f14 <xTaskIncrementTick+0x170>)
 8009ed8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009eda:	4b0f      	ldr	r3, [pc, #60]	@ (8009f18 <xTaskIncrementTick+0x174>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ee6:	697b      	ldr	r3, [r7, #20]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	200016c0 	.word	0x200016c0
 8009ef4:	2000169c 	.word	0x2000169c
 8009ef8:	20001650 	.word	0x20001650
 8009efc:	20001654 	.word	0x20001654
 8009f00:	200016b0 	.word	0x200016b0
 8009f04:	200016b8 	.word	0x200016b8
 8009f08:	200016a0 	.word	0x200016a0
 8009f0c:	200011c8 	.word	0x200011c8
 8009f10:	200011c4 	.word	0x200011c4
 8009f14:	200016a8 	.word	0x200016a8
 8009f18:	200016ac 	.word	0x200016ac

08009f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f22:	4b29      	ldr	r3, [pc, #164]	@ (8009fc8 <vTaskSwitchContext+0xac>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f2a:	4b28      	ldr	r3, [pc, #160]	@ (8009fcc <vTaskSwitchContext+0xb0>)
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f30:	e044      	b.n	8009fbc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009f32:	4b26      	ldr	r3, [pc, #152]	@ (8009fcc <vTaskSwitchContext+0xb0>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f38:	4b25      	ldr	r3, [pc, #148]	@ (8009fd0 <vTaskSwitchContext+0xb4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	60fb      	str	r3, [r7, #12]
 8009f3e:	e013      	b.n	8009f68 <vTaskSwitchContext+0x4c>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10d      	bne.n	8009f62 <vTaskSwitchContext+0x46>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	b672      	cpsid	i
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	b662      	cpsie	i
 8009f5a:	607b      	str	r3, [r7, #4]
}
 8009f5c:	bf00      	nop
 8009f5e:	bf00      	nop
 8009f60:	e7fd      	b.n	8009f5e <vTaskSwitchContext+0x42>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	491a      	ldr	r1, [pc, #104]	@ (8009fd4 <vTaskSwitchContext+0xb8>)
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	440b      	add	r3, r1
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d0e1      	beq.n	8009f40 <vTaskSwitchContext+0x24>
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4a13      	ldr	r2, [pc, #76]	@ (8009fd4 <vTaskSwitchContext+0xb8>)
 8009f88:	4413      	add	r3, r2
 8009f8a:	60bb      	str	r3, [r7, #8]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	605a      	str	r2, [r3, #4]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d104      	bne.n	8009fac <vTaskSwitchContext+0x90>
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	605a      	str	r2, [r3, #4]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	4a09      	ldr	r2, [pc, #36]	@ (8009fd8 <vTaskSwitchContext+0xbc>)
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	4a06      	ldr	r2, [pc, #24]	@ (8009fd0 <vTaskSwitchContext+0xb4>)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6013      	str	r3, [r2, #0]
}
 8009fbc:	bf00      	nop
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	200016c0 	.word	0x200016c0
 8009fcc:	200016ac 	.word	0x200016ac
 8009fd0:	200016a0 	.word	0x200016a0
 8009fd4:	200011c8 	.word	0x200011c8
 8009fd8:	200011c4 	.word	0x200011c4

08009fdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10d      	bne.n	800a008 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff0:	b672      	cpsid	i
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	b662      	cpsie	i
 800a000:	60fb      	str	r3, [r7, #12]
}
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	e7fd      	b.n	800a004 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a008:	4b07      	ldr	r3, [pc, #28]	@ (800a028 <vTaskPlaceOnEventList+0x4c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3318      	adds	r3, #24
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7fe fe3a 	bl	8008c8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a016:	2101      	movs	r1, #1
 800a018:	6838      	ldr	r0, [r7, #0]
 800a01a:	f000 fa8f 	bl	800a53c <prvAddCurrentTaskToDelayedList>
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	200011c4 	.word	0x200011c4

0800a02c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10d      	bne.n	800a05a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a042:	b672      	cpsid	i
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	b662      	cpsie	i
 800a052:	617b      	str	r3, [r7, #20]
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop
 800a058:	e7fd      	b.n	800a056 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a05a:	4b0a      	ldr	r3, [pc, #40]	@ (800a084 <vTaskPlaceOnEventListRestricted+0x58>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3318      	adds	r3, #24
 800a060:	4619      	mov	r1, r3
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7fe fded 	bl	8008c42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800a06e:	f04f 33ff 	mov.w	r3, #4294967295
 800a072:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	68b8      	ldr	r0, [r7, #8]
 800a078:	f000 fa60 	bl	800a53c <prvAddCurrentTaskToDelayedList>
	}
 800a07c:	bf00      	nop
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	200011c4 	.word	0x200011c4

0800a088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10d      	bne.n	800a0ba <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a2:	b672      	cpsid	i
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	b662      	cpsie	i
 800a0b2:	60fb      	str	r3, [r7, #12]
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	e7fd      	b.n	800a0b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	3318      	adds	r3, #24
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fe1c 	bl	8008cfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a13c <xTaskRemoveFromEventList+0xb4>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d11d      	bne.n	800a108 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe fe13 	bl	8008cfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0da:	4b19      	ldr	r3, [pc, #100]	@ (800a140 <xTaskRemoveFromEventList+0xb8>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d903      	bls.n	800a0ea <xTaskRemoveFromEventList+0x62>
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e6:	4a16      	ldr	r2, [pc, #88]	@ (800a140 <xTaskRemoveFromEventList+0xb8>)
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4a13      	ldr	r2, [pc, #76]	@ (800a144 <xTaskRemoveFromEventList+0xbc>)
 800a0f8:	441a      	add	r2, r3
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f7fe fd9e 	bl	8008c42 <vListInsertEnd>
 800a106:	e005      	b.n	800a114 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	3318      	adds	r3, #24
 800a10c:	4619      	mov	r1, r3
 800a10e:	480e      	ldr	r0, [pc, #56]	@ (800a148 <xTaskRemoveFromEventList+0xc0>)
 800a110:	f7fe fd97 	bl	8008c42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a118:	4b0c      	ldr	r3, [pc, #48]	@ (800a14c <xTaskRemoveFromEventList+0xc4>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11e:	429a      	cmp	r2, r3
 800a120:	d905      	bls.n	800a12e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a122:	2301      	movs	r3, #1
 800a124:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a126:	4b0a      	ldr	r3, [pc, #40]	@ (800a150 <xTaskRemoveFromEventList+0xc8>)
 800a128:	2201      	movs	r2, #1
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	e001      	b.n	800a132 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a132:	697b      	ldr	r3, [r7, #20]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	200016c0 	.word	0x200016c0
 800a140:	200016a0 	.word	0x200016a0
 800a144:	200011c8 	.word	0x200011c8
 800a148:	20001658 	.word	0x20001658
 800a14c:	200011c4 	.word	0x200011c4
 800a150:	200016ac 	.word	0x200016ac

0800a154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a15c:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <vTaskInternalSetTimeOutState+0x24>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a164:	4b05      	ldr	r3, [pc, #20]	@ (800a17c <vTaskInternalSetTimeOutState+0x28>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	200016b0 	.word	0x200016b0
 800a17c:	2000169c 	.word	0x2000169c

0800a180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10d      	bne.n	800a1ac <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a194:	b672      	cpsid	i
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	b662      	cpsie	i
 800a1a4:	613b      	str	r3, [r7, #16]
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	e7fd      	b.n	800a1a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10d      	bne.n	800a1ce <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b6:	b672      	cpsid	i
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	b662      	cpsie	i
 800a1c6:	60fb      	str	r3, [r7, #12]
}
 800a1c8:	bf00      	nop
 800a1ca:	bf00      	nop
 800a1cc:	e7fd      	b.n	800a1ca <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800a1ce:	f000 fe7d 	bl	800aecc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a248 <xTaskCheckForTimeOut+0xc8>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	69ba      	ldr	r2, [r7, #24]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ea:	d102      	bne.n	800a1f2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	61fb      	str	r3, [r7, #28]
 800a1f0:	e023      	b.n	800a23a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	4b15      	ldr	r3, [pc, #84]	@ (800a24c <xTaskCheckForTimeOut+0xcc>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d007      	beq.n	800a20e <xTaskCheckForTimeOut+0x8e>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	429a      	cmp	r2, r3
 800a206:	d302      	bcc.n	800a20e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a208:	2301      	movs	r3, #1
 800a20a:	61fb      	str	r3, [r7, #28]
 800a20c:	e015      	b.n	800a23a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	429a      	cmp	r2, r3
 800a216:	d20b      	bcs.n	800a230 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff ff95 	bl	800a154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	61fb      	str	r3, [r7, #28]
 800a22e:	e004      	b.n	800a23a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a236:	2301      	movs	r3, #1
 800a238:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a23a:	f000 fe7d 	bl	800af38 <vPortExitCritical>

	return xReturn;
 800a23e:	69fb      	ldr	r3, [r7, #28]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	2000169c 	.word	0x2000169c
 800a24c:	200016b0 	.word	0x200016b0

0800a250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a254:	4b03      	ldr	r3, [pc, #12]	@ (800a264 <vTaskMissedYield+0x14>)
 800a256:	2201      	movs	r2, #1
 800a258:	601a      	str	r2, [r3, #0]
}
 800a25a:	bf00      	nop
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	200016ac 	.word	0x200016ac

0800a268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a270:	f000 f852 	bl	800a318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a274:	4b06      	ldr	r3, [pc, #24]	@ (800a290 <prvIdleTask+0x28>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d9f9      	bls.n	800a270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a27c:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <prvIdleTask+0x2c>)
 800a27e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a28c:	e7f0      	b.n	800a270 <prvIdleTask+0x8>
 800a28e:	bf00      	nop
 800a290:	200011c8 	.word	0x200011c8
 800a294:	e000ed04 	.word	0xe000ed04

0800a298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
 800a2a2:	e00c      	b.n	800a2be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4a12      	ldr	r2, [pc, #72]	@ (800a2f8 <prvInitialiseTaskLists+0x60>)
 800a2b0:	4413      	add	r3, r2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fc98 	bl	8008be8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	607b      	str	r3, [r7, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b37      	cmp	r3, #55	@ 0x37
 800a2c2:	d9ef      	bls.n	800a2a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2c4:	480d      	ldr	r0, [pc, #52]	@ (800a2fc <prvInitialiseTaskLists+0x64>)
 800a2c6:	f7fe fc8f 	bl	8008be8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2ca:	480d      	ldr	r0, [pc, #52]	@ (800a300 <prvInitialiseTaskLists+0x68>)
 800a2cc:	f7fe fc8c 	bl	8008be8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2d0:	480c      	ldr	r0, [pc, #48]	@ (800a304 <prvInitialiseTaskLists+0x6c>)
 800a2d2:	f7fe fc89 	bl	8008be8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2d6:	480c      	ldr	r0, [pc, #48]	@ (800a308 <prvInitialiseTaskLists+0x70>)
 800a2d8:	f7fe fc86 	bl	8008be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2dc:	480b      	ldr	r0, [pc, #44]	@ (800a30c <prvInitialiseTaskLists+0x74>)
 800a2de:	f7fe fc83 	bl	8008be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a310 <prvInitialiseTaskLists+0x78>)
 800a2e4:	4a05      	ldr	r2, [pc, #20]	@ (800a2fc <prvInitialiseTaskLists+0x64>)
 800a2e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a314 <prvInitialiseTaskLists+0x7c>)
 800a2ea:	4a05      	ldr	r2, [pc, #20]	@ (800a300 <prvInitialiseTaskLists+0x68>)
 800a2ec:	601a      	str	r2, [r3, #0]
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	200011c8 	.word	0x200011c8
 800a2fc:	20001628 	.word	0x20001628
 800a300:	2000163c 	.word	0x2000163c
 800a304:	20001658 	.word	0x20001658
 800a308:	2000166c 	.word	0x2000166c
 800a30c:	20001684 	.word	0x20001684
 800a310:	20001650 	.word	0x20001650
 800a314:	20001654 	.word	0x20001654

0800a318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a31e:	e019      	b.n	800a354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a320:	f000 fdd4 	bl	800aecc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a324:	4b10      	ldr	r3, [pc, #64]	@ (800a368 <prvCheckTasksWaitingTermination+0x50>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3304      	adds	r3, #4
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe fce3 	bl	8008cfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a336:	4b0d      	ldr	r3, [pc, #52]	@ (800a36c <prvCheckTasksWaitingTermination+0x54>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	4a0b      	ldr	r2, [pc, #44]	@ (800a36c <prvCheckTasksWaitingTermination+0x54>)
 800a33e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a340:	4b0b      	ldr	r3, [pc, #44]	@ (800a370 <prvCheckTasksWaitingTermination+0x58>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3b01      	subs	r3, #1
 800a346:	4a0a      	ldr	r2, [pc, #40]	@ (800a370 <prvCheckTasksWaitingTermination+0x58>)
 800a348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a34a:	f000 fdf5 	bl	800af38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f810 	bl	800a374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a354:	4b06      	ldr	r3, [pc, #24]	@ (800a370 <prvCheckTasksWaitingTermination+0x58>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e1      	bne.n	800a320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	2000166c 	.word	0x2000166c
 800a36c:	20001698 	.word	0x20001698
 800a370:	20001680 	.word	0x20001680

0800a374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a382:	2b00      	cmp	r3, #0
 800a384:	d108      	bne.n	800a398 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 ff9a 	bl	800b2c4 <vPortFree>
				vPortFree( pxTCB );
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 ff97 	bl	800b2c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a396:	e01b      	b.n	800a3d0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d103      	bne.n	800a3aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 ff8e 	bl	800b2c4 <vPortFree>
	}
 800a3a8:	e012      	b.n	800a3d0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d00d      	beq.n	800a3d0 <prvDeleteTCB+0x5c>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b8:	b672      	cpsid	i
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	b662      	cpsie	i
 800a3c8:	60fb      	str	r3, [r7, #12]
}
 800a3ca:	bf00      	nop
 800a3cc:	bf00      	nop
 800a3ce:	e7fd      	b.n	800a3cc <prvDeleteTCB+0x58>
	}
 800a3d0:	bf00      	nop
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3de:	4b0c      	ldr	r3, [pc, #48]	@ (800a410 <prvResetNextTaskUnblockTime+0x38>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d104      	bne.n	800a3f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a414 <prvResetNextTaskUnblockTime+0x3c>)
 800a3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3f0:	e008      	b.n	800a404 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3f2:	4b07      	ldr	r3, [pc, #28]	@ (800a410 <prvResetNextTaskUnblockTime+0x38>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4a04      	ldr	r2, [pc, #16]	@ (800a414 <prvResetNextTaskUnblockTime+0x3c>)
 800a402:	6013      	str	r3, [r2, #0]
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	20001650 	.word	0x20001650
 800a414:	200016b8 	.word	0x200016b8

0800a418 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a41e:	4b0b      	ldr	r3, [pc, #44]	@ (800a44c <xTaskGetSchedulerState+0x34>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d102      	bne.n	800a42c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a426:	2301      	movs	r3, #1
 800a428:	607b      	str	r3, [r7, #4]
 800a42a:	e008      	b.n	800a43e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42c:	4b08      	ldr	r3, [pc, #32]	@ (800a450 <xTaskGetSchedulerState+0x38>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d102      	bne.n	800a43a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a434:	2302      	movs	r3, #2
 800a436:	607b      	str	r3, [r7, #4]
 800a438:	e001      	b.n	800a43e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a43a:	2300      	movs	r3, #0
 800a43c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a43e:	687b      	ldr	r3, [r7, #4]
	}
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	200016a4 	.word	0x200016a4
 800a450:	200016c0 	.word	0x200016c0

0800a454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d05c      	beq.n	800a524 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a46a:	4b31      	ldr	r3, [pc, #196]	@ (800a530 <xTaskPriorityDisinherit+0xdc>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	429a      	cmp	r2, r3
 800a472:	d00d      	beq.n	800a490 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	b672      	cpsid	i
 800a47a:	f383 8811 	msr	BASEPRI, r3
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	b662      	cpsie	i
 800a488:	60fb      	str	r3, [r7, #12]
}
 800a48a:	bf00      	nop
 800a48c:	bf00      	nop
 800a48e:	e7fd      	b.n	800a48c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10d      	bne.n	800a4b4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49c:	b672      	cpsid	i
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	b662      	cpsie	i
 800a4ac:	60bb      	str	r3, [r7, #8]
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	e7fd      	b.n	800a4b0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4b8:	1e5a      	subs	r2, r3, #1
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d02c      	beq.n	800a524 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d128      	bne.n	800a524 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fe fc10 	bl	8008cfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	@ (800a534 <xTaskPriorityDisinherit+0xe0>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d903      	bls.n	800a504 <xTaskPriorityDisinherit+0xb0>
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a500:	4a0c      	ldr	r2, [pc, #48]	@ (800a534 <xTaskPriorityDisinherit+0xe0>)
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a508:	4613      	mov	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4a09      	ldr	r2, [pc, #36]	@ (800a538 <xTaskPriorityDisinherit+0xe4>)
 800a512:	441a      	add	r2, r3
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	3304      	adds	r3, #4
 800a518:	4619      	mov	r1, r3
 800a51a:	4610      	mov	r0, r2
 800a51c:	f7fe fb91 	bl	8008c42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a520:	2301      	movs	r3, #1
 800a522:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a524:	697b      	ldr	r3, [r7, #20]
	}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	200011c4 	.word	0x200011c4
 800a534:	200016a0 	.word	0x200016a0
 800a538:	200011c8 	.word	0x200011c8

0800a53c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a546:	4b21      	ldr	r3, [pc, #132]	@ (800a5cc <prvAddCurrentTaskToDelayedList+0x90>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a54c:	4b20      	ldr	r3, [pc, #128]	@ (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3304      	adds	r3, #4
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe fbd2 	bl	8008cfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55e:	d10a      	bne.n	800a576 <prvAddCurrentTaskToDelayedList+0x3a>
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a566:	4b1a      	ldr	r3, [pc, #104]	@ (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3304      	adds	r3, #4
 800a56c:	4619      	mov	r1, r3
 800a56e:	4819      	ldr	r0, [pc, #100]	@ (800a5d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a570:	f7fe fb67 	bl	8008c42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a574:	e026      	b.n	800a5c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4413      	add	r3, r2
 800a57c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a57e:	4b14      	ldr	r3, [pc, #80]	@ (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d209      	bcs.n	800a5a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a58e:	4b12      	ldr	r3, [pc, #72]	@ (800a5d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	4b0f      	ldr	r3, [pc, #60]	@ (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	3304      	adds	r3, #4
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f7fe fb75 	bl	8008c8a <vListInsert>
}
 800a5a0:	e010      	b.n	800a5c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a5dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	f7fe fb6b 	bl	8008c8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d202      	bcs.n	800a5c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5be:	4a08      	ldr	r2, [pc, #32]	@ (800a5e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	6013      	str	r3, [r2, #0]
}
 800a5c4:	bf00      	nop
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	2000169c 	.word	0x2000169c
 800a5d0:	200011c4 	.word	0x200011c4
 800a5d4:	20001684 	.word	0x20001684
 800a5d8:	20001654 	.word	0x20001654
 800a5dc:	20001650 	.word	0x20001650
 800a5e0:	200016b8 	.word	0x200016b8

0800a5e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08a      	sub	sp, #40	@ 0x28
 800a5e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5ee:	f000 fb21 	bl	800ac34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5f2:	4b1e      	ldr	r3, [pc, #120]	@ (800a66c <xTimerCreateTimerTask+0x88>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d021      	beq.n	800a63e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a602:	1d3a      	adds	r2, r7, #4
 800a604:	f107 0108 	add.w	r1, r7, #8
 800a608:	f107 030c 	add.w	r3, r7, #12
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fe fad1 	bl	8008bb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	9202      	str	r2, [sp, #8]
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	2302      	movs	r3, #2
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	2300      	movs	r3, #0
 800a622:	460a      	mov	r2, r1
 800a624:	4912      	ldr	r1, [pc, #72]	@ (800a670 <xTimerCreateTimerTask+0x8c>)
 800a626:	4813      	ldr	r0, [pc, #76]	@ (800a674 <xTimerCreateTimerTask+0x90>)
 800a628:	f7ff f8ac 	bl	8009784 <xTaskCreateStatic>
 800a62c:	4603      	mov	r3, r0
 800a62e:	4a12      	ldr	r2, [pc, #72]	@ (800a678 <xTimerCreateTimerTask+0x94>)
 800a630:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a632:	4b11      	ldr	r3, [pc, #68]	@ (800a678 <xTimerCreateTimerTask+0x94>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a63a:	2301      	movs	r3, #1
 800a63c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10d      	bne.n	800a660 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a648:	b672      	cpsid	i
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	b662      	cpsie	i
 800a658:	613b      	str	r3, [r7, #16]
}
 800a65a:	bf00      	nop
 800a65c:	bf00      	nop
 800a65e:	e7fd      	b.n	800a65c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a660:	697b      	ldr	r3, [r7, #20]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	200016f4 	.word	0x200016f4
 800a670:	0800b880 	.word	0x0800b880
 800a674:	0800a7bd 	.word	0x0800a7bd
 800a678:	200016f8 	.word	0x200016f8

0800a67c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b08a      	sub	sp, #40	@ 0x28
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10d      	bne.n	800a6b0 <xTimerGenericCommand+0x34>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a698:	b672      	cpsid	i
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	b662      	cpsie	i
 800a6a8:	623b      	str	r3, [r7, #32]
}
 800a6aa:	bf00      	nop
 800a6ac:	bf00      	nop
 800a6ae:	e7fd      	b.n	800a6ac <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6b0:	4b19      	ldr	r3, [pc, #100]	@ (800a718 <xTimerGenericCommand+0x9c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d02a      	beq.n	800a70e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	dc18      	bgt.n	800a6fc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6ca:	f7ff fea5 	bl	800a418 <xTaskGetSchedulerState>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d109      	bne.n	800a6e8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6d4:	4b10      	ldr	r3, [pc, #64]	@ (800a718 <xTimerGenericCommand+0x9c>)
 800a6d6:	6818      	ldr	r0, [r3, #0]
 800a6d8:	f107 0110 	add.w	r1, r7, #16
 800a6dc:	2300      	movs	r3, #0
 800a6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6e0:	f7fe fc4c 	bl	8008f7c <xQueueGenericSend>
 800a6e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a6e6:	e012      	b.n	800a70e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a718 <xTimerGenericCommand+0x9c>)
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	f107 0110 	add.w	r1, r7, #16
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f7fe fc42 	bl	8008f7c <xQueueGenericSend>
 800a6f8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a6fa:	e008      	b.n	800a70e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6fc:	4b06      	ldr	r3, [pc, #24]	@ (800a718 <xTimerGenericCommand+0x9c>)
 800a6fe:	6818      	ldr	r0, [r3, #0]
 800a700:	f107 0110 	add.w	r1, r7, #16
 800a704:	2300      	movs	r3, #0
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	f7fe fd42 	bl	8009190 <xQueueGenericSendFromISR>
 800a70c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a710:	4618      	mov	r0, r3
 800a712:	3728      	adds	r7, #40	@ 0x28
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	200016f4 	.word	0x200016f4

0800a71c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b088      	sub	sp, #32
 800a720:	af02      	add	r7, sp, #8
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a726:	4b24      	ldr	r3, [pc, #144]	@ (800a7b8 <prvProcessExpiredTimer+0x9c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	3304      	adds	r3, #4
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fae1 	bl	8008cfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b00      	cmp	r3, #0
 800a746:	d025      	beq.n	800a794 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	18d1      	adds	r1, r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	6978      	ldr	r0, [r7, #20]
 800a756:	f000 f8d7 	bl	800a908 <prvInsertTimerInActiveList>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d022      	beq.n	800a7a6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a760:	2300      	movs	r3, #0
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	2300      	movs	r3, #0
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	2100      	movs	r1, #0
 800a76a:	6978      	ldr	r0, [r7, #20]
 800a76c:	f7ff ff86 	bl	800a67c <xTimerGenericCommand>
 800a770:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d116      	bne.n	800a7a6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77c:	b672      	cpsid	i
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	b662      	cpsie	i
 800a78c:	60fb      	str	r3, [r7, #12]
}
 800a78e:	bf00      	nop
 800a790:	bf00      	nop
 800a792:	e7fd      	b.n	800a790 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a79a:	f023 0301 	bic.w	r3, r3, #1
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	6978      	ldr	r0, [r7, #20]
 800a7ac:	4798      	blx	r3
}
 800a7ae:	bf00      	nop
 800a7b0:	3718      	adds	r7, #24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	200016ec 	.word	0x200016ec

0800a7bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7c4:	f107 0308 	add.w	r3, r7, #8
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 f859 	bl	800a880 <prvGetNextExpireTime>
 800a7ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f000 f805 	bl	800a7e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7da:	f000 f8d7 	bl	800a98c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7de:	bf00      	nop
 800a7e0:	e7f0      	b.n	800a7c4 <prvTimerTask+0x8>
	...

0800a7e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7ee:	f7ff fa1b 	bl	8009c28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7f2:	f107 0308 	add.w	r3, r7, #8
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 f866 	bl	800a8c8 <prvSampleTimeNow>
 800a7fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d130      	bne.n	800a866 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10a      	bne.n	800a820 <prvProcessTimerOrBlockTask+0x3c>
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d806      	bhi.n	800a820 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a812:	f7ff fa17 	bl	8009c44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a816:	68f9      	ldr	r1, [r7, #12]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff ff7f 	bl	800a71c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a81e:	e024      	b.n	800a86a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d008      	beq.n	800a838 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a826:	4b13      	ldr	r3, [pc, #76]	@ (800a874 <prvProcessTimerOrBlockTask+0x90>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <prvProcessTimerOrBlockTask+0x50>
 800a830:	2301      	movs	r3, #1
 800a832:	e000      	b.n	800a836 <prvProcessTimerOrBlockTask+0x52>
 800a834:	2300      	movs	r3, #0
 800a836:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a838:	4b0f      	ldr	r3, [pc, #60]	@ (800a878 <prvProcessTimerOrBlockTask+0x94>)
 800a83a:	6818      	ldr	r0, [r3, #0]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	4619      	mov	r1, r3
 800a846:	f7fe ff69 	bl	800971c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a84a:	f7ff f9fb 	bl	8009c44 <xTaskResumeAll>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10a      	bne.n	800a86a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a854:	4b09      	ldr	r3, [pc, #36]	@ (800a87c <prvProcessTimerOrBlockTask+0x98>)
 800a856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	f3bf 8f6f 	isb	sy
}
 800a864:	e001      	b.n	800a86a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a866:	f7ff f9ed 	bl	8009c44 <xTaskResumeAll>
}
 800a86a:	bf00      	nop
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	200016f0 	.word	0x200016f0
 800a878:	200016f4 	.word	0x200016f4
 800a87c:	e000ed04 	.word	0xe000ed04

0800a880 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a888:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c4 <prvGetNextExpireTime+0x44>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <prvGetNextExpireTime+0x16>
 800a892:	2201      	movs	r2, #1
 800a894:	e000      	b.n	800a898 <prvGetNextExpireTime+0x18>
 800a896:	2200      	movs	r2, #0
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d105      	bne.n	800a8b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8a4:	4b07      	ldr	r3, [pc, #28]	@ (800a8c4 <prvGetNextExpireTime+0x44>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	e001      	b.n	800a8b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	200016ec 	.word	0x200016ec

0800a8c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8d0:	f7ff fa58 	bl	8009d84 <xTaskGetTickCount>
 800a8d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a904 <prvSampleTimeNow+0x3c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d205      	bcs.n	800a8ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8e0:	f000 f940 	bl	800ab64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	e002      	b.n	800a8f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8f2:	4a04      	ldr	r2, [pc, #16]	@ (800a904 <prvSampleTimeNow+0x3c>)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	200016fc 	.word	0x200016fc

0800a908 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d812      	bhi.n	800a954 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	1ad2      	subs	r2, r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d302      	bcc.n	800a942 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a93c:	2301      	movs	r3, #1
 800a93e:	617b      	str	r3, [r7, #20]
 800a940:	e01b      	b.n	800a97a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a942:	4b10      	ldr	r3, [pc, #64]	@ (800a984 <prvInsertTimerInActiveList+0x7c>)
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3304      	adds	r3, #4
 800a94a:	4619      	mov	r1, r3
 800a94c:	4610      	mov	r0, r2
 800a94e:	f7fe f99c 	bl	8008c8a <vListInsert>
 800a952:	e012      	b.n	800a97a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d206      	bcs.n	800a96a <prvInsertTimerInActiveList+0x62>
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d302      	bcc.n	800a96a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a964:	2301      	movs	r3, #1
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	e007      	b.n	800a97a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a96a:	4b07      	ldr	r3, [pc, #28]	@ (800a988 <prvInsertTimerInActiveList+0x80>)
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3304      	adds	r3, #4
 800a972:	4619      	mov	r1, r3
 800a974:	4610      	mov	r0, r2
 800a976:	f7fe f988 	bl	8008c8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a97a:	697b      	ldr	r3, [r7, #20]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	200016f0 	.word	0x200016f0
 800a988:	200016ec 	.word	0x200016ec

0800a98c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08e      	sub	sp, #56	@ 0x38
 800a990:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a992:	e0d4      	b.n	800ab3e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da1b      	bge.n	800a9d2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a99a:	1d3b      	adds	r3, r7, #4
 800a99c:	3304      	adds	r3, #4
 800a99e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10d      	bne.n	800a9c2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9aa:	b672      	cpsid	i
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	b662      	cpsie	i
 800a9ba:	61fb      	str	r3, [r7, #28]
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	e7fd      	b.n	800a9be <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9c8:	6850      	ldr	r0, [r2, #4]
 800a9ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9cc:	6892      	ldr	r2, [r2, #8]
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f2c0 80b2 	blt.w	800ab3e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d004      	beq.n	800a9f0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe f986 	bl	8008cfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9f0:	463b      	mov	r3, r7
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7ff ff68 	bl	800a8c8 <prvSampleTimeNow>
 800a9f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b09      	cmp	r3, #9
 800a9fe:	f200 809b 	bhi.w	800ab38 <prvProcessReceivedCommands+0x1ac>
 800aa02:	a201      	add	r2, pc, #4	@ (adr r2, 800aa08 <prvProcessReceivedCommands+0x7c>)
 800aa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa08:	0800aa31 	.word	0x0800aa31
 800aa0c:	0800aa31 	.word	0x0800aa31
 800aa10:	0800aa31 	.word	0x0800aa31
 800aa14:	0800aaab 	.word	0x0800aaab
 800aa18:	0800aabf 	.word	0x0800aabf
 800aa1c:	0800ab0f 	.word	0x0800ab0f
 800aa20:	0800aa31 	.word	0x0800aa31
 800aa24:	0800aa31 	.word	0x0800aa31
 800aa28:	0800aaab 	.word	0x0800aaab
 800aa2c:	0800aabf 	.word	0x0800aabf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa36:	f043 0301 	orr.w	r3, r3, #1
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	18d1      	adds	r1, r2, r3
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa50:	f7ff ff5a 	bl	800a908 <prvInsertTimerInActiveList>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d070      	beq.n	800ab3c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa68:	f003 0304 	and.w	r3, r3, #4
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d065      	beq.n	800ab3c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	441a      	add	r2, r3
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	2100      	movs	r1, #0
 800aa80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa82:	f7ff fdfb 	bl	800a67c <xTimerGenericCommand>
 800aa86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d156      	bne.n	800ab3c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa92:	b672      	cpsid	i
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	b662      	cpsie	i
 800aaa2:	61bb      	str	r3, [r7, #24]
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop
 800aaa8:	e7fd      	b.n	800aaa6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aab0:	f023 0301 	bic.w	r3, r3, #1
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aabc:	e03f      	b.n	800ab3e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aac4:	f043 0301 	orr.w	r3, r3, #1
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aacc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10d      	bne.n	800aafa <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	b672      	cpsid	i
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	b662      	cpsie	i
 800aaf2:	617b      	str	r3, [r7, #20]
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop
 800aaf8:	e7fd      	b.n	800aaf6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafc:	699a      	ldr	r2, [r3, #24]
 800aafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab00:	18d1      	adds	r1, r2, r3
 800ab02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab08:	f7ff fefe 	bl	800a908 <prvInsertTimerInActiveList>
					break;
 800ab0c:	e017      	b.n	800ab3e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab14:	f003 0302 	and.w	r3, r3, #2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d103      	bne.n	800ab24 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800ab1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab1e:	f000 fbd1 	bl	800b2c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab22:	e00c      	b.n	800ab3e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab2a:	f023 0301 	bic.w	r3, r3, #1
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ab36:	e002      	b.n	800ab3e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800ab38:	bf00      	nop
 800ab3a:	e000      	b.n	800ab3e <prvProcessReceivedCommands+0x1b2>
					break;
 800ab3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab3e:	4b08      	ldr	r3, [pc, #32]	@ (800ab60 <prvProcessReceivedCommands+0x1d4>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	1d39      	adds	r1, r7, #4
 800ab44:	2200      	movs	r2, #0
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fbc6 	bl	80092d8 <xQueueReceive>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f47f af20 	bne.w	800a994 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop
 800ab58:	3730      	adds	r7, #48	@ 0x30
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	200016f4 	.word	0x200016f4

0800ab64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b088      	sub	sp, #32
 800ab68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab6a:	e04b      	b.n	800ac04 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab6c:	4b2f      	ldr	r3, [pc, #188]	@ (800ac2c <prvSwitchTimerLists+0xc8>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab76:	4b2d      	ldr	r3, [pc, #180]	@ (800ac2c <prvSwitchTimerLists+0xc8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3304      	adds	r3, #4
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fe f8b9 	bl	8008cfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab98:	f003 0304 	and.w	r3, r3, #4
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d031      	beq.n	800ac04 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	4413      	add	r3, r2
 800aba8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d90e      	bls.n	800abd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abbe:	4b1b      	ldr	r3, [pc, #108]	@ (800ac2c <prvSwitchTimerLists+0xc8>)
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4619      	mov	r1, r3
 800abc8:	4610      	mov	r0, r2
 800abca:	f7fe f85e 	bl	8008c8a <vListInsert>
 800abce:	e019      	b.n	800ac04 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abd0:	2300      	movs	r3, #0
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	2300      	movs	r3, #0
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	2100      	movs	r1, #0
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7ff fd4e 	bl	800a67c <xTimerGenericCommand>
 800abe0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10d      	bne.n	800ac04 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abec:	b672      	cpsid	i
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	b662      	cpsie	i
 800abfc:	603b      	str	r3, [r7, #0]
}
 800abfe:	bf00      	nop
 800ac00:	bf00      	nop
 800ac02:	e7fd      	b.n	800ac00 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac04:	4b09      	ldr	r3, [pc, #36]	@ (800ac2c <prvSwitchTimerLists+0xc8>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1ae      	bne.n	800ab6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac0e:	4b07      	ldr	r3, [pc, #28]	@ (800ac2c <prvSwitchTimerLists+0xc8>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac14:	4b06      	ldr	r3, [pc, #24]	@ (800ac30 <prvSwitchTimerLists+0xcc>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a04      	ldr	r2, [pc, #16]	@ (800ac2c <prvSwitchTimerLists+0xc8>)
 800ac1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac1c:	4a04      	ldr	r2, [pc, #16]	@ (800ac30 <prvSwitchTimerLists+0xcc>)
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	6013      	str	r3, [r2, #0]
}
 800ac22:	bf00      	nop
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	200016ec 	.word	0x200016ec
 800ac30:	200016f0 	.word	0x200016f0

0800ac34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac3a:	f000 f947 	bl	800aecc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac3e:	4b15      	ldr	r3, [pc, #84]	@ (800ac94 <prvCheckForValidListAndQueue+0x60>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d120      	bne.n	800ac88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac46:	4814      	ldr	r0, [pc, #80]	@ (800ac98 <prvCheckForValidListAndQueue+0x64>)
 800ac48:	f7fd ffce 	bl	8008be8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac4c:	4813      	ldr	r0, [pc, #76]	@ (800ac9c <prvCheckForValidListAndQueue+0x68>)
 800ac4e:	f7fd ffcb 	bl	8008be8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac52:	4b13      	ldr	r3, [pc, #76]	@ (800aca0 <prvCheckForValidListAndQueue+0x6c>)
 800ac54:	4a10      	ldr	r2, [pc, #64]	@ (800ac98 <prvCheckForValidListAndQueue+0x64>)
 800ac56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac58:	4b12      	ldr	r3, [pc, #72]	@ (800aca4 <prvCheckForValidListAndQueue+0x70>)
 800ac5a:	4a10      	ldr	r2, [pc, #64]	@ (800ac9c <prvCheckForValidListAndQueue+0x68>)
 800ac5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	4b11      	ldr	r3, [pc, #68]	@ (800aca8 <prvCheckForValidListAndQueue+0x74>)
 800ac64:	4a11      	ldr	r2, [pc, #68]	@ (800acac <prvCheckForValidListAndQueue+0x78>)
 800ac66:	2110      	movs	r1, #16
 800ac68:	200a      	movs	r0, #10
 800ac6a:	f7fe f8dd 	bl	8008e28 <xQueueGenericCreateStatic>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	4a08      	ldr	r2, [pc, #32]	@ (800ac94 <prvCheckForValidListAndQueue+0x60>)
 800ac72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac74:	4b07      	ldr	r3, [pc, #28]	@ (800ac94 <prvCheckForValidListAndQueue+0x60>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d005      	beq.n	800ac88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac7c:	4b05      	ldr	r3, [pc, #20]	@ (800ac94 <prvCheckForValidListAndQueue+0x60>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	490b      	ldr	r1, [pc, #44]	@ (800acb0 <prvCheckForValidListAndQueue+0x7c>)
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fe fd20 	bl	80096c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac88:	f000 f956 	bl	800af38 <vPortExitCritical>
}
 800ac8c:	bf00      	nop
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200016f4 	.word	0x200016f4
 800ac98:	200016c4 	.word	0x200016c4
 800ac9c:	200016d8 	.word	0x200016d8
 800aca0:	200016ec 	.word	0x200016ec
 800aca4:	200016f0 	.word	0x200016f0
 800aca8:	200017a0 	.word	0x200017a0
 800acac:	20001700 	.word	0x20001700
 800acb0:	0800b888 	.word	0x0800b888

0800acb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3b04      	subs	r3, #4
 800acc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800accc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3b04      	subs	r3, #4
 800acd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	f023 0201 	bic.w	r2, r3, #1
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3b04      	subs	r3, #4
 800ace2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ace4:	4a0c      	ldr	r2, [pc, #48]	@ (800ad18 <pxPortInitialiseStack+0x64>)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3b14      	subs	r3, #20
 800acee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	3b04      	subs	r3, #4
 800acfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f06f 0202 	mvn.w	r2, #2
 800ad02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3b20      	subs	r3, #32
 800ad08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3714      	adds	r7, #20
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr
 800ad18:	0800ad1d 	.word	0x0800ad1d

0800ad1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad26:	4b15      	ldr	r3, [pc, #84]	@ (800ad7c <prvTaskExitError+0x60>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d00d      	beq.n	800ad4c <prvTaskExitError+0x30>
	__asm volatile
 800ad30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad34:	b672      	cpsid	i
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	b662      	cpsie	i
 800ad44:	60fb      	str	r3, [r7, #12]
}
 800ad46:	bf00      	nop
 800ad48:	bf00      	nop
 800ad4a:	e7fd      	b.n	800ad48 <prvTaskExitError+0x2c>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad50:	b672      	cpsid	i
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	b662      	cpsie	i
 800ad60:	60bb      	str	r3, [r7, #8]
}
 800ad62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad64:	bf00      	nop
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d0fc      	beq.n	800ad66 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad6c:	bf00      	nop
 800ad6e:	bf00      	nop
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	2000000c 	.word	0x2000000c

0800ad80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad80:	4b07      	ldr	r3, [pc, #28]	@ (800ada0 <pxCurrentTCBConst2>)
 800ad82:	6819      	ldr	r1, [r3, #0]
 800ad84:	6808      	ldr	r0, [r1, #0]
 800ad86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8a:	f380 8809 	msr	PSP, r0
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f04f 0000 	mov.w	r0, #0
 800ad96:	f380 8811 	msr	BASEPRI, r0
 800ad9a:	4770      	bx	lr
 800ad9c:	f3af 8000 	nop.w

0800ada0 <pxCurrentTCBConst2>:
 800ada0:	200011c4 	.word	0x200011c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop

0800ada8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ada8:	4808      	ldr	r0, [pc, #32]	@ (800adcc <prvPortStartFirstTask+0x24>)
 800adaa:	6800      	ldr	r0, [r0, #0]
 800adac:	6800      	ldr	r0, [r0, #0]
 800adae:	f380 8808 	msr	MSP, r0
 800adb2:	f04f 0000 	mov.w	r0, #0
 800adb6:	f380 8814 	msr	CONTROL, r0
 800adba:	b662      	cpsie	i
 800adbc:	b661      	cpsie	f
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	df00      	svc	0
 800adc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adca:	bf00      	nop
 800adcc:	e000ed08 	.word	0xe000ed08

0800add0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800add6:	4b37      	ldr	r3, [pc, #220]	@ (800aeb4 <xPortStartScheduler+0xe4>)
 800add8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	22ff      	movs	r2, #255	@ 0xff
 800ade6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	4b2f      	ldr	r3, [pc, #188]	@ (800aeb8 <xPortStartScheduler+0xe8>)
 800adfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adfe:	4b2f      	ldr	r3, [pc, #188]	@ (800aebc <xPortStartScheduler+0xec>)
 800ae00:	2207      	movs	r2, #7
 800ae02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae04:	e009      	b.n	800ae1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ae06:	4b2d      	ldr	r3, [pc, #180]	@ (800aebc <xPortStartScheduler+0xec>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	4a2b      	ldr	r2, [pc, #172]	@ (800aebc <xPortStartScheduler+0xec>)
 800ae0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae1a:	78fb      	ldrb	r3, [r7, #3]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae22:	2b80      	cmp	r3, #128	@ 0x80
 800ae24:	d0ef      	beq.n	800ae06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae26:	4b25      	ldr	r3, [pc, #148]	@ (800aebc <xPortStartScheduler+0xec>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f1c3 0307 	rsb	r3, r3, #7
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d00d      	beq.n	800ae4e <xPortStartScheduler+0x7e>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae36:	b672      	cpsid	i
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	b662      	cpsie	i
 800ae46:	60bb      	str	r3, [r7, #8]
}
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	e7fd      	b.n	800ae4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae4e:	4b1b      	ldr	r3, [pc, #108]	@ (800aebc <xPortStartScheduler+0xec>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	021b      	lsls	r3, r3, #8
 800ae54:	4a19      	ldr	r2, [pc, #100]	@ (800aebc <xPortStartScheduler+0xec>)
 800ae56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae58:	4b18      	ldr	r3, [pc, #96]	@ (800aebc <xPortStartScheduler+0xec>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ae60:	4a16      	ldr	r2, [pc, #88]	@ (800aebc <xPortStartScheduler+0xec>)
 800ae62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae6c:	4b14      	ldr	r3, [pc, #80]	@ (800aec0 <xPortStartScheduler+0xf0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a13      	ldr	r2, [pc, #76]	@ (800aec0 <xPortStartScheduler+0xf0>)
 800ae72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ae76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae78:	4b11      	ldr	r3, [pc, #68]	@ (800aec0 <xPortStartScheduler+0xf0>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a10      	ldr	r2, [pc, #64]	@ (800aec0 <xPortStartScheduler+0xf0>)
 800ae7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ae82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae84:	f000 f8dc 	bl	800b040 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae88:	4b0e      	ldr	r3, [pc, #56]	@ (800aec4 <xPortStartScheduler+0xf4>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae8e:	f000 f8fb 	bl	800b088 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae92:	4b0d      	ldr	r3, [pc, #52]	@ (800aec8 <xPortStartScheduler+0xf8>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a0c      	ldr	r2, [pc, #48]	@ (800aec8 <xPortStartScheduler+0xf8>)
 800ae98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ae9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae9e:	f7ff ff83 	bl	800ada8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aea2:	f7ff f83b 	bl	8009f1c <vTaskSwitchContext>
	prvTaskExitError();
 800aea6:	f7ff ff39 	bl	800ad1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	e000e400 	.word	0xe000e400
 800aeb8:	200017f0 	.word	0x200017f0
 800aebc:	200017f4 	.word	0x200017f4
 800aec0:	e000ed20 	.word	0xe000ed20
 800aec4:	2000000c 	.word	0x2000000c
 800aec8:	e000ef34 	.word	0xe000ef34

0800aecc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	b672      	cpsid	i
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	b662      	cpsie	i
 800aee6:	607b      	str	r3, [r7, #4]
}
 800aee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aeea:	4b11      	ldr	r3, [pc, #68]	@ (800af30 <vPortEnterCritical+0x64>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3301      	adds	r3, #1
 800aef0:	4a0f      	ldr	r2, [pc, #60]	@ (800af30 <vPortEnterCritical+0x64>)
 800aef2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aef4:	4b0e      	ldr	r3, [pc, #56]	@ (800af30 <vPortEnterCritical+0x64>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d112      	bne.n	800af22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aefc:	4b0d      	ldr	r3, [pc, #52]	@ (800af34 <vPortEnterCritical+0x68>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00d      	beq.n	800af22 <vPortEnterCritical+0x56>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0a:	b672      	cpsid	i
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	b662      	cpsie	i
 800af1a:	603b      	str	r3, [r7, #0]
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	e7fd      	b.n	800af1e <vPortEnterCritical+0x52>
	}
}
 800af22:	bf00      	nop
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	2000000c 	.word	0x2000000c
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af3e:	4b13      	ldr	r3, [pc, #76]	@ (800af8c <vPortExitCritical+0x54>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10d      	bne.n	800af62 <vPortExitCritical+0x2a>
	__asm volatile
 800af46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4a:	b672      	cpsid	i
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	b662      	cpsie	i
 800af5a:	607b      	str	r3, [r7, #4]
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	e7fd      	b.n	800af5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800af62:	4b0a      	ldr	r3, [pc, #40]	@ (800af8c <vPortExitCritical+0x54>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3b01      	subs	r3, #1
 800af68:	4a08      	ldr	r2, [pc, #32]	@ (800af8c <vPortExitCritical+0x54>)
 800af6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af6c:	4b07      	ldr	r3, [pc, #28]	@ (800af8c <vPortExitCritical+0x54>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d105      	bne.n	800af80 <vPortExitCritical+0x48>
 800af74:	2300      	movs	r3, #0
 800af76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	f383 8811 	msr	BASEPRI, r3
}
 800af7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	2000000c 	.word	0x2000000c

0800af90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af90:	f3ef 8009 	mrs	r0, PSP
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	4b15      	ldr	r3, [pc, #84]	@ (800aff0 <pxCurrentTCBConst>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	f01e 0f10 	tst.w	lr, #16
 800afa0:	bf08      	it	eq
 800afa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afaa:	6010      	str	r0, [r2, #0]
 800afac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800afb4:	b672      	cpsid	i
 800afb6:	f380 8811 	msr	BASEPRI, r0
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	b662      	cpsie	i
 800afc4:	f7fe ffaa 	bl	8009f1c <vTaskSwitchContext>
 800afc8:	f04f 0000 	mov.w	r0, #0
 800afcc:	f380 8811 	msr	BASEPRI, r0
 800afd0:	bc09      	pop	{r0, r3}
 800afd2:	6819      	ldr	r1, [r3, #0]
 800afd4:	6808      	ldr	r0, [r1, #0]
 800afd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afda:	f01e 0f10 	tst.w	lr, #16
 800afde:	bf08      	it	eq
 800afe0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afe4:	f380 8809 	msr	PSP, r0
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop

0800aff0 <pxCurrentTCBConst>:
 800aff0:	200011c4 	.word	0x200011c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aff4:	bf00      	nop
 800aff6:	bf00      	nop

0800aff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b002:	b672      	cpsid	i
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	b662      	cpsie	i
 800b012:	607b      	str	r3, [r7, #4]
}
 800b014:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b016:	f7fe fec5 	bl	8009da4 <xTaskIncrementTick>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b020:	4b06      	ldr	r3, [pc, #24]	@ (800b03c <xPortSysTickHandler+0x44>)
 800b022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	2300      	movs	r3, #0
 800b02a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	f383 8811 	msr	BASEPRI, r3
}
 800b032:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b044:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <vPortSetupTimerInterrupt+0x34>)
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b04a:	4b0b      	ldr	r3, [pc, #44]	@ (800b078 <vPortSetupTimerInterrupt+0x38>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b050:	4b0a      	ldr	r3, [pc, #40]	@ (800b07c <vPortSetupTimerInterrupt+0x3c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a0a      	ldr	r2, [pc, #40]	@ (800b080 <vPortSetupTimerInterrupt+0x40>)
 800b056:	fba2 2303 	umull	r2, r3, r2, r3
 800b05a:	099b      	lsrs	r3, r3, #6
 800b05c:	4a09      	ldr	r2, [pc, #36]	@ (800b084 <vPortSetupTimerInterrupt+0x44>)
 800b05e:	3b01      	subs	r3, #1
 800b060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b062:	4b04      	ldr	r3, [pc, #16]	@ (800b074 <vPortSetupTimerInterrupt+0x34>)
 800b064:	2207      	movs	r2, #7
 800b066:	601a      	str	r2, [r3, #0]
}
 800b068:	bf00      	nop
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	e000e010 	.word	0xe000e010
 800b078:	e000e018 	.word	0xe000e018
 800b07c:	20000000 	.word	0x20000000
 800b080:	10624dd3 	.word	0x10624dd3
 800b084:	e000e014 	.word	0xe000e014

0800b088 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b088:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b098 <vPortEnableVFP+0x10>
 800b08c:	6801      	ldr	r1, [r0, #0]
 800b08e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b092:	6001      	str	r1, [r0, #0]
 800b094:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b096:	bf00      	nop
 800b098:	e000ed88 	.word	0xe000ed88

0800b09c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0a2:	f3ef 8305 	mrs	r3, IPSR
 800b0a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b0f      	cmp	r3, #15
 800b0ac:	d917      	bls.n	800b0de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0ae:	4a1a      	ldr	r2, [pc, #104]	@ (800b118 <vPortValidateInterruptPriority+0x7c>)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0b8:	4b18      	ldr	r3, [pc, #96]	@ (800b11c <vPortValidateInterruptPriority+0x80>)
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	7afa      	ldrb	r2, [r7, #11]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d20d      	bcs.n	800b0de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800b0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c6:	b672      	cpsid	i
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	b662      	cpsie	i
 800b0d6:	607b      	str	r3, [r7, #4]
}
 800b0d8:	bf00      	nop
 800b0da:	bf00      	nop
 800b0dc:	e7fd      	b.n	800b0da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0de:	4b10      	ldr	r3, [pc, #64]	@ (800b120 <vPortValidateInterruptPriority+0x84>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b124 <vPortValidateInterruptPriority+0x88>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d90d      	bls.n	800b10a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f2:	b672      	cpsid	i
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	b662      	cpsie	i
 800b102:	603b      	str	r3, [r7, #0]
}
 800b104:	bf00      	nop
 800b106:	bf00      	nop
 800b108:	e7fd      	b.n	800b106 <vPortValidateInterruptPriority+0x6a>
	}
 800b10a:	bf00      	nop
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	e000e3f0 	.word	0xe000e3f0
 800b11c:	200017f0 	.word	0x200017f0
 800b120:	e000ed0c 	.word	0xe000ed0c
 800b124:	200017f4 	.word	0x200017f4

0800b128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	@ 0x28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b130:	2300      	movs	r3, #0
 800b132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b134:	f7fe fd78 	bl	8009c28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b138:	4b5d      	ldr	r3, [pc, #372]	@ (800b2b0 <pvPortMalloc+0x188>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b140:	f000 f920 	bl	800b384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b144:	4b5b      	ldr	r3, [pc, #364]	@ (800b2b4 <pvPortMalloc+0x18c>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4013      	ands	r3, r2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f040 8094 	bne.w	800b27a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d020      	beq.n	800b19a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800b158:	2208      	movs	r2, #8
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4413      	add	r3, r2
 800b15e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f003 0307 	and.w	r3, r3, #7
 800b166:	2b00      	cmp	r3, #0
 800b168:	d017      	beq.n	800b19a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f023 0307 	bic.w	r3, r3, #7
 800b170:	3308      	adds	r3, #8
 800b172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00d      	beq.n	800b19a <pvPortMalloc+0x72>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b182:	b672      	cpsid	i
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	b662      	cpsie	i
 800b192:	617b      	str	r3, [r7, #20]
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop
 800b198:	e7fd      	b.n	800b196 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d06c      	beq.n	800b27a <pvPortMalloc+0x152>
 800b1a0:	4b45      	ldr	r3, [pc, #276]	@ (800b2b8 <pvPortMalloc+0x190>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d867      	bhi.n	800b27a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1aa:	4b44      	ldr	r3, [pc, #272]	@ (800b2bc <pvPortMalloc+0x194>)
 800b1ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1ae:	4b43      	ldr	r3, [pc, #268]	@ (800b2bc <pvPortMalloc+0x194>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1b4:	e004      	b.n	800b1c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d903      	bls.n	800b1d2 <pvPortMalloc+0xaa>
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1f1      	bne.n	800b1b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1d2:	4b37      	ldr	r3, [pc, #220]	@ (800b2b0 <pvPortMalloc+0x188>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d04e      	beq.n	800b27a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2208      	movs	r2, #8
 800b1e2:	4413      	add	r3, r2
 800b1e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	1ad2      	subs	r2, r2, r3
 800b1f6:	2308      	movs	r3, #8
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d922      	bls.n	800b244 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4413      	add	r3, r2
 800b204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	f003 0307 	and.w	r3, r3, #7
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00d      	beq.n	800b22c <pvPortMalloc+0x104>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b214:	b672      	cpsid	i
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	b662      	cpsie	i
 800b224:	613b      	str	r3, [r7, #16]
}
 800b226:	bf00      	nop
 800b228:	bf00      	nop
 800b22a:	e7fd      	b.n	800b228 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	1ad2      	subs	r2, r2, r3
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b23e:	69b8      	ldr	r0, [r7, #24]
 800b240:	f000 f902 	bl	800b448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b244:	4b1c      	ldr	r3, [pc, #112]	@ (800b2b8 <pvPortMalloc+0x190>)
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2b8 <pvPortMalloc+0x190>)
 800b250:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b252:	4b19      	ldr	r3, [pc, #100]	@ (800b2b8 <pvPortMalloc+0x190>)
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	4b1a      	ldr	r3, [pc, #104]	@ (800b2c0 <pvPortMalloc+0x198>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d203      	bcs.n	800b266 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b25e:	4b16      	ldr	r3, [pc, #88]	@ (800b2b8 <pvPortMalloc+0x190>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a17      	ldr	r2, [pc, #92]	@ (800b2c0 <pvPortMalloc+0x198>)
 800b264:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	4b12      	ldr	r3, [pc, #72]	@ (800b2b4 <pvPortMalloc+0x18c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	431a      	orrs	r2, r3
 800b270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b272:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b276:	2200      	movs	r2, #0
 800b278:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b27a:	f7fe fce3 	bl	8009c44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	f003 0307 	and.w	r3, r3, #7
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00d      	beq.n	800b2a4 <pvPortMalloc+0x17c>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28c:	b672      	cpsid	i
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	b662      	cpsie	i
 800b29c:	60fb      	str	r3, [r7, #12]
}
 800b29e:	bf00      	nop
 800b2a0:	bf00      	nop
 800b2a2:	e7fd      	b.n	800b2a0 <pvPortMalloc+0x178>
	return pvReturn;
 800b2a4:	69fb      	ldr	r3, [r7, #28]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3728      	adds	r7, #40	@ 0x28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20005400 	.word	0x20005400
 800b2b4:	2000540c 	.word	0x2000540c
 800b2b8:	20005404 	.word	0x20005404
 800b2bc:	200053f8 	.word	0x200053f8
 800b2c0:	20005408 	.word	0x20005408

0800b2c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d04e      	beq.n	800b374 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	425b      	negs	r3, r3
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	4413      	add	r3, r2
 800b2de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	4b24      	ldr	r3, [pc, #144]	@ (800b37c <vPortFree+0xb8>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10d      	bne.n	800b30e <vPortFree+0x4a>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f6:	b672      	cpsid	i
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	b662      	cpsie	i
 800b306:	60fb      	str	r3, [r7, #12]
}
 800b308:	bf00      	nop
 800b30a:	bf00      	nop
 800b30c:	e7fd      	b.n	800b30a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00d      	beq.n	800b332 <vPortFree+0x6e>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	b672      	cpsid	i
 800b31c:	f383 8811 	msr	BASEPRI, r3
 800b320:	f3bf 8f6f 	isb	sy
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	b662      	cpsie	i
 800b32a:	60bb      	str	r3, [r7, #8]
}
 800b32c:	bf00      	nop
 800b32e:	bf00      	nop
 800b330:	e7fd      	b.n	800b32e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	4b11      	ldr	r3, [pc, #68]	@ (800b37c <vPortFree+0xb8>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4013      	ands	r3, r2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d019      	beq.n	800b374 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d115      	bne.n	800b374 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	4b0b      	ldr	r3, [pc, #44]	@ (800b37c <vPortFree+0xb8>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	43db      	mvns	r3, r3
 800b352:	401a      	ands	r2, r3
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b358:	f7fe fc66 	bl	8009c28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	4b07      	ldr	r3, [pc, #28]	@ (800b380 <vPortFree+0xbc>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4413      	add	r3, r2
 800b366:	4a06      	ldr	r2, [pc, #24]	@ (800b380 <vPortFree+0xbc>)
 800b368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b36a:	6938      	ldr	r0, [r7, #16]
 800b36c:	f000 f86c 	bl	800b448 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b370:	f7fe fc68 	bl	8009c44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b374:	bf00      	nop
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	2000540c 	.word	0x2000540c
 800b380:	20005404 	.word	0x20005404

0800b384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b38a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b38e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b390:	4b27      	ldr	r3, [pc, #156]	@ (800b430 <prvHeapInit+0xac>)
 800b392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00c      	beq.n	800b3b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3307      	adds	r3, #7
 800b3a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 0307 	bic.w	r3, r3, #7
 800b3aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b430 <prvHeapInit+0xac>)
 800b3b4:	4413      	add	r3, r2
 800b3b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b434 <prvHeapInit+0xb0>)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3c2:	4b1c      	ldr	r3, [pc, #112]	@ (800b434 <prvHeapInit+0xb0>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3d0:	2208      	movs	r2, #8
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	1a9b      	subs	r3, r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0307 	bic.w	r3, r3, #7
 800b3de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4a15      	ldr	r2, [pc, #84]	@ (800b438 <prvHeapInit+0xb4>)
 800b3e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3e6:	4b14      	ldr	r3, [pc, #80]	@ (800b438 <prvHeapInit+0xb4>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3ee:	4b12      	ldr	r3, [pc, #72]	@ (800b438 <prvHeapInit+0xb4>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b404:	4b0c      	ldr	r3, [pc, #48]	@ (800b438 <prvHeapInit+0xb4>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4a0a      	ldr	r2, [pc, #40]	@ (800b43c <prvHeapInit+0xb8>)
 800b412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	4a09      	ldr	r2, [pc, #36]	@ (800b440 <prvHeapInit+0xbc>)
 800b41a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b41c:	4b09      	ldr	r3, [pc, #36]	@ (800b444 <prvHeapInit+0xc0>)
 800b41e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b422:	601a      	str	r2, [r3, #0]
}
 800b424:	bf00      	nop
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	200017f8 	.word	0x200017f8
 800b434:	200053f8 	.word	0x200053f8
 800b438:	20005400 	.word	0x20005400
 800b43c:	20005408 	.word	0x20005408
 800b440:	20005404 	.word	0x20005404
 800b444:	2000540c 	.word	0x2000540c

0800b448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b450:	4b28      	ldr	r3, [pc, #160]	@ (800b4f4 <prvInsertBlockIntoFreeList+0xac>)
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	e002      	b.n	800b45c <prvInsertBlockIntoFreeList+0x14>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	429a      	cmp	r2, r3
 800b464:	d8f7      	bhi.n	800b456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	4413      	add	r3, r2
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	429a      	cmp	r2, r3
 800b476:	d108      	bne.n	800b48a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	441a      	add	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	441a      	add	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d118      	bne.n	800b4d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	4b15      	ldr	r3, [pc, #84]	@ (800b4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d00d      	beq.n	800b4c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	441a      	add	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	e008      	b.n	800b4d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	e003      	b.n	800b4d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d002      	beq.n	800b4e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4e6:	bf00      	nop
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	200053f8 	.word	0x200053f8
 800b4f8:	20005400 	.word	0x20005400

0800b4fc <atoi>:
 800b4fc:	220a      	movs	r2, #10
 800b4fe:	2100      	movs	r1, #0
 800b500:	f000 b87a 	b.w	800b5f8 <strtol>

0800b504 <_strtol_l.constprop.0>:
 800b504:	2b24      	cmp	r3, #36	@ 0x24
 800b506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b50a:	4686      	mov	lr, r0
 800b50c:	4690      	mov	r8, r2
 800b50e:	d801      	bhi.n	800b514 <_strtol_l.constprop.0+0x10>
 800b510:	2b01      	cmp	r3, #1
 800b512:	d106      	bne.n	800b522 <_strtol_l.constprop.0+0x1e>
 800b514:	f000 f894 	bl	800b640 <__errno>
 800b518:	2316      	movs	r3, #22
 800b51a:	6003      	str	r3, [r0, #0]
 800b51c:	2000      	movs	r0, #0
 800b51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b522:	4834      	ldr	r0, [pc, #208]	@ (800b5f4 <_strtol_l.constprop.0+0xf0>)
 800b524:	460d      	mov	r5, r1
 800b526:	462a      	mov	r2, r5
 800b528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b52c:	5d06      	ldrb	r6, [r0, r4]
 800b52e:	f016 0608 	ands.w	r6, r6, #8
 800b532:	d1f8      	bne.n	800b526 <_strtol_l.constprop.0+0x22>
 800b534:	2c2d      	cmp	r4, #45	@ 0x2d
 800b536:	d12d      	bne.n	800b594 <_strtol_l.constprop.0+0x90>
 800b538:	782c      	ldrb	r4, [r5, #0]
 800b53a:	2601      	movs	r6, #1
 800b53c:	1c95      	adds	r5, r2, #2
 800b53e:	f033 0210 	bics.w	r2, r3, #16
 800b542:	d109      	bne.n	800b558 <_strtol_l.constprop.0+0x54>
 800b544:	2c30      	cmp	r4, #48	@ 0x30
 800b546:	d12a      	bne.n	800b59e <_strtol_l.constprop.0+0x9a>
 800b548:	782a      	ldrb	r2, [r5, #0]
 800b54a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b54e:	2a58      	cmp	r2, #88	@ 0x58
 800b550:	d125      	bne.n	800b59e <_strtol_l.constprop.0+0x9a>
 800b552:	786c      	ldrb	r4, [r5, #1]
 800b554:	2310      	movs	r3, #16
 800b556:	3502      	adds	r5, #2
 800b558:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b55c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b560:	2200      	movs	r2, #0
 800b562:	fbbc f9f3 	udiv	r9, ip, r3
 800b566:	4610      	mov	r0, r2
 800b568:	fb03 ca19 	mls	sl, r3, r9, ip
 800b56c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b570:	2f09      	cmp	r7, #9
 800b572:	d81b      	bhi.n	800b5ac <_strtol_l.constprop.0+0xa8>
 800b574:	463c      	mov	r4, r7
 800b576:	42a3      	cmp	r3, r4
 800b578:	dd27      	ble.n	800b5ca <_strtol_l.constprop.0+0xc6>
 800b57a:	1c57      	adds	r7, r2, #1
 800b57c:	d007      	beq.n	800b58e <_strtol_l.constprop.0+0x8a>
 800b57e:	4581      	cmp	r9, r0
 800b580:	d320      	bcc.n	800b5c4 <_strtol_l.constprop.0+0xc0>
 800b582:	d101      	bne.n	800b588 <_strtol_l.constprop.0+0x84>
 800b584:	45a2      	cmp	sl, r4
 800b586:	db1d      	blt.n	800b5c4 <_strtol_l.constprop.0+0xc0>
 800b588:	fb00 4003 	mla	r0, r0, r3, r4
 800b58c:	2201      	movs	r2, #1
 800b58e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b592:	e7eb      	b.n	800b56c <_strtol_l.constprop.0+0x68>
 800b594:	2c2b      	cmp	r4, #43	@ 0x2b
 800b596:	bf04      	itt	eq
 800b598:	782c      	ldrbeq	r4, [r5, #0]
 800b59a:	1c95      	addeq	r5, r2, #2
 800b59c:	e7cf      	b.n	800b53e <_strtol_l.constprop.0+0x3a>
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1da      	bne.n	800b558 <_strtol_l.constprop.0+0x54>
 800b5a2:	2c30      	cmp	r4, #48	@ 0x30
 800b5a4:	bf0c      	ite	eq
 800b5a6:	2308      	moveq	r3, #8
 800b5a8:	230a      	movne	r3, #10
 800b5aa:	e7d5      	b.n	800b558 <_strtol_l.constprop.0+0x54>
 800b5ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b5b0:	2f19      	cmp	r7, #25
 800b5b2:	d801      	bhi.n	800b5b8 <_strtol_l.constprop.0+0xb4>
 800b5b4:	3c37      	subs	r4, #55	@ 0x37
 800b5b6:	e7de      	b.n	800b576 <_strtol_l.constprop.0+0x72>
 800b5b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b5bc:	2f19      	cmp	r7, #25
 800b5be:	d804      	bhi.n	800b5ca <_strtol_l.constprop.0+0xc6>
 800b5c0:	3c57      	subs	r4, #87	@ 0x57
 800b5c2:	e7d8      	b.n	800b576 <_strtol_l.constprop.0+0x72>
 800b5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c8:	e7e1      	b.n	800b58e <_strtol_l.constprop.0+0x8a>
 800b5ca:	1c53      	adds	r3, r2, #1
 800b5cc:	d108      	bne.n	800b5e0 <_strtol_l.constprop.0+0xdc>
 800b5ce:	2322      	movs	r3, #34	@ 0x22
 800b5d0:	f8ce 3000 	str.w	r3, [lr]
 800b5d4:	4660      	mov	r0, ip
 800b5d6:	f1b8 0f00 	cmp.w	r8, #0
 800b5da:	d0a0      	beq.n	800b51e <_strtol_l.constprop.0+0x1a>
 800b5dc:	1e69      	subs	r1, r5, #1
 800b5de:	e006      	b.n	800b5ee <_strtol_l.constprop.0+0xea>
 800b5e0:	b106      	cbz	r6, 800b5e4 <_strtol_l.constprop.0+0xe0>
 800b5e2:	4240      	negs	r0, r0
 800b5e4:	f1b8 0f00 	cmp.w	r8, #0
 800b5e8:	d099      	beq.n	800b51e <_strtol_l.constprop.0+0x1a>
 800b5ea:	2a00      	cmp	r2, #0
 800b5ec:	d1f6      	bne.n	800b5dc <_strtol_l.constprop.0+0xd8>
 800b5ee:	f8c8 1000 	str.w	r1, [r8]
 800b5f2:	e794      	b.n	800b51e <_strtol_l.constprop.0+0x1a>
 800b5f4:	0800b91d 	.word	0x0800b91d

0800b5f8 <strtol>:
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	460a      	mov	r2, r1
 800b5fc:	4601      	mov	r1, r0
 800b5fe:	4802      	ldr	r0, [pc, #8]	@ (800b608 <strtol+0x10>)
 800b600:	6800      	ldr	r0, [r0, #0]
 800b602:	f7ff bf7f 	b.w	800b504 <_strtol_l.constprop.0>
 800b606:	bf00      	nop
 800b608:	20000010 	.word	0x20000010

0800b60c <memset>:
 800b60c:	4402      	add	r2, r0
 800b60e:	4603      	mov	r3, r0
 800b610:	4293      	cmp	r3, r2
 800b612:	d100      	bne.n	800b616 <memset+0xa>
 800b614:	4770      	bx	lr
 800b616:	f803 1b01 	strb.w	r1, [r3], #1
 800b61a:	e7f9      	b.n	800b610 <memset+0x4>

0800b61c <strncmp>:
 800b61c:	b510      	push	{r4, lr}
 800b61e:	b16a      	cbz	r2, 800b63c <strncmp+0x20>
 800b620:	3901      	subs	r1, #1
 800b622:	1884      	adds	r4, r0, r2
 800b624:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b628:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d103      	bne.n	800b638 <strncmp+0x1c>
 800b630:	42a0      	cmp	r0, r4
 800b632:	d001      	beq.n	800b638 <strncmp+0x1c>
 800b634:	2a00      	cmp	r2, #0
 800b636:	d1f5      	bne.n	800b624 <strncmp+0x8>
 800b638:	1ad0      	subs	r0, r2, r3
 800b63a:	bd10      	pop	{r4, pc}
 800b63c:	4610      	mov	r0, r2
 800b63e:	e7fc      	b.n	800b63a <strncmp+0x1e>

0800b640 <__errno>:
 800b640:	4b01      	ldr	r3, [pc, #4]	@ (800b648 <__errno+0x8>)
 800b642:	6818      	ldr	r0, [r3, #0]
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	20000010 	.word	0x20000010

0800b64c <__libc_init_array>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	4d0d      	ldr	r5, [pc, #52]	@ (800b684 <__libc_init_array+0x38>)
 800b650:	4c0d      	ldr	r4, [pc, #52]	@ (800b688 <__libc_init_array+0x3c>)
 800b652:	1b64      	subs	r4, r4, r5
 800b654:	10a4      	asrs	r4, r4, #2
 800b656:	2600      	movs	r6, #0
 800b658:	42a6      	cmp	r6, r4
 800b65a:	d109      	bne.n	800b670 <__libc_init_array+0x24>
 800b65c:	4d0b      	ldr	r5, [pc, #44]	@ (800b68c <__libc_init_array+0x40>)
 800b65e:	4c0c      	ldr	r4, [pc, #48]	@ (800b690 <__libc_init_array+0x44>)
 800b660:	f000 f826 	bl	800b6b0 <_init>
 800b664:	1b64      	subs	r4, r4, r5
 800b666:	10a4      	asrs	r4, r4, #2
 800b668:	2600      	movs	r6, #0
 800b66a:	42a6      	cmp	r6, r4
 800b66c:	d105      	bne.n	800b67a <__libc_init_array+0x2e>
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	f855 3b04 	ldr.w	r3, [r5], #4
 800b674:	4798      	blx	r3
 800b676:	3601      	adds	r6, #1
 800b678:	e7ee      	b.n	800b658 <__libc_init_array+0xc>
 800b67a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b67e:	4798      	blx	r3
 800b680:	3601      	adds	r6, #1
 800b682:	e7f2      	b.n	800b66a <__libc_init_array+0x1e>
 800b684:	0800ba28 	.word	0x0800ba28
 800b688:	0800ba28 	.word	0x0800ba28
 800b68c:	0800ba28 	.word	0x0800ba28
 800b690:	0800ba2c 	.word	0x0800ba2c

0800b694 <memcpy>:
 800b694:	440a      	add	r2, r1
 800b696:	4291      	cmp	r1, r2
 800b698:	f100 33ff 	add.w	r3, r0, #4294967295
 800b69c:	d100      	bne.n	800b6a0 <memcpy+0xc>
 800b69e:	4770      	bx	lr
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6aa:	4291      	cmp	r1, r2
 800b6ac:	d1f9      	bne.n	800b6a2 <memcpy+0xe>
 800b6ae:	bd10      	pop	{r4, pc}

0800b6b0 <_init>:
 800b6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b2:	bf00      	nop
 800b6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6b6:	bc08      	pop	{r3}
 800b6b8:	469e      	mov	lr, r3
 800b6ba:	4770      	bx	lr

0800b6bc <_fini>:
 800b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6be:	bf00      	nop
 800b6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6c2:	bc08      	pop	{r3}
 800b6c4:	469e      	mov	lr, r3
 800b6c6:	4770      	bx	lr
